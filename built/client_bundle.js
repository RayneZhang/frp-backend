!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=186)}([function(t,e,n){"use strict";n.d(e,"a",function(){return i});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}},function(t,e,n){"use strict";n.d(e,"a",function(){return h});var r=n(0),i=n(31),o=n(69),s=n(5),u=n(49),a=n(16),c=n(42),h=function(t){function e(n,r,i){var s=t.call(this)||this;switch(s.syncErrorValue=null,s.syncErrorThrown=!1,s.syncErrorThrowable=!1,s.isStopped=!1,arguments.length){case 0:s.destination=o.a;break;case 1:if(!n){s.destination=o.a;break}if("object"==typeof n){n instanceof e?(s.syncErrorThrowable=n.syncErrorThrowable,s.destination=n,n.add(s)):(s.syncErrorThrowable=!0,s.destination=new f(s,n));break}default:s.syncErrorThrowable=!0,s.destination=new f(s,n,r,i)}return s}return r.a(e,t),e.prototype[u.a]=function(){return this},e.create=function(t,n,r){var i=new e(t,n,r);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(s.a),f=function(t){function e(e,n,r,s){var u,a=t.call(this)||this;a._parentSubscriber=e;var c=a;return Object(i.a)(n)?u=n:n&&(u=n.next,r=n.error,s=n.complete,n!==o.a&&(c=Object.create(n),Object(i.a)(c.unsubscribe)&&a.add(c.unsubscribe.bind(c)),c.unsubscribe=a.unsubscribe.bind(a))),a._context=c,a._next=u,a._error=r,a._complete=s,a}return r.a(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;a.a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=a.a.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):Object(c.a)(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;Object(c.a)(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};a.a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),a.a.useDeprecatedSynchronousErrorHandling)throw t;Object(c.a)(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!a.a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return a.a.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(Object(c.a)(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(h)},function(t,e,n){"use strict";var r=n(66),i=n(1),o=n(49),s=n(69);var u=n(25),a=n(48),c=n(16);n.d(e,"a",function(){return h});var h=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,u=function(t,e,n){if(t){if(t instanceof i.a)return t;if(t[o.a])return t[o.a]()}return t||e||n?new i.a(t,e,n):new i.a(s.a)}(t,e,n);if(r?u.add(r.call(u,this.source)):u.add(this.source||c.a.useDeprecatedSynchronousErrorHandling&&!u.syncErrorThrowable?this._subscribe(u):this._trySubscribe(u)),c.a.useDeprecatedSynchronousErrorHandling&&u.syncErrorThrowable&&(u.syncErrorThrowable=!1,u.syncErrorThrown))throw u.syncErrorValue;return u},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){c.a.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),Object(r.a)(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=f(e))(function(e,r){var i;i=n.subscribe(function(e){try{t(e)}catch(t){r(t),i&&i.unsubscribe()}},r,e)})},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[u.a]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:Object(a.b)(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=f(t))(function(t,n){var r;e.subscribe(function(t){return r=t},function(t){return n(t)},function(){return t(r)})})},t.create=function(e){return new t(e)},t}();function f(t){if(t||(t=c.a.Promise||Promise),!t)throw new Error("no Promise impl found");return t}},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(15),i=n(51),o=n(2);function s(t,e,n,s,u){if(void 0===u&&(u=new r.a(t,n,s)),!u.closed)return e instanceof o.a?e.subscribe(u):Object(i.a)(e)(u)}},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(0),i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(n(1).a)},function(t,e,n){"use strict";n.d(e,"a",function(){return u});var r=n(7),i=n(65),o=n(31),s=n(50),u=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var e;return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n=this._parentOrParents,u=this._unsubscribe,c=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(var h=0;h<n.length;++h){n[h].remove(this)}if(Object(o.a)(u))try{u.call(this)}catch(t){e=t instanceof s.a?a(t.errors):[t]}if(Object(r.a)(c)){h=-1;for(var f=c.length;++h<f;){var l=c[h];if(Object(i.a)(l))try{l.unsubscribe()}catch(t){e=e||[],t instanceof s.a?e=e.concat(a(t.errors)):e.push(t)}}}if(e)throw new s.a(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof t){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=((e=new t).closed=!0,e),t}();function a(t){return t.reduce(function(t,e){return t.concat(e instanceof s.a?e.errors:e)},[])}},function(t,e,n){"use strict";n.d(e,"b",function(){return h}),n.d(e,"a",function(){return f});var r=n(0),i=n(2),o=n(1),s=n(5),u=n(26),a=n(107),c=n(49),h=function(t){function e(e){var n=t.call(this,e)||this;return n.destination=e,n}return r.a(e,t),e}(o.a),f=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return r.a(e,t),e.prototype[c.a]=function(){return new h(this)},e.prototype.lift=function(t){var e=new l(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new u.a;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].next(t)},e.prototype.error=function(t){if(this.closed)throw new u.a;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new u.a;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new u.a;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new u.a;return this.hasError?(t.error(this.thrownError),s.a.EMPTY):this.isStopped?(t.complete(),s.a.EMPTY):(this.observers.push(t),new a.a(this,t))},e.prototype.asObservable=function(){var t=new i.a;return t.source=this,t},e.create=function(t,e){return new l(t,e)},e}(i.a),l=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return r.a(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):s.a.EMPTY},e}(f)},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var r=Array.isArray||function(t){return t&&"number"==typeof t.length}},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(37),i=new(n(35).a)(r.a)},function(t,e,n){var r;try{r={cloneDeep:n(307),constant:n(123),defaults:n(308),each:n(151),filter:n(154),find:n(309),flatten:n(181),forEach:n(152),forIn:n(314),has:n(165),isUndefined:n(166),last:n(315),map:n(167),mapValues:n(316),max:n(317),merge:n(319),min:n(325),minBy:n(326),now:n(327),pick:n(328),range:n(333),reduce:n(169),sortBy:n(336),uniqueId:n(341),values:n(174),zipObject:n(342)}}catch(t){}r||(r=window._),t.exports=r},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(0),i=n(1);function o(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new s(t,e))}}var s=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new u(t,this.project,this.thisArg))},t}(),u=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return r.a(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(i.a)},function(t,e,n){"use strict";function r(t){return t&&"function"==typeof t.schedule}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";n.d(e,"a",function(){return i}),n.d(e,"b",function(){return o});var r=n(2),i=new r.a(function(t){return t.complete()});function o(t){return t?function(t){return new r.a(function(e){return t.schedule(function(){return e.complete()})})}(t):i}},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(2),i=n(51),o=n(105);function s(t,e){return e?Object(o.a)(t,e):t instanceof r.a?t:new r.a(Object(i.a)(t))}},function(t,e){var n=Array.isArray;t.exports=n},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(0),i=function(t){function e(e,n,r){var i=t.call(this)||this;return i.parent=e,i.outerValue=n,i.outerIndex=r,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(n(1).a)},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=!1,i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;r=t},get useDeprecatedSynchronousErrorHandling(){return r}}},function(t,e,n){"use strict";function r(){}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";var r=n(9),i=n(27).Graph;function o(t,e,n,i){var o;do{o=r.uniqueId(i)}while(t.hasNode(o));return n.dummy=e,t.setNode(o,n),o}function s(t){return r.max(r.map(t.nodes(),function(e){var n=t.node(e).rank;if(!r.isUndefined(n))return n}))}t.exports={addDummyNode:o,simplify:function(t){var e=(new i).setGraph(t.graph());return r.forEach(t.nodes(),function(n){e.setNode(n,t.node(n))}),r.forEach(t.edges(),function(n){var r=e.edge(n.v,n.w)||{weight:0,minlen:1},i=t.edge(n);e.setEdge(n.v,n.w,{weight:r.weight+i.weight,minlen:Math.max(r.minlen,i.minlen)})}),e},asNonCompoundGraph:function(t){var e=new i({multigraph:t.isMultigraph()}).setGraph(t.graph());return r.forEach(t.nodes(),function(n){t.children(n).length||e.setNode(n,t.node(n))}),r.forEach(t.edges(),function(n){e.setEdge(n,t.edge(n))}),e},successorWeights:function(t){var e=r.map(t.nodes(),function(e){var n={};return r.forEach(t.outEdges(e),function(e){n[e.w]=(n[e.w]||0)+t.edge(e).weight}),n});return r.zipObject(t.nodes(),e)},predecessorWeights:function(t){var e=r.map(t.nodes(),function(e){var n={};return r.forEach(t.inEdges(e),function(e){n[e.v]=(n[e.v]||0)+t.edge(e).weight}),n});return r.zipObject(t.nodes(),e)},intersectRect:function(t,e){var n,r,i=t.x,o=t.y,s=e.x-i,u=e.y-o,a=t.width/2,c=t.height/2;if(!s&&!u)throw new Error("Not possible to find intersection inside of the rectangle");Math.abs(u)*a>Math.abs(s)*c?(u<0&&(c=-c),n=c*s/u,r=c):(s<0&&(a=-a),n=a,r=a*u/s);return{x:i+n,y:o+r}},buildLayerMatrix:function(t){var e=r.map(r.range(s(t)+1),function(){return[]});return r.forEach(t.nodes(),function(n){var i=t.node(n),o=i.rank;r.isUndefined(o)||(e[o][i.order]=n)}),e},normalizeRanks:function(t){var e=r.min(r.map(t.nodes(),function(e){return t.node(e).rank}));r.forEach(t.nodes(),function(n){var i=t.node(n);r.has(i,"rank")&&(i.rank-=e)})},removeEmptyRanks:function(t){var e=r.min(r.map(t.nodes(),function(e){return t.node(e).rank})),n=[];r.forEach(t.nodes(),function(r){var i=t.node(r).rank-e;n[i]||(n[i]=[]),n[i].push(r)});var i=0,o=t.graph().nodeRankFactor;r.forEach(n,function(e,n){r.isUndefined(e)&&n%o!=0?--i:i&&r.forEach(e,function(e){t.node(e).rank+=i})})},addBorderNode:function(t,e,n,r){var i={width:0,height:0};arguments.length>=4&&(i.rank=n,i.order=r);return o(t,"border",i,e)},maxRank:s,partition:function(t,e){var n={lhs:[],rhs:[]};return r.forEach(t,function(t){e(t)?n.lhs.push(t):n.rhs.push(t)}),n},time:function(t,e){var n=r.now();try{return e()}finally{console.log(t+" time: "+(r.now()-n)+"ms")}},notime:function(t,e){return e()}}},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(0),i=n(1);function o(t,e){return function(n){return n.lift(new s(t,e))}}var s=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new u(t,this.predicate,this.thisArg))},t}(),u=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return r.a(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(i.a)},function(t,e,n){"use strict";n.d(e,"b",function(){return r}),n.d(e,"a",function(){return u});var r,i=n(12),o=n(44),s=n(60);r||(r={});var u=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return Object(o.a)(this.value);case"E":return Object(s.a)(this.error);case"C":return Object(i.b)()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}()},function(t,e,n){"use strict";function r(t){return t}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";function r(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}n.d(e,"a",function(){return i});var i=r()},function(t,e,n){var r;try{r={clone:n(194),constant:n(123),each:n(151),filter:n(154),has:n(165),isArray:n(14),isEmpty:n(271),isFunction:n(70),isUndefined:n(166),keys:n(43),map:n(167),reduce:n(169),size:n(274),transform:n(280),union:n(281),values:n(174)}}catch(t){}r||(r=window._),t.exports=r},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var r="function"==typeof Symbol&&Symbol.observable||"@@observable"},function(t,e,n){"use strict";function r(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}n.d(e,"a",function(){return i}),r.prototype=Object.create(Error.prototype);var i=r},function(t,e,n){var r;try{r=n(192)}catch(t){}r||(r=window.graphlib),t.exports=r},function(t,e,n){var r=n(134),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();t.exports=o},function(t,e,n){"use strict";n.d(e,"a",function(){return c});var r=n(0),i=n(3),o=n(4),s=n(15),u=n(10),a=n(13);function c(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?function(r){return r.pipe(c(function(n,r){return Object(a.a)(t(n,r)).pipe(Object(u.a)(function(t,i){return e(n,t,r,i)}))},n))}:("number"==typeof e&&(n=e),function(e){return e.lift(new h(t,n))})}var h=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new f(t,this.project,this.concurrent))},t}(),f=function(t){function e(e,n,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,e)||this;return i.project=n,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=new s.a(this,void 0,void 0);this.destination.add(r),Object(i.a)(this,t,e,n,r)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(o.a)},function(t,e,n){"use strict";function r(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}n.d(e,"a",function(){return i}),r.prototype=Object.create(Error.prototype);var i=r},function(t,e,n){"use strict";function r(t){return"function"==typeof t}n.d(e,"a",function(){return r})},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,n){"use strict";function r(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}n.d(e,"a",function(){return i}),r.prototype=Object.create(Error.prototype);var i=r},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(2),i=n(108),o=n(67);function s(t,e){return e?Object(o.a)(t,e):new r.a(Object(i.a)(t))}},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(0),i=n(76),o=function(t){function e(n,r){void 0===r&&(r=i.a.now);var o=t.call(this,n,function(){return e.delegate&&e.delegate!==o?e.delegate.now():r()})||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return r.a(e,t),e.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,i):t.prototype.schedule.call(this,n,r,i)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(i.a)},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(0),i=n(6),o=n(5),s=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return r.a(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),o.a.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),o.a.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(i.a)},function(t,e,n){"use strict";var r=n(0),i=function(t){function e(e,n){return t.call(this)||this}return r.a(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(n(5).a);n.d(e,"a",function(){return o});var o=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return r.a(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(i)},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(7);function i(t){return!Object(r.a)(t)&&t-parseFloat(t)+1>=0}},function(t,e,n){var r=n(70),i=n(117);t.exports=function(t){return null!=t&&i(t.length)&&!r(t)}},function(t,e,n){var r=n(251),i=n(261),o=n(47),s=n(14),u=n(268);t.exports=function(t){return"function"==typeof t?t:null==t?o:"object"==typeof t?s(t)?i(t[0],t[1]):r(t):u(t)}},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(44),i=n(101);function o(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Object(i.a)()(r.a.apply(void 0,t))}},function(t,e,n){"use strict";function r(t){setTimeout(function(){throw t},0)}n.d(e,"a",function(){return r})},function(t,e,n){var r=n(137),i=n(119),o=n(39);t.exports=function(t){return o(t)?r(t):i(t)}},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(11),i=n(34),o=n(67);function s(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return Object(r.a)(n)?(t.pop(),Object(o.a)(t,n)):Object(i.a)(t)}},function(t,e,n){var r=n(205),i=n(211);t.exports=function(t,e){var n=i(t,e);return r(n)?n:void 0}},function(t,e,n){var r=n(53),i=n(207),o=n(208),s="[object Null]",u="[object Undefined]",a=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?u:s:a&&a in Object(t)?i(t):o(t)}},function(t,e){t.exports=function(t){return t}},function(t,e,n){"use strict";n.d(e,"a",function(){return i}),n.d(e,"b",function(){return o});var r=n(17);function i(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return o(t)}function o(t){return t?1===t.length?t[0]:function(e){return t.reduce(function(t,e){return e(t)},e)}:r.a}},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var r="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()},function(t,e,n){"use strict";function r(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,e){return e+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}n.d(e,"a",function(){return i}),r.prototype=Object.create(Error.prototype);var i=r},function(t,e,n){"use strict";var r=n(108),i=n(42),o=n(22),s=n(25),u=n(109),a=n(110),c=n(65);n.d(e,"a",function(){return h});var h=function(t){if(t&&"function"==typeof t[s.a])return h=t,function(t){var e=h[s.a]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(Object(u.a)(t))return Object(r.a)(t);if(Object(a.a)(t))return n=t,function(t){return n.then(function(e){t.closed||(t.next(e),t.complete())},function(e){return t.error(e)}).then(null,i.a),t};if(t&&"function"==typeof t[o.a])return e=t,function(t){for(var n=e[o.a]();;){var r=n.next();if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add(function(){n.return&&n.return()}),t};var e,n,h,f=Object(c.a)(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+f+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")}},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,n){var r=n(28).Symbol;t.exports=r},function(t,e,n){(function(t){var r=n(28),i=n(227),o=e&&!e.nodeType&&e,s=o&&"object"==typeof t&&t&&!t.nodeType&&t,u=s&&s.exports===o?r.Buffer:void 0,a=(u?u.isBuffer:void 0)||i;t.exports=a}).call(this,n(116)(t))},function(t,e,n){var r=n(137),i=n(231),o=n(39);t.exports=function(t){return o(t)?r(t,!0):i(t)}},function(t,e,n){var r=n(236),i=n(113),o=n(237),s=n(146),u=n(238),a=n(46),c=n(135),h=c(r),f=c(i),l=c(o),p=c(s),d=c(u),v=a;(r&&"[object DataView]"!=v(new r(new ArrayBuffer(1)))||i&&"[object Map]"!=v(new i)||o&&"[object Promise]"!=v(o.resolve())||s&&"[object Set]"!=v(new s)||u&&"[object WeakMap]"!=v(new u))&&(v=function(t){var e=a(t),n="[object Object]"==e?t.constructor:void 0,r=n?c(n):"";if(r)switch(r){case h:return"[object DataView]";case f:return"[object Map]";case l:return"[object Promise]";case p:return"[object Set]";case d:return"[object WeakMap]"}return e}),t.exports=v},function(t,e,n){var r=n(46),i=n(32),o="[object Symbol]";t.exports=function(t){return"symbol"==typeof t||i(t)&&r(t)==o}},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(0),i=n(1);function o(){return function(t){return t.lift(new s(t))}}var s=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new u(t,n),i=e.subscribe(r);return r.closed||(r.connection=n.connect()),i},t}(),u=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return r.a(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(i.a)},function(t,e,n){"use strict";n.d(e,"a",function(){return h});var r=n(0),i=n(6),o=n(106),s=n(5),u=n(99),a=n(26),c=n(107),h=function(t){function e(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=e<1?1:e,i._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return r.a(e,t),e.prototype.nextInfiniteTimeWindow=function(e){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift(),t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this._events.push(new f(this._getNow(),e)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new a.a;if(this.isStopped||this.hasError?e=s.a.EMPTY:(this.observers.push(t),e=new c.a(this,t)),i&&t.add(t=new u.a(t,i)),n)for(var h=0;h<o&&!t.closed;h++)t.next(r[h]);else for(h=0;h<o&&!t.closed;h++)t.next(r[h].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||o.a).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<n);)o++;return i>e&&(o=Math.max(o,i-e)),o>0&&r.splice(0,o),r},e}(i.a),f=function(){return function(t,e){this.time=t,this.value=e}}()},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(2);function i(t,e){return e?new r.a(function(n){return e.schedule(o,0,{error:t,subscriber:n})}):new r.a(function(e){return e.error(t)})}function o(t){var e=t.error;t.subscriber.error(e)}},function(t,e,n){"use strict";n.d(e,"b",function(){return h}),n.d(e,"a",function(){return f});var r=n(0),i=n(11),o=n(7),s=n(4),u=n(3),a=n(34),c={};function h(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null,r=null;return Object(i.a)(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&Object(o.a)(t[0])&&(t=t[0]),Object(a.a)(t,r).lift(new f(n))}var f=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new l(t,this.resultSelector))},t}(),l=function(t){function e(e,n){var r=t.call(this,e)||this;return r.resultSelector=n,r.active=0,r.values=[],r.observables=[],r}return r.a(e,t),e.prototype._next=function(t){this.values.push(c),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var n=0;n<e;n++){var r=t[n];this.add(Object(u.a)(this,r,r,n))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.values,s=o[n],u=this.toRespond?s===c?--this.toRespond:this.toRespond:0;o[n]=e,0===u&&(this.resultSelector?this._tryResultSelector(o):this.destination.next(o.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(s.a)},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(29),i=n(21);function o(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),Object(r.a)(i.a,t)}},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(2),i=n(13),o=n(12);function s(t){return new r.a(function(e){var n;try{n=t()}catch(t){return void e.error(t)}return(n?Object(i.a)(n):Object(o.b)()).subscribe(e)})}},function(t,e,n){"use strict";n.d(e,"b",function(){return h}),n.d(e,"a",function(){return f});var r=n(0),i=n(34),o=n(7),s=n(1),u=n(4),a=n(3),c=n(22);function h(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),Object(i.a)(t,void 0).lift(new f(n))}var f=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new l(t,this.resultSelector))},t}(),l=function(t){function e(e,n,r){void 0===r&&(r=Object.create(null));var i=t.call(this,e)||this;return i.iterators=[],i.active=0,i.resultSelector="function"==typeof n?n:null,i.values=r,i}return r.a(e,t),e.prototype._next=function(t){var e=this.iterators;Object(o.a)(t)?e.push(new d(t)):"function"==typeof t[c.a]?e.push(new p(t[c.a]())):e.push(new v(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var r=t[n];if(r.stillUnsubscribed)this.destination.add(r.subscribe(r,n));else this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,r=0;r<e;r++){if("function"==typeof(s=t[r]).hasValue&&!s.hasValue())return}var i=!1,o=[];for(r=0;r<e;r++){var s,u=(s=t[r]).next();if(s.hasCompleted()&&(i=!0),u.done)return void n.complete();o.push(u.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),i&&n.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(s.a),p=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return t&&t.done},t}(),d=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[c.a]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),v=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.parent=n,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return r.a(e,t),e.prototype[c.a]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,i){this.buffer.push(e),this.parent.checkIterators()},e.prototype.subscribe=function(t,e){return Object(a.a)(this,this.observable,this,e)},e}(u.a)},function(t,e,n){"use strict";function r(t){return null!==t&&"object"==typeof t}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(1);function i(t){for(;t;){var e=t,n=e.closed,i=e.destination,o=e.isStopped;if(n||o)return!1;t=i&&i instanceof r.a?i:null}return!0}},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(2),i=n(5);function o(t,e){return new r.a(function(n){var r=new i.a,o=0;return r.add(e.schedule(function(){o!==t.length?(n.next(t[o++]),n.closed||r.add(this.schedule())):n.complete()})),r})}},function(t,e,n){"use strict";var r=n(0),i=1,o={};var s=function(t){var e=i++;return o[e]=t,Promise.resolve().then(function(){return function(t){var e=o[t];e&&e()}(e)}),e},u=function(t){delete o[t]},a=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return r.a(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=s(e.flush.bind(e,null))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(u(n),e.scheduled=void 0)},e}(n(37).a),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(n(35).a);n.d(e,"a",function(){return h});var h=new c(a)},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(16),i=n(42),o={closed:!0,next:function(t){},error:function(t){if(r.a.useDeprecatedSynchronousErrorHandling)throw t;Object(i.a)(t)},complete:function(){}}},function(t,e,n){var r=n(46),i=n(24),o="[object AsyncFunction]",s="[object Function]",u="[object GeneratorFunction]",a="[object Proxy]";t.exports=function(t){if(!i(t))return!1;var e=r(t);return e==s||e==u||e==o||e==a}},function(t,e,n){var r=n(84),i=n(85);t.exports=function(t,e,n,o){var s=!n;n||(n={});for(var u=-1,a=e.length;++u<a;){var c=e[u],h=o?o(n[c],t[c],c,n,t):void 0;void 0===h&&(h=t[c]),s?i(n,c,h):r(n,c,h)}return n}},function(t,e,n){var r=n(226),i=n(32),o=Object.prototype,s=o.hasOwnProperty,u=o.propertyIsEnumerable,a=r(function(){return arguments}())?r:function(t){return i(t)&&s.call(t,"callee")&&!u.call(t,"callee")};t.exports=a},function(t,e,n){var r=n(228),i=n(87),o=n(118),s=o&&o.isTypedArray,u=s?i(s):r;t.exports=u},function(t,e,n){var r=n(57),i=1/0;t.exports=function(t){if("string"==typeof t||r(t))return t;var e=t+"";return"0"==e&&1/t==-i?"-0":e}},function(t,e,n){"use strict";n.r(e);var r=n(2),i=n(97),o=n(77),s=n(25),u=n(6),a=n(98),c=n(59),h=n(36),f=n(68),l=n(8),p=n(106),d=n(0),v=n(37),b=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return d.a(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame(function(){return e.flush(null)})))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(cancelAnimationFrame(n),e.scheduled=void 0)},e}(v.a),y=n(35),m=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return d.a(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(y.a))(b),g=function(t){function e(e,n){void 0===e&&(e=x),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=t.call(this,e,function(){return r.frame})||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return d.a(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,r=this.maxFrames;(e=n[0])&&e.delay<=r&&(n.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(y.a),x=function(t){function e(e,n,r){void 0===r&&(r=e.index+=1);var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i.index=r,i.active=!0,i.index=e.index=r,i}return d.a(e,t),e.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,n,r);this.active=!1;var i=new e(this.scheduler,this.work);return this.add(i),i.schedule(n,r)},e.prototype.requestAsyncId=function(t,n,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(v.a),w=n(76),_=n(5),E=n(1),S=n(20),j=n(48),O=n(17),N=n(21);function k(t){return!!t&&(t instanceof r.a||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var C=n(30),I=n(33),A=n(26),T=n(50),P=n(100),M=n(10),V=n(66),D=n(7),F=n(11);function L(t,e,n){if(e){if(!Object(F.a)(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return L(t,n).apply(void 0,r).pipe(Object(M.a)(function(t){return Object(D.a)(t)?e.apply(void 0,t):e(t)}))};n=e}return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var o,s=this,u={context:s,subject:o,callbackFunc:t,scheduler:n};return new r.a(function(r){if(n){var i={args:e,subscriber:r,params:u};return n.schedule(B,0,i)}if(!o){o=new h.a;try{t.apply(s,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];o.next(t.length<=1?t[0]:t),o.complete()}]))}catch(t){Object(V.a)(o)?o.error(t):console.warn(t)}}return o.subscribe(r)})}}function B(t){var e=this,n=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,s=i.context,u=i.scheduler,a=i.subject;if(!a){a=i.subject=new h.a;try{o.apply(s,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length<=1?t[0]:t;e.add(u.schedule(R,0,{value:r,subject:a}))}]))}catch(t){a.error(t)}}this.add(a.subscribe(r))}function R(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function z(t,e,n){if(e){if(!Object(F.a)(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return z(t,n).apply(void 0,r).pipe(Object(M.a)(function(t){return Object(D.a)(t)?e.apply(void 0,t):e(t)}))};n=e}return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var o={subject:void 0,args:e,callbackFunc:t,scheduler:n,context:this};return new r.a(function(r){var i=o.context,s=o.subject;if(n)return n.schedule(U,0,{params:o,subscriber:r,context:i});if(!s){s=o.subject=new h.a;try{t.apply(i,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();n?s.error(n):(s.next(t.length<=1?t[0]:t),s.complete())}]))}catch(t){Object(V.a)(s)?s.error(t):console.warn(t)}}return s.subscribe(r)})}}function U(t){var e=this,n=t.params,r=t.subscriber,i=t.context,o=n.callbackFunc,s=n.args,u=n.scheduler,a=n.subject;if(!a){a=n.subject=new h.a;try{o.apply(i,s.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.shift();if(r)e.add(u.schedule($,0,{err:r,subject:a}));else{var i=t.length<=1?t[0]:t;e.add(u.schedule(Y,0,{value:i,subject:a}))}}]))}catch(t){this.add(u.schedule($,0,{err:t,subject:a}))}}this.add(a.subscribe(r))}function Y(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function $(t){var e=t.err;t.subject.error(e)}var G=n(61),q=n(41),W=n(63),X=n(12),H=n(65),Q=n(13);function J(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var n=t[0];if(Object(D.a)(n))return K(n,null);if(Object(H.a)(n)&&Object.getPrototypeOf(n)===Object.prototype){var r=Object.keys(n);return K(r.map(function(t){return n[t]}),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return K(t=1===t.length&&Object(D.a)(t[0])?t[0]:t,null).pipe(Object(M.a)(function(t){return i.apply(void 0,t)}))}return K(t,null)}function K(t,e){return new r.a(function(n){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,s=0,u=function(u){var a=Object(Q.a)(t[u]),c=!1;n.add(a.subscribe({next:function(t){c||(c=!0,s++),i[u]=t},error:function(t){return n.error(t)},complete:function(){++o!==r&&c||(s===r&&n.next(e?e.reduce(function(t,e,n){return t[e]=i[n],t},{}):i),n.complete())}}))},a=0;a<r;a++)u(a);else n.complete()})}var Z=n(31);Object.prototype.toString;function tt(t,e,n,i){return Object(Z.a)(n)&&(i=n,n=void 0),i?tt(t,e,n).pipe(Object(M.a)(function(t){return Object(D.a)(t)?i.apply(void 0,t):i(t)})):new r.a(function(r){!function t(e,n,r,i,o){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var u=e;e.addEventListener(n,r,o),s=function(){return u.removeEventListener(n,r,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var a=e;e.on(n,r),s=function(){return a.off(n,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var c=e;e.addListener(n,r),s=function(){return c.removeListener(n,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var h=0,f=e.length;h<f;h++)t(e[h],n,r,i,o)}i.add(s)}(t,e,function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)},r,n)})}function et(t,e,n){return n?et(t,e).pipe(Object(M.a)(function(t){return Object(D.a)(t)?n.apply(void 0,t):n(t)})):new r.a(function(n){var r,i=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void n.error(t)}if(Object(Z.a)(e))return function(){return e(i,r)}})}function nt(t,e,n,i,o){var s,u;if(1==arguments.length){var a=t;u=a.initialState,e=a.condition,n=a.iterate,s=a.resultSelector||N.a,o=a.scheduler}else void 0===i||Object(F.a)(i)?(u=t,s=N.a,o=i):(u=t,s=i);return new r.a(function(t){var r=u;if(o)return o.schedule(rt,0,{subscriber:t,iterate:n,condition:e,resultSelector:s,state:r});for(;;){if(e){var i=void 0;try{i=e(r)}catch(e){return void t.error(e)}if(!i){t.complete();break}}var a=void 0;try{a=s(r)}catch(e){return void t.error(e)}if(t.next(a),t.closed)break;try{r=n(r)}catch(e){return void t.error(e)}}})}function rt(t){var e=t.subscriber,n=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(n){var r=void 0;try{r=n(t.state)}catch(t){return void e.error(t)}if(!r)return void e.complete();if(e.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(i),!e.closed))return this.schedule(t)}}function it(t,e,n){return void 0===e&&(e=X.a),void 0===n&&(n=X.a),Object(W.a)(function(){return t()?e:n})}var ot=n(38);function st(t,e){return void 0===t&&(t=0),void 0===e&&(e=l.a),(!Object(ot.a)(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=l.a),new r.a(function(n){return n.add(e.schedule(ut,t,{subscriber:n,counter:0,period:t})),n})}function ut(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}var at=n(102),ct=new r.a(O.a);function ht(){return ct}var ft=n(44);function lt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return X.a;var n=t[0],i=t.slice(1);return 1===t.length&&Object(D.a)(n)?lt.apply(void 0,n):new r.a(function(t){var e=function(){return t.add(lt.apply(void 0,i).subscribe(t))};return Object(Q.a)(n).subscribe({next:function(e){t.next(e)},error:e,complete:e})})}function pt(t,e){return e?new r.a(function(n){var r=Object.keys(t),i=new _.a;return i.add(e.schedule(dt,0,{keys:r,index:0,subscriber:n,subscription:i,obj:t})),i}):new r.a(function(e){for(var n=Object.keys(t),r=0;r<n.length&&!e.closed;r++){var i=n[r];t.hasOwnProperty(i)&&e.next([i,t[i]])}e.complete()})}function dt(t){var e=t.keys,n=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(n<e.length){var s=e[n];r.next([s,o[s]]),i.add(this.schedule({keys:e,index:n+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}var vt=n(111),bt=n(51),yt=n(19);function mt(t,e,n){return[Object(yt.a)(e,n)(new r.a(Object(bt.a)(t))),Object(yt.a)(Object(vt.a)(e,n))(new r.a(Object(bt.a)(t)))]}var gt=n(103);function xt(t,e,n){return void 0===t&&(t=0),new r.a(function(r){void 0===e&&(e=t,t=0);var i=0,o=t;if(n)return n.schedule(wt,0,{index:i,count:e,start:t,subscriber:r});for(;;){if(i++>=e){r.complete();break}if(r.next(o++),r.closed)break}})}function wt(t){var e=t.start,n=t.index,r=t.count,i=t.subscriber;n>=r?i.complete():(i.next(e),i.closed||(t.index=n+1,t.start=e+1,this.schedule(t)))}var _t=n(60),Et=n(104);function St(t,e){return new r.a(function(n){var r,i;try{r=t()}catch(t){return void n.error(t)}try{i=e(r)}catch(t){return void n.error(t)}var o=(i?Object(Q.a)(i):X.a).subscribe(n);return function(){o.unsubscribe(),r&&r.unsubscribe()}})}var jt=n(64),Ot=n(105),Nt=n(16);n.d(e,"Observable",function(){return r.a}),n.d(e,"ConnectableObservable",function(){return i.a}),n.d(e,"GroupedObservable",function(){return o.a}),n.d(e,"observable",function(){return s.a}),n.d(e,"Subject",function(){return u.a}),n.d(e,"BehaviorSubject",function(){return a.a}),n.d(e,"ReplaySubject",function(){return c.a}),n.d(e,"AsyncSubject",function(){return h.a}),n.d(e,"asapScheduler",function(){return f.a}),n.d(e,"asyncScheduler",function(){return l.a}),n.d(e,"queueScheduler",function(){return p.a}),n.d(e,"animationFrameScheduler",function(){return m}),n.d(e,"VirtualTimeScheduler",function(){return g}),n.d(e,"VirtualAction",function(){return x}),n.d(e,"Scheduler",function(){return w.a}),n.d(e,"Subscription",function(){return _.a}),n.d(e,"Subscriber",function(){return E.a}),n.d(e,"Notification",function(){return S.a}),n.d(e,"NotificationKind",function(){return S.b}),n.d(e,"pipe",function(){return j.a}),n.d(e,"noop",function(){return O.a}),n.d(e,"identity",function(){return N.a}),n.d(e,"isObservable",function(){return k}),n.d(e,"ArgumentOutOfRangeError",function(){return C.a}),n.d(e,"EmptyError",function(){return I.a}),n.d(e,"ObjectUnsubscribedError",function(){return A.a}),n.d(e,"UnsubscriptionError",function(){return T.a}),n.d(e,"TimeoutError",function(){return P.a}),n.d(e,"bindCallback",function(){return L}),n.d(e,"bindNodeCallback",function(){return z}),n.d(e,"combineLatest",function(){return G.b}),n.d(e,"concat",function(){return q.a}),n.d(e,"defer",function(){return W.a}),n.d(e,"empty",function(){return X.b}),n.d(e,"forkJoin",function(){return J}),n.d(e,"from",function(){return Q.a}),n.d(e,"fromEvent",function(){return tt}),n.d(e,"fromEventPattern",function(){return et}),n.d(e,"generate",function(){return nt}),n.d(e,"iif",function(){return it}),n.d(e,"interval",function(){return st}),n.d(e,"merge",function(){return at.a}),n.d(e,"never",function(){return ht}),n.d(e,"of",function(){return ft.a}),n.d(e,"onErrorResumeNext",function(){return lt}),n.d(e,"pairs",function(){return pt}),n.d(e,"partition",function(){return mt}),n.d(e,"race",function(){return gt.a}),n.d(e,"range",function(){return xt}),n.d(e,"throwError",function(){return _t.a}),n.d(e,"timer",function(){return Et.a}),n.d(e,"using",function(){return St}),n.d(e,"zip",function(){return jt.b}),n.d(e,"scheduled",function(){return Ot.a}),n.d(e,"EMPTY",function(){return X.a}),n.d(e,"NEVER",function(){return ct}),n.d(e,"config",function(){return Nt.a})},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var r=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}()},function(t,e,n){"use strict";n.d(e,"b",function(){return a}),n.d(e,"a",function(){return l});var r=n(0),i=n(1),o=n(5),s=n(2),u=n(6);function a(t,e,n,r){return function(i){return i.lift(new c(t,e,n,r))}}var c=function(){function t(t,e,n,r){this.keySelector=t,this.elementSelector=e,this.durationSelector=n,this.subjectSelector=r}return t.prototype.call=function(t,e){return e.subscribe(new h(t,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},t}(),h=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.keySelector=n,s.elementSelector=r,s.durationSelector=i,s.subjectSelector=o,s.groups=null,s.attemptedToUnsubscribe=!1,s.count=0,s}return r.a(e,t),e.prototype._next=function(t){var e;try{e=this.keySelector(t)}catch(t){return void this.error(t)}this._group(t,e)},e.prototype._group=function(t,e){var n=this.groups;n||(n=this.groups=new Map);var r,i=n.get(e);if(this.elementSelector)try{r=this.elementSelector(t)}catch(t){this.error(t)}else r=t;if(!i){i=this.subjectSelector?this.subjectSelector():new u.a,n.set(e,i);var o=new l(e,i,this);if(this.destination.next(o),this.durationSelector){var s=void 0;try{s=this.durationSelector(new l(e,i))}catch(t){return void this.error(t)}this.add(s.subscribe(new f(e,i,this)))}}i.closed||i.next(r)},e.prototype._error=function(t){var e=this.groups;e&&(e.forEach(function(e,n){e.error(t)}),e.clear()),this.destination.error(t)},e.prototype._complete=function(){var t=this.groups;t&&(t.forEach(function(t,e){t.complete()}),t.clear()),this.destination.complete()},e.prototype.removeGroup=function(t){this.groups.delete(t)},e.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&t.prototype.unsubscribe.call(this))},e}(i.a),f=function(t){function e(e,n,r){var i=t.call(this,n)||this;return i.key=e,i.group=n,i.parent=r,i}return r.a(e,t),e.prototype._next=function(t){this.complete()},e.prototype._unsubscribe=function(){var t=this.parent,e=this.key;this.key=this.parent=null,t&&t.removeGroup(e)},e}(i.a),l=function(t){function e(e,n,r){var i=t.call(this)||this;return i.key=e,i.groupSubject=n,i.refCountSubscription=r,i}return r.a(e,t),e.prototype._subscribe=function(t){var e=new o.a,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&e.add(new p(n)),e.add(r.subscribe(t)),e},e}(s.a),p=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,e.count++,n}return r.a(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(o.a)},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});e.__esModule=!0;var o=n(75),s=n(96),u=n(131);e.PROP_DEFAULT_NAME="",function(t){t[t.Input=1]="Input",t[t.Output=2]="Output"}(e.IO||(e.IO={}));var a=function(){function t(e){this.label=e,this.incomingEdges=new o.BehaviorSubject([]),this.outgoingEdges=new o.BehaviorSubject([]),this.layout=new o.BehaviorSubject({width:0,height:0,x:0,y:0,inputs:{},outputs:{}}),this.id=t.nodeCount++}return t.prototype.getLabel=function(){return this.label},t.prototype.getLayoutStream=function(){return this.layout},t.prototype._setLayout=function(t){this.layout.next(t)},t.prototype.establishInputStream=function(){var t=this.getInputInfoStream(),e=o.combineLatest(this.incomingEdges,t);this.inputStream=e.pipe(s.map(function(t){var e=t[0],n=t[1],r=new Map;e.forEach(function(t){var e=t.getTo().prop,n=t.getStream();if(r.has(e)){var i=r.get(e),o=u.default(i,{$push:[n]});r.set(e,o)}else r.set(e,[n])});var i=[];return n.forEach(function(t){var e=t.name,n=t.raw;if(r.has(e)){var s=r.get(e);t.rest?i.push.apply(i,s):1===s.length?n?i.push(o.of(s[0])):i.push(s[0]):0===s.length?i.push(void 0):i.push(o.combineLatest.apply(void 0,s))}else t.default?i.push(o.of(t.default)):i.push(void 0)}),i}))},t.prototype.getIncomingEdgesStream=function(){return this.incomingEdges},t.prototype.getOutgoingEdgesStream=function(){return this.outgoingEdges},t.prototype.addIncomingEdge=function(t){var e=this.incomingEdges.getValue(),n=u.default(e,{$push:[t]});this.incomingEdges.next(n)},t.prototype.addOutgoingEdge=function(t){var e=this.outgoingEdges.getValue(),n=u.default(e,{$push:[t]});this.outgoingEdges.next(n)},t.prototype.removeIncomingEdge=function(t){var e=this.incomingEdges.getValue(),n=e.indexOf(t);if(n>=0){var r=u.default(e,{$splice:[[n,1]]});this.incomingEdges.next(r)}},t.prototype.removeOutgoingEdge=function(t){var e=this.outgoingEdges.getValue(),n=e.indexOf(t);if(n>=0){var r=u.default(e,{$splice:[[n,1]]});this.outgoingEdges.next(r)}},t.prototype.remove=function(){this.incomingEdges.complete(),this.outgoingEdges.complete(),this.layout.complete()},t.prototype.pluckOutput=function(t){return void 0===t&&(t=e.PROP_DEFAULT_NAME),this.getOutputStream().pipe(s.pluck(t))},t.prototype.getID=function(){return"node-"+this.id},t.nodeCount=1,t}();e.Node=a;var c=function(t){function n(n,r){var i;void 0===r&&(r={name:e.PROP_DEFAULT_NAME});var s=t.call(this,""+n)||this;return s.inputInfoStream=o.of([]),s.stream=o.of(((i={})[r.name]=n,i)),s.outputInfoStream=o.of([r]),s.establishInputStream(),s}return i(n,t),n.prototype.getOutputStream=function(){return this.stream},n.prototype.getInputInfoStream=function(){return this.inputInfoStream},n.prototype.getOutputInfoStream=function(){return this.outputInfoStream},n}(a);e.ConstantNode=c;var h=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.inputInfoStream=o.of(n),i.outputInfoStream=o.of(r),i.establishInputStream(),i}return i(e,t),e.prototype.getOutputStream=function(){return this.managedOut},e.prototype.getInputInfoStream=function(){return this.inputInfoStream},e.prototype.getOutputInfoStream=function(){return this.outputInfoStream},e.prototype.establishOutputStream=function(){var t=this.getOutputInfoStream(),e=o.combineLatest(this.out,t);this.managedOut=e.pipe(s.mergeMap(function(t){var e=t[0],n=t[1],r=new Set(n.filter(function(t){return t.raw}).map(function(t){return t.name})),i=Object.keys(e).map(function(t){var n,i=e[t];return r.has(t)&&o.isObservable(i)?i.pipe(s.map(function(e){var n;return(n={})[t]=e,n})):o.of(((n={})[t]=i,n))});return o.combineLatest.apply(void 0,i).pipe(s.map(function(t){return Object.assign.apply(Object,[{}].concat(t))}))}))},e}(a),f=function(t){function e(e,n,r,i){var u=t.call(this,e,r,[i])||this;return u.func=n,u.establishInputStream(),u.out=u.inputStream.pipe(s.mergeMap(function(t){return o.combineLatest.apply(void 0,t)}),s.map(function(t){var e;return(e={})[i.name]=u.func.apply(u,t),e})),u.establishOutputStream(),u}return i(e,t),e}(h);e.OpNode=f;var l=function(t){function n(n){void 0===n&&(n="gen");var r=t.call(this,n,[{name:"delay"}],[{name:e.PROP_DEFAULT_NAME}])||this;return r.intervalID=-1,r.out=new o.BehaviorSubject(r.getRandom()),r.subscription=r.inputStream.pipe(s.map(function(t){return o.combineLatest.apply(void 0,t)})).pipe(s.mergeMap(function(t){return t.pipe(s.map(function(t){return t[0]}))})).subscribe({next:function(t){r.clear(),r.set(t)}}),r.establishOutputStream(),r}return i(n,t),n.prototype.clear=function(){this.intervalID>=0&&(clearInterval(this.intervalID),this.intervalID=-1)},n.prototype.set=function(t){var e=this;this.intervalID=setInterval(function(){e.out.next(e.getRandom())},t)},n.prototype.getRandom=function(){var t;return(t={})[e.PROP_DEFAULT_NAME]=Math.random(),t},n.prototype.remove=function(){t.prototype.remove.call(this),this.clear(),this.out.complete(),this.subscription.unsubscribe()},n}(h);e.GenNode=l},function(t,e,n){var r=n(80),i=n(200),o=n(201),s=n(202),u=n(203),a=n(204);function c(t){var e=this.__data__=new r(t);this.size=e.size}c.prototype.clear=i,c.prototype.delete=o,c.prototype.get=s,c.prototype.has=u,c.prototype.set=a,t.exports=c},function(t,e,n){var r=n(195),i=n(196),o=n(197),s=n(198),u=n(199);function a(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}a.prototype.clear=r,a.prototype.delete=i,a.prototype.get=o,a.prototype.has=s,a.prototype.set=u,t.exports=a},function(t,e,n){var r=n(52);t.exports=function(t,e){for(var n=t.length;n--;)if(r(t[n][0],e))return n;return-1}},function(t,e,n){var r=n(45)(Object,"create");t.exports=r},function(t,e,n){var r=n(220);t.exports=function(t,e){var n=t.__data__;return r(e)?n["string"==typeof e?"string":"hash"]:n.map}},function(t,e,n){var r=n(85),i=n(52),o=Object.prototype.hasOwnProperty;t.exports=function(t,e,n){var s=t[e];o.call(t,e)&&i(s,n)&&(void 0!==n||e in t)||r(t,e,n)}},function(t,e,n){var r=n(136);t.exports=function(t,e,n){"__proto__"==e&&r?r(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}},function(t,e){var n=9007199254740991,r=/^(?:0|[1-9]\d*)$/;t.exports=function(t,e){var i=typeof t;return!!(e=null==e?n:e)&&("number"==i||"symbol"!=i&&r.test(t))&&t>-1&&t%1==0&&t<e}},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e){var n=Object.prototype;t.exports=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||n)}},function(t,e,n){var r=n(138)(Object.getPrototypeOf,Object);t.exports=r},function(t,e,n){var r=n(124),i=n(249)(r);t.exports=i},function(t,e,n){var r=n(14),i=n(128),o=n(263),s=n(161);t.exports=function(t,e){return r(t)?t:i(t,e)?[t]:o(s(t))}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}},function(t,e,n){var r=n(47),i=n(170),o=n(171);t.exports=function(t,e){return o(i(t,e,r),t+"")}},function(t,e,n){var r=n(52),i=n(39),o=n(86),s=n(24);t.exports=function(t,e,n){if(!s(n))return!1;var u=typeof e;return!!("number"==u?i(n)&&o(e,n.length):"string"==u&&e in n)&&r(n[e],t)}},function(t,e,n){"use strict";var r=n(9);t.exports={longestPath:function(t){var e={};r.forEach(t.sources(),function n(i){var o=t.node(i);if(r.has(e,i))return o.rank;e[i]=!0;var s=r.min(r.map(t.outEdges(i),function(e){return n(e.w)-t.edge(e).minlen}));return s!==Number.POSITIVE_INFINITY&&null!=s||(s=0),o.rank=s})},slack:function(t,e){return t.node(e.w).rank-t.node(e.v).rank-t.edge(e).minlen}}},function(t,e,n){"use strict";n.r(e);var r=n(0),i=n(4),o=n(3);function s(t){return function(e){return e.lift(new u(t))}}var u=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new a(t,this.durationSelector))},t}(),a=function(t){function e(e,n){var r=t.call(this,e)||this;return r.durationSelector=n,r.hasValue=!1,r}return r.a(e,t),e.prototype._next=function(t){if(this.value=t,this.hasValue=!0,!this.throttled){var e=void 0;try{e=(0,this.durationSelector)(t)}catch(t){return this.destination.error(t)}var n=Object(o.a)(this,e);!n||n.closed?this.clearThrottle():this.add(this.throttled=n)}},e.prototype.clearThrottle=function(){var t=this.value,e=this.hasValue,n=this.throttled;n&&(this.remove(n),this.throttled=null,n.unsubscribe()),e&&(this.value=null,this.hasValue=!1,this.destination.next(t))},e.prototype.notifyNext=function(t,e,n,r){this.clearThrottle()},e.prototype.notifyComplete=function(){this.clearThrottle()},e}(i.a),c=n(8),h=n(104);function f(t,e){return void 0===e&&(e=c.a),s(function(){return Object(h.a)(t,e)})}function l(t){return function(e){return e.lift(new p(t))}}var p=function(){function t(t){this.closingNotifier=t}return t.prototype.call=function(t,e){return e.subscribe(new d(t,this.closingNotifier))},t}(),d=function(t){function e(e,n){var r=t.call(this,e)||this;return r.buffer=[],r.add(Object(o.a)(r,n)),r}return r.a(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.buffer;this.buffer=[],this.destination.next(o)},e}(i.a),v=n(1);function b(t,e){return void 0===e&&(e=null),function(n){return n.lift(new y(t,e))}}var y=function(){function t(t,e){this.bufferSize=t,this.startBufferEvery=e,this.subscriberClass=e&&t!==e?g:m}return t.prototype.call=function(t,e){return e.subscribe(new this.subscriberClass(t,this.bufferSize,this.startBufferEvery))},t}(),m=function(t){function e(e,n){var r=t.call(this,e)||this;return r.bufferSize=n,r.buffer=[],r}return r.a(e,t),e.prototype._next=function(t){var e=this.buffer;e.push(t),e.length==this.bufferSize&&(this.destination.next(e),this.buffer=[])},e.prototype._complete=function(){var e=this.buffer;e.length>0&&this.destination.next(e),t.prototype._complete.call(this)},e}(v.a),g=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.bufferSize=n,i.startBufferEvery=r,i.buffers=[],i.count=0,i}return r.a(e,t),e.prototype._next=function(t){var e=this.bufferSize,n=this.startBufferEvery,r=this.buffers,i=this.count;this.count++,i%n==0&&r.push([]);for(var o=r.length;o--;){var s=r[o];s.push(t),s.length===e&&(r.splice(o,1),this.destination.next(s))}},e.prototype._complete=function(){for(var e=this.buffers,n=this.destination;e.length>0;){var r=e.shift();r.length>0&&n.next(r)}t.prototype._complete.call(this)},e}(v.a),x=n(11);function w(t){var e=arguments.length,n=c.a;Object(x.a)(arguments[arguments.length-1])&&(n=arguments[arguments.length-1],e--);var r=null;e>=2&&(r=arguments[1]);var i=Number.POSITIVE_INFINITY;return e>=3&&(i=arguments[2]),function(e){return e.lift(new _(t,r,i,n))}}var _=function(){function t(t,e,n,r){this.bufferTimeSpan=t,this.bufferCreationInterval=e,this.maxBufferSize=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new S(t,this.bufferTimeSpan,this.bufferCreationInterval,this.maxBufferSize,this.scheduler))},t}(),E=function(){return function(){this.buffer=[]}}(),S=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;s.bufferTimeSpan=n,s.bufferCreationInterval=r,s.maxBufferSize=i,s.scheduler=o,s.contexts=[];var u=s.openContext();if(s.timespanOnly=null==r||r<0,s.timespanOnly){var a={subscriber:s,context:u,bufferTimeSpan:n};s.add(u.closeAction=o.schedule(j,n,a))}else{var c={subscriber:s,context:u},h={bufferTimeSpan:n,bufferCreationInterval:r,subscriber:s,scheduler:o};s.add(u.closeAction=o.schedule(N,n,c)),s.add(o.schedule(O,r,h))}return s}return r.a(e,t),e.prototype._next=function(t){for(var e,n=this.contexts,r=n.length,i=0;i<r;i++){var o=n[i],s=o.buffer;s.push(t),s.length==this.maxBufferSize&&(e=o)}e&&this.onBufferFull(e)},e.prototype._error=function(e){this.contexts.length=0,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts,n=this.destination;e.length>0;){var r=e.shift();n.next(r.buffer)}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.contexts=null},e.prototype.onBufferFull=function(t){this.closeContext(t);var e=t.closeAction;if(e.unsubscribe(),this.remove(e),!this.closed&&this.timespanOnly){t=this.openContext();var n=this.bufferTimeSpan,r={subscriber:this,context:t,bufferTimeSpan:n};this.add(t.closeAction=this.scheduler.schedule(j,n,r))}},e.prototype.openContext=function(){var t=new E;return this.contexts.push(t),t},e.prototype.closeContext=function(t){this.destination.next(t.buffer);var e=this.contexts;(e?e.indexOf(t):-1)>=0&&e.splice(e.indexOf(t),1)},e}(v.a);function j(t){var e=t.subscriber,n=t.context;n&&e.closeContext(n),e.closed||(t.context=e.openContext(),t.context.closeAction=this.schedule(t,t.bufferTimeSpan))}function O(t){var e=t.bufferCreationInterval,n=t.bufferTimeSpan,r=t.subscriber,i=t.scheduler,o=r.openContext();r.closed||(r.add(o.closeAction=i.schedule(N,n,{subscriber:r,context:o})),this.schedule(t,e))}function N(t){var e=t.subscriber,n=t.context;e.closeContext(n)}var k=n(5);function C(t,e){return function(n){return n.lift(new I(t,e))}}var I=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new A(t,this.openings,this.closingSelector))},t}(),A=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.openings=n,i.closingSelector=r,i.contexts=[],i.add(Object(o.a)(i,n)),i}return r.a(e,t),e.prototype._next=function(t){for(var e=this.contexts,n=e.length,r=0;r<n;r++)e[r].buffer.push(t)},e.prototype._error=function(e){for(var n=this.contexts;n.length>0;){var r=n.shift();r.subscription.unsubscribe(),r.buffer=null,r.subscription=null}this.contexts=null,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts;e.length>0;){var n=e.shift();this.destination.next(n.buffer),n.subscription.unsubscribe(),n.buffer=null,n.subscription=null}this.contexts=null,t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e,n,r,i){t?this.closeBuffer(t):this.openBuffer(e)},e.prototype.notifyComplete=function(t){this.closeBuffer(t.context)},e.prototype.openBuffer=function(t){try{var e=this.closingSelector.call(this,t);e&&this.trySubscribe(e)}catch(t){this._error(t)}},e.prototype.closeBuffer=function(t){var e=this.contexts;if(e&&t){var n=t.buffer,r=t.subscription;this.destination.next(n),e.splice(e.indexOf(t),1),this.remove(r),r.unsubscribe()}},e.prototype.trySubscribe=function(t){var e=this.contexts,n=new k.a,r={buffer:[],subscription:n};e.push(r);var i=Object(o.a)(this,t,r);!i||i.closed?this.closeBuffer(r):(i.context=r,this.add(i),n.add(i))},e}(i.a);function T(t){return function(e){return e.lift(new P(t))}}var P=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new M(t,this.closingSelector))},t}(),M=function(t){function e(e,n){var r=t.call(this,e)||this;return r.closingSelector=n,r.subscribing=!1,r.openBuffer(),r}return r.a(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype._complete=function(){var e=this.buffer;e&&this.destination.next(e),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.buffer=null,this.subscribing=!1},e.prototype.notifyNext=function(t,e,n,r,i){this.openBuffer()},e.prototype.notifyComplete=function(){this.subscribing?this.complete():this.openBuffer()},e.prototype.openBuffer=function(){var t=this.closingSubscription;t&&(this.remove(t),t.unsubscribe());var e,n=this.buffer;this.buffer&&this.destination.next(n),this.buffer=[];try{e=(0,this.closingSelector)()}catch(t){return this.error(t)}t=new k.a,this.closingSubscription=t,this.add(t),this.subscribing=!0,t.add(Object(o.a)(this,e)),this.subscribing=!1},e}(i.a),V=n(15);function D(t){return function(e){var n=new F(t),r=e.lift(n);return n.caught=r}}var F=function(){function t(t){this.selector=t}return t.prototype.call=function(t,e){return e.subscribe(new L(t,this.selector,this.caught))},t}(),L=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.selector=n,i.caught=r,i}return r.a(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=void 0;try{n=this.selector(e,this.caught)}catch(e){return void t.prototype.error.call(this,e)}this._unsubscribeAndRecycle();var r=new V.a(this,void 0,void 0);this.add(r),Object(o.a)(this,n,void 0,void 0,r)}},e}(i.a),B=n(61);function R(t){return function(e){return e.lift(new B.a(t))}}var z=n(7),U=n(13);function Y(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null;return"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&Object(z.a)(t[0])&&(t=t[0].slice()),function(e){return e.lift.call(Object(U.a)([e].concat(t)),new B.a(n))}}var $=n(41);function G(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call($.a.apply(void 0,[e].concat(t)))}}var q=n(101),W=n(29);function X(t,e){return Object(W.a)(t,e,1)}function H(t,e){return X(function(){return t},e)}function Q(t){return function(e){return e.lift(new J(t,e))}}var J=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new K(t,this.predicate,this.source))},t}(),K=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.source=r,i.count=0,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){this.predicate?this._tryPredicate(t):this.count++},e.prototype._tryPredicate=function(t){var e;try{e=this.predicate(t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e&&this.count++},e.prototype._complete=function(){this.destination.next(this.count),this.destination.complete()},e}(v.a);function Z(t){return function(e){return e.lift(new tt(t))}}var tt=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new et(t,this.durationSelector))},t}(),et=function(t){function e(e,n){var r=t.call(this,e)||this;return r.durationSelector=n,r.hasValue=!1,r.durationSubscription=null,r}return r.a(e,t),e.prototype._next=function(t){try{var e=this.durationSelector.call(this,t);e&&this._tryNext(t,e)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.emitValue(),this.destination.complete()},e.prototype._tryNext=function(t,e){var n=this.durationSubscription;this.value=t,this.hasValue=!0,n&&(n.unsubscribe(),this.remove(n)),(n=Object(o.a)(this,e))&&!n.closed&&this.add(this.durationSubscription=n)},e.prototype.notifyNext=function(t,e,n,r,i){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){if(this.hasValue){var e=this.value,n=this.durationSubscription;n&&(this.durationSubscription=null,n.unsubscribe(),this.remove(n)),this.value=null,this.hasValue=!1,t.prototype._next.call(this,e)}},e}(i.a);function nt(t,e){return void 0===e&&(e=c.a),function(n){return n.lift(new rt(t,e))}}var rt=function(){function t(t,e){this.dueTime=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new it(t,this.dueTime,this.scheduler))},t}(),it=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.dueTime=n,i.scheduler=r,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return r.a(e,t),e.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(ot,this.dueTime,this))},e.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},e.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},e.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},e}(v.a);function ot(t){t.debouncedNext()}function st(t){return void 0===t&&(t=null),function(e){return e.lift(new ut(t))}}var ut=function(){function t(t){this.defaultValue=t}return t.prototype.call=function(t,e){return e.subscribe(new at(t,this.defaultValue))},t}(),at=function(t){function e(e,n){var r=t.call(this,e)||this;return r.defaultValue=n,r.isEmpty=!0,r}return r.a(e,t),e.prototype._next=function(t){this.isEmpty=!1,this.destination.next(t)},e.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},e}(v.a);function ct(t){return t instanceof Date&&!isNaN(+t)}var ht=n(20);function ft(t,e){void 0===e&&(e=c.a);var n=ct(t)?+t-e.now():Math.abs(t);return function(t){return t.lift(new lt(n,e))}}var lt=function(){function t(t,e){this.delay=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new pt(t,this.delay,this.scheduler))},t}(),pt=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.delay=n,i.scheduler=r,i.queue=[],i.active=!1,i.errored=!1,i}return r.a(e,t),e.dispatch=function(t){for(var e=t.source,n=e.queue,r=t.scheduler,i=t.destination;n.length>0&&n[0].time-r.now()<=0;)n.shift().notification.observe(i);if(n.length>0){var o=Math.max(0,n[0].time-r.now());this.schedule(t,o)}else this.unsubscribe(),e.active=!1},e.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(e.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},e.prototype.scheduleNotification=function(t){if(!0!==this.errored){var e=this.scheduler,n=new dt(e.now()+this.delay,t);this.queue.push(n),!1===this.active&&this._schedule(e)}},e.prototype._next=function(t){this.scheduleNotification(ht.a.createNext(t))},e.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.scheduleNotification(ht.a.createComplete()),this.unsubscribe()},e}(v.a),dt=function(){return function(t,e){this.time=t,this.notification=e}}(),vt=n(2);function bt(t,e){return e?function(n){return new gt(n,e).lift(new yt(t))}:function(e){return e.lift(new yt(t))}}var yt=function(){function t(t){this.delayDurationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new mt(t,this.delayDurationSelector))},t}(),mt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.delayDurationSelector=n,r.completed=!1,r.delayNotifierSubscriptions=[],r.index=0,r}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(t),this.removeSubscription(i),this.tryComplete()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){var e=this.removeSubscription(t);e&&this.destination.next(e),this.tryComplete()},e.prototype._next=function(t){var e=this.index++;try{var n=this.delayDurationSelector(t,e);n&&this.tryDelay(n,t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.completed=!0,this.tryComplete(),this.unsubscribe()},e.prototype.removeSubscription=function(t){t.unsubscribe();var e=this.delayNotifierSubscriptions.indexOf(t);return-1!==e&&this.delayNotifierSubscriptions.splice(e,1),t.outerValue},e.prototype.tryDelay=function(t,e){var n=Object(o.a)(this,t,e);n&&!n.closed&&(this.destination.add(n),this.delayNotifierSubscriptions.push(n))},e.prototype.tryComplete=function(){this.completed&&0===this.delayNotifierSubscriptions.length&&this.destination.complete()},e}(i.a),gt=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subscriptionDelay=n,r}return r.a(e,t),e.prototype._subscribe=function(t){this.subscriptionDelay.subscribe(new xt(t,this.source))},e}(vt.a),xt=function(t){function e(e,n){var r=t.call(this)||this;return r.parent=e,r.source=n,r.sourceSubscribed=!1,r}return r.a(e,t),e.prototype._next=function(t){this.subscribeToSource()},e.prototype._error=function(t){this.unsubscribe(),this.parent.error(t)},e.prototype._complete=function(){this.unsubscribe(),this.subscribeToSource()},e.prototype.subscribeToSource=function(){this.sourceSubscribed||(this.sourceSubscribed=!0,this.unsubscribe(),this.source.subscribe(this.parent))},e}(v.a);function wt(){return function(t){return t.lift(new _t)}}var _t=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Et(t))},t}(),Et=function(t){function e(e){return t.call(this,e)||this}return r.a(e,t),e.prototype._next=function(t){t.observe(this.destination)},e}(v.a);function St(t,e){return function(n){return n.lift(new jt(t,e))}}var jt=function(){function t(t,e){this.keySelector=t,this.flushes=e}return t.prototype.call=function(t,e){return e.subscribe(new Ot(t,this.keySelector,this.flushes))},t}(),Ot=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.keySelector=n,i.values=new Set,r&&i.add(Object(o.a)(i,r)),i}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.values.clear()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype._next=function(t){this.keySelector?this._useKeySelector(t):this._finalizeNext(t,t)},e.prototype._useKeySelector=function(t){var e,n=this.destination;try{e=this.keySelector(t)}catch(t){return void n.error(t)}this._finalizeNext(e,t)},e.prototype._finalizeNext=function(t,e){var n=this.values;n.has(t)||(n.add(t),this.destination.next(e))},e}(i.a);function Nt(t,e){return function(n){return n.lift(new kt(t,e))}}var kt=function(){function t(t,e){this.compare=t,this.keySelector=e}return t.prototype.call=function(t,e){return e.subscribe(new Ct(t,this.compare,this.keySelector))},t}(),Ct=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.keySelector=r,i.hasKey=!1,"function"==typeof n&&(i.compare=n),i}return r.a(e,t),e.prototype.compare=function(t,e){return t===e},e.prototype._next=function(t){var e;try{var n=this.keySelector;e=n?n(t):t}catch(t){return this.destination.error(t)}var r=!1;if(this.hasKey)try{r=(0,this.compare)(this.key,e)}catch(t){return this.destination.error(t)}else this.hasKey=!0;r||(this.key=e,this.destination.next(t))},e}(v.a);function It(t,e){return Nt(function(n,r){return e?e(n[t],r[t]):n[t]===r[t]})}var At=n(30),Tt=n(19),Pt=n(33);function Mt(t){return void 0===t&&(t=Ft),function(e){return e.lift(new Vt(t))}}var Vt=function(){function t(t){this.errorFactory=t}return t.prototype.call=function(t,e){return e.subscribe(new Dt(t,this.errorFactory))},t}(),Dt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.errorFactory=n,r.hasValue=!1,r}return r.a(e,t),e.prototype._next=function(t){this.hasValue=!0,this.destination.next(t)},e.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var t=void 0;try{t=this.errorFactory()}catch(e){t=e}this.destination.error(t)},e}(v.a);function Ft(){return new Pt.a}var Lt=n(12);function Bt(t){return function(e){return 0===t?Object(Lt.b)():e.lift(new Rt(t))}}var Rt=function(){function t(t){if(this.total=t,this.total<0)throw new At.a}return t.prototype.call=function(t,e){return e.subscribe(new zt(t,this.total))},t}(),zt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.count=0,r}return r.a(e,t),e.prototype._next=function(t){var e=this.total,n=++this.count;n<=e&&(this.destination.next(t),n===e&&(this.destination.complete(),this.unsubscribe()))},e}(v.a);function Ut(t,e){if(t<0)throw new At.a;var n=arguments.length>=2;return function(r){return r.pipe(Object(Tt.a)(function(e,n){return n===t}),Bt(1),n?st(e):Mt(function(){return new At.a}))}}var Yt=n(44);function $t(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return Object($.a)(e,Yt.a.apply(void 0,t))}}function Gt(t,e){return function(n){return n.lift(new qt(t,e,n))}}var qt=function(){function t(t,e,n){this.predicate=t,this.thisArg=e,this.source=n}return t.prototype.call=function(t,e){return e.subscribe(new Wt(t,this.predicate,this.thisArg,this.source))},t}(),Wt=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.predicate=n,o.thisArg=r,o.source=i,o.index=0,o.thisArg=r||o,o}return r.a(e,t),e.prototype.notifyComplete=function(t){this.destination.next(t),this.destination.complete()},e.prototype._next=function(t){var e=!1;try{e=this.predicate.call(this.thisArg,t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e||this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(v.a);function Xt(){return function(t){return t.lift(new Ht)}}var Ht=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Qt(t))},t}(),Qt=function(t){function e(e){var n=t.call(this,e)||this;return n.hasCompleted=!1,n.hasSubscription=!1,n}return r.a(e,t),e.prototype._next=function(t){this.hasSubscription||(this.hasSubscription=!0,this.add(Object(o.a)(this,t)))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete()},e.prototype.notifyComplete=function(t){this.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(i.a),Jt=n(10);function Kt(t,e){return e?function(n){return n.pipe(Kt(function(n,r){return Object(U.a)(t(n,r)).pipe(Object(Jt.a)(function(t,i){return e(n,t,r,i)}))}))}:function(e){return e.lift(new Zt(t))}}var Zt=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new te(t,this.project))},t}(),te=function(t){function e(e,n){var r=t.call(this,e)||this;return r.project=n,r.hasSubscription=!1,r.hasCompleted=!1,r.index=0,r}return r.a(e,t),e.prototype._next=function(t){this.hasSubscription||this.tryNext(t)},e.prototype.tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.hasSubscription=!0,this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=new V.a(this,void 0,void 0);this.destination.add(r),Object(o.a)(this,t,e,n,r)},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(i.a);function ee(t,e,n){return void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=void 0),e=(e||0)<1?Number.POSITIVE_INFINITY:e,function(r){return r.lift(new ne(t,e,n))}}var ne=function(){function t(t,e,n){this.project=t,this.concurrent=e,this.scheduler=n}return t.prototype.call=function(t,e){return e.subscribe(new re(t,this.project,this.concurrent,this.scheduler))},t}(),re=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.project=n,o.concurrent=r,o.scheduler=i,o.index=0,o.active=0,o.hasCompleted=!1,r<Number.POSITIVE_INFINITY&&(o.buffer=[]),o}return r.a(e,t),e.dispatch=function(t){var e=t.subscriber,n=t.result,r=t.value,i=t.index;e.subscribeToProjection(n,r,i)},e.prototype._next=function(t){var n=this.destination;if(n.closed)this._complete();else{var r=this.index++;if(this.active<this.concurrent){n.next(t);try{var i=(0,this.project)(t,r);if(this.scheduler){var o={subscriber:this,result:i,value:t,index:r};this.destination.add(this.scheduler.schedule(e.dispatch,0,o))}else this.subscribeToProjection(i,t,r)}catch(t){n.error(t)}}else this.buffer.push(t)}},e.prototype.subscribeToProjection=function(t,e,n){this.active++,this.destination.add(Object(o.a)(this,t,e,n))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasCompleted&&0===this.active&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this._next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.destination.remove(t),this.active--,e&&e.length>0&&this._next(e.shift()),this.hasCompleted&&0===this.active&&this.destination.complete()},e}(i.a);function ie(t){return function(e){return e.lift(new oe(t))}}var oe=function(){function t(t){this.callback=t}return t.prototype.call=function(t,e){return e.subscribe(new se(t,this.callback))},t}(),se=function(t){function e(e,n){var r=t.call(this,e)||this;return r.add(new k.a(n)),r}return r.a(e,t),e}(v.a);function ue(t,e){if("function"!=typeof t)throw new TypeError("predicate is not a function");return function(n){return n.lift(new ae(t,n,!1,e))}}var ae=function(){function t(t,e,n,r){this.predicate=t,this.source=e,this.yieldIndex=n,this.thisArg=r}return t.prototype.call=function(t,e){return e.subscribe(new ce(t,this.predicate,this.source,this.yieldIndex,this.thisArg))},t}(),ce=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.predicate=n,s.source=r,s.yieldIndex=i,s.thisArg=o,s.index=0,s}return r.a(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete(),this.unsubscribe()},e.prototype._next=function(t){var e=this.predicate,n=this.thisArg,r=this.index++;try{e.call(n||this,t,r,this.source)&&this.notifyComplete(this.yieldIndex?r:t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.notifyComplete(this.yieldIndex?-1:void 0)},e}(v.a);function he(t,e){return function(n){return n.lift(new ae(t,n,!0,e))}}var fe=n(21);function le(t,e){var n=arguments.length>=2;return function(r){return r.pipe(t?Object(Tt.a)(function(e,n){return t(e,n,r)}):fe.a,Bt(1),n?st(e):Mt(function(){return new Pt.a}))}}var pe=n(77);function de(){return function(t){return t.lift(new ve)}}var ve=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new be(t))},t}(),be=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e.prototype._next=function(t){},e}(v.a);function ye(){return function(t){return t.lift(new me)}}var me=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new ge(t))},t}(),ge=function(t){function e(e){return t.call(this,e)||this}return r.a(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype._next=function(t){this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(v.a);function xe(t){return function(e){return 0===t?Object(Lt.b)():e.lift(new we(t))}}var we=function(){function t(t){if(this.total=t,this.total<0)throw new At.a}return t.prototype.call=function(t,e){return e.subscribe(new _e(t,this.total))},t}(),_e=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.ring=new Array,r.count=0,r}return r.a(e,t),e.prototype._next=function(t){var e=this.ring,n=this.total,r=this.count++;e.length<n?e.push(t):e[r%n]=t},e.prototype._complete=function(){var t=this.destination,e=this.count;if(e>0)for(var n=this.count>=this.total?this.total:this.count,r=this.ring,i=0;i<n;i++){var o=e++%n;t.next(r[o])}t.complete()},e}(v.a);function Ee(t,e){var n=arguments.length>=2;return function(r){return r.pipe(t?Object(Tt.a)(function(e,n){return t(e,n,r)}):fe.a,xe(1),n?st(e):Mt(function(){return new Pt.a}))}}function Se(t){return function(e){return e.lift(new je(t))}}var je=function(){function t(t){this.value=t}return t.prototype.call=function(t,e){return e.subscribe(new Oe(t,this.value))},t}(),Oe=function(t){function e(e,n){var r=t.call(this,e)||this;return r.value=n,r}return r.a(e,t),e.prototype._next=function(t){this.destination.next(this.value)},e}(v.a);function Ne(){return function(t){return t.lift(new ke)}}var ke=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Ce(t))},t}(),Ce=function(t){function e(e){return t.call(this,e)||this}return r.a(e,t),e.prototype._next=function(t){this.destination.next(ht.a.createNext(t))},e.prototype._error=function(t){var e=this.destination;e.next(ht.a.createError(t)),e.complete()},e.prototype._complete=function(){var t=this.destination;t.next(ht.a.createComplete()),t.complete()},e}(v.a);function Ie(t,e){var n=!1;return arguments.length>=2&&(n=!0),function(r){return r.lift(new Ae(t,e,n))}}var Ae=function(){function t(t,e,n){void 0===n&&(n=!1),this.accumulator=t,this.seed=e,this.hasSeed=n}return t.prototype.call=function(t,e){return e.subscribe(new Te(t,this.accumulator,this.seed,this.hasSeed))},t}(),Te=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.accumulator=n,o._seed=r,o.hasSeed=i,o.index=0,o}return r.a(e,t),Object.defineProperty(e.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),e.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.accumulator(this.seed,t,n)}catch(t){this.destination.error(t)}this.seed=e,this.destination.next(e)},e}(v.a),Pe=n(48);function Me(t,e){return arguments.length>=2?function(n){return Object(Pe.a)(Ie(t,e),xe(1),st(e))(n)}:function(e){return Object(Pe.a)(Ie(function(e,n,r){return t(e,n,r+1)}),xe(1))(e)}}function Ve(t){return Me("function"==typeof t?function(e,n){return t(e,n)>0?e:n}:function(t,e){return t>e?t:e})}var De=n(102);function Fe(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(De.a.apply(void 0,[e].concat(t)))}}var Le=n(62);function Be(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?Object(W.a)(function(){return t},e,n):("number"==typeof e&&(n=e),Object(W.a)(function(){return t},n))}function Re(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),function(r){return r.lift(new ze(t,e,n))}}var ze=function(){function t(t,e,n){this.accumulator=t,this.seed=e,this.concurrent=n}return t.prototype.call=function(t,e){return e.subscribe(new Ue(t,this.accumulator,this.seed,this.concurrent))},t}(),Ue=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.accumulator=n,o.acc=r,o.concurrent=i,o.hasValue=!1,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return r.a(e,t),e.prototype._next=function(t){if(this.active<this.concurrent){var e=this.index++,n=this.destination,r=void 0;try{r=(0,this.accumulator)(this.acc,t,e)}catch(t){return n.error(t)}this.active++,this._innerSub(r,t,e)}else this.buffer.push(t)},e.prototype._innerSub=function(t,e,n){var r=new V.a(this,void 0,void 0);this.destination.add(r),Object(o.a)(this,t,e,n,r)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete()),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.destination;this.acc=e,this.hasValue=!0,o.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.destination.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete())},e}(i.a);function Ye(t){return Me("function"==typeof t?function(e,n){return t(e,n)<0?e:n}:function(t,e){return t<e?t:e})}var $e=n(97);function Ge(t,e){return function(n){var r;if(r="function"==typeof t?t:function(){return t},"function"==typeof e)return n.lift(new qe(r,e));var i=Object.create(n,$e.b);return i.source=n,i.subjectFactory=r,i}}var qe=function(){function t(t,e){this.subjectFactory=t,this.selector=e}return t.prototype.call=function(t,e){var n=this.selector,r=this.subjectFactory(),i=n(r).subscribe(t);return i.add(e.subscribe(r)),i},t}(),We=n(99);function Xe(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 1===t.length&&Object(z.a)(t[0])&&(t=t[0]),function(e){return e.lift(new He(t))}}var He=function(){function t(t){this.nextSources=t}return t.prototype.call=function(t,e){return e.subscribe(new Qe(t,this.nextSources))},t}(),Qe=function(t){function e(e,n){var r=t.call(this,e)||this;return r.destination=e,r.nextSources=n,r}return r.a(e,t),e.prototype.notifyError=function(t,e){this.subscribeToNextSource()},e.prototype.notifyComplete=function(t){this.subscribeToNextSource()},e.prototype._error=function(t){this.subscribeToNextSource(),this.unsubscribe()},e.prototype._complete=function(){this.subscribeToNextSource(),this.unsubscribe()},e.prototype.subscribeToNextSource=function(){var t=this.nextSources.shift();if(t){var e=new V.a(this,void 0,void 0);this.destination.add(e),Object(o.a)(this,t,void 0,void 0,e)}else this.destination.complete()},e}(i.a);function Je(){return function(t){return t.lift(new Ke)}}var Ke=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Ze(t))},t}(),Ze=function(t){function e(e){var n=t.call(this,e)||this;return n.hasPrev=!1,n}return r.a(e,t),e.prototype._next=function(t){var e;this.hasPrev?e=[this.prev,t]:this.hasPrev=!0,this.prev=t,e&&this.destination.next(e)},e}(v.a),tn=n(111);function en(t,e){return function(n){return[Object(Tt.a)(t,e)(n),Object(Tt.a)(Object(tn.a)(t,e))(n)]}}function nn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.length;if(0===n)throw new Error("list of properties cannot be empty.");return function(e){return Object(Jt.a)(function(t,e){return function(n){for(var r=n,i=0;i<e;i++){var o=r[t[i]];if(void 0===o)return;r=o}return r}}(t,n))(e)}}var rn=n(6);function on(t){return t?Ge(function(){return new rn.a},t):Ge(new rn.a)}var sn=n(98);function un(t){return function(e){return Ge(new sn.a(t))(e)}}var an=n(36);function cn(){return function(t){return Ge(new an.a)(t)}}var hn=n(59);function fn(t,e,n,r){n&&"function"!=typeof n&&(r=n);var i="function"==typeof n?n:void 0,o=new hn.a(t,e,r);return function(t){return Ge(function(){return o},i)(t)}}var ln=n(103);function pn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return 1===t.length&&Object(z.a)(t[0])&&(t=t[0]),e.lift.call(ln.a.apply(void 0,[e].concat(t)))}}function dn(t){return void 0===t&&(t=-1),function(e){return 0===t?Object(Lt.b)():t<0?e.lift(new vn(-1,e)):e.lift(new vn(t-1,e))}}var vn=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new bn(t,this.count,this.source))},t}(),bn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.count=n,i.source=r,i}return r.a(e,t),e.prototype.complete=function(){if(!this.isStopped){var e=this.source,n=this.count;if(0===n)return t.prototype.complete.call(this);n>-1&&(this.count=n-1),e.subscribe(this._unsubscribeAndRecycle())}},e}(v.a);function yn(t){return function(e){return e.lift(new mn(t))}}var mn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new gn(t,this.notifier,e))},t}(),gn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.notifier=n,i.source=r,i.sourceIsBeingSubscribedTo=!0,i}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.sourceIsBeingSubscribedTo=!0,this.source.subscribe(this)},e.prototype.notifyComplete=function(e){if(!1===this.sourceIsBeingSubscribedTo)return t.prototype.complete.call(this)},e.prototype.complete=function(){if(this.sourceIsBeingSubscribedTo=!1,!this.isStopped){if(this.retries||this.subscribeToRetries(),!this.retriesSubscription||this.retriesSubscription.closed)return t.prototype.complete.call(this);this._unsubscribeAndRecycle(),this.notifications.next()}},e.prototype._unsubscribe=function(){var t=this.notifications,e=this.retriesSubscription;t&&(t.unsubscribe(),this.notifications=null),e&&(e.unsubscribe(),this.retriesSubscription=null),this.retries=null},e.prototype._unsubscribeAndRecycle=function(){var e=this._unsubscribe;return this._unsubscribe=null,t.prototype._unsubscribeAndRecycle.call(this),this._unsubscribe=e,this},e.prototype.subscribeToRetries=function(){var e;this.notifications=new rn.a;try{e=(0,this.notifier)(this.notifications)}catch(e){return t.prototype.complete.call(this)}this.retries=e,this.retriesSubscription=Object(o.a)(this,e)},e}(i.a);function xn(t){return void 0===t&&(t=-1),function(e){return e.lift(new wn(t,e))}}var wn=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new _n(t,this.count,this.source))},t}(),_n=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.count=n,i.source=r,i}return r.a(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=this.source,r=this.count;if(0===r)return t.prototype.error.call(this,e);r>-1&&(this.count=r-1),n.subscribe(this._unsubscribeAndRecycle())}},e}(v.a);function En(t){return function(e){return e.lift(new Sn(t,e))}}var Sn=function(){function t(t,e){this.notifier=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new jn(t,this.notifier,this.source))},t}(),jn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.notifier=n,i.source=r,i}return r.a(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=this.errors,r=this.retries,i=this.retriesSubscription;if(r)this.errors=null,this.retriesSubscription=null;else{n=new rn.a;try{r=(0,this.notifier)(n)}catch(e){return t.prototype.error.call(this,e)}i=Object(o.a)(this,r)}this._unsubscribeAndRecycle(),this.errors=n,this.retries=r,this.retriesSubscription=i,n.next(e)}},e.prototype._unsubscribe=function(){var t=this.errors,e=this.retriesSubscription;t&&(t.unsubscribe(),this.errors=null),e&&(e.unsubscribe(),this.retriesSubscription=null),this.retries=null},e.prototype.notifyNext=function(t,e,n,r,i){var o=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=o,this.source.subscribe(this)},e}(i.a),On=n(58);function Nn(t){return function(e){return e.lift(new kn(t))}}var kn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var n=new Cn(t),r=e.subscribe(n);return r.add(Object(o.a)(n,this.notifier)),r},t}(),Cn=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.hasValue=!1,e}return r.a(e,t),e.prototype._next=function(t){this.value=t,this.hasValue=!0},e.prototype.notifyNext=function(t,e,n,r,i){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))},e}(i.a);function In(t,e){return void 0===e&&(e=c.a),function(n){return n.lift(new An(t,e))}}var An=function(){function t(t,e){this.period=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new Tn(t,this.period,this.scheduler))},t}(),Tn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.period=n,i.scheduler=r,i.hasValue=!1,i.add(r.schedule(Pn,n,{subscriber:i,period:n})),i}return r.a(e,t),e.prototype._next=function(t){this.lastValue=t,this.hasValue=!0},e.prototype.notifyNext=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.lastValue))},e}(v.a);function Pn(t){var e=t.subscriber,n=t.period;e.notifyNext(),this.schedule(t,n)}function Mn(t,e){return function(n){return n.lift(new Vn(t,e))}}var Vn=function(){function t(t,e){this.compareTo=t,this.comparator=e}return t.prototype.call=function(t,e){return e.subscribe(new Dn(t,this.compareTo,this.comparator))},t}(),Dn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.compareTo=n,i.comparator=r,i._a=[],i._b=[],i._oneComplete=!1,i.destination.add(n.subscribe(new Fn(e,i))),i}return r.a(e,t),e.prototype._next=function(t){this._oneComplete&&0===this._b.length?this.emit(!1):(this._a.push(t),this.checkValues())},e.prototype._complete=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0,this.unsubscribe()},e.prototype.checkValues=function(){for(var t=this._a,e=this._b,n=this.comparator;t.length>0&&e.length>0;){var r=t.shift(),i=e.shift(),o=!1;try{o=n?n(r,i):r===i}catch(t){this.destination.error(t)}o||this.emit(!1)}},e.prototype.emit=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype.nextB=function(t){this._oneComplete&&0===this._a.length?this.emit(!1):(this._b.push(t),this.checkValues())},e.prototype.completeB=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0},e}(v.a),Fn=function(t){function e(e,n){var r=t.call(this,e)||this;return r.parent=n,r}return r.a(e,t),e.prototype._next=function(t){this.parent.nextB(t)},e.prototype._error=function(t){this.parent.error(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.completeB(),this.unsubscribe()},e}(v.a);function Ln(){return new rn.a}function Bn(){return function(t){return Object(On.a)()(Ge(Ln)(t))}}function Rn(t,e,n){var r;return r=t&&"object"==typeof t?t:{bufferSize:t,windowTime:e,refCount:!1,scheduler:n},function(t){return t.lift(function(t){var e,n,r=t.bufferSize,i=void 0===r?Number.POSITIVE_INFINITY:r,o=t.windowTime,s=void 0===o?Number.POSITIVE_INFINITY:o,u=t.refCount,a=t.scheduler,c=0,h=!1,f=!1;return function(t){c++,e&&!h||(h=!1,e=new hn.a(i,s,a),n=t.subscribe({next:function(t){e.next(t)},error:function(t){h=!0,e.error(t)},complete:function(){f=!0,e.complete()}}));var r=e.subscribe(this);this.add(function(){c--,r.unsubscribe(),n&&!f&&u&&0===c&&(n.unsubscribe(),n=void 0,e=void 0)})}}(r))}}function zn(t){return function(e){return e.lift(new Un(t,e))}}var Un=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Yn(t,this.predicate,this.source))},t}(),Yn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.source=r,i.seenValue=!1,i.index=0,i}return r.a(e,t),e.prototype.applySingleValue=function(t){this.seenValue?this.destination.error("Sequence contains more than one element"):(this.seenValue=!0,this.singleValue=t)},e.prototype._next=function(t){var e=this.index++;this.predicate?this.tryNext(t,e):this.applySingleValue(t)},e.prototype.tryNext=function(t,e){try{this.predicate(t,e,this.source)&&this.applySingleValue(t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){var t=this.destination;this.index>0?(t.next(this.seenValue?this.singleValue:void 0),t.complete()):t.error(new Pt.a)},e}(v.a);function $n(t){return function(e){return e.lift(new Gn(t))}}var Gn=function(){function t(t){this.total=t}return t.prototype.call=function(t,e){return e.subscribe(new qn(t,this.total))},t}(),qn=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.count=0,r}return r.a(e,t),e.prototype._next=function(t){++this.count>this.total&&this.destination.next(t)},e}(v.a);function Wn(t){return function(e){return e.lift(new Xn(t))}}var Xn=function(){function t(t){if(this._skipCount=t,this._skipCount<0)throw new At.a}return t.prototype.call=function(t,e){return 0===this._skipCount?e.subscribe(new v.a(t)):e.subscribe(new Hn(t,this._skipCount))},t}(),Hn=function(t){function e(e,n){var r=t.call(this,e)||this;return r._skipCount=n,r._count=0,r._ring=new Array(n),r}return r.a(e,t),e.prototype._next=function(t){var e=this._skipCount,n=this._count++;if(n<e)this._ring[n]=t;else{var r=n%e,i=this._ring,o=i[r];i[r]=t,this.destination.next(o)}},e}(v.a);function Qn(t){return function(e){return e.lift(new Jn(t))}}var Jn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new Kn(t,this.notifier))},t}(),Kn=function(t){function e(e,n){var r=t.call(this,e)||this;r.hasValue=!1;var i=new V.a(r,void 0,void 0);return r.add(i),r.innerSubscription=i,Object(o.a)(r,n,void 0,void 0,i),r}return r.a(e,t),e.prototype._next=function(e){this.hasValue&&t.prototype._next.call(this,e)},e.prototype.notifyNext=function(t,e,n,r,i){this.hasValue=!0,this.innerSubscription&&this.innerSubscription.unsubscribe()},e.prototype.notifyComplete=function(){},e}(i.a);function Zn(t){return function(e){return e.lift(new tr(t))}}var tr=function(){function t(t){this.predicate=t}return t.prototype.call=function(t,e){return e.subscribe(new er(t,this.predicate))},t}(),er=function(t){function e(e,n){var r=t.call(this,e)||this;return r.predicate=n,r.skipping=!0,r.index=0,r}return r.a(e,t),e.prototype._next=function(t){var e=this.destination;this.skipping&&this.tryCallPredicate(t),this.skipping||e.next(t)},e.prototype.tryCallPredicate=function(t){try{var e=this.predicate(t,this.index++);this.skipping=Boolean(e)}catch(t){this.destination.error(t)}},e}(v.a);function nr(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return Object(x.a)(n)?(t.pop(),function(e){return Object($.a)(t,e,n)}):function(e){return Object($.a)(t,e)}}var rr=n(68),ir=n(38),or=function(t){function e(e,n,r){void 0===n&&(n=0),void 0===r&&(r=rr.a);var i=t.call(this)||this;return i.source=e,i.delayTime=n,i.scheduler=r,(!Object(ir.a)(n)||n<0)&&(i.delayTime=0),r&&"function"==typeof r.schedule||(i.scheduler=rr.a),i}return r.a(e,t),e.create=function(t,n,r){return void 0===n&&(n=0),void 0===r&&(r=rr.a),new e(t,n,r)},e.dispatch=function(t){var e=t.source,n=t.subscriber;return this.add(e.subscribe(n))},e.prototype._subscribe=function(t){var n=this.delayTime,r=this.source;return this.scheduler.schedule(e.dispatch,n,{source:r,subscriber:t})},e}(vt.a);function sr(t,e){return void 0===e&&(e=0),function(n){return n.lift(new ur(t,e))}}var ur=function(){function t(t,e){this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return new or(e,this.delay,this.scheduler).subscribe(t)},t}();function ar(t,e){return"function"==typeof e?function(n){return n.pipe(ar(function(n,r){return Object(U.a)(t(n,r)).pipe(Object(Jt.a)(function(t,i){return e(n,t,r,i)}))}))}:function(e){return e.lift(new cr(t))}}var cr=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new hr(t,this.project))},t}(),hr=function(t){function e(e,n){var r=t.call(this,e)||this;return r.project=n,r.index=0,r}return r.a(e,t),e.prototype._next=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=this.innerSubscription;r&&r.unsubscribe();var i=new V.a(this,void 0,void 0);this.destination.add(i),this.innerSubscription=Object(o.a)(this,t,e,n,i)},e.prototype._complete=function(){var e=this.innerSubscription;e&&!e.closed||t.prototype._complete.call(this),this.unsubscribe()},e.prototype._unsubscribe=function(){this.innerSubscription=null},e.prototype.notifyComplete=function(e){this.destination.remove(e),this.innerSubscription=null,this.isStopped&&t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e}(i.a);function fr(){return ar(fe.a)}function lr(t,e){return e?ar(function(){return t},e):ar(function(){return t})}function pr(t){return function(e){return e.lift(new dr(t))}}var dr=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var n=new vr(t),r=Object(o.a)(n,this.notifier);return r&&!n.seenValue?(n.add(r),e.subscribe(n)):n},t}(),vr=function(t){function e(e){var n=t.call(this,e)||this;return n.seenValue=!1,n}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.seenValue=!0,this.complete()},e.prototype.notifyComplete=function(){},e}(i.a);function br(t,e){return void 0===e&&(e=!1),function(n){return n.lift(new yr(t,e))}}var yr=function(){function t(t,e){this.predicate=t,this.inclusive=e}return t.prototype.call=function(t,e){return e.subscribe(new mr(t,this.predicate,this.inclusive))},t}(),mr=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.inclusive=r,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){var e,n=this.destination;try{e=this.predicate(t,this.index++)}catch(t){return void n.error(t)}this.nextOrComplete(t,e)},e.prototype.nextOrComplete=function(t,e){var n=this.destination;Boolean(e)?n.next(t):(this.inclusive&&n.next(t),n.complete())},e}(v.a),gr=n(17),xr=n(31);function wr(t,e,n){return function(r){return r.lift(new _r(t,e,n))}}var _r=function(){function t(t,e,n){this.nextOrObserver=t,this.error=e,this.complete=n}return t.prototype.call=function(t,e){return e.subscribe(new Er(t,this.nextOrObserver,this.error,this.complete))},t}(),Er=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o._tapNext=gr.a,o._tapError=gr.a,o._tapComplete=gr.a,o._tapError=r||gr.a,o._tapComplete=i||gr.a,Object(xr.a)(n)?(o._context=o,o._tapNext=n):n&&(o._context=n,o._tapNext=n.next||gr.a,o._tapError=n.error||gr.a,o._tapComplete=n.complete||gr.a),o}return r.a(e,t),e.prototype._next=function(t){try{this._tapNext.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.next(t)},e.prototype._error=function(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)},e.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()},e}(v.a),Sr={leading:!0,trailing:!1};function jr(t,e){return void 0===e&&(e=Sr),function(n){return n.lift(new Or(t,e.leading,e.trailing))}}var Or=function(){function t(t,e,n){this.durationSelector=t,this.leading=e,this.trailing=n}return t.prototype.call=function(t,e){return e.subscribe(new Nr(t,this.durationSelector,this.leading,this.trailing))},t}(),Nr=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.destination=e,o.durationSelector=n,o._leading=r,o._trailing=i,o._hasValue=!1,o}return r.a(e,t),e.prototype._next=function(t){this._hasValue=!0,this._sendValue=t,this._throttled||(this._leading?this.send():this.throttle(t))},e.prototype.send=function(){var t=this._hasValue,e=this._sendValue;t&&(this.destination.next(e),this.throttle(e)),this._hasValue=!1,this._sendValue=null},e.prototype.throttle=function(t){var e=this.tryDurationSelector(t);e&&this.add(this._throttled=Object(o.a)(this,e))},e.prototype.tryDurationSelector=function(t){try{return this.durationSelector(t)}catch(t){return this.destination.error(t),null}},e.prototype.throttlingDone=function(){var t=this._throttled,e=this._trailing;t&&t.unsubscribe(),this._throttled=null,e&&this.send()},e.prototype.notifyNext=function(t,e,n,r,i){this.throttlingDone()},e.prototype.notifyComplete=function(){this.throttlingDone()},e}(i.a);function kr(t,e,n){return void 0===e&&(e=c.a),void 0===n&&(n=Sr),function(r){return r.lift(new Cr(t,e,n.leading,n.trailing))}}var Cr=function(){function t(t,e,n,r){this.duration=t,this.scheduler=e,this.leading=n,this.trailing=r}return t.prototype.call=function(t,e){return e.subscribe(new Ir(t,this.duration,this.scheduler,this.leading,this.trailing))},t}(),Ir=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.duration=n,s.scheduler=r,s.leading=i,s.trailing=o,s._hasTrailingValue=!1,s._trailingValue=null,s}return r.a(e,t),e.prototype._next=function(t){this.throttled?this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(Ar,this.duration,{subscriber:this})),this.leading?this.destination.next(t):this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0))},e.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},e.prototype.clearThrottle=function(){var t=this.throttled;t&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),t.unsubscribe(),this.remove(t),this.throttled=null)},e}(v.a);function Ar(t){t.subscriber.clearThrottle()}var Tr=n(63);function Pr(t){return void 0===t&&(t=c.a),function(e){return Object(Tr.a)(function(){return e.pipe(Ie(function(e,n){var r=e.current;return{value:n,current:t.now(),last:r}},{current:t.now(),value:void 0,last:void 0}),Object(Jt.a)(function(t){var e=t.current,n=t.last,r=t.value;return new Mr(r,e-n)}))})}}var Mr=function(){return function(t,e){this.value=t,this.interval=e}}(),Vr=n(100);function Dr(t,e,n){return void 0===n&&(n=c.a),function(r){var i=ct(t),o=i?+t-n.now():Math.abs(t);return r.lift(new Fr(o,i,e,n))}}var Fr=function(){function t(t,e,n,r){this.waitFor=t,this.absoluteTimeout=e,this.withObservable=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new Lr(t,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},t}(),Lr=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.absoluteTimeout=n,s.waitFor=r,s.withObservable=i,s.scheduler=o,s.action=null,s.scheduleTimeout(),s}return r.a(e,t),e.dispatchTimeout=function(t){var e=t.withObservable;t._unsubscribeAndRecycle(),t.add(Object(o.a)(t,e))},e.prototype.scheduleTimeout=function(){var t=this.action;t?this.action=t.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(e.dispatchTimeout,this.waitFor,this))},e.prototype._next=function(e){this.absoluteTimeout||this.scheduleTimeout(),t.prototype._next.call(this,e)},e.prototype._unsubscribe=function(){this.action=null,this.scheduler=null,this.withObservable=null},e}(i.a),Br=n(60);function Rr(t,e){return void 0===e&&(e=c.a),Dr(t,Object(Br.a)(new Vr.a),e)}function zr(t){return void 0===t&&(t=c.a),Object(Jt.a)(function(e){return new Ur(e,t.now())})}var Ur=function(){return function(t,e){this.value=t,this.timestamp=e}}();function Yr(t,e,n){return 0===n?[e]:(t.push(e),t)}function $r(){return Me(Yr,[])}function Gr(t){return function(e){return e.lift(new qr(t))}}var qr=function(){function t(t){this.windowBoundaries=t}return t.prototype.call=function(t,e){var n=new Wr(t),r=e.subscribe(n);return r.closed||n.add(Object(o.a)(n,this.windowBoundaries)),r},t}(),Wr=function(t){function e(e){var n=t.call(this,e)||this;return n.window=new rn.a,e.next(n.window),n}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.openWindow()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){this._complete()},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t)},e.prototype._complete=function(){this.window.complete(),this.destination.complete()},e.prototype._unsubscribe=function(){this.window=null},e.prototype.openWindow=function(){var t=this.window;t&&t.complete();var e=this.destination,n=this.window=new rn.a;e.next(n)},e}(i.a);function Xr(t,e){return void 0===e&&(e=0),function(n){return n.lift(new Hr(t,e))}}var Hr=function(){function t(t,e){this.windowSize=t,this.startWindowEvery=e}return t.prototype.call=function(t,e){return e.subscribe(new Qr(t,this.windowSize,this.startWindowEvery))},t}(),Qr=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.destination=e,i.windowSize=n,i.startWindowEvery=r,i.windows=[new rn.a],i.count=0,e.next(i.windows[0]),i}return r.a(e,t),e.prototype._next=function(t){for(var e=this.startWindowEvery>0?this.startWindowEvery:this.windowSize,n=this.destination,r=this.windowSize,i=this.windows,o=i.length,s=0;s<o&&!this.closed;s++)i[s].next(t);var u=this.count-r+1;if(u>=0&&u%e==0&&!this.closed&&i.shift().complete(),++this.count%e==0&&!this.closed){var a=new rn.a;i.push(a),n.next(a)}},e.prototype._error=function(t){var e=this.windows;if(e)for(;e.length>0&&!this.closed;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){var t=this.windows;if(t)for(;t.length>0&&!this.closed;)t.shift().complete();this.destination.complete()},e.prototype._unsubscribe=function(){this.count=0,this.windows=null},e}(v.a);function Jr(t){var e=c.a,n=null,r=Number.POSITIVE_INFINITY;return Object(x.a)(arguments[3])&&(e=arguments[3]),Object(x.a)(arguments[2])?e=arguments[2]:Object(ir.a)(arguments[2])&&(r=arguments[2]),Object(x.a)(arguments[1])?e=arguments[1]:Object(ir.a)(arguments[1])&&(n=arguments[1]),function(i){return i.lift(new Kr(t,n,r,e))}}var Kr=function(){function t(t,e,n,r){this.windowTimeSpan=t,this.windowCreationInterval=e,this.maxWindowSize=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new ti(t,this.windowTimeSpan,this.windowCreationInterval,this.maxWindowSize,this.scheduler))},t}(),Zr=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._numberOfNextedValues=0,e}return r.a(e,t),e.prototype.next=function(e){this._numberOfNextedValues++,t.prototype.next.call(this,e)},Object.defineProperty(e.prototype,"numberOfNextedValues",{get:function(){return this._numberOfNextedValues},enumerable:!0,configurable:!0}),e}(rn.a),ti=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;s.destination=e,s.windowTimeSpan=n,s.windowCreationInterval=r,s.maxWindowSize=i,s.scheduler=o,s.windows=[];var u=s.openWindow();if(null!==r&&r>=0){var a={subscriber:s,window:u,context:null},c={windowTimeSpan:n,windowCreationInterval:r,subscriber:s,scheduler:o};s.add(o.schedule(ri,n,a)),s.add(o.schedule(ni,r,c))}else{var h={subscriber:s,window:u,windowTimeSpan:n};s.add(o.schedule(ei,n,h))}return s}return r.a(e,t),e.prototype._next=function(t){for(var e=this.windows,n=e.length,r=0;r<n;r++){var i=e[r];i.closed||(i.next(t),i.numberOfNextedValues>=this.maxWindowSize&&this.closeWindow(i))}},e.prototype._error=function(t){for(var e=this.windows;e.length>0;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){for(var t=this.windows;t.length>0;){var e=t.shift();e.closed||e.complete()}this.destination.complete()},e.prototype.openWindow=function(){var t=new Zr;return this.windows.push(t),this.destination.next(t),t},e.prototype.closeWindow=function(t){t.complete();var e=this.windows;e.splice(e.indexOf(t),1)},e}(v.a);function ei(t){var e=t.subscriber,n=t.windowTimeSpan,r=t.window;r&&e.closeWindow(r),t.window=e.openWindow(),this.schedule(t,n)}function ni(t){var e=t.windowTimeSpan,n=t.subscriber,r=t.scheduler,i=t.windowCreationInterval,o=n.openWindow(),s={action:this,subscription:null},u={subscriber:n,window:o,context:s};s.subscription=r.schedule(ri,e,u),this.add(s.subscription),this.schedule(t,i)}function ri(t){var e=t.subscriber,n=t.window,r=t.context;r&&r.action&&r.subscription&&r.action.remove(r.subscription),e.closeWindow(n)}function ii(t,e){return function(n){return n.lift(new oi(t,e))}}var oi=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new si(t,this.openings,this.closingSelector))},t}(),si=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.openings=n,i.closingSelector=r,i.contexts=[],i.add(i.openSubscription=Object(o.a)(i,n,n)),i}return r.a(e,t),e.prototype._next=function(t){var e=this.contexts;if(e)for(var n=e.length,r=0;r<n;r++)e[r].window.next(t)},e.prototype._error=function(e){var n=this.contexts;if(this.contexts=null,n)for(var r=n.length,i=-1;++i<r;){var o=n[i];o.window.error(e),o.subscription.unsubscribe()}t.prototype._error.call(this,e)},e.prototype._complete=function(){var e=this.contexts;if(this.contexts=null,e)for(var n=e.length,r=-1;++r<n;){var i=e[r];i.window.complete(),i.subscription.unsubscribe()}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.contexts;if(this.contexts=null,t)for(var e=t.length,n=-1;++n<e;){var r=t[n];r.window.unsubscribe(),r.subscription.unsubscribe()}},e.prototype.notifyNext=function(t,e,n,r,i){if(t===this.openings){var s=void 0;try{s=(0,this.closingSelector)(e)}catch(t){return this.error(t)}var u=new rn.a,a=new k.a,c={window:u,subscription:a};this.contexts.push(c);var h=Object(o.a)(this,s,c);h.closed?this.closeWindow(this.contexts.length-1):(h.context=c,a.add(h)),this.destination.next(u)}else this.closeWindow(this.contexts.indexOf(t))},e.prototype.notifyError=function(t){this.error(t)},e.prototype.notifyComplete=function(t){t!==this.openSubscription&&this.closeWindow(this.contexts.indexOf(t.context))},e.prototype.closeWindow=function(t){if(-1!==t){var e=this.contexts,n=e[t],r=n.window,i=n.subscription;e.splice(t,1),r.complete(),i.unsubscribe()}},e}(i.a);function ui(t){return function(e){return e.lift(new ai(t))}}var ai=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new ci(t,this.closingSelector))},t}(),ci=function(t){function e(e,n){var r=t.call(this,e)||this;return r.destination=e,r.closingSelector=n,r.openWindow(),r}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.openWindow(i)},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){this.openWindow(t)},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t),this.unsubscribeClosingNotification()},e.prototype._complete=function(){this.window.complete(),this.destination.complete(),this.unsubscribeClosingNotification()},e.prototype.unsubscribeClosingNotification=function(){this.closingNotification&&this.closingNotification.unsubscribe()},e.prototype.openWindow=function(t){void 0===t&&(t=null),t&&(this.remove(t),t.unsubscribe());var e=this.window;e&&e.complete();var n,r=this.window=new rn.a;this.destination.next(r);try{n=(0,this.closingSelector)()}catch(t){return this.destination.error(t),void this.window.error(t)}this.add(this.closingNotification=Object(o.a)(this,n))},e}(i.a);function hi(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){var n;"function"==typeof t[t.length-1]&&(n=t.pop());var r=t;return e.lift(new fi(r,n))}}var fi=function(){function t(t,e){this.observables=t,this.project=e}return t.prototype.call=function(t,e){return e.subscribe(new li(t,this.observables,this.project))},t}(),li=function(t){function e(e,n,r){var i=t.call(this,e)||this;i.observables=n,i.project=r,i.toRespond=[];var s=n.length;i.values=new Array(s);for(var u=0;u<s;u++)i.toRespond.push(u);for(u=0;u<s;u++){var a=n[u];i.add(Object(o.a)(i,a,a,u))}return i}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.values[n]=e;var o=this.toRespond;if(o.length>0){var s=o.indexOf(n);-1!==s&&o.splice(s,1)}},e.prototype.notifyComplete=function(){},e.prototype._next=function(t){if(0===this.toRespond.length){var e=[t].concat(this.values);this.project?this._tryProject(e):this.destination.next(e)}},e.prototype._tryProject=function(t){var e;try{e=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(i.a),pi=n(64);function di(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(pi.b.apply(void 0,[e].concat(t)))}}function vi(t){return function(e){return e.lift(new pi.a(t))}}n.d(e,"audit",function(){return s}),n.d(e,"auditTime",function(){return f}),n.d(e,"buffer",function(){return l}),n.d(e,"bufferCount",function(){return b}),n.d(e,"bufferTime",function(){return w}),n.d(e,"bufferToggle",function(){return C}),n.d(e,"bufferWhen",function(){return T}),n.d(e,"catchError",function(){return D}),n.d(e,"combineAll",function(){return R}),n.d(e,"combineLatest",function(){return Y}),n.d(e,"concat",function(){return G}),n.d(e,"concatAll",function(){return q.a}),n.d(e,"concatMap",function(){return X}),n.d(e,"concatMapTo",function(){return H}),n.d(e,"count",function(){return Q}),n.d(e,"debounce",function(){return Z}),n.d(e,"debounceTime",function(){return nt}),n.d(e,"defaultIfEmpty",function(){return st}),n.d(e,"delay",function(){return ft}),n.d(e,"delayWhen",function(){return bt}),n.d(e,"dematerialize",function(){return wt}),n.d(e,"distinct",function(){return St}),n.d(e,"distinctUntilChanged",function(){return Nt}),n.d(e,"distinctUntilKeyChanged",function(){return It}),n.d(e,"elementAt",function(){return Ut}),n.d(e,"endWith",function(){return $t}),n.d(e,"every",function(){return Gt}),n.d(e,"exhaust",function(){return Xt}),n.d(e,"exhaustMap",function(){return Kt}),n.d(e,"expand",function(){return ee}),n.d(e,"filter",function(){return Tt.a}),n.d(e,"finalize",function(){return ie}),n.d(e,"find",function(){return ue}),n.d(e,"findIndex",function(){return he}),n.d(e,"first",function(){return le}),n.d(e,"groupBy",function(){return pe.b}),n.d(e,"ignoreElements",function(){return de}),n.d(e,"isEmpty",function(){return ye}),n.d(e,"last",function(){return Ee}),n.d(e,"map",function(){return Jt.a}),n.d(e,"mapTo",function(){return Se}),n.d(e,"materialize",function(){return Ne}),n.d(e,"max",function(){return Ve}),n.d(e,"merge",function(){return Fe}),n.d(e,"mergeAll",function(){return Le.a}),n.d(e,"mergeMap",function(){return W.a}),n.d(e,"flatMap",function(){return W.a}),n.d(e,"mergeMapTo",function(){return Be}),n.d(e,"mergeScan",function(){return Re}),n.d(e,"min",function(){return Ye}),n.d(e,"multicast",function(){return Ge}),n.d(e,"observeOn",function(){return We.b}),n.d(e,"onErrorResumeNext",function(){return Xe}),n.d(e,"pairwise",function(){return Je}),n.d(e,"partition",function(){return en}),n.d(e,"pluck",function(){return nn}),n.d(e,"publish",function(){return on}),n.d(e,"publishBehavior",function(){return un}),n.d(e,"publishLast",function(){return cn}),n.d(e,"publishReplay",function(){return fn}),n.d(e,"race",function(){return pn}),n.d(e,"reduce",function(){return Me}),n.d(e,"repeat",function(){return dn}),n.d(e,"repeatWhen",function(){return yn}),n.d(e,"retry",function(){return xn}),n.d(e,"retryWhen",function(){return En}),n.d(e,"refCount",function(){return On.a}),n.d(e,"sample",function(){return Nn}),n.d(e,"sampleTime",function(){return In}),n.d(e,"scan",function(){return Ie}),n.d(e,"sequenceEqual",function(){return Mn}),n.d(e,"share",function(){return Bn}),n.d(e,"shareReplay",function(){return Rn}),n.d(e,"single",function(){return zn}),n.d(e,"skip",function(){return $n}),n.d(e,"skipLast",function(){return Wn}),n.d(e,"skipUntil",function(){return Qn}),n.d(e,"skipWhile",function(){return Zn}),n.d(e,"startWith",function(){return nr}),n.d(e,"subscribeOn",function(){return sr}),n.d(e,"switchAll",function(){return fr}),n.d(e,"switchMap",function(){return ar}),n.d(e,"switchMapTo",function(){return lr}),n.d(e,"take",function(){return Bt}),n.d(e,"takeLast",function(){return xe}),n.d(e,"takeUntil",function(){return pr}),n.d(e,"takeWhile",function(){return br}),n.d(e,"tap",function(){return wr}),n.d(e,"throttle",function(){return jr}),n.d(e,"throttleTime",function(){return kr}),n.d(e,"throwIfEmpty",function(){return Mt}),n.d(e,"timeInterval",function(){return Pr}),n.d(e,"timeout",function(){return Rr}),n.d(e,"timeoutWith",function(){return Dr}),n.d(e,"timestamp",function(){return zr}),n.d(e,"toArray",function(){return $r}),n.d(e,"window",function(){return Gr}),n.d(e,"windowCount",function(){return Xr}),n.d(e,"windowTime",function(){return Jr}),n.d(e,"windowToggle",function(){return ii}),n.d(e,"windowWhen",function(){return ui}),n.d(e,"withLatestFrom",function(){return hi}),n.d(e,"zip",function(){return di}),n.d(e,"zipAll",function(){return vi})},function(t,e,n){"use strict";n.d(e,"a",function(){return c}),n.d(e,"b",function(){return f});var r=n(0),i=n(6),o=n(2),s=n(1),u=n(5),a=n(58),c=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return r.a(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new u.a).add(this.source.subscribe(new l(this.getSubject(),this))),t.closed&&(this._connection=null,t=u.a.EMPTY)),t},e.prototype.refCount=function(){return Object(a.a)()(this)},e}(o.a),h=c.prototype,f={operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:h._subscribe},_isComplete:{value:h._isComplete,writable:!0},getSubject:{value:h.getSubject},connect:{value:h.connect},refCount:{value:h.refCount}},l=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return r.a(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(i.b);s.a},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(0),i=n(6),o=n(26),s=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return r.a(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return n&&!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new o.a;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(i.a)},function(t,e,n){"use strict";n.d(e,"b",function(){return s}),n.d(e,"a",function(){return a});var r=n(0),i=n(1),o=n(20);function s(t,e){return void 0===e&&(e=0),function(n){return n.lift(new u(t,e))}}var u=function(){function t(t,e){void 0===e&&(e=0),this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return e.subscribe(new a(t,this.scheduler,this.delay))},t}(),a=function(t){function e(e,n,r){void 0===r&&(r=0);var i=t.call(this,e)||this;return i.scheduler=n,i.delay=r,i}return r.a(e,t),e.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new c(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(o.a.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(o.a.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(o.a.createComplete()),this.unsubscribe()},e}(i.a),c=function(){return function(t,e){this.notification=t,this.destination=e}}()},function(t,e,n){"use strict";function r(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}n.d(e,"a",function(){return i}),r.prototype=Object.create(Error.prototype);var i=r},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(62);function i(){return Object(r.a)(1)}},function(t,e,n){"use strict";n.d(e,"a",function(){return u});var r=n(2),i=n(11),o=n(62),s=n(34);function u(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Number.POSITIVE_INFINITY,u=null,a=t[t.length-1];return Object(i.a)(a)?(u=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(n=t.pop())):"number"==typeof a&&(n=t.pop()),null===u&&1===t.length&&t[0]instanceof r.a?t[0]:Object(o.a)(n)(Object(s.a)(t,u))}},function(t,e,n){"use strict";n.d(e,"a",function(){return a});var r=n(0),i=n(7),o=n(34),s=n(4),u=n(3);function a(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!Object(i.a)(t[0]))return t[0];t=t[0]}return Object(o.a)(t,void 0).lift(new c)}var c=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new h(t))},t}(),h=function(t){function e(e){var n=t.call(this,e)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return r.a(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var n=0;n<e&&!this.hasFirst;n++){var r=t[n],i=Object(u.a)(this,r,r,n);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},e.prototype.notifyNext=function(t,e,n,r,i){if(!this.hasFirst){this.hasFirst=!0;for(var o=0;o<this.subscriptions.length;o++)if(o!==n){var s=this.subscriptions[o];s.unsubscribe(),this.remove(s)}this.subscriptions=null}this.destination.next(e)},e}(s.a)},function(t,e,n){"use strict";n.d(e,"a",function(){return u});var r=n(2),i=n(8),o=n(38),s=n(11);function u(t,e,n){void 0===t&&(t=0);var u=-1;return Object(o.a)(e)?u=Number(e)<1?1:Number(e):Object(s.a)(e)&&(n=e),Object(s.a)(n)||(n=i.a),new r.a(function(e){var r=Object(o.a)(t)?t:+t-n.now();return n.schedule(a,r,{index:0,period:u,subscriber:e})})}function a(t){var e=t.index,n=t.period,r=t.subscriber;if(r.next(e),!r.closed){if(-1===n)return r.complete();t.index=e+1,this.schedule(t,n)}}},function(t,e,n){"use strict";var r=n(2),i=n(5),o=n(25);var s=n(67),u=n(22);var a=n(110),c=n(109);function h(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[o.a]}(t))return function(t,e){return new r.a(function(n){var r=new i.a;return r.add(e.schedule(function(){var i=t[o.a]();r.add(i.subscribe({next:function(t){r.add(e.schedule(function(){return n.next(t)}))},error:function(t){r.add(e.schedule(function(){return n.error(t)}))},complete:function(){r.add(e.schedule(function(){return n.complete()}))}}))})),r})}(t,e);if(Object(a.a)(t))return function(t,e){return new r.a(function(n){var r=new i.a;return r.add(e.schedule(function(){return t.then(function(t){r.add(e.schedule(function(){n.next(t),r.add(e.schedule(function(){return n.complete()}))}))},function(t){r.add(e.schedule(function(){return n.error(t)}))})})),r})}(t,e);if(Object(c.a)(t))return Object(s.a)(t,e);if(function(t){return t&&"function"==typeof t[u.a]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new r.a(function(n){var r,o=new i.a;return o.add(function(){r&&"function"==typeof r.return&&r.return()}),o.add(e.schedule(function(){r=t[u.a](),o.add(e.schedule(function(){if(!n.closed){var t,e;try{var i=r.next();t=i.value,e=i.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}}))})),o})}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}n.d(e,"a",function(){return h})},function(t,e,n){"use strict";var r=n(0),i=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return r.a(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},e}(n(37).a),o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e}(n(35).a);n.d(e,"a",function(){return s});var s=new o(i)},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(0),i=function(t){function e(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return r.a(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},e}(n(5).a)},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var r=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()}}},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var r=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t}},function(t,e,n){"use strict";function r(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";function r(t,e){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=t,n.thisArg=e,n}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";var r=n(23);t.exports=u;var i="\0",o="\0",s="";function u(t){this._isDirected=!r.has(t,"directed")||t.directed,this._isMultigraph=!!r.has(t,"multigraph")&&t.multigraph,this._isCompound=!!r.has(t,"compound")&&t.compound,this._label=void 0,this._defaultNodeLabelFn=r.constant(void 0),this._defaultEdgeLabelFn=r.constant(void 0),this._nodes={},this._isCompound&&(this._parent={},this._children={},this._children[o]={}),this._in={},this._preds={},this._out={},this._sucs={},this._edgeObjs={},this._edgeLabels={}}function a(t,e){t[e]?t[e]++:t[e]=1}function c(t,e){--t[e]||delete t[e]}function h(t,e,n,o){var u=""+e,a=""+n;if(!t&&u>a){var c=u;u=a,a=c}return u+s+a+s+(r.isUndefined(o)?i:o)}function f(t,e,n,r){var i=""+e,o=""+n;if(!t&&i>o){var s=i;i=o,o=s}var u={v:i,w:o};return r&&(u.name=r),u}function l(t,e){return h(t,e.v,e.w,e.name)}u.prototype._nodeCount=0,u.prototype._edgeCount=0,u.prototype.isDirected=function(){return this._isDirected},u.prototype.isMultigraph=function(){return this._isMultigraph},u.prototype.isCompound=function(){return this._isCompound},u.prototype.setGraph=function(t){return this._label=t,this},u.prototype.graph=function(){return this._label},u.prototype.setDefaultNodeLabel=function(t){return r.isFunction(t)||(t=r.constant(t)),this._defaultNodeLabelFn=t,this},u.prototype.nodeCount=function(){return this._nodeCount},u.prototype.nodes=function(){return r.keys(this._nodes)},u.prototype.sources=function(){var t=this;return r.filter(this.nodes(),function(e){return r.isEmpty(t._in[e])})},u.prototype.sinks=function(){var t=this;return r.filter(this.nodes(),function(e){return r.isEmpty(t._out[e])})},u.prototype.setNodes=function(t,e){var n=arguments,i=this;return r.each(t,function(t){n.length>1?i.setNode(t,e):i.setNode(t)}),this},u.prototype.setNode=function(t,e){return r.has(this._nodes,t)?(arguments.length>1&&(this._nodes[t]=e),this):(this._nodes[t]=arguments.length>1?e:this._defaultNodeLabelFn(t),this._isCompound&&(this._parent[t]=o,this._children[t]={},this._children[o][t]=!0),this._in[t]={},this._preds[t]={},this._out[t]={},this._sucs[t]={},++this._nodeCount,this)},u.prototype.node=function(t){return this._nodes[t]},u.prototype.hasNode=function(t){return r.has(this._nodes,t)},u.prototype.removeNode=function(t){var e=this;if(r.has(this._nodes,t)){var n=function(t){e.removeEdge(e._edgeObjs[t])};delete this._nodes[t],this._isCompound&&(this._removeFromParentsChildList(t),delete this._parent[t],r.each(this.children(t),function(t){e.setParent(t)}),delete this._children[t]),r.each(r.keys(this._in[t]),n),delete this._in[t],delete this._preds[t],r.each(r.keys(this._out[t]),n),delete this._out[t],delete this._sucs[t],--this._nodeCount}return this},u.prototype.setParent=function(t,e){if(!this._isCompound)throw new Error("Cannot set parent in a non-compound graph");if(r.isUndefined(e))e=o;else{for(var n=e+="";!r.isUndefined(n);n=this.parent(n))if(n===t)throw new Error("Setting "+e+" as parent of "+t+" would create a cycle");this.setNode(e)}return this.setNode(t),this._removeFromParentsChildList(t),this._parent[t]=e,this._children[e][t]=!0,this},u.prototype._removeFromParentsChildList=function(t){delete this._children[this._parent[t]][t]},u.prototype.parent=function(t){if(this._isCompound){var e=this._parent[t];if(e!==o)return e}},u.prototype.children=function(t){if(r.isUndefined(t)&&(t=o),this._isCompound){var e=this._children[t];if(e)return r.keys(e)}else{if(t===o)return this.nodes();if(this.hasNode(t))return[]}},u.prototype.predecessors=function(t){var e=this._preds[t];if(e)return r.keys(e)},u.prototype.successors=function(t){var e=this._sucs[t];if(e)return r.keys(e)},u.prototype.neighbors=function(t){var e=this.predecessors(t);if(e)return r.union(e,this.successors(t))},u.prototype.isLeaf=function(t){return 0===(this.isDirected()?this.successors(t):this.neighbors(t)).length},u.prototype.filterNodes=function(t){var e=new this.constructor({directed:this._isDirected,multigraph:this._isMultigraph,compound:this._isCompound});e.setGraph(this.graph());var n=this;r.each(this._nodes,function(n,r){t(r)&&e.setNode(r,n)}),r.each(this._edgeObjs,function(t){e.hasNode(t.v)&&e.hasNode(t.w)&&e.setEdge(t,n.edge(t))});var i={};return this._isCompound&&r.each(e.nodes(),function(t){e.setParent(t,function t(r){var o=n.parent(r);return void 0===o||e.hasNode(o)?(i[r]=o,o):o in i?i[o]:t(o)}(t))}),e},u.prototype.setDefaultEdgeLabel=function(t){return r.isFunction(t)||(t=r.constant(t)),this._defaultEdgeLabelFn=t,this},u.prototype.edgeCount=function(){return this._edgeCount},u.prototype.edges=function(){return r.values(this._edgeObjs)},u.prototype.setPath=function(t,e){var n=this,i=arguments;return r.reduce(t,function(t,r){return i.length>1?n.setEdge(t,r,e):n.setEdge(t,r),r}),this},u.prototype.setEdge=function(){var t,e,n,i,o=!1,s=arguments[0];"object"==typeof s&&null!==s&&"v"in s?(t=s.v,e=s.w,n=s.name,2===arguments.length&&(i=arguments[1],o=!0)):(t=s,e=arguments[1],n=arguments[3],arguments.length>2&&(i=arguments[2],o=!0)),t=""+t,e=""+e,r.isUndefined(n)||(n=""+n);var u=h(this._isDirected,t,e,n);if(r.has(this._edgeLabels,u))return o&&(this._edgeLabels[u]=i),this;if(!r.isUndefined(n)&&!this._isMultigraph)throw new Error("Cannot set a named edge when isMultigraph = false");this.setNode(t),this.setNode(e),this._edgeLabels[u]=o?i:this._defaultEdgeLabelFn(t,e,n);var c=f(this._isDirected,t,e,n);return t=c.v,e=c.w,Object.freeze(c),this._edgeObjs[u]=c,a(this._preds[e],t),a(this._sucs[t],e),this._in[e][u]=c,this._out[t][u]=c,this._edgeCount++,this},u.prototype.edge=function(t,e,n){var r=1===arguments.length?l(this._isDirected,arguments[0]):h(this._isDirected,t,e,n);return this._edgeLabels[r]},u.prototype.hasEdge=function(t,e,n){var i=1===arguments.length?l(this._isDirected,arguments[0]):h(this._isDirected,t,e,n);return r.has(this._edgeLabels,i)},u.prototype.removeEdge=function(t,e,n){var r=1===arguments.length?l(this._isDirected,arguments[0]):h(this._isDirected,t,e,n),i=this._edgeObjs[r];return i&&(t=i.v,e=i.w,delete this._edgeLabels[r],delete this._edgeObjs[r],c(this._preds[e],t),c(this._sucs[t],e),delete this._in[e][r],delete this._out[t][r],this._edgeCount--),this},u.prototype.inEdges=function(t,e){var n=this._in[t];if(n){var i=r.values(n);return e?r.filter(i,function(t){return t.v===e}):i}},u.prototype.outEdges=function(t,e){var n=this._out[t];if(n){var i=r.values(n);return e?r.filter(i,function(t){return t.w===e}):i}},u.prototype.nodeEdges=function(t,e){var n=this.inEdges(t,e);if(n)return n.concat(this.outEdges(t,e))}},function(t,e,n){var r=n(45)(n(28),"Map");t.exports=r},function(t,e,n){var r=n(212),i=n(219),o=n(221),s=n(222),u=n(223);function a(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}a.prototype.clear=r,a.prototype.delete=i,a.prototype.get=o,a.prototype.has=s,a.prototype.set=u,t.exports=a},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){var n=9007199254740991;t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=n}},function(t,e,n){(function(t){var r=n(134),i=e&&!e.nodeType&&e,o=i&&"object"==typeof t&&t&&!t.nodeType&&t,s=o&&o.exports===i&&r.process,u=function(){try{var t=o&&o.require&&o.require("util").types;return t||s&&s.binding&&s.binding("util")}catch(t){}}();t.exports=u}).call(this,n(116)(t))},function(t,e,n){var r=n(88),i=n(229),o=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return i(t);var e=[];for(var n in Object(t))o.call(t,n)&&"constructor"!=n&&e.push(n);return e}},function(t,e,n){var r=n(141),i=n(142),o=Object.prototype.propertyIsEnumerable,s=Object.getOwnPropertySymbols,u=s?function(t){return null==t?[]:(t=Object(t),r(s(t),function(e){return o.call(t,e)}))}:i;t.exports=u},function(t,e){t.exports=function(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}},function(t,e,n){var r=n(147);t.exports=function(t){var e=new t.constructor(t.byteLength);return new r(e).set(new r(t)),e}},function(t,e){t.exports=function(t){return function(){return t}}},function(t,e,n){var r=n(125),i=n(43);t.exports=function(t,e){return t&&r(t,e,i)}},function(t,e,n){var r=n(248)();t.exports=r},function(t,e){t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}},function(t,e,n){var r=n(91),i=n(74);t.exports=function(t,e){for(var n=0,o=(e=r(e,t)).length;null!=t&&n<o;)t=t[i(e[n++])];return n&&n==o?t:void 0}},function(t,e,n){var r=n(14),i=n(57),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,s=/^\w*$/;t.exports=function(t,e){if(r(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!i(t))||(s.test(t)||!o.test(t)||null!=e&&t in Object(e))}},function(t,e,n){var r=n(121),i=n(282);t.exports=function t(e,n,o,s,u){var a=-1,c=e.length;for(o||(o=i),u||(u=[]);++a<c;){var h=e[a];n>0&&o(h)?n>1?t(h,n-1,o,s,u):r(u,h):s||(u[u.length]=h)}return u}},function(t,e,n){var r=n(57);t.exports=function(t,e,n){for(var i=-1,o=t.length;++i<o;){var s=t[i],u=e(s);if(null!=u&&(void 0===a?u==u&&!r(u):n(u,a)))var a=u,c=s}return c}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(189),i=Object.prototype.hasOwnProperty,o=Array.prototype.splice,s=Object.prototype.toString;function u(t){return s.call(t).slice(8,-1)}var a=Object.assign||function(t,e){return c(e).forEach(function(n){i.call(e,n)&&(t[n]=e[n])}),t},c="function"==typeof Object.getOwnPropertySymbols?function(t){return Object.keys(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.keys(t)};function h(t){return Array.isArray(t)?a(t.constructor(t.length),t):"Map"===u(t)?new Map(t):"Set"===u(t)?new Set(t):t&&"object"==typeof t?a(Object.create(Object.getPrototypeOf(t)),t):t}var f=function(){function t(){this.commands=a({},l),this.update=this.update.bind(this),this.update.extend=this.extend=this.extend.bind(this),this.update.isEquals=function(t,e){return t===e},this.update.newContext=function(){return(new t).update}}return Object.defineProperty(t.prototype,"isEquals",{get:function(){return this.update.isEquals},set:function(t){this.update.isEquals=t},enumerable:!0,configurable:!0}),t.prototype.extend=function(t,e){this.commands[t]=e},t.prototype.update=function(t,e){var n=this,o="function"==typeof e?{$apply:e}:e;Array.isArray(t)&&Array.isArray(o)||r(!Array.isArray(o),"update(): You provided an invalid spec to update(). The spec may not contain an array except as the value of $set, $push, $unshift, $splice or any custom command allowing an array value."),r("object"==typeof o&&null!==o,"update(): You provided an invalid spec to update(). The spec and every included key path must be plain objects containing one of the following commands: %s.",Object.keys(this.commands).join(", "));var s=t;return c(o).forEach(function(e){if(i.call(n.commands,e)){var r=t===s;s=n.commands[e](o[e],s,o,t),r&&n.isEquals(s,t)&&(s=t)}else{var a="Map"===u(t)?n.update(t.get(e),o[e]):n.update(t[e],o[e]),c="Map"===u(s)?s.get(e):s[e];n.isEquals(a,c)&&(void 0!==a||i.call(t,e))||(s===t&&(s=h(t)),"Map"===u(s)?s.set(e,a):s[e]=a)}}),s},t}();e.Context=f;var l={$push:function(t,e,n){return d(e,n,"$push"),t.length?e.concat(t):e},$unshift:function(t,e,n){return d(e,n,"$unshift"),t.length?t.concat(e):e},$splice:function(t,e,n,i){return function(t,e){r(Array.isArray(t),"Expected $splice target to be an array; got %s",t),b(e.$splice)}(e,n),t.forEach(function(t){b(t),e===i&&t.length&&(e=h(i)),o.apply(e,t)}),e},$set:function(t,e,n){return function(t){r(1===Object.keys(t).length,"Cannot have more than one key in an object with $set")}(n),t},$toggle:function(t,e){v(t,"$toggle");var n=t.length?h(e):e;return t.forEach(function(t){n[t]=!e[t]}),n},$unset:function(t,e,n,r){return v(t,"$unset"),t.forEach(function(t){Object.hasOwnProperty.call(e,t)&&(e===r&&(e=h(r)),delete e[t])}),e},$add:function(t,e,n,r){return y(e,"$add"),v(t,"$add"),"Map"===u(e)?t.forEach(function(t){var n=t[0],i=t[1];e===r&&e.get(n)!==i&&(e=h(r)),e.set(n,i)}):t.forEach(function(t){e!==r||e.has(t)||(e=h(r)),e.add(t)}),e},$remove:function(t,e,n,r){return y(e,"$remove"),v(t,"$remove"),t.forEach(function(t){e===r&&e.has(t)&&(e=h(r)),e.delete(t)}),e},$merge:function(t,e,n,i){var o,s;return o=e,r((s=t)&&"object"==typeof s,"update(): $merge expects a spec of type 'object'; got %s",s),r(o&&"object"==typeof o,"update(): $merge expects a target of type 'object'; got %s",o),c(t).forEach(function(n){t[n]!==e[n]&&(e===i&&(e=h(i)),e[n]=t[n])}),e},$apply:function(t,e){var n;return r("function"==typeof(n=t),"update(): expected spec of $apply to be a function; got %s.",n),t(e)}},p=new f;function d(t,e,n){r(Array.isArray(t),"update(): expected target of %s to be an array; got %s.",n,t),v(e[n],n)}function v(t,e){r(Array.isArray(t),"update(): expected spec of %s to be an array; got %s. Did you forget to wrap your parameter in an array?",e,t)}function b(t){r(Array.isArray(t),"update(): expected spec of $splice to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?",t)}function y(t,e){var n=u(t);r("Map"===n||"Set"===n,"update(): %s expects a target of type Set or Map; got %s",e,n)}e.isEquals=p.update.isEquals,e.extend=p.extend,e.default=p.update,e.default.default=t.exports=a(e.default,e)},function(t,e,n){"use strict";e.__esModule=!0;var r=n(75),i=n(78),o=n(191),s=n(96),u=50,a=50;function c(t,e,n){return t+"."+(n===i.IO.Input?"in":"out")+"."+e}function h(t,e){var n=new Set(t);return e.forEach(function(t){n.delete(t)}),Array.from(n)}e.getPropID=c,e.getLayoutStream=function(t,e){var n=new o.graphlib.Graph({multigraph:!0,compound:!0});return n.setGraph({rankdir:"LR"}),n.setDefaultEdgeLabel(function(){return{}}),t.pipe(s.switchMap(function(t){return r.combineLatest.apply(void 0,t.map(function(t){return r.combineLatest(r.of(t),t.getInputInfoStream(),t.getOutputInfoStream())}))})).subscribe(function(t){var e=[],r=n.nodes().map(function(t){return n.node(t).id});t.forEach(function(t){var r=t[0],o=t[1],s=t[2],h=r.getID();e.push(h),n.hasNode(h)||n.setNode(h,{id:h}),o.map(function(t){return{io:t,isInput:i.IO.Input}}).concat(s.map(function(t){return{io:t,isInput:i.IO.Output}})).forEach(function(t){var r=t.io,i=t.isInput,o=c(h,r.name,i);e.push(o),n.hasNode(o)||(n.setNode(o,{id:o,propName:r.name,parentID:h,isInput:i,width:u,height:a}),n.setParent(o,h))})}),h(r,e).forEach(function(t){n.removeNode(t)})}),e.subscribe(function(t){var e=n.edges(),r=[];t.forEach(function(t){var o=t.getID();if(r.push(o),e.findIndex(function(t){return t.name===o})<0){var s=t.getFrom(),u=t.getTo(),a=c(s.node.getID(),s.prop,i.IO.Output),h=c(u.node.getID(),u.prop,i.IO.Input);n.setEdge({v:a,w:h,name:o})}}),e.forEach(function(t,i){if(r.indexOf(t.name)<0){var o=e[i];n.removeEdge(o.v,o.w,o.name)}})}),r.combineLatest(t,e).pipe(s.switchMap(function(t){var e=t[0];return r.combineLatest.apply(void 0,e.map(function(t){return r.combineLatest(r.of(t),t.getInputInfoStream(),t.getOutputInfoStream())}))}),s.map(function(){var t={nodes:{},edges:{}};return o.layout(n),n.nodes().forEach(function(e){if(void 0===n.parent(e)){var r=n.node(e),i=r.id;t.nodes[i]={x:r.x,y:r.y,width:r.width,height:r.height,inputs:{},outputs:{}}}}),n.nodes().forEach(function(e){if(void 0!==n.parent(e)){var r=n.node(e),o=r.parentID,s=r.isInput,u=r.propName,a=s===i.IO.Input?"inputs":"outputs";t.nodes[o][a][u]={x:r.x,y:r.y,width:r.width,height:r.height}}}),n.edges().forEach(function(e){var r=n.edge(e);t.edges[e.name]={points:r.points}}),t}))},e.difference=h},function(t,e,n){var r=n(79),i=n(115),o=n(84),s=n(224),u=n(230),a=n(139),c=n(140),h=n(233),f=n(234),l=n(144),p=n(235),d=n(56),v=n(239),b=n(240),y=n(149),m=n(14),g=n(54),x=n(244),w=n(24),_=n(246),E=n(43),S=1,j=2,O=4,N="[object Arguments]",k="[object Function]",C="[object GeneratorFunction]",I="[object Object]",A={};A[N]=A["[object Array]"]=A["[object ArrayBuffer]"]=A["[object DataView]"]=A["[object Boolean]"]=A["[object Date]"]=A["[object Float32Array]"]=A["[object Float64Array]"]=A["[object Int8Array]"]=A["[object Int16Array]"]=A["[object Int32Array]"]=A["[object Map]"]=A["[object Number]"]=A[I]=A["[object RegExp]"]=A["[object Set]"]=A["[object String]"]=A["[object Symbol]"]=A["[object Uint8Array]"]=A["[object Uint8ClampedArray]"]=A["[object Uint16Array]"]=A["[object Uint32Array]"]=!0,A["[object Error]"]=A[k]=A["[object WeakMap]"]=!1,t.exports=function t(e,n,T,P,M,V){var D,F=n&S,L=n&j,B=n&O;if(T&&(D=M?T(e,P,M,V):T(e)),void 0!==D)return D;if(!w(e))return e;var R=m(e);if(R){if(D=v(e),!F)return c(e,D)}else{var z=d(e),U=z==k||z==C;if(g(e))return a(e,F);if(z==I||z==N||U&&!M){if(D=L||U?{}:y(e),!F)return L?f(e,u(D,e)):h(e,s(D,e))}else{if(!A[z])return M?e:{};D=b(e,z,F)}}V||(V=new r);var Y=V.get(e);if(Y)return Y;V.set(e,D),_(e)?e.forEach(function(r){D.add(t(r,n,T,r,e,V))}):x(e)&&e.forEach(function(r,i){D.set(i,t(r,n,T,i,e,V))});var $=B?L?p:l:L?keysIn:E,G=R?void 0:$(e);return i(G||e,function(r,i){G&&(r=e[i=r]),o(D,i,t(r,n,T,i,e,V))}),D}},function(t,e,n){(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.exports=n}).call(this,n(206))},function(t,e){var n=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return n.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,e,n){var r=n(45),i=function(){try{var t=r(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=i},function(t,e,n){var r=n(225),i=n(72),o=n(14),s=n(54),u=n(86),a=n(73),c=Object.prototype.hasOwnProperty;t.exports=function(t,e){var n=o(t),h=!n&&i(t),f=!n&&!h&&s(t),l=!n&&!h&&!f&&a(t),p=n||h||f||l,d=p?r(t.length,String):[],v=d.length;for(var b in t)!e&&!c.call(t,b)||p&&("length"==b||f&&("offset"==b||"parent"==b)||l&&("buffer"==b||"byteLength"==b||"byteOffset"==b)||u(b,v))||d.push(b);return d}},function(t,e){t.exports=function(t,e){return function(n){return t(e(n))}}},function(t,e,n){(function(t){var r=n(28),i=e&&!e.nodeType&&e,o=i&&"object"==typeof t&&t&&!t.nodeType&&t,s=o&&o.exports===i?r.Buffer:void 0,u=s?s.allocUnsafe:void 0;t.exports=function(t,e){if(e)return t.slice();var n=t.length,r=u?u(n):new t.constructor(n);return t.copy(r),r}}).call(this,n(116)(t))},function(t,e){t.exports=function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var s=t[n];e(s,n,t)&&(o[i++]=s)}return o}},function(t,e){t.exports=function(){return[]}},function(t,e,n){var r=n(121),i=n(89),o=n(120),s=n(142),u=Object.getOwnPropertySymbols?function(t){for(var e=[];t;)r(e,o(t)),t=i(t);return e}:s;t.exports=u},function(t,e,n){var r=n(145),i=n(120),o=n(43);t.exports=function(t){return r(t,o,i)}},function(t,e,n){var r=n(121),i=n(14);t.exports=function(t,e,n){var o=e(t);return i(t)?o:r(o,n(t))}},function(t,e,n){var r=n(45)(n(28),"Set");t.exports=r},function(t,e,n){var r=n(28).Uint8Array;t.exports=r},function(t,e,n){var r=n(122);t.exports=function(t,e){var n=e?r(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}},function(t,e,n){var r=n(150),i=n(89),o=n(88);t.exports=function(t){return"function"!=typeof t.constructor||o(t)?{}:r(i(t))}},function(t,e,n){var r=n(24),i=Object.create,o=function(){function t(){}return function(e){if(!r(e))return{};if(i)return i(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();t.exports=o},function(t,e,n){t.exports=n(152)},function(t,e,n){var r=n(115),i=n(90),o=n(153),s=n(14);t.exports=function(t,e){return(s(t)?r:i)(t,o(e))}},function(t,e,n){var r=n(47);t.exports=function(t){return"function"==typeof t?t:r}},function(t,e,n){var r=n(141),i=n(250),o=n(40),s=n(14);t.exports=function(t,e){return(s(t)?r:i)(t,o(e,3))}},function(t,e,n){var r=n(253),i=n(32);t.exports=function t(e,n,o,s,u){return e===n||(null==e||null==n||!i(e)&&!i(n)?e!=e&&n!=n:r(e,n,o,s,t,u))}},function(t,e,n){var r=n(157),i=n(256),o=n(158),s=1,u=2;t.exports=function(t,e,n,a,c,h){var f=n&s,l=t.length,p=e.length;if(l!=p&&!(f&&p>l))return!1;var d=h.get(t);if(d&&h.get(e))return d==e;var v=-1,b=!0,y=n&u?new r:void 0;for(h.set(t,e),h.set(e,t);++v<l;){var m=t[v],g=e[v];if(a)var x=f?a(g,m,v,e,t,h):a(m,g,v,t,e,h);if(void 0!==x){if(x)continue;b=!1;break}if(y){if(!i(e,function(t,e){if(!o(y,e)&&(m===t||c(m,t,n,a,h)))return y.push(e)})){b=!1;break}}else if(m!==g&&!c(m,g,n,a,h)){b=!1;break}}return h.delete(t),h.delete(e),b}},function(t,e,n){var r=n(114),i=n(254),o=n(255);function s(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new r;++e<n;)this.add(t[e])}s.prototype.add=s.prototype.push=i,s.prototype.has=o,t.exports=s},function(t,e){t.exports=function(t,e){return t.has(e)}},function(t,e,n){var r=n(24);t.exports=function(t){return t==t&&!r(t)}},function(t,e){t.exports=function(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in Object(n)))}}},function(t,e,n){var r=n(266);t.exports=function(t){return null==t?"":r(t)}},function(t,e,n){var r=n(267),i=n(163);t.exports=function(t,e){return null!=t&&i(t,e,r)}},function(t,e,n){var r=n(91),i=n(72),o=n(14),s=n(86),u=n(117),a=n(74);t.exports=function(t,e,n){for(var c=-1,h=(e=r(e,t)).length,f=!1;++c<h;){var l=a(e[c]);if(!(f=null!=t&&n(t,l)))break;t=t[l]}return f||++c!=h?f:!!(h=null==t?0:t.length)&&u(h)&&s(l,h)&&(o(t)||i(t))}},function(t,e){t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},function(t,e,n){var r=n(270),i=n(163);t.exports=function(t,e){return null!=t&&i(t,e,r)}},function(t,e){t.exports=function(t){return void 0===t}},function(t,e,n){var r=n(92),i=n(40),o=n(168),s=n(14);t.exports=function(t,e){return(s(t)?r:o)(t,i(e,3))}},function(t,e,n){var r=n(90),i=n(39);t.exports=function(t,e){var n=-1,o=i(t)?Array(t.length):[];return r(t,function(t,r,i){o[++n]=e(t,r,i)}),o}},function(t,e,n){var r=n(272),i=n(90),o=n(40),s=n(273),u=n(14);t.exports=function(t,e,n){var a=u(t)?r:s,c=arguments.length<3;return a(t,o(e,4),n,c,i)}},function(t,e,n){var r=n(283),i=Math.max;t.exports=function(t,e,n){return e=i(void 0===e?t.length-1:e,0),function(){for(var o=arguments,s=-1,u=i(o.length-e,0),a=Array(u);++s<u;)a[s]=o[e+s];s=-1;for(var c=Array(e+1);++s<e;)c[s]=o[s];return c[e]=n(a),r(t,this,c)}}},function(t,e,n){var r=n(284),i=n(285)(r);t.exports=i},function(t,e){t.exports=function(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}},function(t,e,n){var r=n(39),i=n(32);t.exports=function(t){return i(t)&&r(t)}},function(t,e,n){var r=n(294),i=n(43);t.exports=function(t){return null==t?[]:r(t,i(t))}},function(t,e,n){var r=n(23),i=n(176);t.exports=function(t,e,n,r){return function(t,e,n,r){var o,s,u={},a=new i,c=function(t){var e=t.v!==o?t.v:t.w,r=u[e],i=n(t),c=s.distance+i;if(i<0)throw new Error("dijkstra does not allow negative edge weights. Bad edge: "+t+" Weight: "+i);c<r.distance&&(r.distance=c,r.predecessor=o,a.decrease(e,c))};t.nodes().forEach(function(t){var n=t===e?0:Number.POSITIVE_INFINITY;u[t]={distance:n},a.add(t,n)});for(;a.size()>0&&(o=a.removeMin(),(s=u[o]).distance!==Number.POSITIVE_INFINITY);)r(o).forEach(c);return u}(t,String(e),n||o,r||function(e){return t.outEdges(e)})};var o=r.constant(1)},function(t,e,n){var r=n(23);function i(){this._arr=[],this._keyIndices={}}t.exports=i,i.prototype.size=function(){return this._arr.length},i.prototype.keys=function(){return this._arr.map(function(t){return t.key})},i.prototype.has=function(t){return r.has(this._keyIndices,t)},i.prototype.priority=function(t){var e=this._keyIndices[t];if(void 0!==e)return this._arr[e].priority},i.prototype.min=function(){if(0===this.size())throw new Error("Queue underflow");return this._arr[0].key},i.prototype.add=function(t,e){var n=this._keyIndices;if(t=String(t),!r.has(n,t)){var i=this._arr,o=i.length;return n[t]=o,i.push({key:t,priority:e}),this._decrease(o),!0}return!1},i.prototype.removeMin=function(){this._swap(0,this._arr.length-1);var t=this._arr.pop();return delete this._keyIndices[t.key],this._heapify(0),t.key},i.prototype.decrease=function(t,e){var n=this._keyIndices[t];if(e>this._arr[n].priority)throw new Error("New priority is greater than current priority. Key: "+t+" Old: "+this._arr[n].priority+" New: "+e);this._arr[n].priority=e,this._decrease(n)},i.prototype._heapify=function(t){var e=this._arr,n=2*t,r=n+1,i=t;n<e.length&&(i=e[n].priority<e[i].priority?n:i,r<e.length&&(i=e[r].priority<e[i].priority?r:i),i!==t&&(this._swap(t,i),this._heapify(i)))},i.prototype._decrease=function(t){for(var e,n=this._arr,r=n[t].priority;0!==t&&!(n[e=t>>1].priority<r);)this._swap(t,e),t=e},i.prototype._swap=function(t,e){var n=this._arr,r=this._keyIndices,i=n[t],o=n[e];n[t]=o,n[e]=i,r[o.key]=t,r[i.key]=e}},function(t,e,n){var r=n(23);t.exports=function(t){var e=0,n=[],i={},o=[];return t.nodes().forEach(function(s){r.has(i,s)||function s(u){var a=i[u]={onStack:!0,lowlink:e,index:e++};n.push(u);t.successors(u).forEach(function(t){r.has(i,t)?i[t].onStack&&(a.lowlink=Math.min(a.lowlink,i[t].index)):(s(t),a.lowlink=Math.min(a.lowlink,i[t].lowlink))});if(a.lowlink===a.index){var c,h=[];do{c=n.pop(),i[c].onStack=!1,h.push(c)}while(u!==c);o.push(h)}}(s)}),o}},function(t,e,n){var r=n(23);function i(t){var e={},n={},i=[];if(r.each(t.sinks(),function s(u){if(r.has(n,u))throw new o;r.has(e,u)||(n[u]=!0,e[u]=!0,r.each(t.predecessors(u),s),delete n[u],i.push(u))}),r.size(e)!==t.nodeCount())throw new o;return i}function o(){}t.exports=i,i.CycleException=o,o.prototype=new Error},function(t,e,n){var r=n(23);t.exports=function(t,e,n){r.isArray(e)||(e=[e]);var i=(t.isDirected()?t.successors:t.neighbors).bind(t),o=[],s={};return r.each(e,function(e){if(!t.hasNode(e))throw new Error("Graph does not have node: "+e);!function t(e,n,i,o,s,u){r.has(o,n)||(o[n]=!0,i||u.push(n),r.each(s(n),function(n){t(e,n,i,o,s,u)}),i&&u.push(n))}(t,e,"post"===n,s,i,o)}),o}},function(t,e,n){var r=n(313),i=1/0,o=17976931348623157e292;t.exports=function(t){return t?(t=r(t))===i||t===-i?(t<0?-1:1)*o:t==t?t:0:0===t?t:0}},function(t,e,n){var r=n(129);t.exports=function(t){return(null==t?0:t.length)?r(t,1):[]}},function(t,e,n){var r=n(85),i=n(52);t.exports=function(t,e,n){(void 0===n||i(t[e],n))&&(void 0!==n||e in t)||r(t,e,n)}},function(t,e){t.exports=function(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}},function(t,e){t.exports=function(t,e){return t<e}},function(t,e,n){"use strict";var r=n(9),i=n(27).Graph,o=n(95).slack;function s(t,e){return r.forEach(t.nodes(),function n(i){r.forEach(e.nodeEdges(i),function(r){var s=r.v,u=i===s?r.w:s;t.hasNode(u)||o(e,r)||(t.setNode(u,{}),t.setEdge(i,u,{}),n(u))})}),t.nodeCount()}function u(t,e){return r.minBy(e.edges(),function(n){if(t.hasNode(n.v)!==t.hasNode(n.w))return o(e,n)})}function a(t,e,n){r.forEach(t.nodes(),function(t){e.node(t).rank+=n})}t.exports=function(t){var e,n,r=new i({directed:!1}),c=t.nodes()[0],h=t.nodeCount();r.setNode(c,{});for(;s(r,t)<h;)e=u(r,t),n=r.hasNode(e.v)?o(t,e):-o(t,e),a(r,t,n);return r}},function(t,e,n){"use strict";e.__esModule=!0;var r=n(187),i=n(367);window.Scene=r.Scene,window.SceneDisplay=i.SceneDisplay},function(t,e,n){"use strict";e.__esModule=!0;var r=n(188),i=n(78),o=n(190),s=n(75),u=n(131),a=n(132),c=function(){function t(){this.nodesStream=new s.BehaviorSubject([]),this.edgesStream=new s.BehaviorSubject([]),this.layoutStream=a.getLayoutStream(this.getNodesStream(),this.getEdgesStream()),s.combineLatest(this.layoutStream,this.getNodesStream(),this.getEdgesStream()).subscribe(function(t){var e=t[0],n=t[1],r=t[2];n.forEach(function(t){var n=t.getID();e.nodes[n]&&t._setLayout(e.nodes[n])}),r.forEach(function(t){var n=t.getID();e.edges[n]&&t.setLayout(e.edges[n])})})}return t.prototype.addConstant=function(t){var e=new i.ConstantNode(t);return this.addNode(e)},t.prototype.addOp=function(t){var e=(0,o.ops[t])();return this.addNode(e)},t.prototype.addNode=function(t){var e=this.nodesStream.getValue(),n=u.default(e,{$push:[t]});return this.nodesStream.next(n),t},t.prototype.addEdge=function(t,e){t instanceof i.Node&&(t={node:t,prop:i.PROP_DEFAULT_NAME}),e instanceof i.Node&&(e={node:e,prop:i.PROP_DEFAULT_NAME});var n=new r.Edge(t,e);t.node.addOutgoingEdge(n),e.node.addIncomingEdge(n);var o=this.edgesStream.getValue(),s=u.default(o,{$push:[n]});return this.edgesStream.next(s),n},t.prototype.removeEdge=function(t){var e=t.getFrom(),n=t.getTo();e.node.removeOutgoingEdge(t),n.node.removeIncomingEdge(t);var r=this.edgesStream.getValue(),i=r.indexOf(t);if(i>=0){var o=u.default(r,{$splice:[[i,1]]});this.edgesStream.next(o),t.remove()}},t.prototype.removeNode=function(t){var e=this.nodesStream.getValue(),n=e.indexOf(t);if(n>=0){var r=this.edgesStream.getValue(),i=r.filter(function(e){return e.getFrom().node===t||e.getTo().node===t});i.length>0&&(i.forEach(function(t){var e=t.getFrom(),n=t.getTo();e.node.removeOutgoingEdge(t),n.node.removeIncomingEdge(t),t.remove()}),this.edgesStream.next(r.filter(function(t){return i.indexOf(t)<0})));var o=u.default(e,{$splice:[[n,1]]});this.nodesStream.next(o),t.remove()}},t.prototype.getNodesStream=function(){return this.nodesStream},t.prototype.getEdgesStream=function(){return this.edgesStream},t}();e.Scene=c},function(t,e,n){"use strict";e.__esModule=!0;var r=n(75),i=n(96),o=function(){function t(e,n){this.f=e,this.t=n,this.layout=new r.BehaviorSubject({points:[]}),this.fromStream=new r.ReplaySubject,this.valueStream=this.fromStream.pipe(i.map(function(t){var e=t.node,n=t.prop;return e.pluckOutput(n)}),i.switchMap(function(t){return t})),this.setFrom(e),this.setTo(n),this.id=t.edgeCount++}return t.prototype.remove=function(){this.fromStream.complete(),this.layout.complete()},t.prototype.getLayoutStream=function(){return this.layout},t.prototype.setLayout=function(t){this.layout.next(t)},t.prototype.getFrom=function(){return this.f},t.prototype.getTo=function(){return this.t},t.prototype.setFrom=function(t){this.f=t,this.fromStream.next(t)},t.prototype.setTo=function(t){this.t=t},t.prototype.getStream=function(){return this.valueStream},t.prototype.getID=function(){return"edge-"+this.id},t.edgeCount=1,t}();e.Edge=o},function(t,e,n){"use strict";t.exports=function(t,e,n,r,i,o,s,u){if(!t){var a;if(void 0===e)a=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,i,o,s,u],h=0;(a=new Error(e.replace(/%s/g,function(){return c[h++]}))).name="Invariant Violation"}throw a.framesToPop=1,a}}},function(t,e,n){"use strict";e.__esModule=!0;var r=n(78),i=n(75),o=n(96);function s(t,e,n){return void 0===n&&(n="a"),function(){return new r.OpNode(t,e,[{name:n}],{name:r.PROP_DEFAULT_NAME})}}function u(t,e,n,i){return void 0===n&&(n="a"),void 0===i&&(i="b"),function(){return new r.OpNode(t,e,[{name:n},{name:i}],{name:r.PROP_DEFAULT_NAME})}}e.ops={"+":function(){return new r.OpNode("+",function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t.reduce(function(t,e){return t+e},0)},[{name:r.PROP_DEFAULT_NAME,rest:!0}],{name:r.PROP_DEFAULT_NAME})},"-":function(){return u("-",function(t,e){return t-e})},"*":function(){return u("*",function(t,e){return t*e})},"/":function(){return u("/",function(t,e){return t/e})},"%":function(){return u("%",function(t,e){return t%e})},pow:function(){return u("pow",function(t,e){return Math.pow(t,e)},"num","exp")},"==":function(){return u("==",function(t,e){return t==e})},">":function(){return u(">",function(t,e){return t>e})},"<":function(){return u("<",function(t,e){return t<e})},">=":function(){return u(">=",function(t,e){return t>=e})},"<=":function(){return u("<=",function(t,e){return t<=e})},and:function(){return u("and",function(t,e){return t&&e})},or:function(){return u("or",function(t,e){return t||e})},neg:function(){return s("neg",function(t){return-t})},not:function(){return s("not",function(t){return!t})},abs:function(){return s("abs",function(t){return Math.abs(t)})},round:function(){return s("round",function(t){return Math.round(t)})},gen:function(){return new r.GenNode},take:function(){return new r.OpNode("take",function(t,e){return t.pipe(o.take(e))},[{name:"stream",raw:!0},{name:"count"}],{name:r.PROP_DEFAULT_NAME,raw:!0})},interval:function(){return new r.OpNode("interval",function(t){return i.interval(t)},[{name:"period"}],{name:r.PROP_DEFAULT_NAME,raw:!0})},delay:function(){return new r.OpNode("delay",function(t,e){return t.pipe(o.delay(e))},[{name:"stream",raw:!0},{name:"delay"}],{name:r.PROP_DEFAULT_NAME,raw:!0})}}},function(t,e,n){t.exports={graphlib:n(27),layout:n(306),debug:n(365),util:{time:n(18).time,notime:n(18).notime},version:n(366)}},function(t,e,n){var r=n(193);t.exports={Graph:r.Graph,json:n(296),alg:n(297),version:r.version}},function(t,e,n){t.exports={Graph:n(112),version:n(295)}},function(t,e,n){var r=n(133),i=4;t.exports=function(t){return r(t,i)}},function(t,e){t.exports=function(){this.__data__=[],this.size=0}},function(t,e,n){var r=n(81),i=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=r(e,t);return!(n<0)&&(n==e.length-1?e.pop():i.call(e,n,1),--this.size,!0)}},function(t,e,n){var r=n(81);t.exports=function(t){var e=this.__data__,n=r(e,t);return n<0?void 0:e[n][1]}},function(t,e,n){var r=n(81);t.exports=function(t){return r(this.__data__,t)>-1}},function(t,e,n){var r=n(81);t.exports=function(t,e){var n=this.__data__,i=r(n,t);return i<0?(++this.size,n.push([t,e])):n[i][1]=e,this}},function(t,e,n){var r=n(80);t.exports=function(){this.__data__=new r,this.size=0}},function(t,e){t.exports=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}},function(t,e){t.exports=function(t){return this.__data__.get(t)}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e,n){var r=n(80),i=n(113),o=n(114),s=200;t.exports=function(t,e){var n=this.__data__;if(n instanceof r){var u=n.__data__;if(!i||u.length<s-1)return u.push([t,e]),this.size=++n.size,this;n=this.__data__=new o(u)}return n.set(t,e),this.size=n.size,this}},function(t,e,n){var r=n(70),i=n(209),o=n(24),s=n(135),u=/^\[object .+?Constructor\]$/,a=Function.prototype,c=Object.prototype,h=a.toString,f=c.hasOwnProperty,l=RegExp("^"+h.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!o(t)||i(t))&&(r(t)?l:u).test(s(t))}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(53),i=Object.prototype,o=i.hasOwnProperty,s=i.toString,u=r?r.toStringTag:void 0;t.exports=function(t){var e=o.call(t,u),n=t[u];try{t[u]=void 0;var r=!0}catch(t){}var i=s.call(t);return r&&(e?t[u]=n:delete t[u]),i}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e,n){var r,i=n(210),o=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!o&&o in t}},function(t,e,n){var r=n(28)["__core-js_shared__"];t.exports=r},function(t,e){t.exports=function(t,e){return null==t?void 0:t[e]}},function(t,e,n){var r=n(213),i=n(80),o=n(113);t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||i),string:new r}}},function(t,e,n){var r=n(214),i=n(215),o=n(216),s=n(217),u=n(218);function a(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}a.prototype.clear=r,a.prototype.delete=i,a.prototype.get=o,a.prototype.has=s,a.prototype.set=u,t.exports=a},function(t,e,n){var r=n(82);t.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(t,e){t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},function(t,e,n){var r=n(82),i="__lodash_hash_undefined__",o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(r){var n=e[t];return n===i?void 0:n}return o.call(e,t)?e[t]:void 0}},function(t,e,n){var r=n(82),i=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return r?void 0!==e[t]:i.call(e,t)}},function(t,e,n){var r=n(82),i="__lodash_hash_undefined__";t.exports=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=r&&void 0===e?i:e,this}},function(t,e,n){var r=n(83);t.exports=function(t){var e=r(this,t).delete(t);return this.size-=e?1:0,e}},function(t,e){t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},function(t,e,n){var r=n(83);t.exports=function(t){return r(this,t).get(t)}},function(t,e,n){var r=n(83);t.exports=function(t){return r(this,t).has(t)}},function(t,e,n){var r=n(83);t.exports=function(t,e){var n=r(this,t),i=n.size;return n.set(t,e),this.size+=n.size==i?0:1,this}},function(t,e,n){var r=n(71),i=n(43);t.exports=function(t,e){return t&&r(e,i(e),t)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}},function(t,e,n){var r=n(46),i=n(32),o="[object Arguments]";t.exports=function(t){return i(t)&&r(t)==o}},function(t,e){t.exports=function(){return!1}},function(t,e,n){var r=n(46),i=n(117),o=n(32),s={};s["[object Float32Array]"]=s["[object Float64Array]"]=s["[object Int8Array]"]=s["[object Int16Array]"]=s["[object Int32Array]"]=s["[object Uint8Array]"]=s["[object Uint8ClampedArray]"]=s["[object Uint16Array]"]=s["[object Uint32Array]"]=!0,s["[object Arguments]"]=s["[object Array]"]=s["[object ArrayBuffer]"]=s["[object Boolean]"]=s["[object DataView]"]=s["[object Date]"]=s["[object Error]"]=s["[object Function]"]=s["[object Map]"]=s["[object Number]"]=s["[object Object]"]=s["[object RegExp]"]=s["[object Set]"]=s["[object String]"]=s["[object WeakMap]"]=!1,t.exports=function(t){return o(t)&&i(t.length)&&!!s[r(t)]}},function(t,e,n){var r=n(138)(Object.keys,Object);t.exports=r},function(t,e,n){var r=n(71),i=n(55);t.exports=function(t,e){return t&&r(e,i(e),t)}},function(t,e,n){var r=n(24),i=n(88),o=n(232),s=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return o(t);var e=i(t),n=[];for(var u in t)("constructor"!=u||!e&&s.call(t,u))&&n.push(u);return n}},function(t,e){t.exports=function(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e}},function(t,e,n){var r=n(71),i=n(120);t.exports=function(t,e){return r(t,i(t),e)}},function(t,e,n){var r=n(71),i=n(143);t.exports=function(t,e){return r(t,i(t),e)}},function(t,e,n){var r=n(145),i=n(143),o=n(55);t.exports=function(t){return r(t,o,i)}},function(t,e,n){var r=n(45)(n(28),"DataView");t.exports=r},function(t,e,n){var r=n(45)(n(28),"Promise");t.exports=r},function(t,e,n){var r=n(45)(n(28),"WeakMap");t.exports=r},function(t,e){var n=Object.prototype.hasOwnProperty;t.exports=function(t){var e=t.length,r=new t.constructor(e);return e&&"string"==typeof t[0]&&n.call(t,"index")&&(r.index=t.index,r.input=t.input),r}},function(t,e,n){var r=n(122),i=n(241),o=n(242),s=n(243),u=n(148),a="[object Boolean]",c="[object Date]",h="[object Map]",f="[object Number]",l="[object RegExp]",p="[object Set]",d="[object String]",v="[object Symbol]",b="[object ArrayBuffer]",y="[object DataView]",m="[object Float32Array]",g="[object Float64Array]",x="[object Int8Array]",w="[object Int16Array]",_="[object Int32Array]",E="[object Uint8Array]",S="[object Uint8ClampedArray]",j="[object Uint16Array]",O="[object Uint32Array]";t.exports=function(t,e,n){var N=t.constructor;switch(e){case b:return r(t);case a:case c:return new N(+t);case y:return i(t,n);case m:case g:case x:case w:case _:case E:case S:case j:case O:return u(t,n);case h:return new N;case f:case d:return new N(t);case l:return o(t);case p:return new N;case v:return s(t)}}},function(t,e,n){var r=n(122);t.exports=function(t,e){var n=e?r(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}},function(t,e){var n=/\w*$/;t.exports=function(t){var e=new t.constructor(t.source,n.exec(t));return e.lastIndex=t.lastIndex,e}},function(t,e,n){var r=n(53),i=r?r.prototype:void 0,o=i?i.valueOf:void 0;t.exports=function(t){return o?Object(o.call(t)):{}}},function(t,e,n){var r=n(245),i=n(87),o=n(118),s=o&&o.isMap,u=s?i(s):r;t.exports=u},function(t,e,n){var r=n(56),i=n(32),o="[object Map]";t.exports=function(t){return i(t)&&r(t)==o}},function(t,e,n){var r=n(247),i=n(87),o=n(118),s=o&&o.isSet,u=s?i(s):r;t.exports=u},function(t,e,n){var r=n(56),i=n(32),o="[object Set]";t.exports=function(t){return i(t)&&r(t)==o}},function(t,e){t.exports=function(t){return function(e,n,r){for(var i=-1,o=Object(e),s=r(e),u=s.length;u--;){var a=s[t?u:++i];if(!1===n(o[a],a,o))break}return e}}},function(t,e,n){var r=n(39);t.exports=function(t,e){return function(n,i){if(null==n)return n;if(!r(n))return t(n,i);for(var o=n.length,s=e?o:-1,u=Object(n);(e?s--:++s<o)&&!1!==i(u[s],s,u););return n}}},function(t,e,n){var r=n(90);t.exports=function(t,e){var n=[];return r(t,function(t,r,i){e(t,r,i)&&n.push(t)}),n}},function(t,e,n){var r=n(252),i=n(260),o=n(160);t.exports=function(t){var e=i(t);return 1==e.length&&e[0][2]?o(e[0][0],e[0][1]):function(n){return n===t||r(n,t,e)}}},function(t,e,n){var r=n(79),i=n(155),o=1,s=2;t.exports=function(t,e,n,u){var a=n.length,c=a,h=!u;if(null==t)return!c;for(t=Object(t);a--;){var f=n[a];if(h&&f[2]?f[1]!==t[f[0]]:!(f[0]in t))return!1}for(;++a<c;){var l=(f=n[a])[0],p=t[l],d=f[1];if(h&&f[2]){if(void 0===p&&!(l in t))return!1}else{var v=new r;if(u)var b=u(p,d,l,t,e,v);if(!(void 0===b?i(d,p,o|s,u,v):b))return!1}}return!0}},function(t,e,n){var r=n(79),i=n(156),o=n(257),s=n(259),u=n(56),a=n(14),c=n(54),h=n(73),f=1,l="[object Arguments]",p="[object Array]",d="[object Object]",v=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,b,y,m){var g=a(t),x=a(e),w=g?p:u(t),_=x?p:u(e),E=(w=w==l?d:w)==d,S=(_=_==l?d:_)==d,j=w==_;if(j&&c(t)){if(!c(e))return!1;g=!0,E=!1}if(j&&!E)return m||(m=new r),g||h(t)?i(t,e,n,b,y,m):o(t,e,w,n,b,y,m);if(!(n&f)){var O=E&&v.call(t,"__wrapped__"),N=S&&v.call(e,"__wrapped__");if(O||N){var k=O?t.value():t,C=N?e.value():e;return m||(m=new r),y(k,C,n,b,m)}}return!!j&&(m||(m=new r),s(t,e,n,b,y,m))}},function(t,e){var n="__lodash_hash_undefined__";t.exports=function(t){return this.__data__.set(t,n),this}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}},function(t,e,n){var r=n(53),i=n(147),o=n(52),s=n(156),u=n(258),a=n(126),c=1,h=2,f="[object Boolean]",l="[object Date]",p="[object Error]",d="[object Map]",v="[object Number]",b="[object RegExp]",y="[object Set]",m="[object String]",g="[object Symbol]",x="[object ArrayBuffer]",w="[object DataView]",_=r?r.prototype:void 0,E=_?_.valueOf:void 0;t.exports=function(t,e,n,r,_,S,j){switch(n){case w:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case x:return!(t.byteLength!=e.byteLength||!S(new i(t),new i(e)));case f:case l:case v:return o(+t,+e);case p:return t.name==e.name&&t.message==e.message;case b:case m:return t==e+"";case d:var O=u;case y:var N=r&c;if(O||(O=a),t.size!=e.size&&!N)return!1;var k=j.get(t);if(k)return k==e;r|=h,j.set(t,e);var C=s(O(t),O(e),r,_,S,j);return j.delete(t),C;case g:if(E)return E.call(t)==E.call(e)}return!1}},function(t,e){t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}},function(t,e,n){var r=n(144),i=1,o=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,s,u,a){var c=n&i,h=r(t),f=h.length;if(f!=r(e).length&&!c)return!1;for(var l=f;l--;){var p=h[l];if(!(c?p in e:o.call(e,p)))return!1}var d=a.get(t);if(d&&a.get(e))return d==e;var v=!0;a.set(t,e),a.set(e,t);for(var b=c;++l<f;){var y=t[p=h[l]],m=e[p];if(s)var g=c?s(m,y,p,e,t,a):s(y,m,p,t,e,a);if(!(void 0===g?y===m||u(y,m,n,s,a):g)){v=!1;break}b||(b="constructor"==p)}if(v&&!b){var x=t.constructor,w=e.constructor;x!=w&&"constructor"in t&&"constructor"in e&&!("function"==typeof x&&x instanceof x&&"function"==typeof w&&w instanceof w)&&(v=!1)}return a.delete(t),a.delete(e),v}},function(t,e,n){var r=n(159),i=n(43);t.exports=function(t){for(var e=i(t),n=e.length;n--;){var o=e[n],s=t[o];e[n]=[o,s,r(s)]}return e}},function(t,e,n){var r=n(155),i=n(262),o=n(162),s=n(128),u=n(159),a=n(160),c=n(74),h=1,f=2;t.exports=function(t,e){return s(t)&&u(e)?a(c(t),e):function(n){var s=i(n,t);return void 0===s&&s===e?o(n,t):r(e,s,h|f)}}},function(t,e,n){var r=n(127);t.exports=function(t,e,n){var i=null==t?void 0:r(t,e);return void 0===i?n:i}},function(t,e,n){var r=n(264),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,s=r(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(i,function(t,n,r,i){e.push(r?i.replace(o,"$1"):n||t)}),e});t.exports=s},function(t,e,n){var r=n(265),i=500;t.exports=function(t){var e=r(t,function(t){return n.size===i&&n.clear(),t}),n=e.cache;return e}},function(t,e,n){var r=n(114),i="Expected a function";function o(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError(i);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var s=t.apply(this,r);return n.cache=o.set(i,s)||o,s};return n.cache=new(o.Cache||r),n}o.Cache=r,t.exports=o},function(t,e,n){var r=n(53),i=n(92),o=n(14),s=n(57),u=1/0,a=r?r.prototype:void 0,c=a?a.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(o(e))return i(e,t)+"";if(s(e))return c?c.call(e):"";var n=e+"";return"0"==n&&1/e==-u?"-0":n}},function(t,e){t.exports=function(t,e){return null!=t&&e in Object(t)}},function(t,e,n){var r=n(164),i=n(269),o=n(128),s=n(74);t.exports=function(t){return o(t)?r(s(t)):i(t)}},function(t,e,n){var r=n(127);t.exports=function(t){return function(e){return r(e,t)}}},function(t,e){var n=Object.prototype.hasOwnProperty;t.exports=function(t,e){return null!=t&&n.call(t,e)}},function(t,e,n){var r=n(119),i=n(56),o=n(72),s=n(14),u=n(39),a=n(54),c=n(88),h=n(73),f="[object Map]",l="[object Set]",p=Object.prototype.hasOwnProperty;t.exports=function(t){if(null==t)return!0;if(u(t)&&(s(t)||"string"==typeof t||"function"==typeof t.splice||a(t)||h(t)||o(t)))return!t.length;var e=i(t);if(e==f||e==l)return!t.size;if(c(t))return!r(t).length;for(var n in t)if(p.call(t,n))return!1;return!0}},function(t,e){t.exports=function(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}},function(t,e){t.exports=function(t,e,n,r,i){return i(t,function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)}),n}},function(t,e,n){var r=n(119),i=n(56),o=n(39),s=n(275),u=n(276),a="[object Map]",c="[object Set]";t.exports=function(t){if(null==t)return 0;if(o(t))return s(t)?u(t):t.length;var e=i(t);return e==a||e==c?t.size:r(t).length}},function(t,e,n){var r=n(46),i=n(14),o=n(32),s="[object String]";t.exports=function(t){return"string"==typeof t||!i(t)&&o(t)&&r(t)==s}},function(t,e,n){var r=n(277),i=n(278),o=n(279);t.exports=function(t){return i(t)?o(t):r(t)}},function(t,e,n){var r=n(164)("length");t.exports=r},function(t,e){var n=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");t.exports=function(t){return n.test(t)}},function(t,e){var n="[\\ud800-\\udfff]",r="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",i="\\ud83c[\\udffb-\\udfff]",o="[^\\ud800-\\udfff]",s="(?:\\ud83c[\\udde6-\\uddff]){2}",u="[\\ud800-\\udbff][\\udc00-\\udfff]",a="(?:"+r+"|"+i+")"+"?",c="[\\ufe0e\\ufe0f]?"+a+("(?:\\u200d(?:"+[o,s,u].join("|")+")[\\ufe0e\\ufe0f]?"+a+")*"),h="(?:"+[o+r+"?",r,s,u,n].join("|")+")",f=RegExp(i+"(?="+i+")|"+h+c,"g");t.exports=function(t){for(var e=f.lastIndex=0;f.test(t);)++e;return e}},function(t,e,n){var r=n(115),i=n(150),o=n(124),s=n(40),u=n(89),a=n(14),c=n(54),h=n(70),f=n(24),l=n(73);t.exports=function(t,e,n){var p=a(t),d=p||c(t)||l(t);if(e=s(e,4),null==n){var v=t&&t.constructor;n=d?p?new v:[]:f(t)&&h(v)?i(u(t)):{}}return(d?r:o)(t,function(t,r,i){return e(n,t,r,i)}),n}},function(t,e,n){var r=n(129),i=n(93),o=n(286),s=n(173),u=i(function(t){return o(r(t,1,s,!0))});t.exports=u},function(t,e,n){var r=n(53),i=n(72),o=n(14),s=r?r.isConcatSpreadable:void 0;t.exports=function(t){return o(t)||i(t)||!!(s&&t&&t[s])}},function(t,e){t.exports=function(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}},function(t,e,n){var r=n(123),i=n(136),o=n(47),s=i?function(t,e){return i(t,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:o;t.exports=s},function(t,e){var n=800,r=16,i=Date.now;t.exports=function(t){var e=0,o=0;return function(){var s=i(),u=r-(s-o);if(o=s,u>0){if(++e>=n)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}},function(t,e,n){var r=n(157),i=n(287),o=n(291),s=n(158),u=n(292),a=n(126),c=200;t.exports=function(t,e,n){var h=-1,f=i,l=t.length,p=!0,d=[],v=d;if(n)p=!1,f=o;else if(l>=c){var b=e?null:u(t);if(b)return a(b);p=!1,f=s,v=new r}else v=e?[]:d;t:for(;++h<l;){var y=t[h],m=e?e(y):y;if(y=n||0!==y?y:0,p&&m==m){for(var g=v.length;g--;)if(v[g]===m)continue t;e&&v.push(m),d.push(y)}else f(v,m,n)||(v!==d&&v.push(m),d.push(y))}return d}},function(t,e,n){var r=n(288);t.exports=function(t,e){return!!(null==t?0:t.length)&&r(t,e,0)>-1}},function(t,e,n){var r=n(172),i=n(289),o=n(290);t.exports=function(t,e,n){return e==e?o(t,e,n):r(t,i,n)}},function(t,e){t.exports=function(t){return t!=t}},function(t,e){t.exports=function(t,e,n){for(var r=n-1,i=t.length;++r<i;)if(t[r]===e)return r;return-1}},function(t,e){t.exports=function(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}},function(t,e,n){var r=n(146),i=n(293),o=n(126),s=r&&1/o(new r([,-0]))[1]==1/0?function(t){return new r(t)}:i;t.exports=s},function(t,e){t.exports=function(){}},function(t,e,n){var r=n(92);t.exports=function(t,e){return r(e,function(e){return t[e]})}},function(t,e){t.exports="2.1.7"},function(t,e,n){var r=n(23),i=n(112);function o(t){return r.map(t.nodes(),function(e){var n=t.node(e),i=t.parent(e),o={v:e};return r.isUndefined(n)||(o.value=n),r.isUndefined(i)||(o.parent=i),o})}function s(t){return r.map(t.edges(),function(e){var n=t.edge(e),i={v:e.v,w:e.w};return r.isUndefined(e.name)||(i.name=e.name),r.isUndefined(n)||(i.value=n),i})}t.exports={write:function(t){var e={options:{directed:t.isDirected(),multigraph:t.isMultigraph(),compound:t.isCompound()},nodes:o(t),edges:s(t)};r.isUndefined(t.graph())||(e.value=r.clone(t.graph()));return e},read:function(t){var e=new i(t.options).setGraph(t.value);return r.each(t.nodes,function(t){e.setNode(t.v,t.value),t.parent&&e.setParent(t.v,t.parent)}),r.each(t.edges,function(t){e.setEdge({v:t.v,w:t.w,name:t.name},t.value)}),e}}},function(t,e,n){t.exports={components:n(298),dijkstra:n(175),dijkstraAll:n(299),findCycles:n(300),floydWarshall:n(301),isAcyclic:n(302),postorder:n(303),preorder:n(304),prim:n(305),tarjan:n(177),topsort:n(178)}},function(t,e,n){var r=n(23);t.exports=function(t){var e,n={},i=[];function o(i){r.has(n,i)||(n[i]=!0,e.push(i),r.each(t.successors(i),o),r.each(t.predecessors(i),o))}return r.each(t.nodes(),function(t){e=[],o(t),e.length&&i.push(e)}),i}},function(t,e,n){var r=n(175),i=n(23);t.exports=function(t,e,n){return i.transform(t.nodes(),function(i,o){i[o]=r(t,o,e,n)},{})}},function(t,e,n){var r=n(23),i=n(177);t.exports=function(t){return r.filter(i(t),function(e){return e.length>1||1===e.length&&t.hasEdge(e[0],e[0])})}},function(t,e,n){var r=n(23);t.exports=function(t,e,n){return function(t,e,n){var r={},i=t.nodes();return i.forEach(function(t){r[t]={},r[t][t]={distance:0},i.forEach(function(e){t!==e&&(r[t][e]={distance:Number.POSITIVE_INFINITY})}),n(t).forEach(function(n){var i=n.v===t?n.w:n.v,o=e(n);r[t][i]={distance:o,predecessor:t}})}),i.forEach(function(t){var e=r[t];i.forEach(function(n){var o=r[n];i.forEach(function(n){var r=o[t],i=e[n],s=o[n],u=r.distance+i.distance;u<s.distance&&(s.distance=u,s.predecessor=i.predecessor)})})}),r}(t,e||i,n||function(e){return t.outEdges(e)})};var i=r.constant(1)},function(t,e,n){var r=n(178);t.exports=function(t){try{r(t)}catch(t){if(t instanceof r.CycleException)return!1;throw t}return!0}},function(t,e,n){var r=n(179);t.exports=function(t,e){return r(t,e,"post")}},function(t,e,n){var r=n(179);t.exports=function(t,e){return r(t,e,"pre")}},function(t,e,n){var r=n(23),i=n(112),o=n(176);t.exports=function(t,e){var n,s=new i,u={},a=new o;function c(t){var r=t.v===n?t.w:t.v,i=a.priority(r);if(void 0!==i){var o=e(t);o<i&&(u[r]=n,a.decrease(r,o))}}if(0===t.nodeCount())return s;r.each(t.nodes(),function(t){a.add(t,Number.POSITIVE_INFINITY),s.setNode(t)}),a.decrease(t.nodes()[0],0);var h=!1;for(;a.size()>0;){if(n=a.removeMin(),r.has(u,n))s.setEdge(n,u[n]);else{if(h)throw new Error("Input graph is not connected: "+t);h=!0}t.nodeEdges(n).forEach(c)}return s}},function(t,e,n){"use strict";var r=n(9),i=n(344),o=n(347),s=n(348),u=n(18).normalizeRanks,a=n(350),c=n(18).removeEmptyRanks,h=n(351),f=n(352),l=n(353),p=n(354),d=n(363),v=n(18),b=n(27).Graph;t.exports=function(t,e){var n=e&&e.debugTiming?v.time:v.notime;n("layout",function(){var e=n("  buildLayoutGraph",function(){return function(t){var e=new b({multigraph:!0,compound:!0}),n=O(t.graph());return e.setGraph(r.merge({},m,j(n,y),r.pick(n,g))),r.forEach(t.nodes(),function(n){var i=O(t.node(n));e.setNode(n,r.defaults(j(i,x),w)),e.setParent(n,t.parent(n))}),r.forEach(t.edges(),function(n){var i=O(t.edge(n));e.setEdge(n,r.merge({},E,j(i,_),r.pick(i,S)))}),e}(t)});n("  runLayout",function(){!function(t,e){e("    makeSpaceForEdgeLabels",function(){!function(t){var e=t.graph();e.ranksep/=2,r.forEach(t.edges(),function(n){var r=t.edge(n);r.minlen*=2,"c"!==r.labelpos.toLowerCase()&&("TB"===e.rankdir||"BT"===e.rankdir?r.width+=r.labeloffset:r.height+=r.labeloffset)})}(t)}),e("    removeSelfEdges",function(){!function(t){r.forEach(t.edges(),function(e){if(e.v===e.w){var n=t.node(e.v);n.selfEdges||(n.selfEdges=[]),n.selfEdges.push({e:e,label:t.edge(e)}),t.removeEdge(e)}})}(t)}),e("    acyclic",function(){i.run(t)}),e("    nestingGraph.run",function(){h.run(t)}),e("    rank",function(){s(v.asNonCompoundGraph(t))}),e("    injectEdgeLabelProxies",function(){!function(t){r.forEach(t.edges(),function(e){var n=t.edge(e);if(n.width&&n.height){var r=t.node(e.v),i={rank:(t.node(e.w).rank-r.rank)/2+r.rank,e:e};v.addDummyNode(t,"edge-proxy",i,"_ep")}})}(t)}),e("    removeEmptyRanks",function(){c(t)}),e("    nestingGraph.cleanup",function(){h.cleanup(t)}),e("    normalizeRanks",function(){u(t)}),e("    assignRankMinMax",function(){!function(t){var e=0;r.forEach(t.nodes(),function(n){var i=t.node(n);i.borderTop&&(i.minRank=t.node(i.borderTop).rank,i.maxRank=t.node(i.borderBottom).rank,e=r.max(e,i.maxRank))}),t.graph().maxRank=e}(t)}),e("    removeEdgeLabelProxies",function(){!function(t){r.forEach(t.nodes(),function(e){var n=t.node(e);"edge-proxy"===n.dummy&&(t.edge(n.e).labelRank=n.rank,t.removeNode(e))})}(t)}),e("    normalize.run",function(){o.run(t)}),e("    parentDummyChains",function(){a(t)}),e("    addBorderSegments",function(){f(t)}),e("    order",function(){p(t)}),e("    insertSelfEdges",function(){!function(t){var e=v.buildLayerMatrix(t);r.forEach(e,function(e){var n=0;r.forEach(e,function(e,i){var o=t.node(e);o.order=i+n,r.forEach(o.selfEdges,function(e){v.addDummyNode(t,"selfedge",{width:e.label.width,height:e.label.height,rank:o.rank,order:i+ ++n,e:e.e,label:e.label},"_se")}),delete o.selfEdges})})}(t)}),e("    adjustCoordinateSystem",function(){l.adjust(t)}),e("    position",function(){d(t)}),e("    positionSelfEdges",function(){!function(t){r.forEach(t.nodes(),function(e){var n=t.node(e);if("selfedge"===n.dummy){var r=t.node(n.e.v),i=r.x+r.width/2,o=r.y,s=n.x-i,u=r.height/2;t.setEdge(n.e,n.label),t.removeNode(e),n.label.points=[{x:i+2*s/3,y:o-u},{x:i+5*s/6,y:o-u},{x:i+s,y:o},{x:i+5*s/6,y:o+u},{x:i+2*s/3,y:o+u}],n.label.x=n.x,n.label.y=n.y}})}(t)}),e("    removeBorderNodes",function(){!function(t){r.forEach(t.nodes(),function(e){if(t.children(e).length){var n=t.node(e),i=t.node(n.borderTop),o=t.node(n.borderBottom),s=t.node(r.last(n.borderLeft)),u=t.node(r.last(n.borderRight));n.width=Math.abs(u.x-s.x),n.height=Math.abs(o.y-i.y),n.x=s.x+n.width/2,n.y=i.y+n.height/2}}),r.forEach(t.nodes(),function(e){"border"===t.node(e).dummy&&t.removeNode(e)})}(t)}),e("    normalize.undo",function(){o.undo(t)}),e("    fixupEdgeLabelCoords",function(){!function(t){r.forEach(t.edges(),function(e){var n=t.edge(e);if(r.has(n,"x"))switch("l"!==n.labelpos&&"r"!==n.labelpos||(n.width-=n.labeloffset),n.labelpos){case"l":n.x-=n.width/2+n.labeloffset;break;case"r":n.x+=n.width/2+n.labeloffset}})}(t)}),e("    undoCoordinateSystem",function(){l.undo(t)}),e("    translateGraph",function(){!function(t){var e=Number.POSITIVE_INFINITY,n=0,i=Number.POSITIVE_INFINITY,o=0,s=t.graph(),u=s.marginx||0,a=s.marginy||0;function c(t){var r=t.x,s=t.y,u=t.width,a=t.height;e=Math.min(e,r-u/2),n=Math.max(n,r+u/2),i=Math.min(i,s-a/2),o=Math.max(o,s+a/2)}r.forEach(t.nodes(),function(e){c(t.node(e))}),r.forEach(t.edges(),function(e){var n=t.edge(e);r.has(n,"x")&&c(n)}),e-=u,i-=a,r.forEach(t.nodes(),function(n){var r=t.node(n);r.x-=e,r.y-=i}),r.forEach(t.edges(),function(n){var o=t.edge(n);r.forEach(o.points,function(t){t.x-=e,t.y-=i}),r.has(o,"x")&&(o.x-=e),r.has(o,"y")&&(o.y-=i)}),s.width=n-e+u,s.height=o-i+a}(t)}),e("    assignNodeIntersects",function(){!function(t){r.forEach(t.edges(),function(e){var n,r,i=t.edge(e),o=t.node(e.v),s=t.node(e.w);i.points?(n=i.points[0],r=i.points[i.points.length-1]):(i.points=[],n=s,r=o),i.points.unshift(v.intersectRect(o,n)),i.points.push(v.intersectRect(s,r))})}(t)}),e("    reversePoints",function(){!function(t){r.forEach(t.edges(),function(e){var n=t.edge(e);n.reversed&&n.points.reverse()})}(t)}),e("    acyclic.undo",function(){i.undo(t)})}(e,n)}),n("  updateInputGraph",function(){!function(t,e){r.forEach(t.nodes(),function(n){var r=t.node(n),i=e.node(n);r&&(r.x=i.x,r.y=i.y,e.children(n).length&&(r.width=i.width,r.height=i.height))}),r.forEach(t.edges(),function(n){var i=t.edge(n),o=e.edge(n);i.points=o.points,r.has(o,"x")&&(i.x=o.x,i.y=o.y)}),t.graph().width=e.graph().width,t.graph().height=e.graph().height}(t,e)})})};var y=["nodesep","edgesep","ranksep","marginx","marginy"],m={ranksep:50,edgesep:20,nodesep:50,rankdir:"tb"},g=["acyclicer","ranker","rankdir","align"],x=["width","height"],w={width:0,height:0},_=["minlen","weight","width","height","labeloffset"],E={minlen:1,weight:1,width:0,height:0,labeloffset:10,labelpos:"r"},S=["labelpos"];function j(t,e){return r.mapValues(r.pick(t,e),Number)}function O(t){var e={};return r.forEach(t,function(t,n){e[n.toLowerCase()]=t}),e}},function(t,e,n){var r=n(133),i=1,o=4;t.exports=function(t){return r(t,i|o)}},function(t,e,n){var r=n(93),i=n(52),o=n(94),s=n(55),u=Object.prototype,a=u.hasOwnProperty,c=r(function(t,e){t=Object(t);var n=-1,r=e.length,c=r>2?e[2]:void 0;for(c&&o(e[0],e[1],c)&&(r=1);++n<r;)for(var h=e[n],f=s(h),l=-1,p=f.length;++l<p;){var d=f[l],v=t[d];(void 0===v||i(v,u[d])&&!a.call(t,d))&&(t[d]=h[d])}return t});t.exports=c},function(t,e,n){var r=n(310)(n(311));t.exports=r},function(t,e,n){var r=n(40),i=n(39),o=n(43);t.exports=function(t){return function(e,n,s){var u=Object(e);if(!i(e)){var a=r(n,3);e=o(e),n=function(t){return a(u[t],t,u)}}var c=t(e,n,s);return c>-1?u[a?e[c]:c]:void 0}}},function(t,e,n){var r=n(172),i=n(40),o=n(312),s=Math.max;t.exports=function(t,e,n){var u=null==t?0:t.length;if(!u)return-1;var a=null==n?0:o(n);return a<0&&(a=s(u+a,0)),r(t,i(e,3),a)}},function(t,e,n){var r=n(180);t.exports=function(t){var e=r(t),n=e%1;return e==e?n?e-n:e:0}},function(t,e,n){var r=n(24),i=n(57),o=NaN,s=/^\s+|\s+$/g,u=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,c=/^0o[0-7]+$/i,h=parseInt;t.exports=function(t){if("number"==typeof t)return t;if(i(t))return o;if(r(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=r(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(s,"");var n=a.test(t);return n||c.test(t)?h(t.slice(2),n?2:8):u.test(t)?o:+t}},function(t,e,n){var r=n(125),i=n(153),o=n(55);t.exports=function(t,e){return null==t?t:r(t,i(e),o)}},function(t,e){t.exports=function(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}},function(t,e,n){var r=n(85),i=n(124),o=n(40);t.exports=function(t,e){var n={};return e=o(e,3),i(t,function(t,i,o){r(n,i,e(t,i,o))}),n}},function(t,e,n){var r=n(130),i=n(318),o=n(47);t.exports=function(t){return t&&t.length?r(t,o,i):void 0}},function(t,e){t.exports=function(t,e){return t>e}},function(t,e,n){var r=n(320),i=n(324)(function(t,e,n){r(t,e,n)});t.exports=i},function(t,e,n){var r=n(79),i=n(182),o=n(125),s=n(321),u=n(24),a=n(55),c=n(183);t.exports=function t(e,n,h,f,l){e!==n&&o(n,function(o,a){if(l||(l=new r),u(o))s(e,n,a,h,t,f,l);else{var p=f?f(c(e,a),o,a+"",e,n,l):void 0;void 0===p&&(p=o),i(e,a,p)}},a)}},function(t,e,n){var r=n(182),i=n(139),o=n(148),s=n(140),u=n(149),a=n(72),c=n(14),h=n(173),f=n(54),l=n(70),p=n(24),d=n(322),v=n(73),b=n(183),y=n(323);t.exports=function(t,e,n,m,g,x,w){var _=b(t,n),E=b(e,n),S=w.get(E);if(S)r(t,n,S);else{var j=x?x(_,E,n+"",t,e,w):void 0,O=void 0===j;if(O){var N=c(E),k=!N&&f(E),C=!N&&!k&&v(E);j=E,N||k||C?c(_)?j=_:h(_)?j=s(_):k?(O=!1,j=i(E,!0)):C?(O=!1,j=o(E,!0)):j=[]:d(E)||a(E)?(j=_,a(_)?j=y(_):p(_)&&!l(_)||(j=u(E))):O=!1}O&&(w.set(E,j),g(j,E,m,x,w),w.delete(E)),r(t,n,j)}}},function(t,e,n){var r=n(46),i=n(89),o=n(32),s="[object Object]",u=Function.prototype,a=Object.prototype,c=u.toString,h=a.hasOwnProperty,f=c.call(Object);t.exports=function(t){if(!o(t)||r(t)!=s)return!1;var e=i(t);if(null===e)return!0;var n=h.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&c.call(n)==f}},function(t,e,n){var r=n(71),i=n(55);t.exports=function(t){return r(t,i(t))}},function(t,e,n){var r=n(93),i=n(94);t.exports=function(t){return r(function(e,n){var r=-1,o=n.length,s=o>1?n[o-1]:void 0,u=o>2?n[2]:void 0;for(s=t.length>3&&"function"==typeof s?(o--,s):void 0,u&&i(n[0],n[1],u)&&(s=o<3?void 0:s,o=1),e=Object(e);++r<o;){var a=n[r];a&&t(e,a,r,s)}return e})}},function(t,e,n){var r=n(130),i=n(184),o=n(47);t.exports=function(t){return t&&t.length?r(t,o,i):void 0}},function(t,e,n){var r=n(130),i=n(40),o=n(184);t.exports=function(t,e){return t&&t.length?r(t,i(e,2),o):void 0}},function(t,e,n){var r=n(28);t.exports=function(){return r.Date.now()}},function(t,e,n){var r=n(329),i=n(332)(function(t,e){return null==t?{}:r(t,e)});t.exports=i},function(t,e,n){var r=n(330),i=n(162);t.exports=function(t,e){return r(t,e,function(e,n){return i(t,n)})}},function(t,e,n){var r=n(127),i=n(331),o=n(91);t.exports=function(t,e,n){for(var s=-1,u=e.length,a={};++s<u;){var c=e[s],h=r(t,c);n(h,c)&&i(a,o(c,t),h)}return a}},function(t,e,n){var r=n(84),i=n(91),o=n(86),s=n(24),u=n(74);t.exports=function(t,e,n,a){if(!s(t))return t;for(var c=-1,h=(e=i(e,t)).length,f=h-1,l=t;null!=l&&++c<h;){var p=u(e[c]),d=n;if(c!=f){var v=l[p];void 0===(d=a?a(v,p,l):void 0)&&(d=s(v)?v:o(e[c+1])?[]:{})}r(l,p,d),l=l[p]}return t}},function(t,e,n){var r=n(181),i=n(170),o=n(171);t.exports=function(t){return o(i(t,void 0,r),t+"")}},function(t,e,n){var r=n(334)();t.exports=r},function(t,e,n){var r=n(335),i=n(94),o=n(180);t.exports=function(t){return function(e,n,s){return s&&"number"!=typeof s&&i(e,n,s)&&(n=s=void 0),e=o(e),void 0===n?(n=e,e=0):n=o(n),s=void 0===s?e<n?1:-1:o(s),r(e,n,s,t)}}},function(t,e){var n=Math.ceil,r=Math.max;t.exports=function(t,e,i,o){for(var s=-1,u=r(n((e-t)/(i||1)),0),a=Array(u);u--;)a[o?u:++s]=t,t+=i;return a}},function(t,e,n){var r=n(129),i=n(337),o=n(93),s=n(94),u=o(function(t,e){if(null==t)return[];var n=e.length;return n>1&&s(t,e[0],e[1])?e=[]:n>2&&s(e[0],e[1],e[2])&&(e=[e[0]]),i(t,r(e,1),[])});t.exports=u},function(t,e,n){var r=n(92),i=n(40),o=n(168),s=n(338),u=n(87),a=n(339),c=n(47);t.exports=function(t,e,n){var h=-1;e=r(e.length?e:[c],u(i));var f=o(t,function(t,n,i){return{criteria:r(e,function(e){return e(t)}),index:++h,value:t}});return s(f,function(t,e){return a(t,e,n)})}},function(t,e){t.exports=function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}},function(t,e,n){var r=n(340);t.exports=function(t,e,n){for(var i=-1,o=t.criteria,s=e.criteria,u=o.length,a=n.length;++i<u;){var c=r(o[i],s[i]);if(c)return i>=a?c:c*("desc"==n[i]?-1:1)}return t.index-e.index}},function(t,e,n){var r=n(57);t.exports=function(t,e){if(t!==e){var n=void 0!==t,i=null===t,o=t==t,s=r(t),u=void 0!==e,a=null===e,c=e==e,h=r(e);if(!a&&!h&&!s&&t>e||s&&u&&c&&!a&&!h||i&&u&&c||!n&&c||!o)return 1;if(!i&&!s&&!h&&t<e||h&&n&&o&&!i&&!s||a&&n&&o||!u&&o||!c)return-1}return 0}},function(t,e,n){var r=n(161),i=0;t.exports=function(t){var e=++i;return r(t)+e}},function(t,e,n){var r=n(84),i=n(343);t.exports=function(t,e){return i(t||[],e||[],r)}},function(t,e){t.exports=function(t,e,n){for(var r=-1,i=t.length,o=e.length,s={};++r<i;){var u=r<o?e[r]:void 0;n(s,t[r],u)}return s}},function(t,e,n){"use strict";var r=n(9),i=n(345);t.exports={run:function(t){var e="greedy"===t.graph().acyclicer?i(t,function(t){return function(e){return t.edge(e).weight}}(t)):function(t){var e=[],n={},i={};return r.forEach(t.nodes(),function o(s){if(r.has(i,s))return;i[s]=!0;n[s]=!0;r.forEach(t.outEdges(s),function(t){r.has(n,t.w)?e.push(t):o(t.w)});delete n[s]}),e}(t);r.forEach(e,function(e){var n=t.edge(e);t.removeEdge(e),n.forwardName=e.name,n.reversed=!0,t.setEdge(e.w,e.v,n,r.uniqueId("rev"))})},undo:function(t){r.forEach(t.edges(),function(e){var n=t.edge(e);if(n.reversed){t.removeEdge(e);var r=n.forwardName;delete n.reversed,delete n.forwardName,t.setEdge(e.w,e.v,n,r)}})}}},function(t,e,n){var r=n(9),i=n(27).Graph,o=n(346);t.exports=function(t,e){if(t.nodeCount()<=1)return[];var n=function(t,e){var n=new i,s=0,u=0;r.forEach(t.nodes(),function(t){n.setNode(t,{v:t,in:0,out:0})}),r.forEach(t.edges(),function(t){var r=n.edge(t.v,t.w)||0,i=e(t),o=r+i;n.setEdge(t.v,t.w,o),u=Math.max(u,n.node(t.v).out+=i),s=Math.max(s,n.node(t.w).in+=i)});var c=r.range(u+s+3).map(function(){return new o}),h=s+1;return r.forEach(n.nodes(),function(t){a(c,h,n.node(t))}),{graph:n,buckets:c,zeroIdx:h}}(t,e||s),c=function(t,e,n){var r,i=[],o=e[e.length-1],s=e[0];for(;t.nodeCount();){for(;r=s.dequeue();)u(t,e,n,r);for(;r=o.dequeue();)u(t,e,n,r);if(t.nodeCount())for(var a=e.length-2;a>0;--a)if(r=e[a].dequeue()){i=i.concat(u(t,e,n,r,!0));break}}return i}(n.graph,n.buckets,n.zeroIdx);return r.flatten(r.map(c,function(e){return t.outEdges(e.v,e.w)}),!0)};var s=r.constant(1);function u(t,e,n,i,o){var s=o?[]:void 0;return r.forEach(t.inEdges(i.v),function(r){var i=t.edge(r),u=t.node(r.v);o&&s.push({v:r.v,w:r.w}),u.out-=i,a(e,n,u)}),r.forEach(t.outEdges(i.v),function(r){var i=t.edge(r),o=r.w,s=t.node(o);s.in-=i,a(e,n,s)}),t.removeNode(i.v),s}function a(t,e,n){n.out?n.in?t[n.out-n.in+e].enqueue(n):t[t.length-1].enqueue(n):t[0].enqueue(n)}},function(t,e){function n(){var t={};t._next=t._prev=t,this._sentinel=t}function r(t){t._prev._next=t._next,t._next._prev=t._prev,delete t._next,delete t._prev}function i(t,e){if("_next"!==t&&"_prev"!==t)return e}t.exports=n,n.prototype.dequeue=function(){var t=this._sentinel,e=t._prev;if(e!==t)return r(e),e},n.prototype.enqueue=function(t){var e=this._sentinel;t._prev&&t._next&&r(t),t._next=e._next,e._next._prev=t,e._next=t,t._prev=e},n.prototype.toString=function(){for(var t=[],e=this._sentinel,n=e._prev;n!==e;)t.push(JSON.stringify(n,i)),n=n._prev;return"["+t.join(", ")+"]"}},function(t,e,n){"use strict";var r=n(9),i=n(18);t.exports={run:function(t){t.graph().dummyChains=[],r.forEach(t.edges(),function(e){!function(t,e){var n,r,o,s=e.v,u=t.node(s).rank,a=e.w,c=t.node(a).rank,h=e.name,f=t.edge(e),l=f.labelRank;if(c===u+1)return;for(t.removeEdge(e),o=0,++u;u<c;++o,++u)f.points=[],r={width:0,height:0,edgeLabel:f,edgeObj:e,rank:u},n=i.addDummyNode(t,"edge",r,"_d"),u===l&&(r.width=f.width,r.height=f.height,r.dummy="edge-label",r.labelpos=f.labelpos),t.setEdge(s,n,{weight:f.weight},h),0===o&&t.graph().dummyChains.push(n),s=n;t.setEdge(s,a,{weight:f.weight},h)}(t,e)})},undo:function(t){r.forEach(t.graph().dummyChains,function(e){var n,r=t.node(e),i=r.edgeLabel;for(t.setEdge(r.edgeObj,i);r.dummy;)n=t.successors(e)[0],t.removeNode(e),i.points.push({x:r.x,y:r.y}),"edge-label"===r.dummy&&(i.x=r.x,i.y=r.y,i.width=r.width,i.height=r.height),e=n,r=t.node(e)})}}},function(t,e,n){"use strict";var r=n(95).longestPath,i=n(185),o=n(349);t.exports=function(t){switch(t.graph().ranker){case"network-simplex":u(t);break;case"tight-tree":!function(t){r(t),i(t)}(t);break;case"longest-path":s(t);break;default:u(t)}};var s=r;function u(t){o(t)}},function(t,e,n){"use strict";var r=n(9),i=n(185),o=n(95).slack,s=n(95).longestPath,u=n(27).alg.preorder,a=n(27).alg.postorder,c=n(18).simplify;function h(t){t=c(t),s(t);var e,n=i(t);for(p(n),f(n,t);e=d(n);)b(n,t,e,v(n,t,e))}function f(t,e){var n=a(t,t.nodes());n=n.slice(0,n.length-1),r.forEach(n,function(n){!function(t,e,n){var r=t.node(n).parent;t.edge(n,r).cutvalue=l(t,e,n)}(t,e,n)})}function l(t,e,n){var i=t.node(n).parent,o=!0,s=e.edge(n,i),u=0;return s||(o=!1,s=e.edge(i,n)),u=s.weight,r.forEach(e.nodeEdges(n),function(r){var s,a,c=r.v===n,h=c?r.w:r.v;if(h!==i){var f=c===o,l=e.edge(r).weight;if(u+=f?l:-l,s=n,a=h,t.hasEdge(s,a)){var p=t.edge(n,h).cutvalue;u+=f?-p:p}}}),u}function p(t,e){arguments.length<2&&(e=t.nodes()[0]),function t(e,n,i,o,s){var u=i,a=e.node(o);n[o]=!0;r.forEach(e.neighbors(o),function(s){r.has(n,s)||(i=t(e,n,i,s,o))});a.low=u;a.lim=i++;s?a.parent=s:delete a.parent;return i}(t,{},1,e)}function d(t){return r.find(t.edges(),function(e){return t.edge(e).cutvalue<0})}function v(t,e,n){var i=n.v,s=n.w;e.hasEdge(i,s)||(i=n.w,s=n.v);var u=t.node(i),a=t.node(s),c=u,h=!1;u.lim>a.lim&&(c=a,h=!0);var f=r.filter(e.edges(),function(e){return h===y(t,t.node(e.v),c)&&h!==y(t,t.node(e.w),c)});return r.minBy(f,function(t){return o(e,t)})}function b(t,e,n,i){var o=n.v,s=n.w;t.removeEdge(o,s),t.setEdge(i.v,i.w,{}),p(t),f(t,e),function(t,e){var n=r.find(t.nodes(),function(t){return!e.node(t).parent}),i=u(t,n);i=i.slice(1),r.forEach(i,function(n){var r=t.node(n).parent,i=e.edge(n,r),o=!1;i||(i=e.edge(r,n),o=!0),e.node(n).rank=e.node(r).rank+(o?i.minlen:-i.minlen)})}(t,e)}function y(t,e,n){return n.low<=e.lim&&e.lim<=n.lim}t.exports=h,h.initLowLimValues=p,h.initCutValues=f,h.calcCutValue=l,h.leaveEdge=d,h.enterEdge=v,h.exchangeEdges=b},function(t,e,n){var r=n(9);t.exports=function(t){var e=function(t){var e={},n=0;return r.forEach(t.children(),function i(o){var s=n;r.forEach(t.children(o),i);e[o]={low:s,lim:n++}}),e}(t);r.forEach(t.graph().dummyChains,function(n){for(var r=t.node(n),i=r.edgeObj,o=function(t,e,n,r){var i,o,s=[],u=[],a=Math.min(e[n].low,e[r].low),c=Math.max(e[n].lim,e[r].lim);i=n;do{i=t.parent(i),s.push(i)}while(i&&(e[i].low>a||c>e[i].lim));o=i,i=r;for(;(i=t.parent(i))!==o;)u.push(i);return{path:s.concat(u.reverse()),lca:o}}(t,e,i.v,i.w),s=o.path,u=o.lca,a=0,c=s[a],h=!0;n!==i.w;){if(r=t.node(n),h){for(;(c=s[a])!==u&&t.node(c).maxRank<r.rank;)a++;c===u&&(h=!1)}if(!h){for(;a<s.length-1&&t.node(c=s[a+1]).minRank<=r.rank;)a++;c=s[a]}t.setParent(n,c),n=t.successors(n)[0]}})}},function(t,e,n){var r=n(9),i=n(18);t.exports={run:function(t){var e=i.addDummyNode(t,"root",{},"_root"),n=function(t){var e={};return r.forEach(t.children(),function(n){!function n(i,o){var s=t.children(i);s&&s.length&&r.forEach(s,function(t){n(t,o+1)});e[i]=o}(n,1)}),e}(t),o=r.max(r.values(n))-1,s=2*o+1;t.graph().nestingRoot=e,r.forEach(t.edges(),function(e){t.edge(e).minlen*=s});var u=function(t){return r.reduce(t.edges(),function(e,n){return e+t.edge(n).weight},0)}(t)+1;r.forEach(t.children(),function(a){!function t(e,n,o,s,u,a,c){var h=e.children(c);if(!h.length)return void(c!==n&&e.setEdge(n,c,{weight:0,minlen:o}));var f=i.addBorderNode(e,"_bt"),l=i.addBorderNode(e,"_bb"),p=e.node(c);e.setParent(f,c);p.borderTop=f;e.setParent(l,c);p.borderBottom=l;r.forEach(h,function(r){t(e,n,o,s,u,a,r);var i=e.node(r),h=i.borderTop?i.borderTop:r,p=i.borderBottom?i.borderBottom:r,d=i.borderTop?s:2*s,v=h!==p?1:u-a[c]+1;e.setEdge(f,h,{weight:d,minlen:v,nestingEdge:!0}),e.setEdge(p,l,{weight:d,minlen:v,nestingEdge:!0})});e.parent(c)||e.setEdge(n,f,{weight:0,minlen:u+a[c]})}(t,e,s,u,o,n,a)}),t.graph().nodeRankFactor=s},cleanup:function(t){var e=t.graph();t.removeNode(e.nestingRoot),delete e.nestingRoot,r.forEach(t.edges(),function(e){t.edge(e).nestingEdge&&t.removeEdge(e)})}}},function(t,e,n){var r=n(9),i=n(18);function o(t,e,n,r,o,s){var u={width:0,height:0,rank:s,borderType:e},a=o[e][s-1],c=i.addDummyNode(t,"border",u,n);o[e][s]=c,t.setParent(c,r),a&&t.setEdge(a,c,{weight:1})}t.exports=function(t){r.forEach(t.children(),function e(n){var i=t.children(n),s=t.node(n);if(i.length&&r.forEach(i,e),r.has(s,"minRank")){s.borderLeft=[],s.borderRight=[];for(var u=s.minRank,a=s.maxRank+1;u<a;++u)o(t,"borderLeft","_bl",n,s,u),o(t,"borderRight","_br",n,s,u)}})}},function(t,e,n){"use strict";var r=n(9);function i(t){r.forEach(t.nodes(),function(e){o(t.node(e))}),r.forEach(t.edges(),function(e){o(t.edge(e))})}function o(t){var e=t.width;t.width=t.height,t.height=e}function s(t){t.y=-t.y}function u(t){var e=t.x;t.x=t.y,t.y=e}t.exports={adjust:function(t){var e=t.graph().rankdir.toLowerCase();"lr"!==e&&"rl"!==e||i(t)},undo:function(t){var e=t.graph().rankdir.toLowerCase();"bt"!==e&&"rl"!==e||function(t){r.forEach(t.nodes(),function(e){s(t.node(e))}),r.forEach(t.edges(),function(e){var n=t.edge(e);r.forEach(n.points,s),r.has(n,"y")&&s(n)})}(t);"lr"!==e&&"rl"!==e||(!function(t){r.forEach(t.nodes(),function(e){u(t.node(e))}),r.forEach(t.edges(),function(e){var n=t.edge(e);r.forEach(n.points,u),r.has(n,"x")&&u(n)})}(t),i(t))}}},function(t,e,n){"use strict";var r=n(9),i=n(355),o=n(356),s=n(357),u=n(361),a=n(362),c=n(27).Graph,h=n(18);function f(t,e,n){return r.map(e,function(e){return u(t,e,n)})}function l(t,e){var n=new c;r.forEach(t,function(t){var i=t.graph().root,o=s(t,i,n,e);r.forEach(o.vs,function(e,n){t.node(e).order=n}),a(t,n,o.vs)})}function p(t,e){r.forEach(e,function(e){r.forEach(e,function(e,n){t.node(e).order=n})})}t.exports=function(t){var e=h.maxRank(t),n=f(t,r.range(1,e+1),"inEdges"),s=f(t,r.range(e-1,-1,-1),"outEdges"),u=i(t);p(t,u);for(var a,c=Number.POSITIVE_INFINITY,d=0,v=0;v<4;++d,++v){l(d%2?n:s,d%4>=2),u=h.buildLayerMatrix(t);var b=o(t,u);b<c&&(v=0,a=r.cloneDeep(u),c=b)}p(t,a)}},function(t,e,n){"use strict";var r=n(9);t.exports=function(t){var e={},n=r.filter(t.nodes(),function(e){return!t.children(e).length}),i=r.max(r.map(n,function(e){return t.node(e).rank})),o=r.map(r.range(i+1),function(){return[]});var s=r.sortBy(n,function(e){return t.node(e).rank});return r.forEach(s,function n(i){if(r.has(e,i))return;e[i]=!0;var s=t.node(i);o[s.rank].push(i);r.forEach(t.successors(i),n)}),o}},function(t,e,n){"use strict";var r=n(9);function i(t,e,n){for(var i=r.zipObject(n,r.map(n,function(t,e){return e})),o=r.flatten(r.map(e,function(e){return r.sortBy(r.map(t.outEdges(e),function(e){return{pos:i[e.w],weight:t.edge(e).weight}}),"pos")}),!0),s=1;s<n.length;)s<<=1;var u=2*s-1;s-=1;var a=r.map(new Array(u),function(){return 0}),c=0;return r.forEach(o.forEach(function(t){var e=t.pos+s;a[e]+=t.weight;for(var n=0;e>0;)e%2&&(n+=a[e+1]),a[e=e-1>>1]+=t.weight;c+=t.weight*n})),c}t.exports=function(t,e){for(var n=0,r=1;r<e.length;++r)n+=i(t,e[r-1],e[r]);return n}},function(t,e,n){var r=n(9),i=n(358),o=n(359),s=n(360);t.exports=function t(e,n,u,a){var c=e.children(n),h=e.node(n),f=h?h.borderLeft:void 0,l=h?h.borderRight:void 0,p={};f&&(c=r.filter(c,function(t){return t!==f&&t!==l}));var d=i(e,c);r.forEach(d,function(n){if(e.children(n.v).length){var i=t(e,n.v,u,a);p[n.v]=i,r.has(i,"barycenter")&&(o=n,s=i,r.isUndefined(o.barycenter)?(o.barycenter=s.barycenter,o.weight=s.weight):(o.barycenter=(o.barycenter*o.weight+s.barycenter*s.weight)/(o.weight+s.weight),o.weight+=s.weight))}var o,s});var v=o(d,u);!function(t,e){r.forEach(t,function(t){t.vs=r.flatten(t.vs.map(function(t){return e[t]?e[t].vs:t}),!0)})}(v,p);var b=s(v,a);if(f&&(b.vs=r.flatten([f,b.vs,l],!0),e.predecessors(f).length)){var y=e.node(e.predecessors(f)[0]),m=e.node(e.predecessors(l)[0]);r.has(b,"barycenter")||(b.barycenter=0,b.weight=0),b.barycenter=(b.barycenter*b.weight+y.order+m.order)/(b.weight+2),b.weight+=2}return b}},function(t,e,n){var r=n(9);t.exports=function(t,e){return r.map(e,function(e){var n=t.inEdges(e);if(n.length){var i=r.reduce(n,function(e,n){var r=t.edge(n),i=t.node(n.v);return{sum:e.sum+r.weight*i.order,weight:e.weight+r.weight}},{sum:0,weight:0});return{v:e,barycenter:i.sum/i.weight,weight:i.weight}}return{v:e}})}},function(t,e,n){"use strict";var r=n(9);t.exports=function(t,e){var n={};return r.forEach(t,function(t,e){var i=n[t.v]={indegree:0,in:[],out:[],vs:[t.v],i:e};r.isUndefined(t.barycenter)||(i.barycenter=t.barycenter,i.weight=t.weight)}),r.forEach(e.edges(),function(t){var e=n[t.v],i=n[t.w];r.isUndefined(e)||r.isUndefined(i)||(i.indegree++,e.out.push(n[t.w]))}),function(t){var e=[];function n(t){return function(e){e.merged||(r.isUndefined(e.barycenter)||r.isUndefined(t.barycenter)||e.barycenter>=t.barycenter)&&function(t,e){var n=0,r=0;t.weight&&(n+=t.barycenter*t.weight,r+=t.weight);e.weight&&(n+=e.barycenter*e.weight,r+=e.weight);t.vs=e.vs.concat(t.vs),t.barycenter=n/r,t.weight=r,t.i=Math.min(e.i,t.i),e.merged=!0}(t,e)}}function i(e){return function(n){n.in.push(e),0==--n.indegree&&t.push(n)}}for(;t.length;){var o=t.pop();e.push(o),r.forEach(o.in.reverse(),n(o)),r.forEach(o.out,i(o))}return r.map(r.filter(e,function(t){return!t.merged}),function(t){return r.pick(t,["vs","i","barycenter","weight"])})}(r.filter(n,function(t){return!t.indegree}))}},function(t,e,n){var r=n(9),i=n(18);function o(t,e,n){for(var i;e.length&&(i=r.last(e)).i<=n;)e.pop(),t.push(i.vs),n++;return n}t.exports=function(t,e){var n=i.partition(t,function(t){return r.has(t,"barycenter")}),s=n.lhs,u=r.sortBy(n.rhs,function(t){return-t.i}),a=[],c=0,h=0,f=0;s.sort((l=!!e,function(t,e){return t.barycenter<e.barycenter?-1:t.barycenter>e.barycenter?1:l?e.i-t.i:t.i-e.i})),f=o(a,u,f),r.forEach(s,function(t){f+=t.vs.length,a.push(t.vs),c+=t.barycenter*t.weight,h+=t.weight,f=o(a,u,f)});var l;var p={vs:r.flatten(a,!0)};h&&(p.barycenter=c/h,p.weight=h);return p}},function(t,e,n){var r=n(9),i=n(27).Graph;t.exports=function(t,e,n){var o=function(t){var e;for(;t.hasNode(e=r.uniqueId("_root")););return e}(t),s=new i({compound:!0}).setGraph({root:o}).setDefaultNodeLabel(function(e){return t.node(e)});return r.forEach(t.nodes(),function(i){var u=t.node(i),a=t.parent(i);(u.rank===e||u.minRank<=e&&e<=u.maxRank)&&(s.setNode(i),s.setParent(i,a||o),r.forEach(t[n](i),function(e){var n=e.v===i?e.w:e.v,o=s.edge(n,i),u=r.isUndefined(o)?0:o.weight;s.setEdge(n,i,{weight:t.edge(e).weight+u})}),r.has(u,"minRank")&&s.setNode(i,{borderLeft:u.borderLeft[e],borderRight:u.borderRight[e]}))}),s}},function(t,e,n){var r=n(9);t.exports=function(t,e,n){var i,o={};r.forEach(n,function(n){for(var r,s,u=t.parent(n);u;){if((r=t.parent(u))?(s=o[r],o[r]=u):(s=i,i=u),s&&s!==u)return void e.setEdge(s,u);u=r}})}},function(t,e,n){"use strict";var r=n(9),i=n(18),o=n(364).positionX;t.exports=function(t){(function(t){var e=i.buildLayerMatrix(t),n=t.graph().ranksep,o=0;r.forEach(e,function(e){var i=r.max(r.map(e,function(e){return t.node(e).height}));r.forEach(e,function(e){t.node(e).y=o+i/2}),o+=i+n})})(t=i.asNonCompoundGraph(t)),r.forEach(o(t),function(e,n){t.node(n).x=e})}},function(t,e,n){"use strict";var r=n(9),i=n(27).Graph,o=n(18);function s(t,e){var n={};return r.reduce(e,function(e,i){var o=0,s=0,u=e.length,c=r.last(i);return r.forEach(i,function(e,h){var f=function(t,e){if(t.node(e).dummy)return r.find(t.predecessors(e),function(e){return t.node(e).dummy})}(t,e),l=f?t.node(f).order:u;(f||e===c)&&(r.forEach(i.slice(s,h+1),function(e){r.forEach(t.predecessors(e),function(r){var i=t.node(r),s=i.order;!(s<o||l<s)||i.dummy&&t.node(e).dummy||a(n,r,e)})}),s=h+1,o=l)}),i}),n}function u(t,e){var n={};function i(e,i,o,s,u){var c;r.forEach(r.range(i,o),function(i){c=e[i],t.node(c).dummy&&r.forEach(t.predecessors(c),function(e){var r=t.node(e);r.dummy&&(r.order<s||r.order>u)&&a(n,e,c)})})}return r.reduce(e,function(e,n){var o,s=-1,u=0;return r.forEach(n,function(r,a){if("border"===t.node(r).dummy){var c=t.predecessors(r);c.length&&(o=t.node(c[0]).order,i(n,u,a,s,o),u=a,s=o)}i(n,u,n.length,o,e.length)}),n}),n}function a(t,e,n){if(e>n){var r=e;e=n,n=r}var i=t[e];i||(t[e]=i={}),i[n]=!0}function c(t,e,n){if(e>n){var i=e;e=n,n=i}return r.has(t[e],n)}function h(t,e,n,i){var o={},s={},u={};return r.forEach(e,function(t){r.forEach(t,function(t,e){o[t]=t,s[t]=t,u[t]=e})}),r.forEach(e,function(t){var e=-1;r.forEach(t,function(t){var a=i(t);if(a.length)for(var h=((a=r.sortBy(a,function(t){return u[t]})).length-1)/2,f=Math.floor(h),l=Math.ceil(h);f<=l;++f){var p=a[f];s[t]===t&&e<u[p]&&!c(n,t,p)&&(s[p]=t,s[t]=o[t]=o[p],e=u[p])}})}),{root:o,align:s}}function f(t,e,n,o,s){var u={},a=function(t,e,n,o){var s=new i,u=t.graph(),a=function(t,e,n){return function(i,o,s){var u,a=i.node(o),c=i.node(s),h=0;if(h+=a.width/2,r.has(a,"labelpos"))switch(a.labelpos.toLowerCase()){case"l":u=-a.width/2;break;case"r":u=a.width/2}if(u&&(h+=n?u:-u),u=0,h+=(a.dummy?e:t)/2,h+=(c.dummy?e:t)/2,h+=c.width/2,r.has(c,"labelpos"))switch(c.labelpos.toLowerCase()){case"l":u=c.width/2;break;case"r":u=-c.width/2}return u&&(h+=n?u:-u),u=0,h}}(u.nodesep,u.edgesep,o);return r.forEach(e,function(e){var i;r.forEach(e,function(e){var r=n[e];if(s.setNode(r),i){var o=n[i],u=s.edge(o,r);s.setEdge(o,r,Math.max(a(t,e,i),u||0))}i=e})}),s}(t,e,n,s),c=s?"borderLeft":"borderRight";function h(t,e){for(var n=a.nodes(),r=n.pop(),i={};r;)i[r]?t(r):(i[r]=!0,n.push(r),n=n.concat(e(r))),r=n.pop()}return h(function(t){u[t]=a.inEdges(t).reduce(function(t,e){return Math.max(t,u[e.v]+a.edge(e))},0)},a.predecessors.bind(a)),h(function(e){var n=a.outEdges(e).reduce(function(t,e){return Math.min(t,u[e.w]-a.edge(e))},Number.POSITIVE_INFINITY),r=t.node(e);n!==Number.POSITIVE_INFINITY&&r.borderType!==c&&(u[e]=Math.max(u[e],n))},a.successors.bind(a)),r.forEach(o,function(t){u[t]=u[n[t]]}),u}function l(t,e){return r.minBy(r.values(e),function(e){var n=Number.NEGATIVE_INFINITY,i=Number.POSITIVE_INFINITY;return r.forIn(e,function(e,r){var o=function(t,e){return t.node(e).width}(t,r)/2;n=Math.max(e+o,n),i=Math.min(e-o,i)}),n-i})}function p(t,e){var n=r.values(e),i=r.min(n),o=r.max(n);r.forEach(["u","d"],function(n){r.forEach(["l","r"],function(s){var u,a=n+s,c=t[a];if(c!==e){var h=r.values(c);(u="l"===s?i-r.min(h):o-r.max(h))&&(t[a]=r.mapValues(c,function(t){return t+u}))}})})}function d(t,e){return r.mapValues(t.ul,function(n,i){if(e)return t[e.toLowerCase()][i];var o=r.sortBy(r.map(t,i));return(o[1]+o[2])/2})}t.exports={positionX:function(t){var e,n=o.buildLayerMatrix(t),i=r.merge(s(t,n),u(t,n)),a={};r.forEach(["u","d"],function(o){e="u"===o?n:r.values(n).reverse(),r.forEach(["l","r"],function(n){"r"===n&&(e=r.map(e,function(t){return r.values(t).reverse()}));var s=("u"===o?t.predecessors:t.successors).bind(t),u=h(t,e,i,s),c=f(t,e,u.root,u.align,"r"===n);"r"===n&&(c=r.mapValues(c,function(t){return-t})),a[o+n]=c})});var c=l(t,a);return p(a,c),d(a,t.graph().align)},findType1Conflicts:s,findType2Conflicts:u,addConflict:a,hasConflict:c,verticalAlignment:h,horizontalCompaction:f,alignCoordinates:p,findSmallestWidthAlignment:l,balance:d}},function(t,e,n){var r=n(9),i=n(18),o=n(27).Graph;t.exports={debugOrdering:function(t){var e=i.buildLayerMatrix(t),n=new o({compound:!0,multigraph:!0}).setGraph({});return r.forEach(t.nodes(),function(e){n.setNode(e,{label:e}),n.setParent(e,"layer"+t.node(e).rank)}),r.forEach(t.edges(),function(t){n.setEdge(t.v,t.w,{},t.name)}),r.forEach(e,function(t,e){var i="layer"+e;n.setNode(i,{rank:"same"}),r.reduce(t,function(t,e){return n.setEdge(t,e,{style:"invis"}),e})}),n}}},function(t,e){t.exports="0.8.4"},function(t,e,n){"use strict";e.__esModule=!0;var r=n(78),i=n(368),o=n(132),s=function(t,e){var n=this;this.id=t,this.scene=e,this.nodeDisplays=new Map,this.edgeDisplays=new Map,this.svg=i(t),this.scene.getNodesStream().subscribe(function(t){var e=t.map(function(t){return t.getID()}),r=Array.from(n.nodeDisplays.keys()),i=new Set(o.difference(e,r));new Set(o.difference(r,e)).forEach(function(t){n.nodeDisplays.get(t).remove(),n.nodeDisplays.delete(t)}),t.forEach(function(t){var e=t.getID();if(i.has(e)){var r=new u(n.svg,t);n.nodeDisplays.set(e,r)}})}),this.scene.getEdgesStream().subscribe(function(t){var e=t.map(function(t){return t.getID()}),r=Array.from(n.edgeDisplays.keys()),i=new Set(o.difference(e,r));new Set(o.difference(r,e)).forEach(function(t){n.edgeDisplays.get(t).remove(),n.edgeDisplays.delete(t)}),t.forEach(function(t){var e=t.getID();if(i.has(e)){var r=new c(n.svg,t);n.edgeDisplays.set(e,r)}})})};e.SceneDisplay=s;var u=function(){function t(t,e){var n=this;this.svg=t,this.node=e,this.propDisplays=new Map,this.rect=this.svg.rect(0,0).attr({"fill-opacity":0,stroke:"#000","stroke-width":1}),this.label=this.svg.text(this.node.getLabel()),this.layoutSubscription=this.node.getLayoutStream().subscribe(function(t){n.rect.attr({width:t.width,height:t.height,x:t.x-t.width/2,y:t.y-t.height/2}),n.label.move(t.x-t.width/2+5,t.y-t.height/2+5);var e=Object.keys(t.inputs).map(function(e){return[e,t.inputs[e],r.IO.Input]}),i=Object.keys(t.outputs).map(function(e){return[e,t.outputs[e],r.IO.Output]}),s=e.concat(i),u=[];s.forEach(function(t){var e=t[0],r=t[1],i=t[2],s=o.getPropID(n.node.getID(),e,i);u.push(s),n.propDisplays.has(s)||n.propDisplays.set(s,new a(n.svg,n.node,e,i)),n.propDisplays.get(s).setLayout(r)});var c=[];n.propDisplays.forEach(function(t,e){u.indexOf(e)<0&&(t.remove(),c.push(e))}),c.forEach(function(t){return n.propDisplays.delete(t)})})}return t.prototype.remove=function(){this.rect.remove(),this.label.remove(),this.propDisplays.forEach(function(t){t.remove()}),this.layoutSubscription.unsubscribe()},t}();e.NodeDisplay=u;var a=function(){function t(t,e,n,i){var o=this;this.svg=t,this.node=e,this.propName=n,this.io=i,this.rect=this.svg.rect(0,0).attr({"fill-opacity":0,stroke:i===r.IO.Input?"#000":"#F00","stroke-width":1}),this.label=this.svg.text("'"+this.propName+"'"),this.io===r.IO.Output&&(this.outputSubscription=this.node.pluckOutput(this.propName).subscribe(function(t){o.label.text("'"+o.propName+"': "+JSON.stringify(t))}))}return t.prototype.setLayout=function(t){this.rect.attr({width:t.width,height:t.height,x:t.x-t.width/2,y:t.y-t.height/2}),this.label.move(t.x-t.width/2+5,t.y-t.height/2+5)},t.prototype.remove=function(){this.outputSubscription&&this.outputSubscription.unsubscribe(),this.rect.remove(),this.label.remove()},t}();e.PropDisplay=a;var c=function(){function t(e,n){var r=this;this.svg=e,this.edge=n,this.line=this.svg.path("").attr({"fill-opacity":0,stroke:"#000","stroke-width":1}),this.edge.getLayoutStream().subscribe(function(e){var n=e.points;if(n.length>1){for(var i=n.map(function(t){return t.x+" "+t.y}),o="M "+i[0],s=1;s<i.length-1;s+=2)o+=" Q "+i[s]+" "+i[s+1];var u=n[n.length-2],a=n[n.length-1];o+=t.getArrowPath(u,a),r.line.plot(o)}})}return t.prototype.remove=function(){this.line.remove()},t.getArrowPath=function(t,e){var n=Math.atan2(t.y-e.y,t.x-e.x),r=20*Math.PI/180;return" m "+10*Math.cos(n+r)+" "+10*Math.sin(n+r)+" L "+e.x+" "+e.y+" l "+10*Math.cos(n-r)+" "+10*Math.sin(n-r)},t}();e.EdgeDisplay=c},function(t,e,n){var r,i;
/*!
* svg.js - A lightweight library for manipulating and animating SVG.
* @version 2.7.1
* https://svgdotjs.github.io/
*
* @copyright Wout Fierens <wout@mick-wout.com>
* @license MIT
*
* BUILT: Fri Nov 30 2018 10:01:55 GMT+0100 (GMT+01:00)
*/i="undefined"!=typeof window?window:this,void 0===(r=function(){return function(t,e){var n=(void 0!==this?this:t).SVG=function(t){if(n.supported)return t=new n.Doc(t),n.parser.draw||n.prepare(),t};if(n.ns="http://www.w3.org/2000/svg",n.xmlns="http://www.w3.org/2000/xmlns/",n.xlink="http://www.w3.org/1999/xlink",n.svgjs="http://svgjs.com/svgjs",n.supported=!!e.createElementNS&&!!e.createElementNS(n.ns,"svg").createSVGRect,!n.supported)return!1;n.did=1e3,n.eid=function(t){return"Svgjs"+h(t)+n.did++},n.create=function(t){var n=e.createElementNS(this.ns,t);return n.setAttribute("id",this.eid(t)),n},n.extend=function(){var t,e,r,i;for(e=(t=[].slice.call(arguments)).pop(),i=t.length-1;i>=0;i--)if(t[i])for(r in e)t[i].prototype[r]=e[r];n.Set&&n.Set.inherit&&n.Set.inherit()},n.invent=function(t){var e="function"==typeof t.create?t.create:function(){this.constructor.call(this,n.create(t.create))};return t.inherit&&(e.prototype=new t.inherit),t.extend&&n.extend(e,t.extend),t.construct&&n.extend(t.parent||n.Container,t.construct),e},n.adopt=function(e){return e?e.instance?e.instance:((r="svg"==e.nodeName?e.parentNode instanceof t.SVGElement?new n.Nested:new n.Doc:"linearGradient"==e.nodeName?new n.Gradient("linear"):"radialGradient"==e.nodeName?new n.Gradient("radial"):n[h(e.nodeName)]?new(n[h(e.nodeName)]):new n.Element(e)).type=e.nodeName,r.node=e,e.instance=r,r instanceof n.Doc&&r.namespace().defs(),r.setData(JSON.parse(e.getAttribute("svgjs:data"))||{}),r):null;var r},n.prepare=function(){var t=e.getElementsByTagName("body")[0],r=(t?new n.Doc(t):n.adopt(e.documentElement).nested()).size(2,0);n.parser={body:t||e.documentElement,draw:r.style("opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden").attr("focusable","false").node,poly:r.polyline().node,path:r.path().node,native:n.create("svg")}},n.parser={native:n.create("svg")},e.addEventListener("DOMContentLoaded",function(){n.parser.draw||n.prepare()},!1),n.regex={numberAndUnit:/^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,hex:/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,rgb:/rgb\((\d+),(\d+),(\d+)\)/,reference:/#([a-z0-9\-_]+)/i,transforms:/\)\s*,?\s*/,whitespace:/\s/g,isHex:/^#[a-f0-9]{3,6}$/i,isRgb:/^rgb\(/,isCss:/[^:]+:[^;]+;?/,isBlank:/^(\s+)?$/,isNumber:/^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,isPercent:/^-?[\d\.]+%$/,isImage:/\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,delimiter:/[\s,]+/,hyphen:/([^e])\-/gi,pathLetters:/[MLHVCSQTAZ]/gi,isPathLetter:/[MLHVCSQTAZ]/i,numbersWithDots:/((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,dots:/\./g},n.utils={map:function(t,e){var n,r=t.length,i=[];for(n=0;n<r;n++)i.push(e(t[n]));return i},filter:function(t,e){var n,r=t.length,i=[];for(n=0;n<r;n++)e(t[n])&&i.push(t[n]);return i},radians:function(t){return t%360*Math.PI/180},degrees:function(t){return 180*t/Math.PI%360},filterSVGElements:function(e){return this.filter(e,function(e){return e instanceof t.SVGElement})}},n.defaults={attrs:{"fill-opacity":1,"stroke-opacity":1,"stroke-width":0,"stroke-linejoin":"miter","stroke-linecap":"butt",fill:"#000000",stroke:"#000000",opacity:1,x:0,y:0,cx:0,cy:0,width:0,height:0,r:0,rx:0,ry:0,offset:0,"stop-opacity":1,"stop-color":"#000000","font-size":16,"font-family":"Helvetica, Arial, sans-serif","text-anchor":"start"}},n.Color=function(t){var e,r;this.r=0,this.g=0,this.b=0,t&&("string"==typeof t?n.regex.isRgb.test(t)?(e=n.regex.rgb.exec(t.replace(n.regex.whitespace,"")),this.r=parseInt(e[1]),this.g=parseInt(e[2]),this.b=parseInt(e[3])):n.regex.isHex.test(t)&&(e=n.regex.hex.exec(4==(r=t).length?["#",r.substring(1,2),r.substring(1,2),r.substring(2,3),r.substring(2,3),r.substring(3,4),r.substring(3,4)].join(""):r),this.r=parseInt(e[1],16),this.g=parseInt(e[2],16),this.b=parseInt(e[3],16)):"object"==typeof t&&(this.r=t.r,this.g=t.g,this.b=t.b))},n.extend(n.Color,{toString:function(){return this.toHex()},toHex:function(){return"#"+f(this.r)+f(this.g)+f(this.b)},toRgb:function(){return"rgb("+[this.r,this.g,this.b].join()+")"},brightness:function(){return this.r/255*.3+this.g/255*.59+this.b/255*.11},morph:function(t){return this.destination=new n.Color(t),this},at:function(t){return this.destination?(t=t<0?0:t>1?1:t,new n.Color({r:~~(this.r+(this.destination.r-this.r)*t),g:~~(this.g+(this.destination.g-this.g)*t),b:~~(this.b+(this.destination.b-this.b)*t)})):this}}),n.Color.test=function(t){return t+="",n.regex.isHex.test(t)||n.regex.isRgb.test(t)},n.Color.isRgb=function(t){return t&&"number"==typeof t.r&&"number"==typeof t.g&&"number"==typeof t.b},n.Color.isColor=function(t){return n.Color.isRgb(t)||n.Color.test(t)},n.Array=function(t,e){0==(t=(t||[]).valueOf()).length&&e&&(t=e.valueOf()),this.value=this.parse(t)},n.extend(n.Array,{morph:function(t){if(this.destination=this.parse(t),this.value.length!=this.destination.length){for(var e=this.value[this.value.length-1],n=this.destination[this.destination.length-1];this.value.length>this.destination.length;)this.destination.push(n);for(;this.value.length<this.destination.length;)this.value.push(e)}return this},settle:function(){for(var t=0,e=this.value.length,n=[];t<e;t++)-1==n.indexOf(this.value[t])&&n.push(this.value[t]);return this.value=n},at:function(t){if(!this.destination)return this;for(var e=0,r=this.value.length,i=[];e<r;e++)i.push(this.value[e]+(this.destination[e]-this.value[e])*t);return new n.Array(i)},toString:function(){return this.value.join(" ")},valueOf:function(){return this.value},parse:function(t){return t=t.valueOf(),Array.isArray(t)?t:this.split(t)},split:function(t){return t.trim().split(n.regex.delimiter).map(parseFloat)},reverse:function(){return this.value.reverse(),this},clone:function(){var t=new this.constructor;return t.value=function t(e){for(var n=e.slice(0),r=n.length;r--;)Array.isArray(n[r])&&(n[r]=t(n[r]));return n}(this.value),t}}),n.PointArray=function(t,e){n.Array.call(this,t,e||[[0,0]])},n.PointArray.prototype=new n.Array,n.PointArray.prototype.constructor=n.PointArray,n.extend(n.PointArray,{toString:function(){for(var t=0,e=this.value.length,n=[];t<e;t++)n.push(this.value[t].join(","));return n.join(" ")},toLine:function(){return{x1:this.value[0][0],y1:this.value[0][1],x2:this.value[1][0],y2:this.value[1][1]}},at:function(t){if(!this.destination)return this;for(var e=0,r=this.value.length,i=[];e<r;e++)i.push([this.value[e][0]+(this.destination[e][0]-this.value[e][0])*t,this.value[e][1]+(this.destination[e][1]-this.value[e][1])*t]);return new n.PointArray(i)},parse:function(t){var e=[];if(t=t.valueOf(),Array.isArray(t)){if(Array.isArray(t[0]))return t.map(function(t){return t.slice()});if(null!=t[0].x)return t.map(function(t){return[t.x,t.y]})}else t=t.trim().split(n.regex.delimiter).map(parseFloat);t.length%2!=0&&t.pop();for(var r=0,i=t.length;r<i;r+=2)e.push([t[r],t[r+1]]);return e},move:function(t,e){var n=this.bbox();if(t-=n.x,e-=n.y,!isNaN(t)&&!isNaN(e))for(var r=this.value.length-1;r>=0;r--)this.value[r]=[this.value[r][0]+t,this.value[r][1]+e];return this},size:function(t,e){var n,r=this.bbox();for(n=this.value.length-1;n>=0;n--)r.width&&(this.value[n][0]=(this.value[n][0]-r.x)*t/r.width+r.x),r.height&&(this.value[n][1]=(this.value[n][1]-r.y)*e/r.height+r.y);return this},bbox:function(){return n.parser.poly.setAttribute("points",this.toString()),n.parser.poly.getBBox()}});for(var r={M:function(t,e,n){return e.x=n.x=t[0],e.y=n.y=t[1],["M",e.x,e.y]},L:function(t,e){return e.x=t[0],e.y=t[1],["L",t[0],t[1]]},H:function(t,e){return e.x=t[0],["H",t[0]]},V:function(t,e){return e.y=t[0],["V",t[0]]},C:function(t,e){return e.x=t[4],e.y=t[5],["C",t[0],t[1],t[2],t[3],t[4],t[5]]},S:function(t,e){return e.x=t[2],e.y=t[3],["S",t[0],t[1],t[2],t[3]]},Q:function(t,e){return e.x=t[2],e.y=t[3],["Q",t[0],t[1],t[2],t[3]]},T:function(t,e){return e.x=t[0],e.y=t[1],["T",t[0],t[1]]},Z:function(t,e,n){return e.x=n.x,e.y=n.y,["Z"]},A:function(t,e){return e.x=t[5],e.y=t[6],["A",t[0],t[1],t[2],t[3],t[4],t[5],t[6]]}},i="mlhvqtcsaz".split(""),o=0,s=i.length;o<s;++o)r[i[o]]=function(t){return function(e,n,i){if("H"==t)e[0]=e[0]+n.x;else if("V"==t)e[0]=e[0]+n.y;else if("A"==t)e[5]=e[5]+n.x,e[6]=e[6]+n.y;else for(var o=0,s=e.length;o<s;++o)e[o]=e[o]+(o%2?n.y:n.x);return r[t](e,n,i)}}(i[o].toUpperCase());n.PathArray=function(t,e){n.Array.call(this,t,e||[["M",0,0]])},n.PathArray.prototype=new n.Array,n.PathArray.prototype.constructor=n.PathArray,n.extend(n.PathArray,{toString:function(){return function(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e][0],null!=t[e][1]&&(r+=t[e][1],null!=t[e][2]&&(r+=" ",r+=t[e][2],null!=t[e][3]&&(r+=" ",r+=t[e][3],r+=" ",r+=t[e][4],null!=t[e][5]&&(r+=" ",r+=t[e][5],r+=" ",r+=t[e][6],null!=t[e][7]&&(r+=" ",r+=t[e][7])))));return r+" "}(this.value)},move:function(t,e){var n=this.bbox();if(t-=n.x,e-=n.y,!isNaN(t)&&!isNaN(e))for(var r,i=this.value.length-1;i>=0;i--)"M"==(r=this.value[i][0])||"L"==r||"T"==r?(this.value[i][1]+=t,this.value[i][2]+=e):"H"==r?this.value[i][1]+=t:"V"==r?this.value[i][1]+=e:"C"==r||"S"==r||"Q"==r?(this.value[i][1]+=t,this.value[i][2]+=e,this.value[i][3]+=t,this.value[i][4]+=e,"C"==r&&(this.value[i][5]+=t,this.value[i][6]+=e)):"A"==r&&(this.value[i][6]+=t,this.value[i][7]+=e);return this},size:function(t,e){var n,r,i=this.bbox();for(n=this.value.length-1;n>=0;n--)"M"==(r=this.value[n][0])||"L"==r||"T"==r?(this.value[n][1]=(this.value[n][1]-i.x)*t/i.width+i.x,this.value[n][2]=(this.value[n][2]-i.y)*e/i.height+i.y):"H"==r?this.value[n][1]=(this.value[n][1]-i.x)*t/i.width+i.x:"V"==r?this.value[n][1]=(this.value[n][1]-i.y)*e/i.height+i.y:"C"==r||"S"==r||"Q"==r?(this.value[n][1]=(this.value[n][1]-i.x)*t/i.width+i.x,this.value[n][2]=(this.value[n][2]-i.y)*e/i.height+i.y,this.value[n][3]=(this.value[n][3]-i.x)*t/i.width+i.x,this.value[n][4]=(this.value[n][4]-i.y)*e/i.height+i.y,"C"==r&&(this.value[n][5]=(this.value[n][5]-i.x)*t/i.width+i.x,this.value[n][6]=(this.value[n][6]-i.y)*e/i.height+i.y)):"A"==r&&(this.value[n][1]=this.value[n][1]*t/i.width,this.value[n][2]=this.value[n][2]*e/i.height,this.value[n][6]=(this.value[n][6]-i.x)*t/i.width+i.x,this.value[n][7]=(this.value[n][7]-i.y)*e/i.height+i.y);return this},equalCommands:function(t){var e,r,i;for(t=new n.PathArray(t),i=this.value.length===t.value.length,e=0,r=this.value.length;i&&e<r;e++)i=this.value[e][0]===t.value[e][0];return i},morph:function(t){return t=new n.PathArray(t),this.equalCommands(t)?this.destination=t:this.destination=null,this},at:function(t){if(!this.destination)return this;var e,r,i,o,s=this.value,u=this.destination.value,a=[],c=new n.PathArray;for(e=0,r=s.length;e<r;e++){for(a[e]=[s[e][0]],i=1,o=s[e].length;i<o;i++)a[e][i]=s[e][i]+(u[e][i]-s[e][i])*t;"A"===a[e][0]&&(a[e][4]=+(0!=a[e][4]),a[e][5]=+(0!=a[e][5]))}return c.value=a,c},parse:function(t){if(t instanceof n.PathArray)return t.valueOf();var e,i={M:2,L:2,H:1,V:1,C:6,S:4,Q:4,T:2,A:7,Z:0};t="string"==typeof t?t.replace(n.regex.numbersWithDots,a).replace(n.regex.pathLetters," $& ").replace(n.regex.hyphen,"$1 -").trim().split(n.regex.delimiter):t.reduce(function(t,e){return[].concat.call(t,e)},[]);var o=[],s=new n.Point,u=new n.Point,c=0,h=t.length;do{n.regex.isPathLetter.test(t[c])?(e=t[c],++c):"M"==e?e="L":"m"==e&&(e="l"),o.push(r[e].call(null,t.slice(c,c+=i[e.toUpperCase()]).map(parseFloat),s,u))}while(h>c);return o},bbox:function(){return n.parser.path.setAttribute("d",this.toString()),n.parser.path.getBBox()}}),n.Number=n.invent({create:function(t,e){this.value=0,this.unit=e||"","number"==typeof t?this.value=isNaN(t)?0:isFinite(t)?t:t<0?-34e37:34e37:"string"==typeof t?(e=t.match(n.regex.numberAndUnit))&&(this.value=parseFloat(e[1]),"%"==e[5]?this.value/=100:"s"==e[5]&&(this.value*=1e3),this.unit=e[5]):t instanceof n.Number&&(this.value=t.valueOf(),this.unit=t.unit)},extend:{toString:function(){return("%"==this.unit?~~(1e8*this.value)/1e6:"s"==this.unit?this.value/1e3:this.value)+this.unit},toJSON:function(){return this.toString()},valueOf:function(){return this.value},plus:function(t){return t=new n.Number(t),new n.Number(this+t,this.unit||t.unit)},minus:function(t){return t=new n.Number(t),new n.Number(this-t,this.unit||t.unit)},times:function(t){return t=new n.Number(t),new n.Number(this*t,this.unit||t.unit)},divide:function(t){return t=new n.Number(t),new n.Number(this/t,this.unit||t.unit)},to:function(t){var e=new n.Number(this);return"string"==typeof t&&(e.unit=t),e},morph:function(t){return this.destination=new n.Number(t),t.relative&&(this.destination.value+=this.value),this},at:function(t){return this.destination?new n.Number(this.destination).minus(this).times(t).plus(this):this}}}),n.Element=n.invent({create:function(t){this._stroke=n.defaults.attrs.stroke,this._event=null,this._events={},this.dom={},(this.node=t)&&(this.type=t.nodeName,this.node.instance=this,this._events=t._events||{},this._stroke=t.getAttribute("stroke")||this._stroke)},extend:{x:function(t){return this.attr("x",t)},y:function(t){return this.attr("y",t)},cx:function(t){return null==t?this.x()+this.width()/2:this.x(t-this.width()/2)},cy:function(t){return null==t?this.y()+this.height()/2:this.y(t-this.height()/2)},move:function(t,e){return this.x(t).y(e)},center:function(t,e){return this.cx(t).cy(e)},width:function(t){return this.attr("width",t)},height:function(t){return this.attr("height",t)},size:function(t,e){var r=l(this,t,e);return this.width(new n.Number(r.width)).height(new n.Number(r.height))},clone:function(t){this.writeDataToDom();var e=b(this.node.cloneNode(!0));return t?t.add(e):this.after(e),e},remove:function(){return this.parent()&&this.parent().removeElement(this),this},replace:function(t){return this.after(t).remove(),t},addTo:function(t){return t.put(this)},putIn:function(t){return t.add(this)},id:function(t){return this.attr("id",t)},inside:function(t,e){var n=this.bbox();return t>n.x&&e>n.y&&t<n.x+n.width&&e<n.y+n.height},show:function(){return this.style("display","")},hide:function(){return this.style("display","none")},visible:function(){return"none"!=this.style("display")},toString:function(){return this.attr("id")},classes:function(){var t=this.attr("class");return null==t?[]:t.trim().split(n.regex.delimiter)},hasClass:function(t){return-1!=this.classes().indexOf(t)},addClass:function(t){if(!this.hasClass(t)){var e=this.classes();e.push(t),this.attr("class",e.join(" "))}return this},removeClass:function(t){return this.hasClass(t)&&this.attr("class",this.classes().filter(function(e){return e!=t}).join(" ")),this},toggleClass:function(t){return this.hasClass(t)?this.removeClass(t):this.addClass(t)},reference:function(t){return n.get(this.attr(t))},parent:function(e){var r=this;if(!r.node.parentNode)return null;if(r=n.adopt(r.node.parentNode),!e)return r;for(;r&&r.node instanceof t.SVGElement;){if("string"==typeof e?r.matches(e):r instanceof e)return r;if(!r.node.parentNode||"#document"==r.node.parentNode.nodeName||"#document-fragment"==r.node.parentNode.nodeName)return null;r=n.adopt(r.node.parentNode)}},doc:function(){return this instanceof n.Doc?this:this.parent(n.Doc)},parents:function(t){var e=[],n=this;do{if(!(n=n.parent(t))||!n.node)break;e.push(n)}while(n.parent);return e},matches:function(t){return function(t,e){return(t.matches||t.matchesSelector||t.msMatchesSelector||t.mozMatchesSelector||t.webkitMatchesSelector||t.oMatchesSelector).call(t,e)}(this.node,t)},native:function(){return this.node},svg:function(t){var r=e.createElement("svg");if(!(t&&this instanceof n.Parent))return r.appendChild(t=e.createElement("svg")),this.writeDataToDom(),t.appendChild(this.node.cloneNode(!0)),r.innerHTML.replace(/^<svg>/,"").replace(/<\/svg>$/,"");r.innerHTML="<svg>"+t.replace(/\n/,"").replace(/<([\w:-]+)([^<]+?)\/>/g,"<$1$2></$1>")+"</svg>";for(var i=0,o=r.firstChild.childNodes.length;i<o;i++)this.node.appendChild(r.firstChild.firstChild);return this},writeDataToDom:function(){return(this.each||this.lines)&&(this.each?this:this.lines()).each(function(){this.writeDataToDom()}),this.node.removeAttribute("svgjs:data"),Object.keys(this.dom).length&&this.node.setAttribute("svgjs:data",JSON.stringify(this.dom)),this},setData:function(t){return this.dom=t,this},is:function(t){return function(t,e){return t instanceof e}(this,t)}}}),n.easing={"-":function(t){return t},"<>":function(t){return-Math.cos(t*Math.PI)/2+.5},">":function(t){return Math.sin(t*Math.PI/2)},"<":function(t){return 1-Math.cos(t*Math.PI/2)}},n.morph=function(t){return function(e,r){return new n.MorphObj(e,r).at(t)}},n.Situation=n.invent({create:function(t){this.init=!1,this.reversed=!1,this.reversing=!1,this.duration=new n.Number(t.duration).valueOf(),this.delay=new n.Number(t.delay).valueOf(),this.start=+new Date+this.delay,this.finish=this.start+this.duration,this.ease=t.ease,this.loop=0,this.loops=!1,this.animations={},this.attrs={},this.styles={},this.transforms=[],this.once={}}}),n.FX=n.invent({create:function(t){this._target=t,this.situations=[],this.active=!1,this.situation=null,this.paused=!1,this.lastPos=0,this.pos=0,this.absPos=0,this._speed=1},extend:{animate:function(t,e,r){"object"==typeof t&&(e=t.ease,r=t.delay,t=t.duration);var i=new n.Situation({duration:t||1e3,delay:r||0,ease:n.easing[e||"-"]||e});return this.queue(i),this},delay:function(t){var e=new n.Situation({duration:t,delay:0,ease:n.easing["-"]});return this.queue(e)},target:function(t){return t&&t instanceof n.Element?(this._target=t,this):this._target},timeToAbsPos:function(t){return(t-this.situation.start)/(this.situation.duration/this._speed)},absPosToTime:function(t){return this.situation.duration/this._speed*t+this.situation.start},startAnimFrame:function(){this.stopAnimFrame(),this.animationFrame=t.requestAnimationFrame(function(){this.step()}.bind(this))},stopAnimFrame:function(){t.cancelAnimationFrame(this.animationFrame)},start:function(){return!this.active&&this.situation&&(this.active=!0,this.startCurrent()),this},startCurrent:function(){return this.situation.start=+new Date+this.situation.delay/this._speed,this.situation.finish=this.situation.start+this.situation.duration/this._speed,this.initAnimations().step()},queue:function(t){return("function"==typeof t||t instanceof n.Situation)&&this.situations.push(t),this.situation||(this.situation=this.situations.shift()),this},dequeue:function(){return this.stop(),this.situation=this.situations.shift(),this.situation&&(this.situation instanceof n.Situation?this.start():this.situation.call(this)),this},initAnimations:function(){var t,e,r,i=this.situation;if(i.init)return this;for(t in i.animations)for(r=this.target()[t](),Array.isArray(r)||(r=[r]),Array.isArray(i.animations[t])||(i.animations[t]=[i.animations[t]]),e=r.length;e--;)i.animations[t][e]instanceof n.Number&&(r[e]=new n.Number(r[e])),i.animations[t][e]=r[e].morph(i.animations[t][e]);for(t in i.attrs)i.attrs[t]=new n.MorphObj(this.target().attr(t),i.attrs[t]);for(t in i.styles)i.styles[t]=new n.MorphObj(this.target().style(t),i.styles[t]);return i.initialTransformation=this.target().matrixify(),i.init=!0,this},clearQueue:function(){return this.situations=[],this},clearCurrent:function(){return this.situation=null,this},stop:function(t,e){var n=this.active;return this.active=!1,e&&this.clearQueue(),t&&this.situation&&(!n&&this.startCurrent(),this.atEnd()),this.stopAnimFrame(),this.clearCurrent()},reset:function(){if(this.situation){var t=this.situation;this.stop(),this.situation=t,this.atStart()}return this},finish:function(){for(this.stop(!0,!1);this.dequeue().situation&&this.stop(!0,!1););return this.clearQueue().clearCurrent(),this},atStart:function(){return this.at(0,!0)},atEnd:function(){return!0===this.situation.loops&&(this.situation.loops=this.situation.loop+1),"number"==typeof this.situation.loops?this.at(this.situation.loops,!0):this.at(1,!0)},at:function(t,e){var n=this.situation.duration/this._speed;return this.absPos=t,e||(this.situation.reversed&&(this.absPos=1-this.absPos),this.absPos+=this.situation.loop),this.situation.start=+new Date-this.absPos*n,this.situation.finish=this.situation.start+n,this.step(!0)},speed:function(t){return 0===t?this.pause():t?(this._speed=t,this.at(this.absPos,!0)):this._speed},loop:function(t,e){var n=this.last();return n.loops=null==t||t,n.loop=0,e&&(n.reversing=!0),this},pause:function(){return this.paused=!0,this.stopAnimFrame(),this},play:function(){return this.paused?(this.paused=!1,this.at(this.absPos,!0)):this},reverse:function(t){var e=this.last();return e.reversed=void 0===t?!e.reversed:t,this},progress:function(t){return t?this.situation.ease(this.pos):this.pos},after:function(t){var e=this.last();return this.target().on("finished.fx",function n(r){r.detail.situation==e&&(t.call(this,e),this.off("finished.fx",n))}),this._callStart()},during:function(t){var e=this.last(),r=function(r){r.detail.situation==e&&t.call(this,r.detail.pos,n.morph(r.detail.pos),r.detail.eased,e)};return this.target().off("during.fx",r).on("during.fx",r),this.after(function(){this.off("during.fx",r)}),this._callStart()},afterAll:function(t){var e=function e(n){t.call(this),this.off("allfinished.fx",e)};return this.target().off("allfinished.fx",e).on("allfinished.fx",e),this._callStart()},duringAll:function(t){var e=function(e){t.call(this,e.detail.pos,n.morph(e.detail.pos),e.detail.eased,e.detail.situation)};return this.target().off("during.fx",e).on("during.fx",e),this.afterAll(function(){this.off("during.fx",e)}),this._callStart()},last:function(){return this.situations.length?this.situations[this.situations.length-1]:this.situation},add:function(t,e,n){return this.last()[n||"animations"][t]=e,this._callStart()},step:function(t){var e,n,r;t||(this.absPos=this.timeToAbsPos(+new Date)),!1!==this.situation.loops?(e=Math.max(this.absPos,0),n=Math.floor(e),!0===this.situation.loops||n<this.situation.loops?(this.pos=e-n,r=this.situation.loop,this.situation.loop=n):(this.absPos=this.situation.loops,this.pos=1,r=this.situation.loop-1,this.situation.loop=this.situation.loops),this.situation.reversing&&(this.situation.reversed=this.situation.reversed!=Boolean((this.situation.loop-r)%2))):(this.absPos=Math.min(this.absPos,1),this.pos=this.absPos),this.pos<0&&(this.pos=0),this.situation.reversed&&(this.pos=1-this.pos);var i=this.situation.ease(this.pos);for(var o in this.situation.once)o>this.lastPos&&o<=i&&(this.situation.once[o].call(this.target(),this.pos,i),delete this.situation.once[o]);return this.active&&this.target().fire("during",{pos:this.pos,eased:i,fx:this,situation:this.situation}),this.situation?(this.eachAt(),1==this.pos&&!this.situation.reversed||this.situation.reversed&&0==this.pos?(this.stopAnimFrame(),this.target().fire("finished",{fx:this,situation:this.situation}),this.situations.length||(this.target().fire("allfinished"),this.situations.length||(this.target().off(".fx"),this.active=!1)),this.active?this.dequeue():this.clearCurrent()):!this.paused&&this.active&&this.startAnimFrame(),this.lastPos=i,this):this},eachAt:function(){var t,e,r,i=this,o=this.target(),s=this.situation;for(t in s.animations)r=[].concat(s.animations[t]).map(function(t){return"string"!=typeof t&&t.at?t.at(s.ease(i.pos),i.pos):t}),o[t].apply(o,r);for(t in s.attrs)r=[t].concat(s.attrs[t]).map(function(t){return"string"!=typeof t&&t.at?t.at(s.ease(i.pos),i.pos):t}),o.attr.apply(o,r);for(t in s.styles)r=[t].concat(s.styles[t]).map(function(t){return"string"!=typeof t&&t.at?t.at(s.ease(i.pos),i.pos):t}),o.style.apply(o,r);if(s.transforms.length){for(r=s.initialTransformation,t=0,e=s.transforms.length;t<e;t++){var u=s.transforms[t];u instanceof n.Matrix?r=u.relative?r.multiply((new n.Matrix).morph(u).at(s.ease(this.pos))):r.morph(u).at(s.ease(this.pos)):(u.relative||u.undo(r.extract()),r=r.multiply(u.at(s.ease(this.pos))))}o.matrix(r)}return this},once:function(t,e,n){var r=this.last();return n||(t=r.ease(t)),r.once[t]=e,this},_callStart:function(){return setTimeout(function(){this.start()}.bind(this),0),this}},parent:n.Element,construct:{animate:function(t,e,r){return(this.fx||(this.fx=new n.FX(this))).animate(t,e,r)},delay:function(t){return(this.fx||(this.fx=new n.FX(this))).delay(t)},stop:function(t,e){return this.fx&&this.fx.stop(t,e),this},finish:function(){return this.fx&&this.fx.finish(),this},pause:function(){return this.fx&&this.fx.pause(),this},play:function(){return this.fx&&this.fx.play(),this},speed:function(t){if(this.fx){if(null==t)return this.fx.speed();this.fx.speed(t)}return this}}}),n.MorphObj=n.invent({create:function(t,e){return n.Color.isColor(e)?new n.Color(t).morph(e):n.regex.delimiter.test(t)?n.regex.pathLetters.test(t)?new n.PathArray(t).morph(e):new n.Array(t).morph(e):n.regex.numberAndUnit.test(e)?new n.Number(t).morph(e):(this.value=t,void(this.destination=e))},extend:{at:function(t,e){return e<1?this.value:this.destination},valueOf:function(){return this.value}}}),n.extend(n.FX,{attr:function(t,e,n){if("object"==typeof t)for(var r in t)this.attr(r,t[r]);else this.add(t,e,"attrs");return this},style:function(t,e){if("object"==typeof t)for(var n in t)this.style(n,t[n]);else this.add(t,e,"styles");return this},x:function(t,e){if(this.target()instanceof n.G)return this.transform({x:t},e),this;var r=new n.Number(t);return r.relative=e,this.add("x",r)},y:function(t,e){if(this.target()instanceof n.G)return this.transform({y:t},e),this;var r=new n.Number(t);return r.relative=e,this.add("y",r)},cx:function(t){return this.add("cx",new n.Number(t))},cy:function(t){return this.add("cy",new n.Number(t))},move:function(t,e){return this.x(t).y(e)},center:function(t,e){return this.cx(t).cy(e)},size:function(t,e){var r;return this.target()instanceof n.Text?this.attr("font-size",t):(t&&e||(r=this.target().bbox()),t||(t=r.width/r.height*e),e||(e=r.height/r.width*t),this.add("width",new n.Number(t)).add("height",new n.Number(e))),this},width:function(t){return this.add("width",new n.Number(t))},height:function(t){return this.add("height",new n.Number(t))},plot:function(t,e,n,r){return 4==arguments.length?this.plot([t,e,n,r]):this.add("plot",new(this.target().morphArray)(t))},leading:function(t){return this.target().leading?this.add("leading",new n.Number(t)):this},viewbox:function(t,e,r,i){return this.target()instanceof n.Container&&this.add("viewbox",new n.ViewBox(t,e,r,i)),this},update:function(t){if(this.target()instanceof n.Stop){if("number"==typeof t||t instanceof n.Number)return this.update({offset:arguments[0],color:arguments[1],opacity:arguments[2]});null!=t.opacity&&this.attr("stop-opacity",t.opacity),null!=t.color&&this.attr("stop-color",t.color),null!=t.offset&&this.attr("offset",t.offset)}return this}}),n.Box=n.invent({create:function(t,e,r,i){if(!("object"!=typeof t||t instanceof n.Element))return n.Box.call(this,null!=t.left?t.left:t.x,null!=t.top?t.top:t.y,t.width,t.height);4==arguments.length&&(this.x=t,this.y=e,this.width=r,this.height=i),y(this)},extend:{merge:function(t){var e=new this.constructor;return e.x=Math.min(this.x,t.x),e.y=Math.min(this.y,t.y),e.width=Math.max(this.x+this.width,t.x+t.width)-e.x,e.height=Math.max(this.y+this.height,t.y+t.height)-e.y,y(e)},transform:function(t){var e,r=1/0,i=-1/0,o=1/0,s=-1/0;return[new n.Point(this.x,this.y),new n.Point(this.x2,this.y),new n.Point(this.x,this.y2),new n.Point(this.x2,this.y2)].forEach(function(e){e=e.transform(t),r=Math.min(r,e.x),i=Math.max(i,e.x),o=Math.min(o,e.y),s=Math.max(s,e.y)}),(e=new this.constructor).x=r,e.width=i-r,e.y=o,e.height=s-o,y(e),e}}}),n.BBox=n.invent({create:function(t){if(n.Box.apply(this,[].slice.call(arguments)),t instanceof n.Element){var r;try{if(e.documentElement.contains){if(!e.documentElement.contains(t.node))throw new Exception("Element not in the dom")}else{for(var i=t.node;i.parentNode;)i=i.parentNode;if(i!=e)throw new Exception("Element not in the dom")}r=t.node.getBBox()}catch(e){if(t instanceof n.Shape){var o=t.clone(n.parser.draw.instance).show();r=o.node.getBBox(),o.remove()}else r={x:t.node.clientLeft,y:t.node.clientTop,width:t.node.clientWidth,height:t.node.clientHeight}}n.Box.call(this,r)}},inherit:n.Box,parent:n.Element,construct:{bbox:function(){return new n.BBox(this)}}}),n.BBox.prototype.constructor=n.BBox,n.extend(n.Element,{tbox:function(){return console.warn("Use of TBox is deprecated and mapped to RBox. Use .rbox() instead."),this.rbox(this.doc())}}),n.RBox=n.invent({create:function(t){n.Box.apply(this,[].slice.call(arguments)),t instanceof n.Element&&n.Box.call(this,t.node.getBoundingClientRect())},inherit:n.Box,parent:n.Element,extend:{addOffset:function(){return this.x+=t.pageXOffset,this.y+=t.pageYOffset,this}},construct:{rbox:function(t){return t?new n.RBox(this).transform(t.screenCTM().inverse()):new n.RBox(this).addOffset()}}}),n.RBox.prototype.constructor=n.RBox,n.Matrix=n.invent({create:function(t){var e,r=d([1,0,0,1,0,0]);for(t=t instanceof n.Element?t.matrixify():"string"==typeof t?d(t.split(n.regex.delimiter).map(parseFloat)):6==arguments.length?d([].slice.call(arguments)):Array.isArray(t)?d(t):"object"==typeof t?t:r,e=g.length-1;e>=0;--e)this[g[e]]=null!=t[g[e]]?t[g[e]]:r[g[e]]},extend:{extract:function(){var t=p(this,0,1),e=p(this,1,0),r=180/Math.PI*Math.atan2(t.y,t.x)-90;return{x:this.e,y:this.f,transformedX:(this.e*Math.cos(r*Math.PI/180)+this.f*Math.sin(r*Math.PI/180))/Math.sqrt(this.a*this.a+this.b*this.b),transformedY:(this.f*Math.cos(r*Math.PI/180)+this.e*Math.sin(-r*Math.PI/180))/Math.sqrt(this.c*this.c+this.d*this.d),skewX:-r,skewY:180/Math.PI*Math.atan2(e.y,e.x),scaleX:Math.sqrt(this.a*this.a+this.b*this.b),scaleY:Math.sqrt(this.c*this.c+this.d*this.d),rotation:r,a:this.a,b:this.b,c:this.c,d:this.d,e:this.e,f:this.f,matrix:new n.Matrix(this)}},clone:function(){return new n.Matrix(this)},morph:function(t){return this.destination=new n.Matrix(t),this},at:function(t){return this.destination?new n.Matrix({a:this.a+(this.destination.a-this.a)*t,b:this.b+(this.destination.b-this.b)*t,c:this.c+(this.destination.c-this.c)*t,d:this.d+(this.destination.d-this.d)*t,e:this.e+(this.destination.e-this.e)*t,f:this.f+(this.destination.f-this.f)*t}):this},multiply:function(t){return new n.Matrix(this.native().multiply(function(t){return t instanceof n.Matrix||(t=new n.Matrix(t)),t}(t).native()))},inverse:function(){return new n.Matrix(this.native().inverse())},translate:function(t,e){return new n.Matrix(this.native().translate(t||0,e||0))},scale:function(t,e,r,i){return 1==arguments.length?e=t:3==arguments.length&&(i=r,r=e,e=t),this.around(r,i,new n.Matrix(t,0,0,e,0,0))},rotate:function(t,e,r){return t=n.utils.radians(t),this.around(e,r,new n.Matrix(Math.cos(t),Math.sin(t),-Math.sin(t),Math.cos(t),0,0))},flip:function(t,e){return"x"==t?this.scale(-1,1,e,0):"y"==t?this.scale(1,-1,0,e):this.scale(-1,-1,t,null!=e?e:t)},skew:function(t,e,r,i){return 1==arguments.length?e=t:3==arguments.length&&(i=r,r=e,e=t),t=n.utils.radians(t),e=n.utils.radians(e),this.around(r,i,new n.Matrix(1,Math.tan(e),Math.tan(t),1,0,0))},skewX:function(t,e,n){return this.skew(t,0,e,n)},skewY:function(t,e,n){return this.skew(0,t,e,n)},around:function(t,e,r){return this.multiply(new n.Matrix(1,0,0,1,t||0,e||0)).multiply(r).multiply(new n.Matrix(1,0,0,1,-t||0,-e||0))},native:function(){for(var t=n.parser.native.createSVGMatrix(),e=g.length-1;e>=0;e--)t[g[e]]=this[g[e]];return t},toString:function(){return"matrix("+m(this.a)+","+m(this.b)+","+m(this.c)+","+m(this.d)+","+m(this.e)+","+m(this.f)+")"}},parent:n.Element,construct:{ctm:function(){return new n.Matrix(this.node.getCTM())},screenCTM:function(){if(this instanceof n.Nested){var t=this.rect(1,1),e=t.node.getScreenCTM();return t.remove(),new n.Matrix(e)}return new n.Matrix(this.node.getScreenCTM())}}}),n.Point=n.invent({create:function(t,e){var n;n=Array.isArray(t)?{x:t[0],y:t[1]}:"object"==typeof t?{x:t.x,y:t.y}:null!=t?{x:t,y:null!=e?e:t}:{x:0,y:0},this.x=n.x,this.y=n.y},extend:{clone:function(){return new n.Point(this)},morph:function(t,e){return this.destination=new n.Point(t,e),this},at:function(t){return this.destination?new n.Point({x:this.x+(this.destination.x-this.x)*t,y:this.y+(this.destination.y-this.y)*t}):this},native:function(){var t=n.parser.native.createSVGPoint();return t.x=this.x,t.y=this.y,t},transform:function(t){return new n.Point(this.native().matrixTransform(t.native()))}}}),n.extend(n.Element,{point:function(t,e){return new n.Point(t,e).transform(this.screenCTM().inverse())}}),n.extend(n.Element,{attr:function(t,e,r){if(null==t){for(t={},r=(e=this.node.attributes).length-1;r>=0;r--)t[e[r].nodeName]=n.regex.isNumber.test(e[r].nodeValue)?parseFloat(e[r].nodeValue):e[r].nodeValue;return t}if("object"==typeof t)for(e in t)this.attr(e,t[e]);else if(null===e)this.node.removeAttribute(t);else{if(null==e)return null==(e=this.node.getAttribute(t))?n.defaults.attrs[t]:n.regex.isNumber.test(e)?parseFloat(e):e;"stroke-width"==t?this.attr("stroke",parseFloat(e)>0?this._stroke:null):"stroke"==t&&(this._stroke=e),"fill"!=t&&"stroke"!=t||(n.regex.isImage.test(e)&&(e=this.doc().defs().image(e,0,0)),e instanceof n.Image&&(e=this.doc().defs().pattern(0,0,function(){this.add(e)}))),"number"==typeof e?e=new n.Number(e):n.Color.isColor(e)?e=new n.Color(e):Array.isArray(e)&&(e=new n.Array(e)),"leading"==t?this.leading&&this.leading(e):"string"==typeof r?this.node.setAttributeNS(r,t,e.toString()):this.node.setAttribute(t,e.toString()),!this.rebuild||"font-size"!=t&&"x"!=t||this.rebuild(t,e)}return this}}),n.extend(n.Element,{transform:function(t,e){var r,i;if("object"!=typeof t)return r=new n.Matrix(this).extract(),"string"==typeof t?r[t]:r;if(r=new n.Matrix(this),e=!!e||!!t.relative,null!=t.a)r=e?r.multiply(new n.Matrix(t)):new n.Matrix(t);else if(null!=t.rotation)v(t,this),r=e?r.rotate(t.rotation,t.cx,t.cy):r.rotate(t.rotation-r.extract().rotation,t.cx,t.cy);else if(null!=t.scale||null!=t.scaleX||null!=t.scaleY){if(v(t,this),t.scaleX=null!=t.scale?t.scale:null!=t.scaleX?t.scaleX:1,t.scaleY=null!=t.scale?t.scale:null!=t.scaleY?t.scaleY:1,!e){var o=r.extract();t.scaleX=1*t.scaleX/o.scaleX,t.scaleY=1*t.scaleY/o.scaleY}r=r.scale(t.scaleX,t.scaleY,t.cx,t.cy)}else null!=t.skew||null!=t.skewX||null!=t.skewY?(v(t,this),t.skewX=null!=t.skew?t.skew:null!=t.skewX?t.skewX:0,t.skewY=null!=t.skew?t.skew:null!=t.skewY?t.skewY:0,e||(o=r.extract(),r=r.multiply((new n.Matrix).skew(o.skewX,o.skewY,t.cx,t.cy).inverse())),r=r.skew(t.skewX,t.skewY,t.cx,t.cy)):t.flip?("x"==t.flip||"y"==t.flip?t.offset=null==t.offset?this.bbox()["c"+t.flip]:t.offset:null==t.offset?(i=this.bbox(),t.flip=i.cx,t.offset=i.cy):t.flip=t.offset,r=(new n.Matrix).flip(t.flip,t.offset)):null==t.x&&null==t.y||(e?r=r.translate(t.x,t.y):(null!=t.x&&(r.e=t.x),null!=t.y&&(r.f=t.y)));return this.attr("transform",r)}}),n.extend(n.FX,{transform:function(t,e){var r,i,o=this.target();return"object"!=typeof t?(r=new n.Matrix(o).extract(),"string"==typeof t?r[t]:r):(e=!!e||!!t.relative,null!=t.a?r=new n.Matrix(t):null!=t.rotation?(v(t,o),r=new n.Rotate(t.rotation,t.cx,t.cy)):null!=t.scale||null!=t.scaleX||null!=t.scaleY?(v(t,o),t.scaleX=null!=t.scale?t.scale:null!=t.scaleX?t.scaleX:1,t.scaleY=null!=t.scale?t.scale:null!=t.scaleY?t.scaleY:1,r=new n.Scale(t.scaleX,t.scaleY,t.cx,t.cy)):null!=t.skewX||null!=t.skewY?(v(t,o),t.skewX=null!=t.skewX?t.skewX:0,t.skewY=null!=t.skewY?t.skewY:0,r=new n.Skew(t.skewX,t.skewY,t.cx,t.cy)):t.flip?("x"==t.flip||"y"==t.flip?t.offset=null==t.offset?o.bbox()["c"+t.flip]:t.offset:null==t.offset?(i=o.bbox(),t.flip=i.cx,t.offset=i.cy):t.flip=t.offset,r=(new n.Matrix).flip(t.flip,t.offset)):null==t.x&&null==t.y||(r=new n.Translate(t.x,t.y)),r?(r.relative=e,this.last().transforms.push(r),this._callStart()):this)}}),n.extend(n.Element,{untransform:function(){return this.attr("transform",null)},matrixify:function(){return(this.attr("transform")||"").split(n.regex.transforms).slice(0,-1).map(function(t){var e=t.trim().split("(");return[e[0],e[1].split(n.regex.delimiter).map(function(t){return parseFloat(t)})]}).reduce(function(t,e){return"matrix"==e[0]?t.multiply(d(e[1])):t[e[0]].apply(t,e[1])},new n.Matrix)},toParent:function(t){if(this==t)return this;var e=this.screenCTM(),n=t.screenCTM().inverse();return this.addTo(t).untransform().transform(n.multiply(e)),this},toDoc:function(){return this.toParent(this.doc())}}),n.Transformation=n.invent({create:function(t,e){if(arguments.length>1&&"boolean"!=typeof e)return this.constructor.call(this,[].slice.call(arguments));if(Array.isArray(t))for(var n=0,r=this.arguments.length;n<r;++n)this[this.arguments[n]]=t[n];else if("object"==typeof t)for(n=0,r=this.arguments.length;n<r;++n)this[this.arguments[n]]=t[this.arguments[n]];this.inversed=!1,!0===e&&(this.inversed=!0)},extend:{arguments:[],method:"",at:function(t){for(var e=[],r=0,i=this.arguments.length;r<i;++r)e.push(this[this.arguments[r]]);var o=this._undo||new n.Matrix;return o=(new n.Matrix).morph(n.Matrix.prototype[this.method].apply(o,e)).at(t),this.inversed?o.inverse():o},undo:function(t){for(var e=0,r=this.arguments.length;e<r;++e)t[this.arguments[e]]=void 0===this[this.arguments[e]]?0:t[this.arguments[e]];return t.cx=this.cx,t.cy=this.cy,this._undo=new(n[h(this.method)])(t,!0).at(1),this}}}),n.Translate=n.invent({parent:n.Matrix,inherit:n.Transformation,create:function(t,e){this.constructor.apply(this,[].slice.call(arguments))},extend:{arguments:["transformedX","transformedY"],method:"translate"}}),n.Rotate=n.invent({parent:n.Matrix,inherit:n.Transformation,create:function(t,e){this.constructor.apply(this,[].slice.call(arguments))},extend:{arguments:["rotation","cx","cy"],method:"rotate",at:function(t){var e=(new n.Matrix).rotate((new n.Number).morph(this.rotation-(this._undo?this._undo.rotation:0)).at(t),this.cx,this.cy);return this.inversed?e.inverse():e},undo:function(t){return this._undo=t,this}}}),n.Scale=n.invent({parent:n.Matrix,inherit:n.Transformation,create:function(t,e){this.constructor.apply(this,[].slice.call(arguments))},extend:{arguments:["scaleX","scaleY","cx","cy"],method:"scale"}}),n.Skew=n.invent({parent:n.Matrix,inherit:n.Transformation,create:function(t,e){this.constructor.apply(this,[].slice.call(arguments))},extend:{arguments:["skewX","skewY","cx","cy"],method:"skew"}}),n.extend(n.Element,{style:function(t,e){if(0==arguments.length)return this.node.style.cssText||"";if(arguments.length<2)if("object"==typeof t)for(e in t)this.style(e,t[e]);else{if(!n.regex.isCss.test(t))return this.node.style[c(t)];for(t=t.split(/\s*;\s*/).filter(function(t){return!!t}).map(function(t){return t.split(/\s*:\s*/)});e=t.pop();)this.style(e[0],e[1])}else this.node.style[c(t)]=null===e||n.regex.isBlank.test(e)?"":e;return this}}),n.Parent=n.invent({create:function(t){this.constructor.call(this,t)},inherit:n.Element,extend:{children:function(){return n.utils.map(n.utils.filterSVGElements(this.node.childNodes),function(t){return n.adopt(t)})},add:function(t,e){return null==e?this.node.appendChild(t.node):t.node!=this.node.childNodes[e]&&this.node.insertBefore(t.node,this.node.childNodes[e]),this},put:function(t,e){return this.add(t,e),t},has:function(t){return this.index(t)>=0},index:function(t){return[].slice.call(this.node.childNodes).indexOf(t.node)},get:function(t){return n.adopt(this.node.childNodes[t])},first:function(){return this.get(0)},last:function(){return this.get(this.node.childNodes.length-1)},each:function(t,e){var r,i,o=this.children();for(r=0,i=o.length;r<i;r++)o[r]instanceof n.Element&&t.apply(o[r],[r,o]),e&&o[r]instanceof n.Container&&o[r].each(t,e);return this},removeElement:function(t){return this.node.removeChild(t.node),this},clear:function(){for(;this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);return delete this._defs,this},defs:function(){return this.doc().defs()}}}),n.extend(n.Parent,{ungroup:function(t,e){return 0===e||this instanceof n.Defs||this.node==n.parser.draw?this:(t=t||(this instanceof n.Doc?this:this.parent(n.Parent)),e=e||1/0,this.each(function(){return this instanceof n.Defs?this:this instanceof n.Parent?this.ungroup(t,e-1):this.toParent(t)}),this.node.firstChild||this.remove(),this)},flatten:function(t,e){return this.ungroup(t,e)}}),n.Container=n.invent({create:function(t){this.constructor.call(this,t)},inherit:n.Parent}),n.ViewBox=n.invent({create:function(t){var e,r,i,o,s,u,a,c=[0,0,0,0],h=1,f=1,l=/[+-]?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?/gi;if(t instanceof n.Element){for(u=t,a=t,s=(t.attr("viewBox")||"").match(l),t.bbox,i=new n.Number(t.width()),o=new n.Number(t.height());"%"==i.unit;)h*=i.value,i=new n.Number(u instanceof n.Doc?u.parent().offsetWidth:u.parent().width()),u=u.parent();for(;"%"==o.unit;)f*=o.value,o=new n.Number(a instanceof n.Doc?a.parent().offsetHeight:a.parent().height()),a=a.parent();this.x=0,this.y=0,this.width=i*h,this.height=o*f,this.zoom=1,s&&(e=parseFloat(s[0]),r=parseFloat(s[1]),i=parseFloat(s[2]),o=parseFloat(s[3]),this.zoom=this.width/this.height>i/o?this.height/o:this.width/i,this.x=e,this.y=r,this.width=i,this.height=o)}else t="string"==typeof t?t.match(l).map(function(t){return parseFloat(t)}):Array.isArray(t)?t:"object"==typeof t?[t.x,t.y,t.width,t.height]:4==arguments.length?[].slice.call(arguments):c,this.x=t[0],this.y=t[1],this.width=t[2],this.height=t[3]},extend:{toString:function(){return this.x+" "+this.y+" "+this.width+" "+this.height},morph:function(t,e,r,i){return this.destination=new n.ViewBox(t,e,r,i),this},at:function(t){return this.destination?new n.ViewBox([this.x+(this.destination.x-this.x)*t,this.y+(this.destination.y-this.y)*t,this.width+(this.destination.width-this.width)*t,this.height+(this.destination.height-this.height)*t]):this}},parent:n.Container,construct:{viewbox:function(t,e,r,i){return 0==arguments.length?new n.ViewBox(this):this.attr("viewBox",new n.ViewBox(t,e,r,i))}}}),["click","dblclick","mousedown","mouseup","mouseover","mouseout","mousemove","mouseenter","mouseleave","touchstart","touchmove","touchleave","touchend","touchcancel"].forEach(function(t){n.Element.prototype[t]=function(e){return null==e?n.off(this,t):n.on(this,t,e),this}}),n.listenerId=0,n.on=function(t,e,r,i,o){var s=r.bind(i||t),u=t instanceof n.Element?t.node:t;u.instance=u.instance||{_events:{}};var a=u.instance._events;r._svgjsListenerId||(r._svgjsListenerId=++n.listenerId),e.split(n.regex.delimiter).forEach(function(t){var e=t.split(".")[0],n=t.split(".")[1]||"*";a[e]=a[e]||{},a[e][n]=a[e][n]||{},a[e][n][r._svgjsListenerId]=s,u.addEventListener(e,s,o||!1)})},n.off=function(t,e,r,i){var o=t instanceof n.Element?t.node:t;if(o.instance&&("function"!=typeof r||(r=r._svgjsListenerId))){var s=o.instance._events;(e||"").split(n.regex.delimiter).forEach(function(t){var e,u,a=t&&t.split(".")[0],c=t&&t.split(".")[1];if(r)s[a]&&s[a][c||"*"]&&(o.removeEventListener(a,s[a][c||"*"][r],i||!1),delete s[a][c||"*"][r]);else if(a&&c){if(s[a]&&s[a][c]){for(u in s[a][c])n.off(o,[a,c].join("."),u);delete s[a][c]}}else if(c)for(t in s)for(e in s[t])c===e&&n.off(o,[t,c].join("."));else if(a){if(s[a]){for(e in s[a])n.off(o,[a,e].join("."));delete s[a]}}else{for(t in s)n.off(o,t);o.instance._events={}}})}},n.extend(n.Element,{on:function(t,e,r,i){return n.on(this,t,e,r,i),this},off:function(t,e){return n.off(this.node,t,e),this},fire:function(e,r){return e instanceof t.Event?this.node.dispatchEvent(e):this.node.dispatchEvent(e=new n.CustomEvent(e,{detail:r,cancelable:!0})),this._event=e,this},event:function(){return this._event}}),n.Defs=n.invent({create:"defs",inherit:n.Container}),n.G=n.invent({create:"g",inherit:n.Container,extend:{x:function(t){return null==t?this.transform("x"):this.transform({x:t-this.x()},!0)},y:function(t){return null==t?this.transform("y"):this.transform({y:t-this.y()},!0)},cx:function(t){return null==t?this.gbox().cx:this.x(t-this.gbox().width/2)},cy:function(t){return null==t?this.gbox().cy:this.y(t-this.gbox().height/2)},gbox:function(){var t=this.bbox(),e=this.transform();return t.x+=e.x,t.x2+=e.x,t.cx+=e.x,t.y+=e.y,t.y2+=e.y,t.cy+=e.y,t}},construct:{group:function(){return this.put(new n.G)}}}),n.Doc=n.invent({create:function(t){t&&("svg"==(t="string"==typeof t?e.getElementById(t):t).nodeName?this.constructor.call(this,t):(this.constructor.call(this,n.create("svg")),t.appendChild(this.node),this.size("100%","100%")),this.namespace().defs())},inherit:n.Container,extend:{namespace:function(){return this.attr({xmlns:n.ns,version:"1.1"}).attr("xmlns:xlink",n.xlink,n.xmlns).attr("xmlns:svgjs",n.svgjs,n.xmlns)},defs:function(){var t;return this._defs||((t=this.node.getElementsByTagName("defs")[0])?this._defs=n.adopt(t):this._defs=new n.Defs,this.node.appendChild(this._defs.node)),this._defs},parent:function(){return this.node.parentNode&&"#document"!=this.node.parentNode.nodeName&&"#document-fragment"!=this.node.parentNode.nodeName?this.node.parentNode:null},spof:function(){var t=this.node.getScreenCTM();return t&&this.style("left",-t.e%1+"px").style("top",-t.f%1+"px"),this},remove:function(){return this.parent()&&this.parent().removeChild(this.node),this},clear:function(){for(;this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);return delete this._defs,n.parser.draw.parentNode||this.node.appendChild(n.parser.draw),this},clone:function(t){this.writeDataToDom();var e=this.node,n=b(e.cloneNode(!0));return t?(t.node||t).appendChild(n.node):e.parentNode.insertBefore(n.node,e.nextSibling),n}}}),n.extend(n.Element,{siblings:function(){return this.parent().children()},position:function(){return this.parent().index(this)},next:function(){return this.siblings()[this.position()+1]},previous:function(){return this.siblings()[this.position()-1]},forward:function(){var t=this.position()+1,e=this.parent();return e.removeElement(this).add(this,t),e instanceof n.Doc&&e.node.appendChild(e.defs().node),this},backward:function(){var t=this.position();return t>0&&this.parent().removeElement(this).add(this,t-1),this},front:function(){var t=this.parent();return t.node.appendChild(this.node),t instanceof n.Doc&&t.node.appendChild(t.defs().node),this},back:function(){return this.position()>0&&this.parent().removeElement(this).add(this,0),this},before:function(t){t.remove();var e=this.position();return this.parent().add(t,e),this},after:function(t){t.remove();var e=this.position();return this.parent().add(t,e+1),this}}),n.Mask=n.invent({create:function(){this.constructor.call(this,n.create("mask")),this.targets=[]},inherit:n.Container,extend:{remove:function(){for(var t=this.targets.length-1;t>=0;t--)this.targets[t]&&this.targets[t].unmask();return this.targets=[],n.Element.prototype.remove.call(this),this}},construct:{mask:function(){return this.defs().put(new n.Mask)}}}),n.extend(n.Element,{maskWith:function(t){return this.masker=t instanceof n.Mask?t:this.parent().mask().add(t),this.masker.targets.push(this),this.attr("mask",'url("#'+this.masker.attr("id")+'")')},unmask:function(){return delete this.masker,this.attr("mask",null)}}),n.ClipPath=n.invent({create:function(){this.constructor.call(this,n.create("clipPath")),this.targets=[]},inherit:n.Container,extend:{remove:function(){for(var t=this.targets.length-1;t>=0;t--)this.targets[t]&&this.targets[t].unclip();return this.targets=[],this.parent().removeElement(this),this}},construct:{clip:function(){return this.defs().put(new n.ClipPath)}}}),n.extend(n.Element,{clipWith:function(t){return this.clipper=t instanceof n.ClipPath?t:this.parent().clip().add(t),this.clipper.targets.push(this),this.attr("clip-path",'url("#'+this.clipper.attr("id")+'")')},unclip:function(){return delete this.clipper,this.attr("clip-path",null)}}),n.Gradient=n.invent({create:function(t){this.constructor.call(this,n.create(t+"Gradient")),this.type=t},inherit:n.Container,extend:{at:function(t,e,r){return this.put(new n.Stop).update(t,e,r)},update:function(t){return this.clear(),"function"==typeof t&&t.call(this,this),this},fill:function(){return"url(#"+this.id()+")"},toString:function(){return this.fill()},attr:function(t,e,r){return"transform"==t&&(t="gradientTransform"),n.Container.prototype.attr.call(this,t,e,r)}},construct:{gradient:function(t,e){return this.defs().gradient(t,e)}}}),n.extend(n.Gradient,n.FX,{from:function(t,e){return"radial"==(this._target||this).type?this.attr({fx:new n.Number(t),fy:new n.Number(e)}):this.attr({x1:new n.Number(t),y1:new n.Number(e)})},to:function(t,e){return"radial"==(this._target||this).type?this.attr({cx:new n.Number(t),cy:new n.Number(e)}):this.attr({x2:new n.Number(t),y2:new n.Number(e)})}}),n.extend(n.Defs,{gradient:function(t,e){return this.put(new n.Gradient(t)).update(e)}}),n.Stop=n.invent({create:"stop",inherit:n.Element,extend:{update:function(t){return("number"==typeof t||t instanceof n.Number)&&(t={offset:arguments[0],color:arguments[1],opacity:arguments[2]}),null!=t.opacity&&this.attr("stop-opacity",t.opacity),null!=t.color&&this.attr("stop-color",t.color),null!=t.offset&&this.attr("offset",new n.Number(t.offset)),this}}}),n.Pattern=n.invent({create:"pattern",inherit:n.Container,extend:{fill:function(){return"url(#"+this.id()+")"},update:function(t){return this.clear(),"function"==typeof t&&t.call(this,this),this},toString:function(){return this.fill()},attr:function(t,e,r){return"transform"==t&&(t="patternTransform"),n.Container.prototype.attr.call(this,t,e,r)}},construct:{pattern:function(t,e,n){return this.defs().pattern(t,e,n)}}}),n.extend(n.Defs,{pattern:function(t,e,r){return this.put(new n.Pattern).update(r).attr({x:0,y:0,width:t,height:e,patternUnits:"userSpaceOnUse"})}}),n.Shape=n.invent({create:function(t){this.constructor.call(this,t)},inherit:n.Element}),n.Bare=n.invent({create:function(t,e){if(this.constructor.call(this,n.create(t)),e)for(var r in e.prototype)"function"==typeof e.prototype[r]&&(this[r]=e.prototype[r])},inherit:n.Element,extend:{words:function(t){for(;this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);return this.node.appendChild(e.createTextNode(t)),this}}}),n.extend(n.Parent,{element:function(t,e){return this.put(new n.Bare(t,e))}}),n.Symbol=n.invent({create:"symbol",inherit:n.Container,construct:{symbol:function(){return this.put(new n.Symbol)}}}),n.Use=n.invent({create:"use",inherit:n.Shape,extend:{element:function(t,e){return this.attr("href",(e||"")+"#"+t,n.xlink)}},construct:{use:function(t,e){return this.put(new n.Use).element(t,e)}}}),n.Rect=n.invent({create:"rect",inherit:n.Shape,construct:{rect:function(t,e){return this.put(new n.Rect).size(t,e)}}}),n.Circle=n.invent({create:"circle",inherit:n.Shape,construct:{circle:function(t){return this.put(new n.Circle).rx(new n.Number(t).divide(2)).move(0,0)}}}),n.extend(n.Circle,n.FX,{rx:function(t){return this.attr("r",t)},ry:function(t){return this.rx(t)}}),n.Ellipse=n.invent({create:"ellipse",inherit:n.Shape,construct:{ellipse:function(t,e){return this.put(new n.Ellipse).size(t,e).move(0,0)}}}),n.extend(n.Ellipse,n.Rect,n.FX,{rx:function(t){return this.attr("rx",t)},ry:function(t){return this.attr("ry",t)}}),n.extend(n.Circle,n.Ellipse,{x:function(t){return null==t?this.cx()-this.rx():this.cx(t+this.rx())},y:function(t){return null==t?this.cy()-this.ry():this.cy(t+this.ry())},cx:function(t){return null==t?this.attr("cx"):this.attr("cx",t)},cy:function(t){return null==t?this.attr("cy"):this.attr("cy",t)},width:function(t){return null==t?2*this.rx():this.rx(new n.Number(t).divide(2))},height:function(t){return null==t?2*this.ry():this.ry(new n.Number(t).divide(2))},size:function(t,e){var r=l(this,t,e);return this.rx(new n.Number(r.width).divide(2)).ry(new n.Number(r.height).divide(2))}}),n.Line=n.invent({create:"line",inherit:n.Shape,extend:{array:function(){return new n.PointArray([[this.attr("x1"),this.attr("y1")],[this.attr("x2"),this.attr("y2")]])},plot:function(t,e,r,i){return null==t?this.array():(t=void 0!==e?{x1:t,y1:e,x2:r,y2:i}:new n.PointArray(t).toLine(),this.attr(t))},move:function(t,e){return this.attr(this.array().move(t,e).toLine())},size:function(t,e){var n=l(this,t,e);return this.attr(this.array().size(n.width,n.height).toLine())}},construct:{line:function(t,e,r,i){return n.Line.prototype.plot.apply(this.put(new n.Line),null!=t?[t,e,r,i]:[0,0,0,0])}}}),n.Polyline=n.invent({create:"polyline",inherit:n.Shape,construct:{polyline:function(t){return this.put(new n.Polyline).plot(t||new n.PointArray)}}}),n.Polygon=n.invent({create:"polygon",inherit:n.Shape,construct:{polygon:function(t){return this.put(new n.Polygon).plot(t||new n.PointArray)}}}),n.extend(n.Polyline,n.Polygon,{array:function(){return this._array||(this._array=new n.PointArray(this.attr("points")))},plot:function(t){return null==t?this.array():this.clear().attr("points","string"==typeof t?t:this._array=new n.PointArray(t))},clear:function(){return delete this._array,this},move:function(t,e){return this.attr("points",this.array().move(t,e))},size:function(t,e){var n=l(this,t,e);return this.attr("points",this.array().size(n.width,n.height))}}),n.extend(n.Line,n.Polyline,n.Polygon,{morphArray:n.PointArray,x:function(t){return null==t?this.bbox().x:this.move(t,this.bbox().y)},y:function(t){return null==t?this.bbox().y:this.move(this.bbox().x,t)},width:function(t){var e=this.bbox();return null==t?e.width:this.size(t,e.height)},height:function(t){var e=this.bbox();return null==t?e.height:this.size(e.width,t)}}),n.Path=n.invent({create:"path",inherit:n.Shape,extend:{morphArray:n.PathArray,array:function(){return this._array||(this._array=new n.PathArray(this.attr("d")))},plot:function(t){return null==t?this.array():this.clear().attr("d","string"==typeof t?t:this._array=new n.PathArray(t))},clear:function(){return delete this._array,this},move:function(t,e){return this.attr("d",this.array().move(t,e))},x:function(t){return null==t?this.bbox().x:this.move(t,this.bbox().y)},y:function(t){return null==t?this.bbox().y:this.move(this.bbox().x,t)},size:function(t,e){var n=l(this,t,e);return this.attr("d",this.array().size(n.width,n.height))},width:function(t){return null==t?this.bbox().width:this.size(t,this.bbox().height)},height:function(t){return null==t?this.bbox().height:this.size(this.bbox().width,t)}},construct:{path:function(t){return this.put(new n.Path).plot(t||new n.PathArray)}}}),n.Image=n.invent({create:"image",inherit:n.Shape,extend:{load:function(e){if(!e)return this;var r=this,i=new t.Image;return n.on(i,"load",function(){n.off(i);var t=r.parent(n.Pattern);null!==t&&(0==r.width()&&0==r.height()&&r.size(i.width,i.height),t&&0==t.width()&&0==t.height()&&t.size(r.width(),r.height()),"function"==typeof r._loaded&&r._loaded.call(r,{width:i.width,height:i.height,ratio:i.width/i.height,url:e}))}),n.on(i,"error",function(t){n.off(i),"function"==typeof r._error&&r._error.call(r,t)}),this.attr("href",i.src=this.src=e,n.xlink)},loaded:function(t){return this._loaded=t,this},error:function(t){return this._error=t,this}},construct:{image:function(t,e,r){return this.put(new n.Image).load(t).size(e||0,r||e||0)}}}),n.Text=n.invent({create:function(){this.constructor.call(this,n.create("text")),this.dom.leading=new n.Number(1.3),this._rebuild=!0,this._build=!1,this.attr("font-family",n.defaults.attrs["font-family"])},inherit:n.Shape,extend:{x:function(t){return null==t?this.attr("x"):this.attr("x",t)},y:function(t){var e=this.attr("y"),n="number"==typeof e?e-this.bbox().y:0;return null==t?"number"==typeof e?e-n:e:this.attr("y","number"==typeof t.valueOf()?t+n:t)},cx:function(t){return null==t?this.bbox().cx:this.x(t-this.bbox().width/2)},cy:function(t){return null==t?this.bbox().cy:this.y(t-this.bbox().height/2)},text:function(t){if(void 0===t){t="";for(var e=this.node.childNodes,r=0,i=e.length;r<i;++r)0!=r&&3!=e[r].nodeType&&1==n.adopt(e[r]).dom.newLined&&(t+="\n"),t+=e[r].textContent;return t}if(this.clear().build(!0),"function"==typeof t)t.call(this,this);else{r=0;for(var o=(t=t.split("\n")).length;r<o;r++)this.tspan(t[r]).newLine()}return this.build(!1).rebuild()},size:function(t){return this.attr("font-size",t).rebuild()},leading:function(t){return null==t?this.dom.leading:(this.dom.leading=new n.Number(t),this.rebuild())},lines:function(){var t=(this.textPath&&this.textPath()||this).node,e=n.utils.map(n.utils.filterSVGElements(t.childNodes),function(t){return n.adopt(t)});return new n.Set(e)},rebuild:function(t){if("boolean"==typeof t&&(this._rebuild=t),this._rebuild){var e=this,r=0,i=this.dom.leading*new n.Number(this.attr("font-size"));this.lines().each(function(){this.dom.newLined&&(e.textPath()||this.attr("x",e.attr("x")),"\n"==this.text()?r+=i:(this.attr("dy",i+r),r=0))}),this.fire("rebuild")}return this},build:function(t){return this._build=!!t,this},setData:function(t){return this.dom=t,this.dom.leading=new n.Number(t.leading||1.3),this}},construct:{text:function(t){return this.put(new n.Text).text(t)},plain:function(t){return this.put(new n.Text).plain(t)}}}),n.Tspan=n.invent({create:"tspan",inherit:n.Shape,extend:{text:function(t){return null==t?this.node.textContent+(this.dom.newLined?"\n":""):("function"==typeof t?t.call(this,this):this.plain(t),this)},dx:function(t){return this.attr("dx",t)},dy:function(t){return this.attr("dy",t)},newLine:function(){var t=this.parent(n.Text);return this.dom.newLined=!0,this.dy(t.dom.leading*t.attr("font-size")).attr("x",t.x())}}}),n.extend(n.Text,n.Tspan,{plain:function(t){return!1===this._build&&this.clear(),this.node.appendChild(e.createTextNode(t)),this},tspan:function(t){var e=(this.textPath&&this.textPath()||this).node,r=new n.Tspan;return!1===this._build&&this.clear(),e.appendChild(r.node),r.text(t)},clear:function(){for(var t=(this.textPath&&this.textPath()||this).node;t.hasChildNodes();)t.removeChild(t.lastChild);return this},length:function(){return this.node.getComputedTextLength()}}),n.TextPath=n.invent({create:"textPath",inherit:n.Parent,parent:n.Text,construct:{morphArray:n.PathArray,path:function(t){for(var e=new n.TextPath,r=this.doc().defs().path(t);this.node.hasChildNodes();)e.node.appendChild(this.node.firstChild);return this.node.appendChild(e.node),e.attr("href","#"+r,n.xlink),this},array:function(){var t=this.track();return t?t.array():null},plot:function(t){var e=this.track(),n=null;return e&&(n=e.plot(t)),null==t?n:this},track:function(){var t=this.textPath();if(t)return t.reference("href")},textPath:function(){if(this.node.firstChild&&"textPath"==this.node.firstChild.nodeName)return n.adopt(this.node.firstChild)}}}),n.Nested=n.invent({create:function(){this.constructor.call(this,n.create("svg")),this.style("overflow","visible")},inherit:n.Container,construct:{nested:function(){return this.put(new n.Nested)}}}),n.A=n.invent({create:"a",inherit:n.Container,extend:{to:function(t){return this.attr("href",t,n.xlink)},show:function(t){return this.attr("show",t,n.xlink)},target:function(t){return this.attr("target",t)}},construct:{link:function(t){return this.put(new n.A).to(t)}}}),n.extend(n.Element,{linkTo:function(t){var e=new n.A;return"function"==typeof t?t.call(e,e):e.to(t),this.parent().put(e).put(this)}}),n.Marker=n.invent({create:"marker",inherit:n.Container,extend:{width:function(t){return this.attr("markerWidth",t)},height:function(t){return this.attr("markerHeight",t)},ref:function(t,e){return this.attr("refX",t).attr("refY",e)},update:function(t){return this.clear(),"function"==typeof t&&t.call(this,this),this},toString:function(){return"url(#"+this.id()+")"}},construct:{marker:function(t,e,n){return this.defs().marker(t,e,n)}}}),n.extend(n.Defs,{marker:function(t,e,r){return this.put(new n.Marker).size(t,e).ref(t/2,e/2).viewbox(0,0,t,e).attr("orient","auto").update(r)}}),n.extend(n.Line,n.Polyline,n.Polygon,n.Path,{marker:function(t,e,r,i){var o=["marker"];return"all"!=t&&o.push(t),o=o.join("-"),t=arguments[1]instanceof n.Marker?arguments[1]:this.doc().marker(e,r,i),this.attr(o,t)}});var u={stroke:["color","width","opacity","linecap","linejoin","miterlimit","dasharray","dashoffset"],fill:["color","opacity","rule"],prefix:function(t,e){return"color"==e?t:t+"-"+e}};function a(t,e,r,i){return r+i.replace(n.regex.dots," .")}function c(t){return t.toLowerCase().replace(/-(.)/g,function(t,e){return e.toUpperCase()})}function h(t){return t.charAt(0).toUpperCase()+t.slice(1)}function f(t){var e=t.toString(16);return 1==e.length?"0"+e:e}function l(t,e,n){if(null==e||null==n){var r=t.bbox();null==e?e=r.width/r.height*n:null==n&&(n=r.height/r.width*e)}return{width:e,height:n}}function p(t,e,n){return{x:e*t.a+n*t.c+0,y:e*t.b+n*t.d+0}}function d(t){return{a:t[0],b:t[1],c:t[2],d:t[3],e:t[4],f:t[5]}}function v(t,e){t.cx=null==t.cx?e.bbox().cx:t.cx,t.cy=null==t.cy?e.bbox().cy:t.cy}function b(e){for(var r=e.childNodes.length-1;r>=0;r--)e.childNodes[r]instanceof t.SVGElement&&b(e.childNodes[r]);return n.adopt(e).id(n.eid(e.nodeName))}function y(t){return null==t.x&&(t.x=0,t.y=0,t.width=0,t.height=0),t.w=t.width,t.h=t.height,t.x2=t.x+t.width,t.y2=t.y+t.height,t.cx=t.x+t.width/2,t.cy=t.y+t.height/2,t}function m(t){return Math.abs(t)>1e-37?t:0}["fill","stroke"].forEach(function(t){var e,r={};r[t]=function(r){if(void 0===r)return this;if("string"==typeof r||n.Color.isRgb(r)||r&&"function"==typeof r.fill)this.attr(t,r);else for(e=u[t].length-1;e>=0;e--)null!=r[u[t][e]]&&this.attr(u.prefix(t,u[t][e]),r[u[t][e]]);return this},n.extend(n.Element,n.FX,r)}),n.extend(n.Element,n.FX,{rotate:function(t,e,n){return this.transform({rotation:t,cx:e,cy:n})},skew:function(t,e,n,r){return 1==arguments.length||3==arguments.length?this.transform({skew:t,cx:e,cy:n}):this.transform({skewX:t,skewY:e,cx:n,cy:r})},scale:function(t,e,n,r){return 1==arguments.length||3==arguments.length?this.transform({scale:t,cx:e,cy:n}):this.transform({scaleX:t,scaleY:e,cx:n,cy:r})},translate:function(t,e){return this.transform({x:t,y:e})},flip:function(t,e){return e="number"==typeof t?t:e,this.transform({flip:t||"both",offset:e})},matrix:function(t){return this.attr("transform",new n.Matrix(6==arguments.length?[].slice.call(arguments):t))},opacity:function(t){return this.attr("opacity",t)},dx:function(t){return this.x(new n.Number(t).plus(this instanceof n.FX?0:this.x()),!0)},dy:function(t){return this.y(new n.Number(t).plus(this instanceof n.FX?0:this.y()),!0)},dmove:function(t,e){return this.dx(t).dy(e)}}),n.extend(n.Rect,n.Ellipse,n.Circle,n.Gradient,n.FX,{radius:function(t,e){var r=(this._target||this).type;return"radial"==r||"circle"==r?this.attr("r",new n.Number(t)):this.rx(t).ry(null==e?t:e)}}),n.extend(n.Path,{length:function(){return this.node.getTotalLength()},pointAt:function(t){return this.node.getPointAtLength(t)}}),n.extend(n.Parent,n.Text,n.Tspan,n.FX,{font:function(t,e){if("object"==typeof t)for(e in t)this.font(e,t[e]);return"leading"==t?this.leading(e):"anchor"==t?this.attr("text-anchor",e):"size"==t||"family"==t||"weight"==t||"stretch"==t||"variant"==t||"style"==t?this.attr("font-"+t,e):this.attr(t,e)}}),n.Set=n.invent({create:function(t){t instanceof n.Set?this.members=t.members.slice():Array.isArray(t)?this.members=t:this.clear()},extend:{add:function(){var t,e,n=[].slice.call(arguments);for(t=0,e=n.length;t<e;t++)this.members.push(n[t]);return this},remove:function(t){var e=this.index(t);return e>-1&&this.members.splice(e,1),this},each:function(t){for(var e=0,n=this.members.length;e<n;e++)t.apply(this.members[e],[e,this.members]);return this},clear:function(){return this.members=[],this},length:function(){return this.members.length},has:function(t){return this.index(t)>=0},index:function(t){return this.members.indexOf(t)},get:function(t){return this.members[t]},first:function(){return this.get(0)},last:function(){return this.get(this.members.length-1)},valueOf:function(){return this.members},bbox:function(){if(0==this.members.length)return new n.RBox;var t=this.members[0].rbox(this.members[0].doc());return this.each(function(){t=t.merge(this.rbox(this.doc()))}),t}},construct:{set:function(t){return new n.Set(t)}}}),n.FX.Set=n.invent({create:function(t){this.set=t}}),n.Set.inherit=function(){var t=[];for(var e in n.Shape.prototype)"function"==typeof n.Shape.prototype[e]&&"function"!=typeof n.Set.prototype[e]&&t.push(e);for(var e in t.forEach(function(t){n.Set.prototype[t]=function(){for(var e=0,r=this.members.length;e<r;e++)this.members[e]&&"function"==typeof this.members[e][t]&&this.members[e][t].apply(this.members[e],arguments);return"animate"==t?this.fx||(this.fx=new n.FX.Set(this)):this}}),t=[],n.FX.prototype)"function"==typeof n.FX.prototype[e]&&"function"!=typeof n.FX.Set.prototype[e]&&t.push(e);t.forEach(function(t){n.FX.Set.prototype[t]=function(){for(var e=0,n=this.set.members.length;e<n;e++)this.set.members[e].fx[t].apply(this.set.members[e].fx,arguments);return this}})},n.extend(n.Element,{data:function(t,e,n){if("object"==typeof t)for(e in t)this.data(e,t[e]);else if(arguments.length<2)try{return JSON.parse(this.attr("data-"+t))}catch(e){return this.attr("data-"+t)}else this.attr("data-"+t,null===e?null:!0===n||"string"==typeof e||"number"==typeof e?e:JSON.stringify(e));return this}}),n.extend(n.Element,{remember:function(t,e){if("object"==typeof arguments[0])for(var e in t)this.remember(e,t[e]);else{if(1==arguments.length)return this.memory()[t];this.memory()[t]=e}return this},forget:function(){if(0==arguments.length)this._memory={};else for(var t=arguments.length-1;t>=0;t--)delete this.memory()[arguments[t]];return this},memory:function(){return this._memory||(this._memory={})}}),n.get=function(t){var r=e.getElementById(function(t){var e=(t||"").toString().match(n.regex.reference);if(e)return e[1]}(t)||t);return n.adopt(r)},n.select=function(t,r){return new n.Set(n.utils.map((r||e).querySelectorAll(t),function(t){return n.adopt(t)}))},n.extend(n.Parent,{select:function(t){return n.select(t,this.node)}});var g="abcdef".split("");if("function"!=typeof t.CustomEvent){var x=function(t,n){n=n||{bubbles:!1,cancelable:!1,detail:void 0};var r=e.createEvent("CustomEvent");return r.initCustomEvent(t,n.bubbles,n.cancelable,n.detail),r};x.prototype=t.Event.prototype,n.CustomEvent=x}else n.CustomEvent=t.CustomEvent;return function(e){for(var n=0,r=["moz","webkit"],i=0;i<r.length&&!t.requestAnimationFrame;++i)e.requestAnimationFrame=e[r[i]+"RequestAnimationFrame"],e.cancelAnimationFrame=e[r[i]+"CancelAnimationFrame"]||e[r[i]+"CancelRequestAnimationFrame"];e.requestAnimationFrame=e.requestAnimationFrame||function(t){var r=(new Date).getTime(),i=Math.max(0,16-(r-n)),o=e.setTimeout(function(){t(r+i)},i);return n=r+i,o},e.cancelAnimationFrame=e.cancelAnimationFrame||e.clearTimeout}(t),n}(i,i.document)}.call(e,n,e,t))||(t.exports=r)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC90b1N1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9PdXRlclN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL1N1YmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9hc3luYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL2xvZGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9lbXB0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL0lubmVyU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9ub29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS9saWIvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL05vdGlmaWNhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL2xvZGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3N5bWJvbC9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9ncmFwaGxpYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL0VtcHR5RXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FzeW5jU2NoZWR1bGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL0FzeW5jU3ViamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc3luY0FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzTnVtZXJpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJdGVyYXRlZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2NvbmNhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2hvc3RSZXBvcnRFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvcGlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zeW1ib2wvcnhTdWJzY3JpYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvc3Vic2NyaWJlVG9PYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvc3Vic2NyaWJlVG9Qcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvc3Vic2NyaWJlVG9JdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5c0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9yZWZDb3VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9SZXBsYXlTdWJqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvdGhyb3dFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2NvbWJpbmVMYXRlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlQWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvZGVmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS96aXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2NhblJlcG9ydEVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvSW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc2FwQWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc2FwU2NoZWR1bGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9hc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL09ic2VydmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9LZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FuaW1hdGlvbkZyYW1lQWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9hbmltYXRpb25GcmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL1ZpcnR1YWxUaW1lU2NoZWR1bGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvYmluZENhbGxiYWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvYmluZE5vZGVDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2ZvcmtKb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbUV2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbUV2ZW50UGF0dGVybi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2dlbmVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvaWlmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvaW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9uZXZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL29uRXJyb3JSZXN1bWVOZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvcGFpcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9wYXJ0aXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9yYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL3VzaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZ3JvdXBCeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvTm9kZS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TdGFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzb2NJbmRleE9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc2lnblZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ25WYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1Byb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJdGVyYXRlZUNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9yYW5rL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2F1ZGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9hdWRpdFRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyQ291bnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlclRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlclRvZ2dsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyV2hlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY2F0Y2hFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUxhdGVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdE1hcFRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9jb3VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlVGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZGVmYXVsdElmRW1wdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2RlbGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9kZWxheVdoZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2RlbWF0ZXJpYWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdFVudGlsQ2hhbmdlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZGlzdGluY3RVbnRpbEtleUNoYW5nZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3Rocm93SWZFbXB0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZWxlbWVudEF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9lbmRXaXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9ldmVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZXhoYXVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZXhoYXVzdE1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZXhwYW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9maW5hbGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmluZEluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9maXJzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvaWdub3JlRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2lzRW1wdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VMYXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9sYXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9tYXBUby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWF0ZXJpYWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NjYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3JlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWF4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXBUby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VTY2FuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL211bHRpY2FzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvb25FcnJvclJlc3VtZU5leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3BhaXJ3aXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9wYXJ0aXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3BsdWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoQmVoYXZpb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3B1Ymxpc2hMYXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoUmVwbGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9yYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3JlcGVhdFdoZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3JldHJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9yZXRyeVdoZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NhbXBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2FtcGxlVGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2VxdWVuY2VFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2hhcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NoYXJlUmVwbGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9zaW5nbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NraXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NraXBMYXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9za2lwVW50aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NraXBXaGlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3RhcnRXaXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvU3Vic2NyaWJlT25PYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9zdWJzY3JpYmVPbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaE1hcFRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90YWtlVW50aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VXaGlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGhyb3R0bGVUaW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90aW1lSW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVvdXRXaXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90aW1lb3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90aW1lc3RhbXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93Q291bnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1RpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1RvZ2dsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93V2hlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvd2l0aExhdGVzdEZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3ppcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvemlwQWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L29wZXJhdG9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9CZWhhdmlvclN1YmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL29ic2VydmVPbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL1RpbWVvdXRFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0QWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9yYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvdGltZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVQcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvUXVldWVBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL1F1ZXVlU2NoZWR1bGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9xdWV1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9TdWJqZWN0U3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvc3Vic2NyaWJlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNQcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvbm90LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9saWIvZ3JhcGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RWFjaC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0U3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVB1c2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVBcnJheUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3JPd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUV4dHJlbXVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbW11dGFiaWxpdHktaGVscGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9TY2VuZUxheW91dC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b1NvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUxpa2VLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJBcmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc3R1YkFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRBbGxLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRBbGxLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19VaW50OEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pbml0Q2xvbmVPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9mb3JFYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEFycmF5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXRDYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hhc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc1BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNVbmRlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3JlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyUmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRmluZEluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2VPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvZGlqa3N0cmEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9kYXRhL3ByaW9yaXR5LXF1ZXVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9saWIvYWxnL3Rhcmphbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL2FsZy90b3Bzb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9saWIvYWxnL2Rmcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvRmluaXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZmxhdHRlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NpZ25NZXJnZVZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NhZmVHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUx0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS9saWIvcmFuay9mZWFzaWJsZS10cmVlLmpzIiwid2VicGFjazovLy8uL3NyYy9lbnRyeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvU2NlbmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0VkZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9PcHMudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzTWFza2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUaW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ25Jbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5c0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUtleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5U3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5U3ltYm9sc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19EYXRhVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19Qcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1dlYWtNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lQnlUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVEYXRhVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVJlZ0V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc01hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVCYXNlRm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUJhc2VFYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hdGNoZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWxEZWVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlQWRkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5U29tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEJ5VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxPYmplY3RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hdGNoRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWF0Y2hlc1Byb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1RvUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tZW1vaXplQ2FwcGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUhhc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5RGVlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNFbXB0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1NpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNjaWlTaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc1VuaWNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdW5pY29kZVNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC91bmlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0ZsYXR0ZW5hYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTZXRUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zaG9ydE91dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5pcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJbmRleE9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hTi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdHJpY3RJbmRleE9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5SW5jbHVkZXNXaXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9saWIvYWxnL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9saWIvYWxnL2NvbXBvbmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvZGlqa3N0cmEtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9saWIvYWxnL2ZpbmQtY3ljbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9saWIvYWxnL2Zsb3lkLXdhcnNoYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9saWIvYWxnL2lzLWFjeWNsaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvcG9zdG9yZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9saWIvYWxnL3ByZW9yZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9saWIvYWxnL3ByaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9sYXlvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jbG9uZURlZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlRmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZpbmRJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvSW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZm9ySW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sYXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWFwVmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWF4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL21lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWVyZ2VEZWVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNQbGFpbk9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQXNzaWduZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9taW5CeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL25vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3BpY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVBpY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVBpY2tCeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZsYXRSZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlUmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVJhbmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc29ydEJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VPcmRlckJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTb3J0QnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29tcGFyZU11bHRpcGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvbXBhcmVBc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC91bmlxdWVJZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3ppcE9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlWmlwT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS9saWIvYWN5Y2xpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL2dyZWVkeS1mYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9kYXRhL2xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9ub3JtYWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9yYW5rL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS9saWIvcmFuay9uZXR3b3JrLXNpbXBsZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9wYXJlbnQtZHVtbXktY2hhaW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS9saWIvbmVzdGluZy1ncmFwaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL2FkZC1ib3JkZXItc2VnbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9jb29yZGluYXRlLXN5c3RlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL29yZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS9saWIvb3JkZXIvaW5pdC1vcmRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL29yZGVyL2Nyb3NzLWNvdW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS9saWIvb3JkZXIvc29ydC1zdWJncmFwaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL29yZGVyL2JhcnljZW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9vcmRlci9yZXNvbHZlLWNvbmZsaWN0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL29yZGVyL3NvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9vcmRlci9idWlsZC1sYXllci1ncmFwaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL29yZGVyL2FkZC1zdWJncmFwaC1jb25zdHJhaW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL3Bvc2l0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS9saWIvcG9zaXRpb24vYmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Rpc3BsYXkudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N2Zy5qcy9kaXN0L3N2Zy5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9fd2VicGFja19leHBvcnRzX18iLCJfX2V4dGVuZHMiLCJleHRlbmRTdGF0aWNzIiwiYiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJfXyIsInRoaXMiLCJjb25zdHJ1Y3RvciIsIlN1YnNjcmliZXIiLCJ0c2xpYl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX3V0aWxfaXNGdW5jdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX09ic2VydmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJfU3Vic2NyaXB0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfaW50ZXJuYWxfc3ltYm9sX3J4U3Vic2NyaWJlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX2NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiX3V0aWxfaG9zdFJlcG9ydEVycm9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJfc3VwZXIiLCJkZXN0aW5hdGlvbk9yTmV4dCIsImVycm9yIiwiY29tcGxldGUiLCJfdGhpcyIsInN5bmNFcnJvclZhbHVlIiwic3luY0Vycm9yVGhyb3duIiwic3luY0Vycm9yVGhyb3dhYmxlIiwiaXNTdG9wcGVkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZGVzdGluYXRpb24iLCJhZGQiLCJTYWZlU3Vic2NyaWJlciIsIm5leHQiLCJzdWJzY3JpYmVyIiwiX25leHQiLCJlcnIiLCJfZXJyb3IiLCJfY29tcGxldGUiLCJ1bnN1YnNjcmliZSIsImNsb3NlZCIsIl91bnN1YnNjcmliZUFuZFJlY3ljbGUiLCJfcGFyZW50T3JQYXJlbnRzIiwiX3BhcmVudFN1YnNjcmliZXIiLCJvYnNlcnZlck9yTmV4dCIsImNvbnRleHQiLCJfY29udGV4dCIsInVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmciLCJfX3RyeU9yU2V0RXJyb3IiLCJfX3RyeU9yVW5zdWIiLCJ3cmFwcGVkQ29tcGxldGUiLCJmbiIsInBhcmVudCIsIkVycm9yIiwiX3Vuc3Vic2NyaWJlIiwiT2JzZXJ2YWJsZV9PYnNlcnZhYmxlIiwiT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIl9pc1NjYWxhciIsIl9zdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJvYnNlcnZhYmxlIiwic291cmNlIiwic2luayIsIm5leHRPck9ic2VydmVyIiwicnhTdWJzY3JpYmVyIiwiT2JzZXJ2ZXIiLCJ0b1N1YnNjcmliZXIiLCJjb25maWciLCJfdHJ5U3Vic2NyaWJlIiwiY2FuUmVwb3J0RXJyb3IiLCJjb25zb2xlIiwid2FybiIsImZvckVhY2giLCJwcm9taXNlQ3RvciIsImdldFByb21pc2VDdG9yIiwicmVzb2x2ZSIsInJlamVjdCIsInN1YnNjcmlwdGlvbiIsInBpcGUiLCJvcGVyYXRpb25zIiwiX2kiLCJ0b1Byb21pc2UiLCJ4IiwiUHJvbWlzZSIsInN1YnNjcmliZVRvUmVzdWx0IiwiX0lubmVyU3Vic2NyaWJlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX3N1YnNjcmliZVRvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfT2JzZXJ2YWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwib3V0ZXJTdWJzY3JpYmVyIiwicmVzdWx0Iiwib3V0ZXJWYWx1ZSIsIm91dGVySW5kZXgiLCJPdXRlclN1YnNjcmliZXIiLCJhcHBseSIsIm5vdGlmeU5leHQiLCJpbm5lclZhbHVlIiwiaW5uZXJJbmRleCIsImlubmVyU3ViIiwibm90aWZ5RXJyb3IiLCJub3RpZnlDb21wbGV0ZSIsIlN1YnNjcmlwdGlvbiIsIl91dGlsX2lzQXJyYXlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl91dGlsX2lzT2JqZWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfdXRpbF9pc0Z1bmN0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJfdXRpbF9VbnN1YnNjcmlwdGlvbkVycm9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfc3Vic2NyaXB0aW9ucyIsImVtcHR5IiwiZXJyb3JzIiwicmVtb3ZlIiwiaW5kZXgiLCJlIiwiZmxhdHRlblVuc3Vic2NyaXB0aW9uRXJyb3JzIiwibGVuIiwic3ViIiwiY29uY2F0IiwicHVzaCIsInRlYXJkb3duIiwiRU1QVFkiLCJ0bXAiLCJpbmRleE9mIiwic3Vic2NyaXB0aW9ucyIsInN1YnNjcmlwdGlvbkluZGV4Iiwic3BsaWNlIiwicmVkdWNlIiwiZXJycyIsIlN1YmplY3RTdWJzY3JpYmVyIiwiU3ViamVjdCIsIl9PYnNlcnZhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfU3Vic2NyaWJlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX3V0aWxfT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIl9TdWJqZWN0U3Vic2NyaXB0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJfaW50ZXJuYWxfc3ltYm9sX3J4U3Vic2NyaWJlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwib2JzZXJ2ZXJzIiwiaGFzRXJyb3IiLCJ0aHJvd25FcnJvciIsInN1YmplY3QiLCJBbm9ueW1vdXNTdWJqZWN0IiwiY29weSIsInNsaWNlIiwiYXNPYnNlcnZhYmxlIiwiaXNBcnJheSIsImFzeW5jIiwiX0FzeW5jQWN0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJsb2Rhc2giLCJjbG9uZURlZXAiLCJjb25zdGFudCIsImRlZmF1bHRzIiwiZWFjaCIsImZpbHRlciIsImZpbmQiLCJmbGF0dGVuIiwiZm9ySW4iLCJoYXMiLCJpc1VuZGVmaW5lZCIsImxhc3QiLCJtYXAiLCJtYXBWYWx1ZXMiLCJtYXgiLCJtZXJnZSIsIm1pbiIsIm1pbkJ5Iiwibm93IiwicGljayIsInJhbmdlIiwic29ydEJ5IiwidW5pcXVlSWQiLCJ2YWx1ZXMiLCJ6aXBPYmplY3QiLCJ3aW5kb3ciLCJfIiwiX1N1YnNjcmliZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInByb2plY3QiLCJ0aGlzQXJnIiwiVHlwZUVycm9yIiwiTWFwT3BlcmF0b3IiLCJNYXBTdWJzY3JpYmVyIiwiY291bnQiLCJpc1NjaGVkdWxlciIsInNjaGVkdWxlIiwiX09ic2VydmFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInNjaGVkdWxlciIsImVtcHR5U2NoZWR1bGVkIiwiZnJvbSIsIl91dGlsX3N1YnNjcmliZVRvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfc2NoZWR1bGVkX3NjaGVkdWxlZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiaW5wdXQiLCJJbm5lclN1YnNjcmliZXIiLCJfZW5hYmxlX3N1cGVyX2dyb3NzX21vZGVfdGhhdF93aWxsX2NhdXNlX2JhZF90aGluZ3MiLCJ1bmRlZmluZWQiLCJzdGFjayIsIm5vb3AiLCJHcmFwaCIsImFkZER1bW15Tm9kZSIsImciLCJ0eXBlIiwiYXR0cnMiLCJ2IiwiaGFzTm9kZSIsImR1bW15Iiwic2V0Tm9kZSIsIm1heFJhbmsiLCJub2RlcyIsInJhbmsiLCJub2RlIiwic2ltcGxpZnkiLCJzaW1wbGlmaWVkIiwic2V0R3JhcGgiLCJncmFwaCIsImVkZ2VzIiwic2ltcGxlTGFiZWwiLCJlZGdlIiwidyIsIndlaWdodCIsIm1pbmxlbiIsImxhYmVsIiwic2V0RWRnZSIsIk1hdGgiLCJhc05vbkNvbXBvdW5kR3JhcGgiLCJtdWx0aWdyYXBoIiwiaXNNdWx0aWdyYXBoIiwiY2hpbGRyZW4iLCJzdWNjZXNzb3JXZWlnaHRzIiwid2VpZ2h0TWFwIiwic3VjcyIsIm91dEVkZ2VzIiwicHJlZGVjZXNzb3JXZWlnaHRzIiwicHJlZHMiLCJpbkVkZ2VzIiwiaW50ZXJzZWN0UmVjdCIsInJlY3QiLCJwb2ludCIsInN4Iiwic3kiLCJ5IiwiZHgiLCJkeSIsIndpZHRoIiwiaCIsImhlaWdodCIsImFicyIsImJ1aWxkTGF5ZXJNYXRyaXgiLCJsYXllcmluZyIsIm9yZGVyIiwibm9ybWFsaXplUmFua3MiLCJyZW1vdmVFbXB0eVJhbmtzIiwib2Zmc2V0IiwibGF5ZXJzIiwiZGVsdGEiLCJub2RlUmFua0ZhY3RvciIsInZzIiwiYWRkQm9yZGVyTm9kZSIsInByZWZpeCIsInBhcnRpdGlvbiIsImNvbGxlY3Rpb24iLCJsaHMiLCJyaHMiLCJ0aW1lIiwic3RhcnQiLCJsb2ciLCJub3RpbWUiLCJwcmVkaWNhdGUiLCJGaWx0ZXJPcGVyYXRvciIsIkZpbHRlclN1YnNjcmliZXIiLCJOb3RpZmljYXRpb25LaW5kIiwiTm90aWZpY2F0aW9uIiwiX29ic2VydmFibGVfZW1wdHlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9vYnNlcnZhYmxlX29mX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfb2JzZXJ2YWJsZV90aHJvd0Vycm9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJraW5kIiwiaGFzVmFsdWUiLCJvYnNlcnZlIiwib2JzZXJ2ZXIiLCJkbyIsImFjY2VwdCIsInRvT2JzZXJ2YWJsZSIsImNyZWF0ZU5leHQiLCJ1bmRlZmluZWRWYWx1ZU5vdGlmaWNhdGlvbiIsImNyZWF0ZUVycm9yIiwiY3JlYXRlQ29tcGxldGUiLCJjb21wbGV0ZU5vdGlmaWNhdGlvbiIsImlkZW50aXR5IiwiZ2V0U3ltYm9sSXRlcmF0b3IiLCJpdGVyYXRvciIsImNsb25lIiwiaXNFbXB0eSIsImlzRnVuY3Rpb24iLCJrZXlzIiwic2l6ZSIsInRyYW5zZm9ybSIsInVuaW9uIiwiT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsIiwibWVzc2FnZSIsIk9iamVjdFVuc3Vic2NyaWJlZEVycm9yIiwiZ3JhcGhsaWIiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJzZWxmIiwicm9vdCIsIkZ1bmN0aW9uIiwibWVyZ2VNYXAiLCJfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX091dGVyU3Vic2NyaWJlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX0lubmVyU3Vic2NyaWJlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiX21hcF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX29ic2VydmFibGVfZnJvbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwicmVzdWx0U2VsZWN0b3IiLCJjb25jdXJyZW50IiwiTnVtYmVyIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJhIiwiaWkiLCJNZXJnZU1hcE9wZXJhdG9yIiwiTWVyZ2VNYXBTdWJzY3JpYmVyIiwiaGFzQ29tcGxldGVkIiwiYnVmZmVyIiwiYWN0aXZlIiwiX3RyeU5leHQiLCJfaW5uZXJTdWIiLCJpc2giLCJpbm5lclN1YnNjcmliZXIiLCJzaGlmdCIsIkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9ySW1wbCIsIkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yIiwiRW1wdHlFcnJvckltcGwiLCJFbXB0eUVycm9yIiwiZnJvbUFycmF5IiwiX3V0aWxfc3Vic2NyaWJlVG9BcnJheV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX3NjaGVkdWxlZF9zY2hlZHVsZUFycmF5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJBc3luY1NjaGVkdWxlciIsIl9TY2hlZHVsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIlNjaGVkdWxlckFjdGlvbiIsImRlbGVnYXRlIiwiYWN0aW9ucyIsInNjaGVkdWxlZCIsIndvcmsiLCJkZWxheSIsInN0YXRlIiwiZmx1c2giLCJhY3Rpb24iLCJleGVjdXRlIiwiQXN5bmNTdWJqZWN0IiwiX1N1YmplY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9TdWJzY3JpcHRpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImhhc05leHQiLCJBY3Rpb25fQWN0aW9uIiwiQWN0aW9uIiwidHNsaWJfZXM2IiwiQXN5bmNBY3Rpb25fQXN5bmNBY3Rpb24iLCJBc3luY0FjdGlvbiIsInBlbmRpbmciLCJpZCIsInJlY3ljbGVBc3luY0lkIiwicmVxdWVzdEFzeW5jSWQiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJfZXhlY3V0ZSIsImVycm9yZWQiLCJlcnJvclZhbHVlIiwiaXNOdW1lcmljIiwiX2lzQXJyYXlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInZhbCIsInBhcnNlRmxvYXQiLCJpc0xlbmd0aCIsImJhc2VNYXRjaGVzIiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsIl9vZl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX29wZXJhdG9yc19jb25jYXRBbGxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIm9ic2VydmFibGVzIiwiaG9zdFJlcG9ydEVycm9yIiwic2V0VGltZW91dCIsImFycmF5TGlrZUtleXMiLCJiYXNlS2V5cyIsImlzQXJyYXlMaWtlIiwib2YiLCJfdXRpbF9pc1NjaGVkdWxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX2Zyb21BcnJheV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiYXJncyIsInBvcCIsImJhc2VJc05hdGl2ZSIsImdldFZhbHVlIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJudWxsVGFnIiwidW5kZWZpbmVkVGFnIiwic3ltVG9TdHJpbmdUYWciLCJwaXBlRnJvbUFycmF5IiwiX25vb3BfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImZucyIsInByZXYiLCJyYW5kb20iLCJVbnN1YnNjcmlwdGlvbkVycm9ySW1wbCIsInRvU3RyaW5nIiwiam9pbiIsIlVuc3Vic2NyaXB0aW9uRXJyb3IiLCJzdWJzY3JpYmVUbyIsIm9iaiIsIm9icyIsInN1YnNjcmliZVRvQXJyYXkiLCJpc1Byb21pc2UiLCJwcm9taXNlIiwidGhlbiIsInN5bWJvbF9pdGVyYXRvciIsIml0ZXJhYmxlIiwiaXRlbSIsImRvbmUiLCJyZXR1cm4iLCJpc09iamVjdCIsIm90aGVyIiwic3R1YkZhbHNlIiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJCdWZmZXIiLCJpc0J1ZmZlciIsImJhc2VLZXlzSW4iLCJEYXRhVmlldyIsIk1hcCIsIlNldCIsIldlYWtNYXAiLCJiYXNlR2V0VGFnIiwidG9Tb3VyY2UiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJnZXRUYWciLCJBcnJheUJ1ZmZlciIsIkN0b3IiLCJjdG9yU3RyaW5nIiwiaXNPYmplY3RMaWtlIiwic3ltYm9sVGFnIiwicmVmQ291bnQiLCJSZWZDb3VudE9wZXJhdG9yIiwiY29ubmVjdGFibGUiLCJfcmVmQ291bnQiLCJyZWZDb3VudGVyIiwiUmVmQ291bnRTdWJzY3JpYmVyIiwiY29ubmVjdGlvbiIsImNvbm5lY3QiLCJzaGFyZWRDb25uZWN0aW9uIiwiX2Nvbm5lY3Rpb24iLCJSZXBsYXlTdWJqZWN0IiwiX3NjaGVkdWxlcl9xdWV1ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX29wZXJhdG9yc19vYnNlcnZlT25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIl91dGlsX09iamVjdFVuc3Vic2NyaWJlZEVycm9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJfU3ViamVjdFN1YnNjcmlwdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiYnVmZmVyU2l6ZSIsIndpbmRvd1RpbWUiLCJfZXZlbnRzIiwiX2luZmluaXRlVGltZVdpbmRvdyIsIl9idWZmZXJTaXplIiwiX3dpbmRvd1RpbWUiLCJuZXh0SW5maW5pdGVUaW1lV2luZG93IiwibmV4dFRpbWVXaW5kb3ciLCJSZXBsYXlFdmVudCIsIl9nZXROb3ciLCJfdHJpbUJ1ZmZlclRoZW5HZXRFdmVudHMiLCJldmVudHNDb3VudCIsInNwbGljZUNvdW50IiwidGhyb3dFcnJvciIsImRpc3BhdGNoIiwiX2EiLCJjb21iaW5lTGF0ZXN0IiwiQ29tYmluZUxhdGVzdE9wZXJhdG9yIiwiX3V0aWxfaXNTY2hlZHVsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl91dGlsX2lzQXJyYXlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9PdXRlclN1YnNjcmliZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIl91dGlsX3N1YnNjcmliZVRvUmVzdWx0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJfZnJvbUFycmF5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJOT05FIiwiQ29tYmluZUxhdGVzdFN1YnNjcmliZXIiLCJ0b1Jlc3BvbmQiLCJ1bnVzZWQiLCJvbGRWYWwiLCJfdHJ5UmVzdWx0U2VsZWN0b3IiLCJtZXJnZUFsbCIsIl9tZXJnZU1hcF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX3V0aWxfaWRlbnRpdHlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsImRlZmVyIiwiX2Zyb21fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9lbXB0eV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwib2JzZXJ2YWJsZUZhY3RvcnkiLCJ6aXAiLCJaaXBPcGVyYXRvciIsIl9TdWJzY3JpYmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfT3V0ZXJTdWJzY3JpYmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiX2ludGVybmFsX3N5bWJvbF9pdGVyYXRvcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiWmlwU3Vic2NyaWJlciIsIml0ZXJhdG9ycyIsIlN0YXRpY0FycmF5SXRlcmF0b3IiLCJTdGF0aWNJdGVyYXRvciIsIlppcEJ1ZmZlckl0ZXJhdG9yIiwic3RpbGxVbnN1YnNjcmliZWQiLCJub3RpZnlJbmFjdGl2ZSIsImNoZWNrSXRlcmF0b3JzIiwic2hvdWxkQ29tcGxldGUiLCJfdHJ5cmVzdWx0U2VsZWN0b3IiLCJuZXh0UmVzdWx0IiwiYXJyYXkiLCJpc0NvbXBsZXRlIiwiX1N1YnNjcmliZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNsb3NlZF8xIiwic2NoZWR1bGVBcnJheSIsIl9TdWJzY3JpcHRpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiSW1tZWRpYXRlIiwiY2IiLCJoYW5kbGUiLCJydW5JZlByZXNlbnQiLCJBc2FwQWN0aW9uX0FzYXBBY3Rpb24iLCJBc2FwQWN0aW9uIiwiQXNhcFNjaGVkdWxlcl9Bc2FwU2NoZWR1bGVyIiwiQXNhcFNjaGVkdWxlciIsImFzYXAiLCJfY29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfdXRpbF9ob3N0UmVwb3J0RXJyb3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsImFzeW5jVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsInByb3h5VGFnIiwidGFnIiwiYXNzaWduVmFsdWUiLCJiYXNlQXNzaWduVmFsdWUiLCJwcm9wcyIsImN1c3RvbWl6ZXIiLCJpc05ldyIsIm5ld1ZhbHVlIiwiYmFzZUlzQXJndW1lbnRzIiwib2JqZWN0UHJvdG8iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImlzQXJndW1lbnRzIiwiYmFzZUlzVHlwZWRBcnJheSIsImJhc2VVbmFyeSIsIm5vZGVVdGlsIiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImlzU3ltYm9sIiwiSU5GSU5JVFkiLCJBbmltYXRpb25GcmFtZUFjdGlvbl9BbmltYXRpb25GcmFtZUFjdGlvbiIsIkFuaW1hdGlvbkZyYW1lQWN0aW9uIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJhbmltYXRpb25GcmFtZSIsIkFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyIiwiVmlydHVhbFRpbWVTY2hlZHVsZXJfVmlydHVhbFRpbWVTY2hlZHVsZXIiLCJWaXJ0dWFsVGltZVNjaGVkdWxlciIsIm1heEZyYW1lcyIsIlZpcnR1YWxUaW1lU2NoZWR1bGVyX1ZpcnR1YWxBY3Rpb24iLCJmcmFtZSIsImZyYW1lVGltZUZhY3RvciIsIlZpcnR1YWxBY3Rpb24iLCJzb3J0Iiwic29ydEFjdGlvbnMiLCJpc09ic2VydmFibGUiLCJiaW5kQ2FsbGJhY2siLCJjYWxsYmFja0Z1bmMiLCJwYXJhbXMiLCJpbm5lckFyZ3MiLCJkaXNwYXRjaE5leHQiLCJiaW5kTm9kZUNhbGxiYWNrIiwiYmluZE5vZGVDYWxsYmFja19kaXNwYXRjaCIsImJpbmROb2RlQ2FsbGJhY2tfZGlzcGF0Y2hFcnJvciIsImJpbmROb2RlQ2FsbGJhY2tfZGlzcGF0Y2hOZXh0IiwiYXJnIiwiZm9ya0pvaW4iLCJzb3VyY2VzIiwiZmlyc3RfMSIsImZvcmtKb2luSW50ZXJuYWwiLCJnZXRQcm90b3R5cGVPZiIsInJlc3VsdFNlbGVjdG9yXzEiLCJjb21wbGV0ZWQiLCJlbWl0dGVkIiwiX2xvb3BfMSIsImZyb21FdmVudCIsInRhcmdldCIsImV2ZW50TmFtZSIsIm9wdGlvbnMiLCJzZXR1cFN1YnNjcmlwdGlvbiIsInNvdXJjZU9iaiIsImhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzRXZlbnRUYXJnZXQiLCJzb3VyY2VfMSIsIm9uIiwib2ZmIiwiaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlciIsInNvdXJjZV8yIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyIiwic291cmNlXzMiLCJmcm9tRXZlbnRQYXR0ZXJuIiwiYWRkSGFuZGxlciIsInJlbW92ZUhhbmRsZXIiLCJyZXRWYWx1ZSIsImdlbmVyYXRlIiwiaW5pdGlhbFN0YXRlT3JPcHRpb25zIiwiY29uZGl0aW9uIiwiaXRlcmF0ZSIsInJlc3VsdFNlbGVjdG9yT3JPYnNlcnZhYmxlIiwiaW5pdGlhbFN0YXRlIiwiZ2VuZXJhdGVfZGlzcGF0Y2giLCJjb25kaXRpb25SZXN1bHQiLCJuZWVkSXRlcmF0ZSIsImlpZiIsInRydWVSZXN1bHQiLCJmYWxzZVJlc3VsdCIsImludGVydmFsIiwicGVyaW9kIiwic2NoZWR1bGVyX2FzeW5jIiwiaW50ZXJ2YWxfZGlzcGF0Y2giLCJjb3VudGVyIiwiTkVWRVIiLCJuZXZlciIsIm9uRXJyb3JSZXN1bWVOZXh0IiwiZmlyc3QiLCJyZW1haW5kZXIiLCJzdWJOZXh0IiwicGFpcnMiLCJwYWlyc19kaXNwYXRjaCIsIm5vdCIsImN1cnJlbnQiLCJyYW5nZV9kaXNwYXRjaCIsInVzaW5nIiwicmVzb3VyY2VGYWN0b3J5IiwicmVzb3VyY2UiLCJDb25uZWN0YWJsZU9ic2VydmFibGUiLCJncm91cEJ5IiwiQmVoYXZpb3JTdWJqZWN0IiwicXVldWUiLCJTY2hlZHVsZXIiLCJUaW1lb3V0RXJyb3IiLCJyYWNlIiwidGltZXIiLCJEYXRlIiwiR3JvdXBlZE9ic2VydmFibGUiLCJfT2JzZXJ2YWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiX1N1YmplY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsImtleVNlbGVjdG9yIiwiZWxlbWVudFNlbGVjdG9yIiwiZHVyYXRpb25TZWxlY3RvciIsInN1YmplY3RTZWxlY3RvciIsIkdyb3VwQnlPcGVyYXRvciIsIkdyb3VwQnlTdWJzY3JpYmVyIiwiZ3JvdXBzIiwiYXR0ZW1wdGVkVG9VbnN1YnNjcmliZSIsIl9ncm91cCIsImVsZW1lbnQiLCJncm91cCIsInNldCIsImdyb3VwZWRPYnNlcnZhYmxlIiwiZHVyYXRpb24iLCJHcm91cER1cmF0aW9uU3Vic2NyaWJlciIsImNsZWFyIiwicmVtb3ZlR3JvdXAiLCJkZWxldGUiLCJncm91cFN1YmplY3QiLCJyZWZDb3VudFN1YnNjcmlwdGlvbiIsIklubmVyUmVmQ291bnRTdWJzY3JpcHRpb24iLCJyeGpzXzEiLCJvcGVyYXRvcnNfMSIsImltbXV0YWJpbGl0eV9oZWxwZXJfMSIsIlBST1BfREVGQVVMVF9OQU1FIiwiSU8iLCJOb2RlIiwiaW5jb21pbmdFZGdlcyIsIm91dGdvaW5nRWRnZXMiLCJsYXlvdXQiLCJpbnB1dHMiLCJvdXRwdXRzIiwibm9kZUNvdW50IiwiZ2V0TGFiZWwiLCJnZXRMYXlvdXRTdHJlYW0iLCJfc2V0TGF5b3V0IiwiZXN0YWJsaXNoSW5wdXRTdHJlYW0iLCJpbnB1dEluZm9TdHJlYW0iLCJnZXRJbnB1dEluZm9TdHJlYW0iLCJpbnB1dEFuZEluZm8iLCJpbnB1dFN0cmVhbSIsImlucHV0SW5mbyIsInByb3BTdHJlYW1zIiwicHJvcCIsImdldFRvIiwiZWRnZVN0cmVhbSIsImdldFN0cmVhbSIsInN0cmVhbXMiLCJuZXdTdHJlYW1zIiwiJHB1c2giLCJyYXciLCJyZXN0IiwiZ2V0SW5jb21pbmdFZGdlc1N0cmVhbSIsImdldE91dGdvaW5nRWRnZXNTdHJlYW0iLCJhZGRJbmNvbWluZ0VkZ2UiLCJpZSIsIm5ld0luY29taW5nRWRnZXMiLCJhZGRPdXRnb2luZ0VkZ2UiLCJvZSIsIm5ld091dGdvaW5nRWRnZXMiLCJyZW1vdmVJbmNvbWluZ0VkZ2UiLCIkc3BsaWNlIiwicmVtb3ZlT3V0Z29pbmdFZGdlIiwicGx1Y2tPdXRwdXQiLCJnZXRPdXRwdXRTdHJlYW0iLCJwbHVjayIsImdldElEIiwiQ29uc3RhbnROb2RlIiwib3V0cHV0SW5mbyIsInN0cmVhbSIsIm91dHB1dEluZm9TdHJlYW0iLCJnZXRPdXRwdXRJbmZvU3RyZWFtIiwiU3RhdGljSW5mb05vZGUiLCJvdXRwdXQiLCJtYW5hZ2VkT3V0IiwiZXN0YWJsaXNoT3V0cHV0U3RyZWFtIiwib3V0cHV0QW5kSW5mbyIsIm91dCIsIm91dFZhbHVlIiwicmF3UHJvcHMiLCJvaSIsImluZGl2aWR1YWxEaWN0U3RyZWFtcyIsImFzc2lnbiIsIk9wTm9kZSIsImZ1bmMiLCJhcmdWYWx1ZXMiLCJHZW5Ob2RlIiwiaW50ZXJ2YWxJRCIsImdldFJhbmRvbSIsImlucCIsIkxpc3RDYWNoZSIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJzdGFja1NldCIsIlN0YWNrIiwiZW50cmllcyIsImRhdGEiLCJfX2RhdGFfXyIsImxpc3RDYWNoZUNsZWFyIiwibGlzdENhY2hlRGVsZXRlIiwibGlzdENhY2hlR2V0IiwibGlzdENhY2hlSGFzIiwibGlzdENhY2hlU2V0IiwiZW50cnkiLCJlcSIsIm5hdGl2ZUNyZWF0ZSIsImdldE5hdGl2ZSIsImlzS2V5YWJsZSIsIm9ialZhbHVlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJNQVhfU0FGRV9JTlRFR0VSIiwicmVJc1VpbnQiLCJ0ZXN0IiwiZ2V0UHJvdG90eXBlIiwib3ZlckFyZyIsImJhc2VGb3JPd24iLCJiYXNlRWFjaCIsImNyZWF0ZUJhc2VFYWNoIiwiaXNLZXkiLCJzdHJpbmdUb1BhdGgiLCJpdGVyYXRlZSIsIm92ZXJSZXN0Iiwic2V0VG9TdHJpbmciLCJpc0luZGV4IiwibG9uZ2VzdFBhdGgiLCJ2aXNpdGVkIiwiZGZzIiwic2xhY2siLCJhdWRpdCIsIkF1ZGl0T3BlcmF0b3IiLCJhdWRpdF9BdWRpdFN1YnNjcmliZXIiLCJBdWRpdFN1YnNjcmliZXIiLCJ0aHJvdHRsZWQiLCJpbm5lclN1YnNjcmlwdGlvbiIsImNsZWFyVGhyb3R0bGUiLCJhdWRpdFRpbWUiLCJidWZmZXJfYnVmZmVyIiwiY2xvc2luZ05vdGlmaWVyIiwiQnVmZmVyT3BlcmF0b3IiLCJidWZmZXJfQnVmZmVyU3Vic2NyaWJlciIsIkJ1ZmZlclN1YnNjcmliZXIiLCJidWZmZXJDb3VudCIsInN0YXJ0QnVmZmVyRXZlcnkiLCJCdWZmZXJDb3VudE9wZXJhdG9yIiwic3Vic2NyaWJlckNsYXNzIiwiYnVmZmVyQ291bnRfQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlciIsImJ1ZmZlckNvdW50X0J1ZmZlckNvdW50U3Vic2NyaWJlciIsIkJ1ZmZlckNvdW50U3Vic2NyaWJlciIsIkJ1ZmZlclNraXBDb3VudFN1YnNjcmliZXIiLCJidWZmZXJzIiwiYnVmZmVyVGltZSIsImJ1ZmZlclRpbWVTcGFuIiwiYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCIsIm1heEJ1ZmZlclNpemUiLCJCdWZmZXJUaW1lT3BlcmF0b3IiLCJidWZmZXJUaW1lX0J1ZmZlclRpbWVTdWJzY3JpYmVyIiwiQ29udGV4dCIsIkJ1ZmZlclRpbWVTdWJzY3JpYmVyIiwiY29udGV4dHMiLCJvcGVuQ29udGV4dCIsInRpbWVzcGFuT25seSIsInRpbWVTcGFuT25seVN0YXRlIiwiY2xvc2VBY3Rpb24iLCJkaXNwYXRjaEJ1ZmZlclRpbWVTcGFuT25seSIsImNsb3NlU3RhdGUiLCJjcmVhdGlvblN0YXRlIiwiZGlzcGF0Y2hCdWZmZXJDbG9zZSIsImRpc3BhdGNoQnVmZmVyQ3JlYXRpb24iLCJmaWxsZWRCdWZmZXJDb250ZXh0IiwiY29udGV4dF8xIiwib25CdWZmZXJGdWxsIiwiY29udGV4dF8yIiwiY2xvc2VDb250ZXh0IiwicHJldkNvbnRleHQiLCJidWZmZXJUb2dnbGUiLCJvcGVuaW5ncyIsImNsb3NpbmdTZWxlY3RvciIsIkJ1ZmZlclRvZ2dsZU9wZXJhdG9yIiwiYnVmZmVyVG9nZ2xlX0J1ZmZlclRvZ2dsZVN1YnNjcmliZXIiLCJCdWZmZXJUb2dnbGVTdWJzY3JpYmVyIiwiY2xvc2VCdWZmZXIiLCJvcGVuQnVmZmVyIiwidHJ5U3Vic2NyaWJlIiwiYnVmZmVyV2hlbiIsIkJ1ZmZlcldoZW5PcGVyYXRvciIsImJ1ZmZlcldoZW5fQnVmZmVyV2hlblN1YnNjcmliZXIiLCJCdWZmZXJXaGVuU3Vic2NyaWJlciIsInN1YnNjcmliaW5nIiwiY2xvc2luZ1N1YnNjcmlwdGlvbiIsImNhdGNoRXJyb3IiLCJzZWxlY3RvciIsIkNhdGNoT3BlcmF0b3IiLCJjYXVnaHQiLCJjYXRjaEVycm9yX0NhdGNoU3Vic2NyaWJlciIsIkNhdGNoU3Vic2NyaWJlciIsImVycjIiLCJjb21iaW5lQWxsIiwiY29tYmluZUxhdGVzdF9jb21iaW5lTGF0ZXN0IiwiY29uY2F0X2NvbmNhdCIsImNvbmNhdE1hcCIsImNvbmNhdE1hcFRvIiwiaW5uZXJPYnNlcnZhYmxlIiwiY291bnRfY291bnQiLCJDb3VudE9wZXJhdG9yIiwiY291bnRfQ291bnRTdWJzY3JpYmVyIiwiQ291bnRTdWJzY3JpYmVyIiwiX3RyeVByZWRpY2F0ZSIsImRlYm91bmNlIiwiRGVib3VuY2VPcGVyYXRvciIsImRlYm91bmNlX0RlYm91bmNlU3Vic2NyaWJlciIsIkRlYm91bmNlU3Vic2NyaWJlciIsImR1cmF0aW9uU3Vic2NyaXB0aW9uIiwiZW1pdFZhbHVlIiwiZGVib3VuY2VUaW1lIiwiZHVlVGltZSIsIkRlYm91bmNlVGltZU9wZXJhdG9yIiwiZGVib3VuY2VUaW1lX0RlYm91bmNlVGltZVN1YnNjcmliZXIiLCJEZWJvdW5jZVRpbWVTdWJzY3JpYmVyIiwiZGVib3VuY2VkU3Vic2NyaXB0aW9uIiwibGFzdFZhbHVlIiwiY2xlYXJEZWJvdW5jZSIsImRlYm91bmNlZE5leHQiLCJkZWZhdWx0SWZFbXB0eSIsImRlZmF1bHRWYWx1ZSIsIkRlZmF1bHRJZkVtcHR5T3BlcmF0b3IiLCJkZWZhdWx0SWZFbXB0eV9EZWZhdWx0SWZFbXB0eVN1YnNjcmliZXIiLCJEZWZhdWx0SWZFbXB0eVN1YnNjcmliZXIiLCJpc0RhdGUiLCJpc05hTiIsImRlbGF5X2RlbGF5IiwiZGVsYXlGb3IiLCJEZWxheU9wZXJhdG9yIiwiZGVsYXlfRGVsYXlTdWJzY3JpYmVyIiwiRGVsYXlTdWJzY3JpYmVyIiwibm90aWZpY2F0aW9uIiwiZGVsYXlfMSIsIl9zY2hlZHVsZSIsInNjaGVkdWxlTm90aWZpY2F0aW9uIiwiRGVsYXlNZXNzYWdlIiwiZGVsYXlXaGVuIiwiZGVsYXlEdXJhdGlvblNlbGVjdG9yIiwic3Vic2NyaXB0aW9uRGVsYXkiLCJkZWxheVdoZW5fU3Vic2NyaXB0aW9uRGVsYXlPYnNlcnZhYmxlIiwiRGVsYXlXaGVuT3BlcmF0b3IiLCJkZWxheVdoZW5fRGVsYXlXaGVuU3Vic2NyaWJlciIsIkRlbGF5V2hlblN1YnNjcmliZXIiLCJkZWxheU5vdGlmaWVyU3Vic2NyaXB0aW9ucyIsInJlbW92ZVN1YnNjcmlwdGlvbiIsInRyeUNvbXBsZXRlIiwiZGVsYXlOb3RpZmllciIsInRyeURlbGF5Iiwic3Vic2NyaXB0aW9uSWR4Iiwibm90aWZpZXJTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGUiLCJkZWxheVdoZW5fU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyIiwiU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyIiwic291cmNlU3Vic2NyaWJlZCIsInN1YnNjcmliZVRvU291cmNlIiwiZGVtYXRlcmlhbGl6ZSIsIkRlTWF0ZXJpYWxpemVPcGVyYXRvciIsImRlbWF0ZXJpYWxpemVfRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXIiLCJEZU1hdGVyaWFsaXplU3Vic2NyaWJlciIsImRpc3RpbmN0IiwiZmx1c2hlcyIsIkRpc3RpbmN0T3BlcmF0b3IiLCJkaXN0aW5jdF9EaXN0aW5jdFN1YnNjcmliZXIiLCJEaXN0aW5jdFN1YnNjcmliZXIiLCJfdXNlS2V5U2VsZWN0b3IiLCJfZmluYWxpemVOZXh0IiwiZGlzdGluY3RVbnRpbENoYW5nZWQiLCJjb21wYXJlIiwiRGlzdGluY3RVbnRpbENoYW5nZWRPcGVyYXRvciIsImRpc3RpbmN0VW50aWxDaGFuZ2VkX0Rpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlciIsIkRpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlciIsImhhc0tleSIsImRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkIiwidGhyb3dJZkVtcHR5IiwiZXJyb3JGYWN0b3J5IiwiZGVmYXVsdEVycm9yRmFjdG9yeSIsIlRocm93SWZFbXB0eU9wZXJhdG9yIiwidGhyb3dJZkVtcHR5X1Rocm93SWZFbXB0eVN1YnNjcmliZXIiLCJUaHJvd0lmRW1wdHlTdWJzY3JpYmVyIiwidGFrZSIsInRha2VfVGFrZU9wZXJhdG9yIiwiVGFrZU9wZXJhdG9yIiwidG90YWwiLCJ0YWtlX1Rha2VTdWJzY3JpYmVyIiwiVGFrZVN1YnNjcmliZXIiLCJlbGVtZW50QXQiLCJoYXNEZWZhdWx0VmFsdWUiLCJlbmRXaXRoIiwiZXZlcnkiLCJFdmVyeU9wZXJhdG9yIiwiZXZlcnlfRXZlcnlTdWJzY3JpYmVyIiwiRXZlcnlTdWJzY3JpYmVyIiwiZXZlcnlWYWx1ZU1hdGNoIiwiZXhoYXVzdCIsIlN3aXRjaEZpcnN0T3BlcmF0b3IiLCJleGhhdXN0X1N3aXRjaEZpcnN0U3Vic2NyaWJlciIsIlN3aXRjaEZpcnN0U3Vic2NyaWJlciIsImhhc1N1YnNjcmlwdGlvbiIsImV4aGF1c3RNYXAiLCJFeGhhdXN0TWFwT3BlcmF0b3IiLCJleGhhdXN0TWFwX0V4aGF1c3RNYXBTdWJzY3JpYmVyIiwiRXhoYXVzdE1hcFN1YnNjcmliZXIiLCJ0cnlOZXh0IiwiZXhwYW5kIiwiRXhwYW5kT3BlcmF0b3IiLCJleHBhbmRfRXhwYW5kU3Vic2NyaWJlciIsIkV4cGFuZFN1YnNjcmliZXIiLCJzdWJzY3JpYmVUb1Byb2plY3Rpb24iLCJmaW5hbGl6ZSIsImNhbGxiYWNrIiwiRmluYWxseU9wZXJhdG9yIiwiZmluYWxpemVfRmluYWxseVN1YnNjcmliZXIiLCJGaW5hbGx5U3Vic2NyaWJlciIsIkZpbmRWYWx1ZU9wZXJhdG9yIiwieWllbGRJbmRleCIsImZpbmRfRmluZFZhbHVlU3Vic2NyaWJlciIsIkZpbmRWYWx1ZVN1YnNjcmliZXIiLCJmaW5kSW5kZXgiLCJpZ25vcmVFbGVtZW50cyIsIklnbm9yZUVsZW1lbnRzT3BlcmF0b3IiLCJpZ25vcmVFbGVtZW50c19JZ25vcmVFbGVtZW50c1N1YnNjcmliZXIiLCJJZ25vcmVFbGVtZW50c1N1YnNjcmliZXIiLCJJc0VtcHR5T3BlcmF0b3IiLCJpc0VtcHR5X0lzRW1wdHlTdWJzY3JpYmVyIiwiSXNFbXB0eVN1YnNjcmliZXIiLCJ0YWtlTGFzdCIsInRha2VMYXN0X1Rha2VMYXN0T3BlcmF0b3IiLCJUYWtlTGFzdE9wZXJhdG9yIiwidGFrZUxhc3RfVGFrZUxhc3RTdWJzY3JpYmVyIiwiVGFrZUxhc3RTdWJzY3JpYmVyIiwicmluZyIsImlkeCIsIm1hcFRvIiwiTWFwVG9PcGVyYXRvciIsIm1hcFRvX01hcFRvU3Vic2NyaWJlciIsIk1hcFRvU3Vic2NyaWJlciIsIm1hdGVyaWFsaXplIiwiTWF0ZXJpYWxpemVPcGVyYXRvciIsIm1hdGVyaWFsaXplX01hdGVyaWFsaXplU3Vic2NyaWJlciIsIk1hdGVyaWFsaXplU3Vic2NyaWJlciIsInNjYW4iLCJhY2N1bXVsYXRvciIsInNlZWQiLCJoYXNTZWVkIiwiU2Nhbk9wZXJhdG9yIiwic2Nhbl9TY2FuU3Vic2NyaWJlciIsIlNjYW5TdWJzY3JpYmVyIiwiX3NlZWQiLCJhY2MiLCJtYXhfbWF4IiwiY29tcGFyZXIiLCJtZXJnZV9tZXJnZSIsIm1lcmdlTWFwVG8iLCJtZXJnZVNjYW4iLCJNZXJnZVNjYW5PcGVyYXRvciIsIm1lcmdlU2Nhbl9NZXJnZVNjYW5TdWJzY3JpYmVyIiwiTWVyZ2VTY2FuU3Vic2NyaWJlciIsIm1pbl9taW4iLCJtdWx0aWNhc3QiLCJzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeSIsInN1YmplY3RGYWN0b3J5IiwiTXVsdGljYXN0T3BlcmF0b3IiLCJuZXh0U291cmNlcyIsIk9uRXJyb3JSZXN1bWVOZXh0T3BlcmF0b3IiLCJvbkVycm9yUmVzdW1lTmV4dF9PbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXIiLCJPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXIiLCJzdWJzY3JpYmVUb05leHRTb3VyY2UiLCJwYWlyd2lzZSIsIlBhaXJ3aXNlT3BlcmF0b3IiLCJwYWlyd2lzZV9QYWlyd2lzZVN1YnNjcmliZXIiLCJQYWlyd2lzZVN1YnNjcmliZXIiLCJoYXNQcmV2IiwicGFpciIsInByb3BlcnRpZXMiLCJjdXJyZW50UHJvcCIsInBsdWNrZXIiLCJwdWJsaXNoIiwicHVibGlzaEJlaGF2aW9yIiwicHVibGlzaExhc3QiLCJwdWJsaXNoUmVwbGF5Iiwic2VsZWN0b3JPclNjaGVkdWxlciIsInJhY2VfcmFjZSIsInJlcGVhdCIsIlJlcGVhdE9wZXJhdG9yIiwicmVwZWF0X1JlcGVhdFN1YnNjcmliZXIiLCJSZXBlYXRTdWJzY3JpYmVyIiwicmVwZWF0V2hlbiIsIm5vdGlmaWVyIiwiUmVwZWF0V2hlbk9wZXJhdG9yIiwicmVwZWF0V2hlbl9SZXBlYXRXaGVuU3Vic2NyaWJlciIsIlJlcGVhdFdoZW5TdWJzY3JpYmVyIiwic291cmNlSXNCZWluZ1N1YnNjcmliZWRUbyIsInJldHJpZXMiLCJzdWJzY3JpYmVUb1JldHJpZXMiLCJyZXRyaWVzU3Vic2NyaXB0aW9uIiwibm90aWZpY2F0aW9ucyIsInJldHJ5IiwiUmV0cnlPcGVyYXRvciIsInJldHJ5X1JldHJ5U3Vic2NyaWJlciIsIlJldHJ5U3Vic2NyaWJlciIsInJldHJ5V2hlbiIsIlJldHJ5V2hlbk9wZXJhdG9yIiwicmV0cnlXaGVuX1JldHJ5V2hlblN1YnNjcmliZXIiLCJSZXRyeVdoZW5TdWJzY3JpYmVyIiwic2FtcGxlIiwic2FtcGxlX1NhbXBsZU9wZXJhdG9yIiwiU2FtcGxlT3BlcmF0b3IiLCJzYW1wbGVTdWJzY3JpYmVyIiwic2FtcGxlX1NhbXBsZVN1YnNjcmliZXIiLCJTYW1wbGVTdWJzY3JpYmVyIiwic2FtcGxlVGltZSIsIlNhbXBsZVRpbWVPcGVyYXRvciIsInNhbXBsZVRpbWVfU2FtcGxlVGltZVN1YnNjcmliZXIiLCJTYW1wbGVUaW1lU3Vic2NyaWJlciIsImRpc3BhdGNoTm90aWZpY2F0aW9uIiwic2VxdWVuY2VFcXVhbCIsImNvbXBhcmVUbyIsImNvbXBhcmF0b3IiLCJTZXF1ZW5jZUVxdWFsT3BlcmF0b3IiLCJzZXF1ZW5jZUVxdWFsX1NlcXVlbmNlRXF1YWxTdWJzY3JpYmVyIiwiU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIiLCJfYiIsIl9vbmVDb21wbGV0ZSIsInNlcXVlbmNlRXF1YWxfU2VxdWVuY2VFcXVhbENvbXBhcmVUb1N1YnNjcmliZXIiLCJlbWl0IiwiY2hlY2tWYWx1ZXMiLCJhcmVFcXVhbCIsIm5leHRCIiwiY29tcGxldGVCIiwiU2VxdWVuY2VFcXVhbENvbXBhcmVUb1N1YnNjcmliZXIiLCJzaGFyZVN1YmplY3RGYWN0b3J5Iiwic2hhcmUiLCJvcGVyYXRvcnNfcmVmQ291bnQiLCJzaGFyZVJlcGxheSIsImNvbmZpZ09yQnVmZmVyU2l6ZSIsIl9jIiwidXNlUmVmQ291bnQiLCJzaGFyZVJlcGxheU9wZXJhdG9yIiwic2luZ2xlIiwiU2luZ2xlT3BlcmF0b3IiLCJzaW5nbGVfU2luZ2xlU3Vic2NyaWJlciIsIlNpbmdsZVN1YnNjcmliZXIiLCJzZWVuVmFsdWUiLCJhcHBseVNpbmdsZVZhbHVlIiwic2luZ2xlVmFsdWUiLCJza2lwIiwiU2tpcE9wZXJhdG9yIiwic2tpcF9Ta2lwU3Vic2NyaWJlciIsIlNraXBTdWJzY3JpYmVyIiwic2tpcExhc3QiLCJza2lwTGFzdF9Ta2lwTGFzdE9wZXJhdG9yIiwiU2tpcExhc3RPcGVyYXRvciIsIl9za2lwQ291bnQiLCJza2lwTGFzdF9Ta2lwTGFzdFN1YnNjcmliZXIiLCJTa2lwTGFzdFN1YnNjcmliZXIiLCJfY291bnQiLCJfcmluZyIsInNraXBDb3VudCIsImN1cnJlbnRJbmRleCIsIm9sZFZhbHVlIiwic2tpcFVudGlsIiwiU2tpcFVudGlsT3BlcmF0b3IiLCJza2lwVW50aWxfU2tpcFVudGlsU3Vic2NyaWJlciIsIlNraXBVbnRpbFN1YnNjcmliZXIiLCJza2lwV2hpbGUiLCJTa2lwV2hpbGVPcGVyYXRvciIsInNraXBXaGlsZV9Ta2lwV2hpbGVTdWJzY3JpYmVyIiwiU2tpcFdoaWxlU3Vic2NyaWJlciIsInNraXBwaW5nIiwidHJ5Q2FsbFByZWRpY2F0ZSIsIkJvb2xlYW4iLCJzdGFydFdpdGgiLCJTdWJzY3JpYmVPbk9ic2VydmFibGVfU3Vic2NyaWJlT25PYnNlcnZhYmxlIiwiU3Vic2NyaWJlT25PYnNlcnZhYmxlIiwiZGVsYXlUaW1lIiwic3Vic2NyaWJlT24iLCJzdWJzY3JpYmVPbl9TdWJzY3JpYmVPbk9wZXJhdG9yIiwiU3Vic2NyaWJlT25PcGVyYXRvciIsInN3aXRjaE1hcCIsIlN3aXRjaE1hcE9wZXJhdG9yIiwic3dpdGNoTWFwX1N3aXRjaE1hcFN1YnNjcmliZXIiLCJTd2l0Y2hNYXBTdWJzY3JpYmVyIiwic3dpdGNoQWxsIiwic3dpdGNoTWFwVG8iLCJ0YWtlVW50aWwiLCJ0YWtlVW50aWxfVGFrZVVudGlsT3BlcmF0b3IiLCJUYWtlVW50aWxPcGVyYXRvciIsInRha2VVbnRpbFN1YnNjcmliZXIiLCJ0YWtlVW50aWxfVGFrZVVudGlsU3Vic2NyaWJlciIsIlRha2VVbnRpbFN1YnNjcmliZXIiLCJ0YWtlV2hpbGUiLCJpbmNsdXNpdmUiLCJUYWtlV2hpbGVPcGVyYXRvciIsInRha2VXaGlsZV9UYWtlV2hpbGVTdWJzY3JpYmVyIiwiVGFrZVdoaWxlU3Vic2NyaWJlciIsIm5leHRPckNvbXBsZXRlIiwicHJlZGljYXRlUmVzdWx0IiwidGFwIiwiRG9PcGVyYXRvciIsInRhcF9UYXBTdWJzY3JpYmVyIiwiVGFwU3Vic2NyaWJlciIsIl90YXBOZXh0IiwiX3RhcEVycm9yIiwiX3RhcENvbXBsZXRlIiwiZGVmYXVsdFRocm90dGxlQ29uZmlnIiwibGVhZGluZyIsInRyYWlsaW5nIiwidGhyb3R0bGUiLCJUaHJvdHRsZU9wZXJhdG9yIiwidGhyb3R0bGVfVGhyb3R0bGVTdWJzY3JpYmVyIiwiVGhyb3R0bGVTdWJzY3JpYmVyIiwiX2xlYWRpbmciLCJfdHJhaWxpbmciLCJfaGFzVmFsdWUiLCJfc2VuZFZhbHVlIiwiX3Rocm90dGxlZCIsInNlbmQiLCJ0cnlEdXJhdGlvblNlbGVjdG9yIiwidGhyb3R0bGluZ0RvbmUiLCJ0aHJvdHRsZVRpbWUiLCJUaHJvdHRsZVRpbWVPcGVyYXRvciIsInRocm90dGxlVGltZV9UaHJvdHRsZVRpbWVTdWJzY3JpYmVyIiwiVGhyb3R0bGVUaW1lU3Vic2NyaWJlciIsIl9oYXNUcmFpbGluZ1ZhbHVlIiwiX3RyYWlsaW5nVmFsdWUiLCJ0aHJvdHRsZVRpbWVfZGlzcGF0Y2hOZXh0IiwidGltZUludGVydmFsIiwiVGltZUludGVydmFsIiwidGltZW91dFdpdGgiLCJkdWUiLCJ3aXRoT2JzZXJ2YWJsZSIsImFic29sdXRlVGltZW91dCIsIndhaXRGb3IiLCJUaW1lb3V0V2l0aE9wZXJhdG9yIiwidGltZW91dFdpdGhfVGltZW91dFdpdGhTdWJzY3JpYmVyIiwiVGltZW91dFdpdGhTdWJzY3JpYmVyIiwic2NoZWR1bGVUaW1lb3V0IiwiZGlzcGF0Y2hUaW1lb3V0IiwidGltZW91dCIsInRpbWVzdGFtcCIsIlRpbWVzdGFtcCIsInRvQXJyYXlSZWR1Y2VyIiwiYXJyIiwidG9BcnJheSIsIndpbmRvd193aW5kb3ciLCJ3aW5kb3dCb3VuZGFyaWVzIiwid2luZG93X1dpbmRvd09wZXJhdG9yIiwiV2luZG93T3BlcmF0b3IiLCJ3aW5kb3dTdWJzY3JpYmVyIiwid2luZG93X1dpbmRvd1N1YnNjcmliZXIiLCJzb3VyY2VTdWJzY3JpcHRpb24iLCJXaW5kb3dTdWJzY3JpYmVyIiwib3BlbldpbmRvdyIsInByZXZXaW5kb3ciLCJuZXdXaW5kb3ciLCJ3aW5kb3dDb3VudCIsIndpbmRvd1NpemUiLCJzdGFydFdpbmRvd0V2ZXJ5IiwiV2luZG93Q291bnRPcGVyYXRvciIsIndpbmRvd0NvdW50X1dpbmRvd0NvdW50U3Vic2NyaWJlciIsIldpbmRvd0NvdW50U3Vic2NyaWJlciIsIndpbmRvd3MiLCJ3aW5kb3dfMSIsIndpbmRvd1RpbWVfd2luZG93VGltZSIsIndpbmRvd1RpbWVTcGFuIiwid2luZG93Q3JlYXRpb25JbnRlcnZhbCIsIm1heFdpbmRvd1NpemUiLCJXaW5kb3dUaW1lT3BlcmF0b3IiLCJ3aW5kb3dUaW1lX1dpbmRvd1RpbWVTdWJzY3JpYmVyIiwid2luZG93VGltZV9Db3VudGVkU3ViamVjdCIsIkNvdW50ZWRTdWJqZWN0IiwiX251bWJlck9mTmV4dGVkVmFsdWVzIiwiV2luZG93VGltZVN1YnNjcmliZXIiLCJkaXNwYXRjaFdpbmRvd0Nsb3NlIiwiZGlzcGF0Y2hXaW5kb3dDcmVhdGlvbiIsImRpc3BhdGNoV2luZG93VGltZVNwYW5Pbmx5IiwibnVtYmVyT2ZOZXh0ZWRWYWx1ZXMiLCJjbG9zZVdpbmRvdyIsIndpbmRvd18yIiwidGltZVNwYW5TdGF0ZSIsIndpbmRvd1RvZ2dsZSIsIldpbmRvd1RvZ2dsZU9wZXJhdG9yIiwid2luZG93VG9nZ2xlX1dpbmRvd1RvZ2dsZVN1YnNjcmliZXIiLCJXaW5kb3dUb2dnbGVTdWJzY3JpYmVyIiwib3BlblN1YnNjcmlwdGlvbiIsImNvbnRleHRfMyIsImNvbnRleHRfNCIsImlubmVyIiwid2luZG93V2hlbiIsIndpbmRvd1doZW5fV2luZG93T3BlcmF0b3IiLCJ3aW5kb3dXaGVuX1dpbmRvd1N1YnNjcmliZXIiLCJ1bnN1YnNjcmliZUNsb3NpbmdOb3RpZmljYXRpb24iLCJjbG9zaW5nTm90aWZpY2F0aW9uIiwid2l0aExhdGVzdEZyb20iLCJXaXRoTGF0ZXN0RnJvbU9wZXJhdG9yIiwid2l0aExhdGVzdEZyb21fV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyIiwiV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyIiwiZm91bmQiLCJfdHJ5UHJvamVjdCIsInppcF96aXAiLCJ6aXBBbGwiLCJjb25jYXRBbGwiLCJvYnNlcnZlT24iLCJjb25uZWN0YWJsZU9ic2VydmFibGVEZXNjcmlwdG9yIiwiX1N1YnNjcmlwdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX29wZXJhdG9yc19yZWZDb3VudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiX2lzQ29tcGxldGUiLCJnZXRTdWJqZWN0IiwiX3N1YmplY3QiLCJDb25uZWN0YWJsZVN1YnNjcmliZXIiLCJjb25uZWN0YWJsZVByb3RvIiwiX3V0aWxfT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl92YWx1ZSIsIk9ic2VydmVPblN1YnNjcmliZXIiLCJfTm90aWZpY2F0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJPYnNlcnZlT25PcGVyYXRvciIsInNjaGVkdWxlTWVzc2FnZSIsIk9ic2VydmVPbk1lc3NhZ2UiLCJUaW1lb3V0RXJyb3JJbXBsIiwiX21lcmdlQWxsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfb3BlcmF0b3JzX21lcmdlQWxsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJfZnJvbUFycmF5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfdXRpbF9pc0FycmF5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfZnJvbUFycmF5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJSYWNlT3BlcmF0b3IiLCJSYWNlU3Vic2NyaWJlciIsImhhc0ZpcnN0IiwiX3NjaGVkdWxlcl9hc3luY19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX3V0aWxfaXNOdW1lcmljX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJfdXRpbF9pc1NjaGVkdWxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicGVyaW9kT3JTY2hlZHVsZXIiLCJzeW1ib2xfb2JzZXJ2YWJsZSIsImlzSW50ZXJvcE9ic2VydmFibGUiLCJzY2hlZHVsZU9ic2VydmFibGUiLCJzY2hlZHVsZVByb21pc2UiLCJpc0l0ZXJhYmxlIiwic2NoZWR1bGVJdGVyYWJsZSIsIlF1ZXVlQWN0aW9uX1F1ZXVlQWN0aW9uIiwiUXVldWVBY3Rpb24iLCJRdWV1ZVNjaGVkdWxlcl9RdWV1ZVNjaGVkdWxlciIsIlF1ZXVlU2NoZWR1bGVyIiwiU3ViamVjdFN1YnNjcmlwdGlvbiIsInN1YnNjcmliZXJJbmRleCIsInByZWQiLCJub3RQcmVkIiwiREVGQVVMVF9FREdFX05BTUUiLCJHUkFQSF9OT0RFIiwiRURHRV9LRVlfREVMSU0iLCJvcHRzIiwiX2lzRGlyZWN0ZWQiLCJkaXJlY3RlZCIsIl9pc011bHRpZ3JhcGgiLCJfaXNDb21wb3VuZCIsImNvbXBvdW5kIiwiX2xhYmVsIiwiX2RlZmF1bHROb2RlTGFiZWxGbiIsIl9kZWZhdWx0RWRnZUxhYmVsRm4iLCJfbm9kZXMiLCJfcGFyZW50IiwiX2NoaWxkcmVuIiwiX2luIiwiX3ByZWRzIiwiX291dCIsIl9zdWNzIiwiX2VkZ2VPYmpzIiwiX2VkZ2VMYWJlbHMiLCJpbmNyZW1lbnRPckluaXRFbnRyeSIsImsiLCJkZWNyZW1lbnRPclJlbW92ZUVudHJ5IiwiZWRnZUFyZ3NUb0lkIiwiaXNEaXJlY3RlZCIsInZfIiwid18iLCJlZGdlQXJnc1RvT2JqIiwiZWRnZU9iaiIsImVkZ2VPYmpUb0lkIiwiX25vZGVDb3VudCIsIl9lZGdlQ291bnQiLCJpc0NvbXBvdW5kIiwic2V0RGVmYXVsdE5vZGVMYWJlbCIsIm5ld0RlZmF1bHQiLCJzaW5rcyIsInNldE5vZGVzIiwicmVtb3ZlTm9kZSIsInJlbW92ZUVkZ2UiLCJfcmVtb3ZlRnJvbVBhcmVudHNDaGlsZExpc3QiLCJjaGlsZCIsInNldFBhcmVudCIsImFuY2VzdG9yIiwicHJlZGVjZXNzb3JzIiwicHJlZHNWIiwic3VjY2Vzc29ycyIsInN1Y3NWIiwibmVpZ2hib3JzIiwiaXNMZWFmIiwiZmlsdGVyTm9kZXMiLCJwYXJlbnRzIiwiZmluZFBhcmVudCIsInNldERlZmF1bHRFZGdlTGFiZWwiLCJlZGdlQ291bnQiLCJzZXRQYXRoIiwidmFsdWVTcGVjaWZpZWQiLCJhcmcwIiwiZnJlZXplIiwiaGFzRWRnZSIsInUiLCJpblYiLCJvdXRWIiwibm9kZUVkZ2VzIiwibWFwQ2FjaGVDbGVhciIsIm1hcENhY2hlRGVsZXRlIiwibWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUhhcyIsIm1hcENhY2hlU2V0IiwiTWFwQ2FjaGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJpc1Byb3RvdHlwZSIsIm5hdGl2ZUtleXMiLCJhcnJheUZpbHRlciIsInN0dWJBcnJheSIsIm5hdGl2ZUdldFN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRTeW1ib2xzIiwic3ltYm9sIiwiVWludDhBcnJheSIsImFycmF5QnVmZmVyIiwiYnl0ZUxlbmd0aCIsImJhc2VGb3IiLCJjcmVhdGVCYXNlRm9yIiwiY2FzdFBhdGgiLCJ0b0tleSIsInBhdGgiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwiYXJyYXlQdXNoIiwiaXNGbGF0dGVuYWJsZSIsImJhc2VGbGF0dGVuIiwiZGVwdGgiLCJpc1N0cmljdCIsImNvbXB1dGVkIiwiaW52YXJpYW50IiwiZ2V0QWxsS2V5cyIsImNvbW1hbmRzIiwiZGVmYXVsdENvbW1hbmRzIiwidXBkYXRlIiwiZXh0ZW5kIiwiaXNFcXVhbHMiLCJuZXdDb250ZXh0IiwiZGlyZWN0aXZlIiwiJHNwZWMiLCJzcGVjIiwiJGFwcGx5IiwibmV4dE9iamVjdCIsIm9iamVjdFdhc05leHRPYmplY3QiLCJuZXh0VmFsdWVGb3JLZXkiLCJuZXh0T2JqZWN0VmFsdWUiLCJpbnZhcmlhbnRQdXNoQW5kVW5zaGlmdCIsIiR1bnNoaWZ0Iiwib3JpZ2luYWxPYmplY3QiLCJpbnZhcmlhbnRTcGxpY2UiLCJpbnZhcmlhbnRTcGxpY2VzIiwiJHNldCIsIl9uZXh0T2JqZWN0IiwiaW52YXJpYW50U2V0IiwiJHRvZ2dsZSIsInRhcmdldHMiLCJpbnZhcmlhbnRTcGVjQXJyYXkiLCJuZXh0T2JqZWN0Q29weSIsIiR1bnNldCIsIl9zcGVjIiwiJGFkZCIsImludmFyaWFudE1hcE9yU2V0IiwiJHJlbW92ZSIsIiRtZXJnZSIsInNwZWNWYWx1ZSIsIm9yaWdpbmFsIiwiZGVmYXVsdENvbnRleHQiLCJjb21tYW5kIiwidHlwZU9mVGFyZ2V0IiwiZGVmYXVsdCIsIk5vZGVfMSIsImRhZ3JlIiwic3Vibm9kZVdpZHRoIiwic3Vibm9kZUhlaWdodCIsImdldFByb3BJRCIsInBhcmVudElEIiwiY2hpbGROYW1lIiwiaW8iLCJJbnB1dCIsImRpZmZlcmVuY2UiLCJhcnIxIiwiYXJyMiIsImRpZmYiLCJub2Rlc1N0cmVhbSIsImVkZ2VzU3RyZWFtIiwibm9kZUdyYXBoIiwicmFua2RpciIsImluZm9zIiwiZGVzaXJlZE5hbWVzIiwiZXhpc3RpbmdOYW1lcyIsIm5pZCIsIm5vZGVJRCIsImlzSW5wdXQiLCJPdXRwdXQiLCJwcm9wSUQiLCJwcm9wTmFtZSIsImdyYXBoRWRnZXMiLCJkZXNpcmVkRWRnZUlEcyIsImVpZCIsImdlIiwiZ2V0RnJvbSIsInRvIiwiZWRnZV8xIiwiaW5vdXRuYW1lIiwiZWRnZUlEIiwicG9pbnRzIiwiYXJyYXlFYWNoIiwiYmFzZUFzc2lnbiIsImJhc2VBc3NpZ25JbiIsImNsb25lQnVmZmVyIiwiY29weUFycmF5IiwiY29weVN5bWJvbHMiLCJjb3B5U3ltYm9sc0luIiwiZ2V0QWxsS2V5c0luIiwiaW5pdENsb25lQXJyYXkiLCJpbml0Q2xvbmVCeVRhZyIsImluaXRDbG9uZU9iamVjdCIsImlzTWFwIiwiaXNTZXQiLCJDTE9ORV9ERUVQX0ZMQUciLCJDTE9ORV9GTEFUX0ZMQUciLCJDTE9ORV9TWU1CT0xTX0ZMQUciLCJhcmdzVGFnIiwib2JqZWN0VGFnIiwiY2xvbmVhYmxlVGFncyIsImJhc2VDbG9uZSIsImJpdG1hc2siLCJpc0RlZXAiLCJpc0ZsYXQiLCJpc0Z1bGwiLCJpc0FyciIsImlzRnVuYyIsInN0YWNrZWQiLCJzdWJWYWx1ZSIsImtleXNGdW5jIiwia2V5c0luIiwiZ2xvYmFsIiwiZnVuY1RvU3RyaW5nIiwiYmFzZVRpbWVzIiwiaW5oZXJpdGVkIiwiaXNBcmciLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsIlN0cmluZyIsImFsbG9jVW5zYWZlIiwicmVzSW5kZXgiLCJnZXRTeW1ib2xzSW4iLCJiYXNlR2V0QWxsS2V5cyIsInN5bWJvbHNGdW5jIiwiY2xvbmVBcnJheUJ1ZmZlciIsInR5cGVkQXJyYXkiLCJieXRlT2Zmc2V0IiwiYmFzZUNyZWF0ZSIsIm9iamVjdENyZWF0ZSIsInByb3RvIiwiY2FzdEZ1bmN0aW9uIiwiYmFzZUZpbHRlciIsImJhc2VJdGVyYXRlZSIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc0VxdWFsIiwiU2V0Q2FjaGUiLCJhcnJheVNvbWUiLCJjYWNoZUhhcyIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsImVxdWFsRnVuYyIsImlzUGFydGlhbCIsImFyckxlbmd0aCIsIm90aExlbmd0aCIsInNlZW4iLCJhcnJWYWx1ZSIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvdGhJbmRleCIsInNldENhY2hlQWRkIiwic2V0Q2FjaGVIYXMiLCJjYWNoZSIsInNyY1ZhbHVlIiwiYmFzZVRvU3RyaW5nIiwiYmFzZUhhc0luIiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJiYXNlSGFzIiwiYXJyYXlNYXAiLCJiYXNlTWFwIiwiYXJyYXlSZWR1Y2UiLCJiYXNlUmVkdWNlIiwiaW5pdEFjY3VtIiwibmF0aXZlTWF4Iiwib3RoZXJBcmdzIiwiYmFzZVNldFRvU3RyaW5nIiwic2hvcnRPdXQiLCJmcm9tSW5kZXgiLCJmcm9tUmlnaHQiLCJiYXNlVmFsdWVzIiwiUHJpb3JpdHlRdWV1ZSIsIndlaWdodEZuIiwiZWRnZUZuIiwidkVudHJ5IiwicmVzdWx0cyIsInBxIiwidXBkYXRlTmVpZ2hib3JzIiwid0VudHJ5IiwiZGlzdGFuY2UiLCJwcmVkZWNlc3NvciIsImRlY3JlYXNlIiwicmVtb3ZlTWluIiwicnVuRGlqa3N0cmEiLCJERUZBVUxUX1dFSUdIVF9GVU5DIiwiX2FyciIsIl9rZXlJbmRpY2VzIiwicHJpb3JpdHkiLCJrZXlJbmRpY2VzIiwiX2RlY3JlYXNlIiwiX3N3YXAiLCJfaGVhcGlmeSIsImxhcmdlc3QiLCJqIiwib3JpZ0FyckkiLCJvcmlnQXJySiIsIm9uU3RhY2siLCJsb3dsaW5rIiwiY21wdCIsInRvcHNvcnQiLCJ2aXNpdCIsIkN5Y2xlRXhjZXB0aW9uIiwibmF2aWdhdGlvbiIsImRvRGZzIiwicG9zdG9yZGVyIiwidG9OdW1iZXIiLCJNQVhfSU5URUdFUiIsInRpZ2h0VHJlZSIsImVkZ2VWIiwiZmluZE1pblNsYWNrRWRnZSIsInNoaWZ0UmFua3MiLCJTY2VuZV8xIiwiRGlzcGxheV8xIiwiU2NlbmUiLCJTY2VuZURpc3BsYXkiLCJFZGdlXzEiLCJPcHNfMSIsIlNjZW5lTGF5b3V0XzEiLCJsYXlvdXRTdHJlYW0iLCJnZXROb2Rlc1N0cmVhbSIsImdldEVkZ2VzU3RyZWFtIiwic2V0TGF5b3V0IiwiYWRkQ29uc3RhbnQiLCJhZGROb2RlIiwiYWRkT3AiLCJvcCIsIm9wRm4iLCJvcHMiLCJub2Rlc1ZhbHVlIiwibmV3Tm9kZXMiLCJhZGRFZGdlIiwiRWRnZSIsImVkZ2VzVmFsdWUiLCJuZXdFZGdlcyIsInRvUmVtb3ZlRWRnZXNfMSIsImYiLCJmcm9tU3RyZWFtIiwidmFsdWVTdHJlYW0iLCJzZXRGcm9tIiwic2V0VG8iLCJmb3JtYXQiLCJhcmdJbmRleCIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsImNyZWF0ZVVuYXJ5T3BOb2RlIiwiYXJnMU5hbWUiLCJjcmVhdGVCaW5hcnlPcE5vZGUiLCJhcmcyTmFtZSIsIisiLCJwdiIsImN2IiwiLSIsIioiLCIvIiwiJSIsInBvdyIsIj09IiwiPiIsIjwiLCI+PSIsIjw9IiwiYW5kIiwib3IiLCJuZWciLCJyb3VuZCIsImdlbiIsImRlYnVnIiwidXRpbCIsInZlcnNpb24iLCJsaWIiLCJqc29uIiwiYWxnIiwiYXNzb2NJbmRleE9mIiwiTEFSR0VfQVJSQVlfU0laRSIsImlzTWFza2VkIiwicmVJc0hvc3RDdG9yIiwiZnVuY1Byb3RvIiwicmVJc05hdGl2ZSIsIlJlZ0V4cCIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwiaXNPd24iLCJ1bm1hc2tlZCIsInVpZCIsImNvcmVKc0RhdGEiLCJtYXNrU3JjS2V5IiwiZXhlYyIsIklFX1BST1RPIiwiSGFzaCIsImhhc2giLCJzdHJpbmciLCJoYXNoQ2xlYXIiLCJoYXNoRGVsZXRlIiwiaGFzaEdldCIsImhhc2hIYXMiLCJoYXNoU2V0IiwiSEFTSF9VTkRFRklORUQiLCJnZXRNYXBEYXRhIiwiY29weU9iamVjdCIsInR5cGVkQXJyYXlUYWdzIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImNsb25lRGF0YVZpZXciLCJjbG9uZVJlZ0V4cCIsImNsb25lU3ltYm9sIiwiY2xvbmVUeXBlZEFycmF5IiwiYm9vbFRhZyIsImRhdGVUYWciLCJtYXBUYWciLCJudW1iZXJUYWciLCJyZWdleHBUYWciLCJzZXRUYWciLCJzdHJpbmdUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwiZGF0YVZpZXciLCJyZUZsYWdzIiwicmVnZXhwIiwibGFzdEluZGV4Iiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsImJhc2VJc01hcCIsIm5vZGVJc01hcCIsImJhc2VJc1NldCIsIm5vZGVJc1NldCIsImVhY2hGdW5jIiwiYmFzZUlzTWF0Y2giLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsImVxdWFsQXJyYXlzIiwiZXF1YWxCeVRhZyIsImVxdWFsT2JqZWN0cyIsImFycmF5VGFnIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJtYXBUb0FycmF5Iiwic2V0VG9BcnJheSIsImVycm9yVGFnIiwiY29udmVydCIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwic2tpcEN0b3IiLCJvYmpDdG9yIiwib3RoQ3RvciIsImlzU3RyaWN0Q29tcGFyYWJsZSIsImhhc0luIiwiYmFzZUdldCIsIm1lbW9pemVDYXBwZWQiLCJyZVByb3BOYW1lIiwicmVFc2NhcGVDaGFyIiwiY2hhckNvZGVBdCIsIm1hdGNoIiwibnVtYmVyIiwicXVvdGUiLCJzdWJTdHJpbmciLCJtZW1vaXplIiwiTUFYX01FTU9JWkVfU0laRSIsIkZVTkNfRVJST1JfVEVYVCIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsInN5bWJvbFRvU3RyaW5nIiwiYmFzZVByb3BlcnR5IiwiYmFzZVByb3BlcnR5RGVlcCIsImlzU3RyaW5nIiwic3RyaW5nU2l6ZSIsImFzY2lpU2l6ZSIsImhhc1VuaWNvZGUiLCJ1bmljb2RlU2l6ZSIsInJlSGFzVW5pY29kZSIsInJzQXN0cmFsIiwicnNDb21ibyIsInJzRml0eiIsInJzTm9uQXN0cmFsIiwicnNSZWdpb25hbCIsInJzU3VyclBhaXIiLCJyZU9wdE1vZCIsInJzU2VxIiwicnNTeW1ib2wiLCJyZVVuaWNvZGUiLCJpc0Fyckxpa2UiLCJiYXNlUmVzdCIsImJhc2VVbmlxIiwiaXNBcnJheUxpa2VPYmplY3QiLCJhcnJheXMiLCJzcHJlYWRhYmxlU3ltYm9sIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwiSE9UX0NPVU5UIiwiSE9UX1NQQU4iLCJuYXRpdmVOb3ciLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJhcnJheUluY2x1ZGVzIiwiYXJyYXlJbmNsdWRlc1dpdGgiLCJjcmVhdGVTZXQiLCJpbmNsdWRlcyIsImlzQ29tbW9uIiwib3V0ZXIiLCJzZWVuSW5kZXgiLCJiYXNlSW5kZXhPZiIsImJhc2VGaW5kSW5kZXgiLCJiYXNlSXNOYU4iLCJzdHJpY3RJbmRleE9mIiwid3JpdGVOb2RlcyIsIm5vZGVWYWx1ZSIsIndyaXRlRWRnZXMiLCJlZGdlVmFsdWUiLCJ3cml0ZSIsInJlYWQiLCJjb21wb25lbnRzIiwiZGlqa3N0cmEiLCJkaWprc3RyYUFsbCIsImZpbmRDeWNsZXMiLCJmbG95ZFdhcnNoYWxsIiwiaXNBY3ljbGljIiwicHJlb3JkZXIiLCJwcmltIiwidGFyamFuIiwiY21wdHMiLCJ3ZWlnaHRGdW5jIiwiZWRnZUZ1bmMiLCJyb3dLIiwicm93SSIsImlrIiwia2oiLCJpaiIsImFsdERpc3RhbmNlIiwicnVuRmxveWRXYXJzaGFsbCIsInByaSIsImVkZ2VXZWlnaHQiLCJpbml0IiwiYWN5Y2xpYyIsIm5vcm1hbGl6ZSIsInBhcmVudER1bW15Q2hhaW5zIiwibmVzdGluZ0dyYXBoIiwiYWRkQm9yZGVyU2VnbWVudHMiLCJjb29yZGluYXRlU3lzdGVtIiwicG9zaXRpb24iLCJkZWJ1Z1RpbWluZyIsImxheW91dEdyYXBoIiwiaW5wdXRHcmFwaCIsImNhbm9uaWNhbGl6ZSIsImdyYXBoRGVmYXVsdHMiLCJzZWxlY3ROdW1iZXJBdHRycyIsImdyYXBoTnVtQXR0cnMiLCJncmFwaEF0dHJzIiwibm9kZU51bUF0dHJzIiwibm9kZURlZmF1bHRzIiwiZWRnZURlZmF1bHRzIiwiZWRnZU51bUF0dHJzIiwiZWRnZUF0dHJzIiwiYnVpbGRMYXlvdXRHcmFwaCIsInJhbmtzZXAiLCJsYWJlbHBvcyIsInRvTG93ZXJDYXNlIiwibGFiZWxvZmZzZXQiLCJtYWtlU3BhY2VGb3JFZGdlTGFiZWxzIiwic2VsZkVkZ2VzIiwicmVtb3ZlU2VsZkVkZ2VzIiwicnVuIiwiaW5qZWN0RWRnZUxhYmVsUHJveGllcyIsImNsZWFudXAiLCJib3JkZXJUb3AiLCJtaW5SYW5rIiwiYm9yZGVyQm90dG9tIiwiYXNzaWduUmFua01pbk1heCIsImxhYmVsUmFuayIsInJlbW92ZUVkZ2VMYWJlbFByb3hpZXMiLCJsYXllciIsIm9yZGVyU2hpZnQiLCJzZWxmRWRnZSIsImluc2VydFNlbGZFZGdlcyIsImFkanVzdCIsInNlbGZOb2RlIiwicG9zaXRpb25TZWxmRWRnZXMiLCJib3JkZXJMZWZ0IiwiYm9yZGVyUmlnaHQiLCJyZW1vdmVCb3JkZXJOb2RlcyIsInVuZG8iLCJmaXh1cEVkZ2VMYWJlbENvb3JkcyIsIm1pblgiLCJtYXhYIiwibWluWSIsIm1heFkiLCJncmFwaExhYmVsIiwibWFyZ2luWCIsIm1hcmdpbngiLCJtYXJnaW5ZIiwibWFyZ2lueSIsImdldEV4dHJlbWVzIiwidHJhbnNsYXRlR3JhcGgiLCJwMSIsInAyIiwibm9kZVYiLCJub2RlVyIsInVuc2hpZnQiLCJhc3NpZ25Ob2RlSW50ZXJzZWN0cyIsInJldmVyc2VkIiwicmV2ZXJzZSIsInJldmVyc2VQb2ludHNGb3JSZXZlcnNlZEVkZ2VzIiwicnVuTGF5b3V0IiwiaW5wdXRMYWJlbCIsImxheW91dExhYmVsIiwidXBkYXRlSW5wdXRHcmFwaCIsImVkZ2VzZXAiLCJub2Rlc2VwIiwibmV3QXR0cnMiLCJpc0l0ZXJhdGVlQ2FsbCIsImd1YXJkIiwicHJvcHNJbmRleCIsInByb3BzTGVuZ3RoIiwiY3JlYXRlRmluZCIsImZpbmRJbmRleEZ1bmMiLCJ0b0ludGVnZXIiLCJ0b0Zpbml0ZSIsIk5BTiIsInJlVHJpbSIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50IiwicGFyc2VJbnQiLCJpc0JpbmFyeSIsImJhc2VFeHRyZW11bSIsImJhc2VHdCIsImJhc2VNZXJnZSIsImNyZWF0ZUFzc2lnbmVyIiwic3JjSW5kZXgiLCJhc3NpZ25NZXJnZVZhbHVlIiwiYmFzZU1lcmdlRGVlcCIsInNhZmVHZXQiLCJpc1BsYWluT2JqZWN0IiwidG9QbGFpbk9iamVjdCIsIm1lcmdlRnVuYyIsImlzVHlwZWQiLCJvYmplY3RDdG9yU3RyaW5nIiwiYXNzaWduZXIiLCJiYXNlTHQiLCJiYXNlUGljayIsImZsYXRSZXN0IiwiYmFzZVBpY2tCeSIsImJhc2VTZXQiLCJuZXN0ZWQiLCJjcmVhdGVSYW5nZSIsImJhc2VSYW5nZSIsImVuZCIsInN0ZXAiLCJuYXRpdmVDZWlsIiwiY2VpbCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwiYmFzZVNvcnRCeSIsImNvbXBhcmVNdWx0aXBsZSIsIm9yZGVycyIsImNyaXRlcmlhIiwiY29tcGFyZUFzY2VuZGluZyIsIm9iakNyaXRlcmlhIiwib3RoQ3JpdGVyaWEiLCJvcmRlcnNMZW5ndGgiLCJ2YWxJc0RlZmluZWQiLCJ2YWxJc051bGwiLCJ2YWxJc1JlZmxleGl2ZSIsInZhbElzU3ltYm9sIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsImlkQ291bnRlciIsImJhc2VaaXBPYmplY3QiLCJhc3NpZ25GdW5jIiwidmFsc0xlbmd0aCIsImdyZWVkeUZBUyIsImZhcyIsImFjeWNsaWNlciIsImRmc0ZBUyIsImZvcndhcmROYW1lIiwiTGlzdCIsImZhc0dyYXBoIiwibWF4SW4iLCJtYXhPdXQiLCJpbiIsInByZXZXZWlnaHQiLCJidWNrZXRzIiwiemVyb0lkeCIsImFzc2lnbkJ1Y2tldCIsImJ1aWxkU3RhdGUiLCJERUZBVUxUX1dFSUdIVF9GTiIsImRlcXVldWUiLCJkb0dyZWVkeUZBUyIsImNvbGxlY3RQcmVkZWNlc3NvcnMiLCJ1RW50cnkiLCJlbnF1ZXVlIiwic2VudGluZWwiLCJfcHJldiIsIl9zZW50aW5lbCIsInVubGluayIsImZpbHRlck91dExpbmtzIiwic3RycyIsImN1cnIiLCJKU09OIiwic3RyaW5naWZ5IiwiZHVtbXlDaGFpbnMiLCJ2UmFuayIsIndSYW5rIiwiZWRnZUxhYmVsIiwibm9ybWFsaXplRWRnZSIsIm9yaWdMYWJlbCIsImZlYXNpYmxlVHJlZSIsIm5ldHdvcmtTaW1wbGV4IiwicmFua2VyIiwibmV0d29ya1NpbXBsZXhSYW5rZXIiLCJ0aWdodFRyZWVSYW5rZXIiLCJsb25nZXN0UGF0aFJhbmtlciIsImluaXRSYW5rIiwiaW5pdExvd0xpbVZhbHVlcyIsImluaXRDdXRWYWx1ZXMiLCJsZWF2ZUVkZ2UiLCJleGNoYW5nZUVkZ2VzIiwiZW50ZXJFZGdlIiwiY3V0dmFsdWUiLCJjYWxjQ3V0VmFsdWUiLCJhc3NpZ25DdXRWYWx1ZSIsImNoaWxkSXNUYWlsIiwiZ3JhcGhFZGdlIiwiY3V0VmFsdWUiLCJpc091dEVkZ2UiLCJwb2ludHNUb0hlYWQiLCJvdGhlcldlaWdodCIsIm90aGVyQ3V0VmFsdWUiLCJ0cmVlIiwiZGZzQXNzaWduTG93TGltIiwibmV4dExpbSIsImxvdyIsImxpbSIsInZMYWJlbCIsIndMYWJlbCIsInRhaWxMYWJlbCIsImZsaXAiLCJjYW5kaWRhdGVzIiwiaXNEZXNjZW5kYW50IiwiZmxpcHBlZCIsInVwZGF0ZVJhbmtzIiwicm9vdExhYmVsIiwicG9zdG9yZGVyTnVtcyIsInBhdGhEYXRhIiwibGNhIiwidlBhdGgiLCJ3UGF0aCIsImZpbmRQYXRoIiwicGF0aElkeCIsInBhdGhWIiwiYXNjZW5kaW5nIiwiZGVwdGhzIiwidHJlZURlcHRocyIsIm5vZGVTZXAiLCJuZXN0aW5nUm9vdCIsInN1bVdlaWdodHMiLCJ0b3AiLCJib3R0b20iLCJjaGlsZE5vZGUiLCJjaGlsZFRvcCIsImNoaWxkQm90dG9tIiwidGhpc1dlaWdodCIsIm5lc3RpbmdFZGdlIiwic2ciLCJzZ05vZGUiLCJib3JkZXJUeXBlIiwic3dhcFdpZHRoSGVpZ2h0Iiwic3dhcFdpZHRoSGVpZ2h0T25lIiwicmV2ZXJzZVlPbmUiLCJzd2FwWFlPbmUiLCJyYW5rRGlyIiwicmV2ZXJzZVkiLCJzd2FwWFkiLCJpbml0T3JkZXIiLCJjcm9zc0NvdW50Iiwic29ydFN1YmdyYXBoIiwiYnVpbGRMYXllckdyYXBoIiwiYWRkU3ViZ3JhcGhDb25zdHJhaW50cyIsImJ1aWxkTGF5ZXJHcmFwaHMiLCJyYW5rcyIsInJlbGF0aW9uc2hpcCIsInN3ZWVwTGF5ZXJHcmFwaHMiLCJsYXllckdyYXBocyIsImJpYXNSaWdodCIsImNnIiwibGciLCJzb3J0ZWQiLCJhc3NpZ25PcmRlciIsImRvd25MYXllckdyYXBocyIsInVwTGF5ZXJHcmFwaHMiLCJiZXN0IiwiYmVzdENDIiwibGFzdEJlc3QiLCJjYyIsInNpbXBsZU5vZGVzIiwib3JkZXJlZFZzIiwidHdvTGF5ZXJDcm9zc0NvdW50Iiwibm9ydGhMYXllciIsInNvdXRoTGF5ZXIiLCJzb3V0aFBvcyIsInNvdXRoRW50cmllcyIsInBvcyIsImZpcnN0SW5kZXgiLCJ0cmVlU2l6ZSIsIndlaWdodFN1bSIsImJhcnljZW50ZXIiLCJyZXNvbHZlQ29uZmxpY3RzIiwibW92YWJsZSIsImJsIiwiYnIiLCJzdWJncmFwaHMiLCJiYXJ5Y2VudGVycyIsInN1YmdyYXBoUmVzdWx0IiwiZXhwYW5kU3ViZ3JhcGhzIiwiYmxQcmVkIiwiYnJQcmVkIiwibm9kZVUiLCJzdW0iLCJtYXBwZWRFbnRyaWVzIiwiaW5kZWdyZWUiLCJlbnRyeVYiLCJlbnRyeVciLCJzb3VyY2VTZXQiLCJoYW5kbGVJbiIsIm1lcmdlZCIsIm1lcmdlRW50cmllcyIsImhhbmRsZU91dCIsImRvUmVzb2x2ZUNvbmZsaWN0cyIsImNvbnN1bWVVbnNvcnRhYmxlIiwidW5zb3J0YWJsZSIsInBhcnRzIiwic29ydGFibGUiLCJ2c0luZGV4IiwiYmlhcyIsImNyZWF0ZVJvb3ROb2RlIiwicm9vdFByZXYiLCJwcmV2Q2hpbGQiLCJwb3NpdGlvblgiLCJyYW5rU2VwIiwicHJldlkiLCJtYXhIZWlnaHQiLCJwb3NpdGlvblkiLCJmaW5kVHlwZTFDb25mbGljdHMiLCJjb25mbGljdHMiLCJwcmV2TGF5ZXIiLCJrMCIsInNjYW5Qb3MiLCJwcmV2TGF5ZXJMZW5ndGgiLCJsYXN0Tm9kZSIsImZpbmRPdGhlcklubmVyU2VnbWVudE5vZGUiLCJrMSIsInNjYW5Ob2RlIiwidUxhYmVsIiwidVBvcyIsImFkZENvbmZsaWN0IiwiZmluZFR5cGUyQ29uZmxpY3RzIiwic291dGgiLCJzb3V0aEVuZCIsInByZXZOb3J0aEJvcmRlciIsIm5leHROb3J0aEJvcmRlciIsInVOb2RlIiwibm9ydGgiLCJuZXh0Tm9ydGhQb3MiLCJwcmV2Tm9ydGhQb3MiLCJzb3V0aExvb2thaGVhZCIsImNvbmZsaWN0c1YiLCJoYXNDb25mbGljdCIsInZlcnRpY2FsQWxpZ25tZW50IiwibmVpZ2hib3JGbiIsImFsaWduIiwicHJldklkeCIsIndzIiwibXAiLCJmbG9vciIsImlsIiwiaG9yaXpvbnRhbENvbXBhY3Rpb24iLCJyZXZlcnNlU2VwIiwieHMiLCJibG9ja0ciLCJibG9ja0dyYXBoIiwic2VwRm4iLCJlZGdlU2VwIiwic2VwIiwidlJvb3QiLCJ1Um9vdCIsInByZXZNYXgiLCJidWlsZEJsb2NrR3JhcGgiLCJzZXRYc0Z1bmMiLCJuZXh0Tm9kZXNGdW5jIiwiZWxlbSIsImZpbmRTbWFsbGVzdFdpZHRoQWxpZ25tZW50IiwieHNzIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJoYWxmV2lkdGgiLCJhbGlnbkNvb3JkaW5hdGVzIiwiYWxpZ25UbyIsImFsaWduVG9WYWxzIiwiYWxpZ25Ub01pbiIsImFsaWduVG9NYXgiLCJ2ZXJ0IiwiaG9yaXoiLCJhbGlnbm1lbnQiLCJ4c1ZhbHMiLCJiYWxhbmNlIiwidWwiLCJpZ25vcmUiLCJhZGp1c3RlZExheWVyaW5nIiwic21hbGxlc3RXaWR0aCIsImRlYnVnT3JkZXJpbmciLCJsYXllck1hdHJpeCIsImxheWVyViIsInN0eWxlIiwiU1ZHIiwic2NlbmUiLCJub2RlRGlzcGxheXMiLCJlZGdlRGlzcGxheXMiLCJzdmciLCJkZXNpcmVkSURzIiwiZXhpc3RpbmdJRHMiLCJ0b0FkZCIsInRyIiwiZGlzcGxheSIsIk5vZGVEaXNwbGF5IiwiRWRnZURpc3BsYXkiLCJwcm9wRGlzcGxheXMiLCJhdHRyIiwiZmlsbC1vcGFjaXR5Iiwic3Ryb2tlIiwic3Ryb2tlLXdpZHRoIiwidGV4dCIsImxheW91dFN1YnNjcmlwdGlvbiIsIm1vdmUiLCJpb3MiLCJkZXNpcmVkS2V5cyIsIlByb3BEaXNwbGF5IiwidG9SZW1vdmVLZXlzIiwicHJvcERpc3BsYXkiLCJvdXRwdXRTdWJzY3JpcHRpb24iLCJsaW5lIiwicG9pbnRTdHJpbmdzIiwicG50IiwicGF0aFN0cmluZyIsInNuZExzdFBudCIsImxhc3RQbnQiLCJnZXRBcnJvd1BhdGgiLCJwbG90IiwidGhldGEiLCJhdGFuMiIsIlBJIiwiY29zIiwic2luIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJkb2N1bWVudCIsInN1cHBvcnRlZCIsIkRvYyIsInBhcnNlciIsImRyYXciLCJwcmVwYXJlIiwieG1sbnMiLCJ4bGluayIsInN2Z2pzIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlU1ZHUmVjdCIsImRpZCIsImNhcGl0YWxpemUiLCJzZXRBdHRyaWJ1dGUiLCJtZXRob2RzIiwiaW5oZXJpdCIsImludmVudCIsImluaXRpYWxpemVyIiwiY29uc3RydWN0IiwiQ29udGFpbmVyIiwiYWRvcHQiLCJpbnN0YW5jZSIsIm5vZGVOYW1lIiwicGFyZW50Tm9kZSIsIlNWR0VsZW1lbnQiLCJOZXN0ZWQiLCJHcmFkaWVudCIsIkVsZW1lbnQiLCJuYW1lc3BhY2UiLCJkZWZzIiwic2V0RGF0YSIsInBhcnNlIiwiZ2V0QXR0cmlidXRlIiwiYm9keSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZG9jdW1lbnRFbGVtZW50IiwicG9seSIsInBvbHlsaW5lIiwibmF0aXZlIiwicmVnZXgiLCJudW1iZXJBbmRVbml0IiwiaGV4IiwicmdiIiwicmVmZXJlbmNlIiwidHJhbnNmb3JtcyIsIndoaXRlc3BhY2UiLCJpc0hleCIsImlzUmdiIiwiaXNDc3MiLCJpc0JsYW5rIiwiaXNOdW1iZXIiLCJpc1BlcmNlbnQiLCJpc0ltYWdlIiwiZGVsaW1pdGVyIiwiaHlwaGVuIiwicGF0aExldHRlcnMiLCJpc1BhdGhMZXR0ZXIiLCJudW1iZXJzV2l0aERvdHMiLCJkb3RzIiwidXRpbHMiLCJibG9jayIsInJhZGlhbnMiLCJkZWdyZWVzIiwiZmlsdGVyU1ZHRWxlbWVudHMiLCJlbCIsInN0cm9rZS1vcGFjaXR5Iiwic3Ryb2tlLWxpbmVqb2luIiwic3Ryb2tlLWxpbmVjYXAiLCJmaWxsIiwib3BhY2l0eSIsImN4IiwiY3kiLCJyeCIsInJ5Iiwic3RvcC1vcGFjaXR5Iiwic3RvcC1jb2xvciIsImZvbnQtc2l6ZSIsImZvbnQtZmFtaWx5IiwidGV4dC1hbmNob3IiLCJDb2xvciIsImNvbG9yIiwic3Vic3RyaW5nIiwidG9IZXgiLCJjb21wVG9IZXgiLCJ0b1JnYiIsImJyaWdodG5lc3MiLCJtb3JwaCIsImF0IiwiaXNDb2xvciIsImZhbGxiYWNrIiwibGFzdERlc3RpbmF0aW9uIiwic2V0dGxlIiwic3BsaXQiLCJ0cmltIiwiYXJyYXlfY2xvbmUiLCJQb2ludEFycmF5IiwidG9MaW5lIiwieDEiLCJ5MSIsIngyIiwieTIiLCJib3giLCJiYm94IiwiZ2V0QkJveCIsInBhdGhIYW5kbGVycyIsIk0iLCJwMCIsIkwiLCJIIiwiViIsIkMiLCJTIiwiUSIsIlQiLCJaIiwiQSIsIm1saHZxdGNzYSIsImpsIiwidG9VcHBlckNhc2UiLCJQYXRoQXJyYXkiLCJhcnJheVRvU3RyaW5nIiwiZXF1YWxDb21tYW5kcyIsInBhdGhBcnJheSIsInNvdXJjZUFycmF5IiwiZGVzdGluYXRpb25BcnJheSIsInBhcmFtQ250IiwicGF0aFJlZ1JlcGxhY2UiLCJQb2ludCIsInVuaXQiLCJpc0Zpbml0ZSIsInRvSlNPTiIsInBsdXMiLCJtaW51cyIsInRpbWVzIiwiZGl2aWRlIiwicmVsYXRpdmUiLCJfc3Ryb2tlIiwiX2V2ZW50IiwiZG9tIiwiY2VudGVyIiwicHJvcG9ydGlvbmFsU2l6ZSIsIndyaXRlRGF0YVRvRG9tIiwiYXNzaWduTmV3SWQiLCJjbG9uZU5vZGUiLCJhZnRlciIsInJlbW92ZUVsZW1lbnQiLCJhZGRUbyIsInB1dCIsInB1dEluIiwiaW5zaWRlIiwic2hvdyIsImhpZGUiLCJ2aXNpYmxlIiwiY2xhc3NlcyIsImhhc0NsYXNzIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwibWF0Y2hlcyIsImRvYyIsIm1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIndlbGwiLCJjcmVhdGVFbGVtZW50IiwiUGFyZW50IiwiYXBwZW5kQ2hpbGQiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwiY2hpbGROb2RlcyIsImxpbmVzIiwicmVtb3ZlQXR0cmlidXRlIiwiaXMiLCJlYXNpbmciLCI8PiIsIk1vcnBoT2JqIiwiU2l0dWF0aW9uIiwicmV2ZXJzaW5nIiwiZmluaXNoIiwiZWFzZSIsImxvb3AiLCJsb29wcyIsImFuaW1hdGlvbnMiLCJzdHlsZXMiLCJvbmNlIiwiRlgiLCJfdGFyZ2V0Iiwic2l0dWF0aW9ucyIsInNpdHVhdGlvbiIsInBhdXNlZCIsImxhc3RQb3MiLCJhYnNQb3MiLCJfc3BlZWQiLCJhbmltYXRlIiwidGltZVRvQWJzUG9zIiwiYWJzUG9zVG9UaW1lIiwic3RhcnRBbmltRnJhbWUiLCJzdG9wQW5pbUZyYW1lIiwic3RhcnRDdXJyZW50IiwiaW5pdEFuaW1hdGlvbnMiLCJzdG9wIiwiaW5pdGlhbFRyYW5zZm9ybWF0aW9uIiwibWF0cml4aWZ5IiwiY2xlYXJRdWV1ZSIsImNsZWFyQ3VycmVudCIsImp1bXBUb0VuZCIsImF0RW5kIiwicmVzZXQiLCJ0ZW1wIiwiYXRTdGFydCIsImlzQWJzUG9zIiwiZHVyRGl2U3BkIiwic3BlZWQiLCJwYXVzZSIsInBsYXkiLCJwcm9ncmVzcyIsImVhc2VJdCIsIndyYXBwZXIiLCJkZXRhaWwiLCJfY2FsbFN0YXJ0IiwiZHVyaW5nIiwiZWFzZWQiLCJhZnRlckFsbCIsImR1cmluZ0FsbCIsIm1ldGhvZCIsImlnbm9yZVRpbWUiLCJhYnNQb3NJbnQiLCJsYXN0TG9vcCIsImZpcmUiLCJmeCIsImVhY2hBdCIsIk1hdHJpeCIsIm11bHRpcGx5IiwiZXh0cmFjdCIsIm1hdHJpeCIsImlzRWFzZWQiLCJyZWFsIiwiRyIsIm51bSIsIlRleHQiLCJ2aWV3Ym94IiwiVmlld0JveCIsIlN0b3AiLCJCb3giLCJsZWZ0IiwiZnVsbEJveCIsInhNaW4iLCJJbmZpbml0eSIsInhNYXgiLCJ5TWluIiwieU1heCIsIkJCb3giLCJjb250YWlucyIsIkV4Y2VwdGlvbiIsInRvcFBhcmVudCIsIlNoYXBlIiwiY2xpZW50TGVmdCIsImNsaWVudFRvcCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwidGJveCIsInJib3giLCJSQm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYWRkT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsInNjcmVlbkNUTSIsImludmVyc2UiLCJiYXNlIiwiYXJyYXlUb01hdHJpeCIsImFiY2RlZiIsInB4IiwiZGVsdGFUcmFuc2Zvcm1Qb2ludCIsInB5Iiwic2tld1giLCJ0cmFuc2Zvcm1lZFgiLCJzcXJ0IiwidHJhbnNmb3JtZWRZIiwic2tld1kiLCJzY2FsZVgiLCJzY2FsZVkiLCJyb3RhdGlvbiIsInBhcnNlTWF0cml4IiwidHJhbnNsYXRlIiwic2NhbGUiLCJhcm91bmQiLCJyb3RhdGUiLCJza2V3IiwidGFuIiwiY3JlYXRlU1ZHTWF0cml4IiwiZmxvYXQzMlN0cmluZyIsImN0bSIsImdldENUTSIsImdldFNjcmVlbkNUTSIsImNyZWF0ZVNWR1BvaW50IiwibWF0cml4VHJhbnNmb3JtIiwiYXR0cmlidXRlcyIsImltYWdlIiwiSW1hZ2UiLCJwYXR0ZXJuIiwic2V0QXR0cmlidXRlTlMiLCJyZWJ1aWxkIiwiZW5zdXJlQ2VudHJlIiwiUm90YXRlIiwiU2NhbGUiLCJTa2V3IiwiVHJhbnNsYXRlIiwidW50cmFuc2Zvcm0iLCJzdHIiLCJrdiIsInRvUGFyZW50IiwicEN0bSIsInRvRG9jIiwiVHJhbnNmb3JtYXRpb24iLCJpbnZlcnNlZCIsIl91bmRvIiwiY3NzVGV4dCIsImNhbWVsQ2FzZSIsImluc2VydEJlZm9yZSIsImRlZXAiLCJyZW1vdmVDaGlsZCIsImhhc0NoaWxkTm9kZXMiLCJsYXN0Q2hpbGQiLCJfZGVmcyIsInVuZ3JvdXAiLCJEZWZzIiwidmlldyIsIndlIiwiaGUiLCJ3bSIsImhtIiwicmVnIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJ6b29tIiwiZXZlbnQiLCJsaXN0ZW5lcklkIiwiZXZlbnRzIiwibGlzdGVuZXIiLCJiYWciLCJfc3ZnanNMaXN0ZW5lcklkIiwiZXYiLCJFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImNhbmNlbGFibGUiLCJnYm94IiwidHJhbnMiLCJnZXRFbGVtZW50QnlJZCIsInNwb2YiLCJuZXh0U2libGluZyIsInNpYmxpbmdzIiwicHJldmlvdXMiLCJmb3J3YXJkIiwiYmFja3dhcmQiLCJmcm9udCIsImJhY2siLCJiZWZvcmUiLCJNYXNrIiwidW5tYXNrIiwibWFzayIsIm1hc2tXaXRoIiwibWFza2VyIiwiQ2xpcFBhdGgiLCJ1bmNsaXAiLCJjbGlwIiwiY2xpcFdpdGgiLCJjbGlwcGVyIiwiZ3JhZGllbnQiLCJmeSIsIlBhdHRlcm4iLCJwYXR0ZXJuVW5pdHMiLCJCYXJlIiwid29yZHMiLCJjcmVhdGVUZXh0Tm9kZSIsIlVzZSIsImZpbGUiLCJ1c2UiLCJSZWN0IiwiQ2lyY2xlIiwiY2lyY2xlIiwiRWxsaXBzZSIsImVsbGlwc2UiLCJMaW5lIiwiUG9seWxpbmUiLCJQb2x5Z29uIiwicG9seWdvbiIsIl9hcnJheSIsIm1vcnBoQXJyYXkiLCJQYXRoIiwibG9hZCIsInVybCIsImltZyIsIl9sb2FkZWQiLCJyYXRpbyIsInNyYyIsImxvYWRlZCIsIl9yZWJ1aWxkIiwiX2J1aWxkIiwib3kiLCJuZXdMaW5lZCIsInRleHRDb250ZW50IiwiYnVpbGQiLCJ0c3BhbiIsIm5ld0xpbmUiLCJ0ZXh0UGF0aCIsImJsYW5rTGluZU9mZnNldCIsInBsYWluIiwiVHNwYW4iLCJnZXRDb21wdXRlZFRleHRMZW5ndGgiLCJUZXh0UGF0aCIsInRyYWNrIiwibGluayIsImxpbmtUbyIsIk1hcmtlciIsInJlZiIsIm1hcmtlciIsInN1Z2FyIiwiY2hhckF0IiwiY29tcCIsImV4dGVuc2lvbiIsImRtb3ZlIiwicmFkaXVzIiwiZ2V0VG90YWxMZW5ndGgiLCJwb2ludEF0IiwiZ2V0UG9pbnRBdExlbmd0aCIsImZvbnQiLCJtZW1iZXJzIiwiZWxlbWVudHMiLCJyZW1lbWJlciIsIm1lbW9yeSIsImZvcmdldCIsIl9tZW1vcnkiLCJpZEZyb21SZWZlcmVuY2UiLCJzZWxlY3QiLCJxdWVyeSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJDdXN0b21FdmVudFBvbHkiLCJidWJibGVzIiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJsYXN0VGltZSIsInZlbmRvcnMiLCJjdXJyVGltZSIsImdldFRpbWUiLCJ0aW1lVG9DYWxsIiwiY2xlYXJUaW1lb3V0IiwiZmFjdG9yeSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxF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Q2ZpSSxFQUFFazhFLEVBQVFua0YsR0FBSywrQkFHM0NpSSxFQUFFNFUsc0JBQXdCNVUsRUFBRTRVLHVCQUMxQixTQUFTOFosR0FDUCxJQUFJeXRELEdBQVcsSUFBSXhoRSxNQUFPeWhFLFVBQ3RCQyxFQUFhaDhFLEtBQUszRCxJQUFJLEVBQUcsSUFBTXkvRSxFQUFXRixJQUUxQ3R6RSxFQUFLM0ksRUFBRThKLFdBQVcsV0FDcEI0a0IsRUFBU3l0RCxFQUFXRSxJQUNuQkEsR0FHSCxPQURBSixFQUFXRSxFQUFXRSxFQUNmMXpFLEdBR1gzSSxFQUFFNlUscUJBQXVCN1UsRUFBRTZVLHNCQUF3QjdVLEVBQUVzOEUsYUF2QnZELENBeUJFai9FLEdBRUt3Z0UsRUFoOUtNMGUsQ0FBUWozRSxFQUFNQSxFQUFLKzZELFdBQzNCdHZFLEtBQUFMLEVBQUFGLEVBQUFFLEVBQUFDLFFBQUFELFFBQUEwdkUiLCJmaWxlIjoiY2xpZW50X2J1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxODYpO1xuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfdXRpbF9pc0Z1bmN0aW9uLF9PYnNlcnZlcixfU3Vic2NyaXB0aW9uLF9pbnRlcm5hbF9zeW1ib2xfcnhTdWJzY3JpYmVyLF9jb25maWcsX3V0aWxfaG9zdFJlcG9ydEVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgZW1wdHkgYXMgZW1wdHlPYnNlcnZlciB9IGZyb20gJy4vT2JzZXJ2ZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgcnhTdWJzY3JpYmVyIGFzIHJ4U3Vic2NyaWJlclN5bWJvbCB9IGZyb20gJy4uL2ludGVybmFsL3N5bWJvbC9yeFN1YnNjcmliZXInO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgaG9zdFJlcG9ydEVycm9yIH0gZnJvbSAnLi91dGlsL2hvc3RSZXBvcnRFcnJvcic7XG52YXIgU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb25Pck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zeW5jRXJyb3JWYWx1ZSA9IG51bGw7XG4gICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZW1wdHlPYnNlcnZlcjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpZiAoIWRlc3RpbmF0aW9uT3JOZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZW1wdHlPYnNlcnZlcjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb25Pck5leHQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXN0aW5hdGlvbk9yTmV4dCBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IGRlc3RpbmF0aW9uT3JOZXh0LnN5bmNFcnJvclRocm93YWJsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb25Pck5leHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbk9yTmV4dC5hZGQoX3RoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IFNhZmVTdWJzY3JpYmVyKF90aGlzLCBkZXN0aW5hdGlvbk9yTmV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBfdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IFNhZmVTdWJzY3JpYmVyKF90aGlzLCBkZXN0aW5hdGlvbk9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmliZXIucHJvdG90eXBlW3J4U3Vic2NyaWJlclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuICAgIFN1YnNjcmliZXIuY3JlYXRlID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IG5ldyBTdWJzY3JpYmVyKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIHN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3BhcmVudE9yUGFyZW50cyA9IHRoaXMuX3BhcmVudE9yUGFyZW50cztcbiAgICAgICAgdGhpcy5fcGFyZW50T3JQYXJlbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRPclBhcmVudHMgPSBfcGFyZW50T3JQYXJlbnRzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVyO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IFN1YnNjcmliZXIgfTtcbnZhciBTYWZlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihfcGFyZW50U3Vic2NyaWJlciwgb2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcGFyZW50U3Vic2NyaWJlciA9IF9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICB2YXIgbmV4dDtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBfdGhpcztcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpKSB7XG4gICAgICAgICAgICBuZXh0ID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2JzZXJ2ZXJPck5leHQpIHtcbiAgICAgICAgICAgIG5leHQgPSBvYnNlcnZlck9yTmV4dC5uZXh0O1xuICAgICAgICAgICAgZXJyb3IgPSBvYnNlcnZlck9yTmV4dC5lcnJvcjtcbiAgICAgICAgICAgIGNvbXBsZXRlID0gb2JzZXJ2ZXJPck5leHQuY29tcGxldGU7XG4gICAgICAgICAgICBpZiAob2JzZXJ2ZXJPck5leHQgIT09IGVtcHR5T2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShvYnNlcnZlck9yTmV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dC51bnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRkKGNvbnRleHQudW5zdWJzY3JpYmUuYmluZChjb250ZXh0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRleHQudW5zdWJzY3JpYmUgPSBfdGhpcy51bnN1YnNjcmliZS5iaW5kKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIF90aGlzLl9uZXh0ID0gbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gZXJyb3I7XG4gICAgICAgIF90aGlzLl9jb21wbGV0ZSA9IGNvbXBsZXRlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQgJiYgdGhpcy5fbmV4dCkge1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgICAgIGlmICghY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgfHwgIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclVuc3ViKHRoaXMuX25leHQsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX190cnlPclNldEVycm9yKF9wYXJlbnRTdWJzY3JpYmVyLCB0aGlzLl9uZXh0LCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgICAgIHZhciB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nID0gY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmc7XG4gICAgICAgICAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgfHwgIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih0aGlzLl9lcnJvciwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yU2V0RXJyb3IoX3BhcmVudFN1YnNjcmliZXIsIHRoaXMuX2Vycm9yLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICBpZiAodXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVmFsdWUgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgIF9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBfcGFyZW50U3Vic2NyaWJlciA9IHRoaXMuX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgICAgICBpZiAodGhpcy5fY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgd3JhcHBlZENvbXBsZXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2NvbXBsZXRlLmNhbGwoX3RoaXMuX2NvbnRleHQpOyB9O1xuICAgICAgICAgICAgICAgIGlmICghY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgfHwgIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih3cmFwcGVkQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JTZXRFcnJvcihfcGFyZW50U3Vic2NyaWJlciwgd3JhcHBlZENvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLl9fdHJ5T3JVbnN1YiA9IGZ1bmN0aW9uIChmbiwgdmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcy5fY29udGV4dCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX190cnlPclNldEVycm9yID0gZnVuY3Rpb24gKHBhcmVudCwgZm4sIHZhbHVlKSB7XG4gICAgICAgIGlmICghY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIGNhbGwnKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLl9jb250ZXh0LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50LnN5bmNFcnJvclZhbHVlID0gZXJyO1xuICAgICAgICAgICAgICAgIHBhcmVudC5zeW5jRXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BhcmVudFN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICBfcGFyZW50U3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFNhZmVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBTYWZlU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3V0aWxfY2FuUmVwb3J0RXJyb3IsX3V0aWxfdG9TdWJzY3JpYmVyLF9zeW1ib2xfb2JzZXJ2YWJsZSxfdXRpbF9waXBlLF9jb25maWcgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgY2FuUmVwb3J0RXJyb3IgfSBmcm9tICcuL3V0aWwvY2FuUmVwb3J0RXJyb3InO1xuaW1wb3J0IHsgdG9TdWJzY3JpYmVyIH0gZnJvbSAnLi91dGlsL3RvU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBwaXBlRnJvbUFycmF5IH0gZnJvbSAnLi91dGlsL3BpcGUnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xudmFyIE9ic2VydmFibGUgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcbiAgICAgICAgdGhpcy5faXNTY2FsYXIgPSBmYWxzZTtcbiAgICAgICAgaWYgKHN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgICAgICB9XG4gICAgfVxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIG9ic2VydmFibGUub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgb3BlcmF0b3IgPSB0aGlzLm9wZXJhdG9yO1xuICAgICAgICB2YXIgc2luayA9IHRvU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgaWYgKG9wZXJhdG9yKSB7XG4gICAgICAgICAgICBzaW5rLmFkZChvcGVyYXRvci5jYWxsKHNpbmssIHRoaXMuc291cmNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzaW5rLmFkZCh0aGlzLnNvdXJjZSB8fCAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgJiYgIXNpbmsuc3luY0Vycm9yVGhyb3dhYmxlKSA/XG4gICAgICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlKHNpbmspIDpcbiAgICAgICAgICAgICAgICB0aGlzLl90cnlTdWJzY3JpYmUoc2luaykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgaWYgKHNpbmsuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgc2luay5zeW5jRXJyb3JUaHJvd2FibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoc2luay5zeW5jRXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgc2luay5zeW5jRXJyb3JWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpbms7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoc2luayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgc2luay5zeW5jRXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNpbmsuc3luY0Vycm9yVmFsdWUgPSBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FuUmVwb3J0RXJyb3Ioc2luaykpIHtcbiAgICAgICAgICAgICAgICBzaW5rLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChuZXh0LCBwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlamVjdCwgcmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLnNvdXJjZTtcbiAgICAgICAgcmV0dXJuIHNvdXJjZSAmJiBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGVbU3ltYm9sX29ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wZXJhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGlwZUZyb21BcnJheShvcGVyYXRpb25zKSh0aGlzKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnRvUHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHZhbHVlID0geDsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUodmFsdWUpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZSk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZTtcbn0oKSk7XG5leHBvcnQgeyBPYnNlcnZhYmxlIH07XG5mdW5jdGlvbiBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcikge1xuICAgIGlmICghcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBjb25maWcuUHJvbWlzZSB8fCBQcm9taXNlO1xuICAgIH1cbiAgICBpZiAoIXByb21pc2VDdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm8gUHJvbWlzZSBpbXBsIGZvdW5kJyk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlQ3Rvcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9TdWJzY3JpYmVyLF9zeW1ib2xfcnhTdWJzY3JpYmVyLF9PYnNlcnZlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyByeFN1YnNjcmliZXIgYXMgcnhTdWJzY3JpYmVyU3ltYm9sIH0gZnJvbSAnLi4vc3ltYm9sL3J4U3Vic2NyaWJlcic7XG5pbXBvcnQgeyBlbXB0eSBhcyBlbXB0eU9ic2VydmVyIH0gZnJvbSAnLi4vT2JzZXJ2ZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHRvU3Vic2NyaWJlcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgaWYgKG5leHRPck9ic2VydmVyKSB7XG4gICAgICAgIGlmIChuZXh0T3JPYnNlcnZlciBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0T3JPYnNlcnZlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV4dE9yT2JzZXJ2ZXJbcnhTdWJzY3JpYmVyU3ltYm9sXSkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRPck9ic2VydmVyW3J4U3Vic2NyaWJlclN5bWJvbF0oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW5leHRPck9ic2VydmVyICYmICFlcnJvciAmJiAhY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpYmVyKGVtcHR5T2JzZXJ2ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFN1YnNjcmliZXIobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b1N1YnNjcmliZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9Jbm5lclN1YnNjcmliZXIsX3N1YnNjcmliZVRvLF9PYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IElubmVyU3Vic2NyaWJlciB9IGZyb20gJy4uL0lubmVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUbyB9IGZyb20gJy4vc3Vic2NyaWJlVG8nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZVRvUmVzdWx0KG91dGVyU3Vic2NyaWJlciwgcmVzdWx0LCBvdXRlclZhbHVlLCBvdXRlckluZGV4LCBkZXN0aW5hdGlvbikge1xuICAgIGlmIChkZXN0aW5hdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uID0gbmV3IElubmVyU3Vic2NyaWJlcihvdXRlclN1YnNjcmliZXIsIG91dGVyVmFsdWUsIG91dGVySW5kZXgpO1xuICAgIH1cbiAgICBpZiAoZGVzdGluYXRpb24uY2xvc2VkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuc3Vic2NyaWJlKGRlc3RpbmF0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnNjcmliZVRvKHJlc3VsdCkoZGVzdGluYXRpb24pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG9SZXN1bHQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi9TdWJzY3JpYmVyJztcbnZhciBPdXRlclN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoT3V0ZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE91dGVyU3Vic2NyaWJlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGlubmVyVmFsdWUpO1xuICAgIH07XG4gICAgT3V0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvciwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnJvcik7XG4gICAgfTtcbiAgICBPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBPdXRlclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IE91dGVyU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3V0ZXJTdWJzY3JpYmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9pc0FycmF5LF91dGlsX2lzT2JqZWN0LF91dGlsX2lzRnVuY3Rpb24sX3V0aWxfVW5zdWJzY3JpcHRpb25FcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuL3V0aWwvaXNPYmplY3QnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IFVuc3Vic2NyaXB0aW9uRXJyb3IgfSBmcm9tICcuL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcic7XG52YXIgU3Vic2NyaXB0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbih1bnN1YnNjcmliZSkge1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRPclBhcmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gbnVsbDtcbiAgICAgICAgaWYgKHVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl91bnN1YnNjcmliZSA9IHVuc3Vic2NyaWJlO1xuICAgICAgICB9XG4gICAgfVxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlcnJvcnM7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIF9wYXJlbnRPclBhcmVudHMgPSBfYS5fcGFyZW50T3JQYXJlbnRzLCBfdW5zdWJzY3JpYmUgPSBfYS5fdW5zdWJzY3JpYmUsIF9zdWJzY3JpcHRpb25zID0gX2EuX3N1YnNjcmlwdGlvbnM7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcGFyZW50T3JQYXJlbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IG51bGw7XG4gICAgICAgIGlmIChfcGFyZW50T3JQYXJlbnRzIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBfcGFyZW50T3JQYXJlbnRzLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfcGFyZW50T3JQYXJlbnRzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgX3BhcmVudE9yUGFyZW50cy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBfcGFyZW50T3JQYXJlbnRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBwYXJlbnRfMS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oX3Vuc3Vic2NyaWJlKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBfdW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzID0gZSBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IgPyBmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZS5lcnJvcnMpIDogW2VdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5KF9zdWJzY3JpcHRpb25zKSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgICAgICB2YXIgbGVuID0gX3N1YnNjcmlwdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViID0gX3N1YnNjcmlwdGlvbnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChzdWIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdChmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZS5lcnJvcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0ZWFyZG93bjtcbiAgICAgICAgaWYgKCF0ZWFyZG93bikge1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHR5cGVvZiB0ZWFyZG93bikge1xuICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGVhcmRvd24pO1xuICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uID09PSB0aGlzIHx8IHN1YnNjcmlwdGlvbi5jbG9zZWQgfHwgdHlwZW9mIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIShzdWJzY3JpcHRpb24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLl9zdWJzY3JpcHRpb25zID0gW3RtcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkIHRlYXJkb3duICcgKyB0ZWFyZG93biArICcgYWRkZWQgdG8gU3Vic2NyaXB0aW9uLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBfcGFyZW50T3JQYXJlbnRzID0gc3Vic2NyaXB0aW9uLl9wYXJlbnRPclBhcmVudHM7XG4gICAgICAgIGlmIChfcGFyZW50T3JQYXJlbnRzID09PSBudWxsKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24uX3BhcmVudE9yUGFyZW50cyA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX3BhcmVudE9yUGFyZW50cyBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgaWYgKF9wYXJlbnRPclBhcmVudHMgPT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLl9wYXJlbnRPclBhcmVudHMgPSBbX3BhcmVudE9yUGFyZW50cywgdGhpc107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX3BhcmVudE9yUGFyZW50cy5pbmRleE9mKHRoaXMpID09PSAtMSkge1xuICAgICAgICAgICAgX3BhcmVudE9yUGFyZW50cy5wdXNoKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHRoaXMuX3N1YnNjcmlwdGlvbnM7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb25zID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gW3N1YnNjcmlwdGlvbl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zLnB1c2goc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gdGhpcy5fc3Vic2NyaXB0aW9ucztcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb25JbmRleCA9IHN1YnNjcmlwdGlvbnMuaW5kZXhPZihzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbkluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuc3BsaWNlKHN1YnNjcmlwdGlvbkluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLkVNUFRZID0gKGZ1bmN0aW9uIChlbXB0eSkge1xuICAgICAgICBlbXB0eS5jbG9zZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgfShuZXcgU3Vic2NyaXB0aW9uKCkpKTtcbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpKTtcbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiB9O1xuZnVuY3Rpb24gZmxhdHRlblVuc3Vic2NyaXB0aW9uRXJyb3JzKGVycm9ycykge1xuICAgIHJldHVybiBlcnJvcnMucmVkdWNlKGZ1bmN0aW9uIChlcnJzLCBlcnIpIHsgcmV0dXJuIGVycnMuY29uY2F0KChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSA/IGVyci5lcnJvcnMgOiBlcnIpOyB9LCBbXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpcHRpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PYnNlcnZhYmxlLF9TdWJzY3JpYmVyLF9TdWJzY3JpcHRpb24sX3V0aWxfT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IsX1N1YmplY3RTdWJzY3JpcHRpb24sX2ludGVybmFsX3N5bWJvbF9yeFN1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBPYmplY3RVbnN1YnNjcmliZWRFcnJvciB9IGZyb20gJy4vdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG5pbXBvcnQgeyBTdWJqZWN0U3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJqZWN0U3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHJ4U3Vic2NyaWJlciBhcyByeFN1YnNjcmliZXJTeW1ib2wgfSBmcm9tICcuLi9pbnRlcm5hbC9zeW1ib2wvcnhTdWJzY3JpYmVyJztcbnZhciBTdWJqZWN0U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdWJqZWN0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gU3ViamVjdFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IFN1YmplY3RTdWJzY3JpYmVyIH07XG52YXIgU3ViamVjdCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3QoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9ic2VydmVycyA9IFtdO1xuICAgICAgICBfdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhhc0Vycm9yID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnRocm93bkVycm9yID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJqZWN0LnByb3RvdHlwZVtyeFN1YnNjcmliZXJTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFN1YmplY3RTdWJzY3JpYmVyKHRoaXMpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgc3ViamVjdCA9IG5ldyBBbm9ueW1vdXNTdWJqZWN0KHRoaXMsIHRoaXMpO1xuICAgICAgICBzdWJqZWN0Lm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBzdWJqZWN0O1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcbiAgICAgICAgICAgIHZhciBsZW4gPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGNvcHkgPSBvYnNlcnZlcnMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb3B5W2ldLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50aHJvd25FcnJvciA9IGVycjtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICB2YXIgY29weSA9IG9ic2VydmVycy5zbGljZSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb3B5W2ldLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYnNlcnZlcnMubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzO1xuICAgICAgICB2YXIgbGVuID0gb2JzZXJ2ZXJzLmxlbmd0aDtcbiAgICAgICAgdmFyIGNvcHkgPSBvYnNlcnZlcnMuc2xpY2UoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29weVtpXS5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzLmxlbmd0aCA9IDA7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gbnVsbDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX3RyeVN1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmhhc0Vycm9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHRoaXMudGhyb3duRXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlcik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN1YmplY3RTdWJzY3JpcHRpb24odGhpcywgc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmFzT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgU3ViamVjdC5jcmVhdGUgPSBmdW5jdGlvbiAoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gbmV3IEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3ViamVjdDtcbn0oT2JzZXJ2YWJsZSkpO1xuZXhwb3J0IHsgU3ViamVjdCB9O1xudmFyIEFub255bW91c1N1YmplY3QgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQW5vbnltb3VzU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBbm9ueW1vdXNTdWJqZWN0KGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uICYmIGRlc3RpbmF0aW9uLm5leHQpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uICYmIGRlc3RpbmF0aW9uLmVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24uY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLnNvdXJjZTtcbiAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBTdWJzY3JpcHRpb24uRU1QVFk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBbm9ueW1vdXNTdWJqZWN0O1xufShTdWJqZWN0KSk7XG5leHBvcnQgeyBBbm9ueW1vdXNTdWJqZWN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJqZWN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJzsgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfQXN5bmNBY3Rpb24sX0FzeW5jU2NoZWR1bGVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG5pbXBvcnQgeyBBc3luY1NjaGVkdWxlciB9IGZyb20gJy4vQXN5bmNTY2hlZHVsZXInO1xuZXhwb3J0IHZhciBhc3luYyA9IC8qQF9fUFVSRV9fKi8gbmV3IEFzeW5jU2NoZWR1bGVyKEFzeW5jQWN0aW9uKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLmpzLm1hcFxuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuXG52YXIgbG9kYXNoO1xuXG5pZiAodHlwZW9mIHJlcXVpcmUgPT09IFwiZnVuY3Rpb25cIikge1xuICB0cnkge1xuICAgIGxvZGFzaCA9IHtcbiAgICAgIGNsb25lRGVlcDogcmVxdWlyZShcImxvZGFzaC9jbG9uZURlZXBcIiksXG4gICAgICBjb25zdGFudDogcmVxdWlyZShcImxvZGFzaC9jb25zdGFudFwiKSxcbiAgICAgIGRlZmF1bHRzOiByZXF1aXJlKFwibG9kYXNoL2RlZmF1bHRzXCIpLFxuICAgICAgZWFjaDogcmVxdWlyZShcImxvZGFzaC9lYWNoXCIpLFxuICAgICAgZmlsdGVyOiByZXF1aXJlKFwibG9kYXNoL2ZpbHRlclwiKSxcbiAgICAgIGZpbmQ6IHJlcXVpcmUoXCJsb2Rhc2gvZmluZFwiKSxcbiAgICAgIGZsYXR0ZW46IHJlcXVpcmUoXCJsb2Rhc2gvZmxhdHRlblwiKSxcbiAgICAgIGZvckVhY2g6IHJlcXVpcmUoXCJsb2Rhc2gvZm9yRWFjaFwiKSxcbiAgICAgIGZvckluOiByZXF1aXJlKFwibG9kYXNoL2ZvckluXCIpLFxuICAgICAgaGFzOiAgcmVxdWlyZShcImxvZGFzaC9oYXNcIiksXG4gICAgICBpc1VuZGVmaW5lZDogcmVxdWlyZShcImxvZGFzaC9pc1VuZGVmaW5lZFwiKSxcbiAgICAgIGxhc3Q6IHJlcXVpcmUoXCJsb2Rhc2gvbGFzdFwiKSxcbiAgICAgIG1hcDogcmVxdWlyZShcImxvZGFzaC9tYXBcIiksXG4gICAgICBtYXBWYWx1ZXM6IHJlcXVpcmUoXCJsb2Rhc2gvbWFwVmFsdWVzXCIpLFxuICAgICAgbWF4OiByZXF1aXJlKFwibG9kYXNoL21heFwiKSxcbiAgICAgIG1lcmdlOiByZXF1aXJlKFwibG9kYXNoL21lcmdlXCIpLFxuICAgICAgbWluOiByZXF1aXJlKFwibG9kYXNoL21pblwiKSxcbiAgICAgIG1pbkJ5OiByZXF1aXJlKFwibG9kYXNoL21pbkJ5XCIpLFxuICAgICAgbm93OiByZXF1aXJlKFwibG9kYXNoL25vd1wiKSxcbiAgICAgIHBpY2s6IHJlcXVpcmUoXCJsb2Rhc2gvcGlja1wiKSxcbiAgICAgIHJhbmdlOiByZXF1aXJlKFwibG9kYXNoL3JhbmdlXCIpLFxuICAgICAgcmVkdWNlOiByZXF1aXJlKFwibG9kYXNoL3JlZHVjZVwiKSxcbiAgICAgIHNvcnRCeTogcmVxdWlyZShcImxvZGFzaC9zb3J0QnlcIiksXG4gICAgICB1bmlxdWVJZDogcmVxdWlyZShcImxvZGFzaC91bmlxdWVJZFwiKSxcbiAgICAgIHZhbHVlczogcmVxdWlyZShcImxvZGFzaC92YWx1ZXNcIiksXG4gICAgICB6aXBPYmplY3Q6IHJlcXVpcmUoXCJsb2Rhc2gvemlwT2JqZWN0XCIpLFxuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbmlmICghbG9kYXNoKSB7XG4gIGxvZGFzaCA9IHdpbmRvdy5fO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxvZGFzaDtcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIHJldHVybiBmdW5jdGlvbiBtYXBPcGVyYXRpb24oc291cmNlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvamVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgaXMgbm90IGEgZnVuY3Rpb24uIEFyZSB5b3UgbG9va2luZyBmb3IgYG1hcFRvKClgPycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgTWFwT3BlcmF0b3IocHJvamVjdCwgdGhpc0FyZykpO1xuICAgIH07XG59XG52YXIgTWFwT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWFwT3BlcmF0b3IocHJvamVjdCwgdGhpc0FyZykge1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgIH1cbiAgICBNYXBPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IE1hcFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcm9qZWN0LCB0aGlzLnRoaXNBcmcpKTtcbiAgICB9O1xuICAgIHJldHVybiBNYXBPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBNYXBPcGVyYXRvciB9O1xudmFyIE1hcFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTWFwU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYXBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICBfdGhpcy50aGlzQXJnID0gdGhpc0FyZyB8fCBfdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0LmNhbGwodGhpcy50aGlzQXJnLCB2YWx1ZSwgdGhpcy5jb3VudCsrKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFwU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2NoZWR1bGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5zY2hlZHVsZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgdmFyIEVNUFRZID0gLypAX19QVVJFX18qLyBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTtcbmV4cG9ydCBmdW5jdGlvbiBlbXB0eShzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVyID8gZW1wdHlTY2hlZHVsZWQoc2NoZWR1bGVyKSA6IEVNUFRZO1xufVxuZnVuY3Rpb24gZW1wdHlTY2hlZHVsZWQoc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbXB0eS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfc3Vic2NyaWJlVG8sX3NjaGVkdWxlZF9zY2hlZHVsZWQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG8gfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvJztcbmltcG9ydCB7IHNjaGVkdWxlZCB9IGZyb20gJy4uL3NjaGVkdWxlZC9zY2hlZHVsZWQnO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20oaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghc2NoZWR1bGVyKSB7XG4gICAgICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlVG8oaW5wdXQpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbS5qcy5tYXBcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi9TdWJzY3JpYmVyJztcbnZhciBJbm5lclN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoSW5uZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIElubmVyU3Vic2NyaWJlcihwYXJlbnQsIG91dGVyVmFsdWUsIG91dGVySW5kZXgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBfdGhpcy5vdXRlclZhbHVlID0gb3V0ZXJWYWx1ZTtcbiAgICAgICAgX3RoaXMub3V0ZXJJbmRleCA9IG91dGVySW5kZXg7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeU5leHQodGhpcy5vdXRlclZhbHVlLCB2YWx1ZSwgdGhpcy5vdXRlckluZGV4LCB0aGlzLmluZGV4KyssIHRoaXMpO1xuICAgIH07XG4gICAgSW5uZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5RXJyb3IoZXJyb3IsIHRoaXMpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5Q29tcGxldGUodGhpcyk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBJbm5lclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IElubmVyU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW5uZXJTdWJzY3JpYmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xudmFyIF9lbmFibGVfc3VwZXJfZ3Jvc3NfbW9kZV90aGF0X3dpbGxfY2F1c2VfYmFkX3RoaW5ncyA9IGZhbHNlO1xuZXhwb3J0IHZhciBjb25maWcgPSB7XG4gICAgUHJvbWlzZTogdW5kZWZpbmVkLFxuICAgIHNldCB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGVycm9yID0gLypAX19QVVJFX18qLyBuZXcgRXJyb3IoKTtcbiAgICAgICAgICAgIC8qQF9fUFVSRV9fKi8gY29uc29sZS53YXJuKCdERVBSRUNBVEVEISBSeEpTIHdhcyBzZXQgdG8gdXNlIGRlcHJlY2F0ZWQgc3luY2hyb25vdXMgZXJyb3IgaGFuZGxpbmcgYmVoYXZpb3IgYnkgY29kZSBhdDogXFxuJyArIGVycm9yLnN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfZW5hYmxlX3N1cGVyX2dyb3NzX21vZGVfdGhhdF93aWxsX2NhdXNlX2JhZF90aGluZ3MpIHtcbiAgICAgICAgICAgIC8qQF9fUFVSRV9fKi8gY29uc29sZS5sb2coJ1J4SlM6IEJhY2sgdG8gYSBiZXR0ZXIgZXJyb3IgYmVoYXZpb3IuIFRoYW5rIHlvdS4gPDMnKTtcbiAgICAgICAgfVxuICAgICAgICBfZW5hYmxlX3N1cGVyX2dyb3NzX21vZGVfdGhhdF93aWxsX2NhdXNlX2JhZF90aGluZ3MgPSB2YWx1ZTtcbiAgICB9LFxuICAgIGdldCB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKCkge1xuICAgICAgICByZXR1cm4gX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF8gPSByZXF1aXJlKFwiLi9sb2Rhc2hcIiksXG4gICAgR3JhcGggPSByZXF1aXJlKFwiLi9ncmFwaGxpYlwiKS5HcmFwaDtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFkZER1bW15Tm9kZTogYWRkRHVtbXlOb2RlLFxuICBzaW1wbGlmeTogc2ltcGxpZnksXG4gIGFzTm9uQ29tcG91bmRHcmFwaDogYXNOb25Db21wb3VuZEdyYXBoLFxuICBzdWNjZXNzb3JXZWlnaHRzOiBzdWNjZXNzb3JXZWlnaHRzLFxuICBwcmVkZWNlc3NvcldlaWdodHM6IHByZWRlY2Vzc29yV2VpZ2h0cyxcbiAgaW50ZXJzZWN0UmVjdDogaW50ZXJzZWN0UmVjdCxcbiAgYnVpbGRMYXllck1hdHJpeDogYnVpbGRMYXllck1hdHJpeCxcbiAgbm9ybWFsaXplUmFua3M6IG5vcm1hbGl6ZVJhbmtzLFxuICByZW1vdmVFbXB0eVJhbmtzOiByZW1vdmVFbXB0eVJhbmtzLFxuICBhZGRCb3JkZXJOb2RlOiBhZGRCb3JkZXJOb2RlLFxuICBtYXhSYW5rOiBtYXhSYW5rLFxuICBwYXJ0aXRpb246IHBhcnRpdGlvbixcbiAgdGltZTogdGltZSxcbiAgbm90aW1lOiBub3RpbWVcbn07XG5cbi8qXG4gKiBBZGRzIGEgZHVtbXkgbm9kZSB0byB0aGUgZ3JhcGggYW5kIHJldHVybiB2LlxuICovXG5mdW5jdGlvbiBhZGREdW1teU5vZGUoZywgdHlwZSwgYXR0cnMsIG5hbWUpIHtcbiAgdmFyIHY7XG4gIGRvIHtcbiAgICB2ID0gXy51bmlxdWVJZChuYW1lKTtcbiAgfSB3aGlsZSAoZy5oYXNOb2RlKHYpKTtcblxuICBhdHRycy5kdW1teSA9IHR5cGU7XG4gIGcuc2V0Tm9kZSh2LCBhdHRycyk7XG4gIHJldHVybiB2O1xufVxuXG4vKlxuICogUmV0dXJucyBhIG5ldyBncmFwaCB3aXRoIG9ubHkgc2ltcGxlIGVkZ2VzLiBIYW5kbGVzIGFnZ3JlZ2F0aW9uIG9mIGRhdGFcbiAqIGFzc29jaWF0ZWQgd2l0aCBtdWx0aS1lZGdlcy5cbiAqL1xuZnVuY3Rpb24gc2ltcGxpZnkoZykge1xuICB2YXIgc2ltcGxpZmllZCA9IG5ldyBHcmFwaCgpLnNldEdyYXBoKGcuZ3JhcGgoKSk7XG4gIF8uZm9yRWFjaChnLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHsgc2ltcGxpZmllZC5zZXROb2RlKHYsIGcubm9kZSh2KSk7IH0pO1xuICBfLmZvckVhY2goZy5lZGdlcygpLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIHNpbXBsZUxhYmVsID0gc2ltcGxpZmllZC5lZGdlKGUudiwgZS53KSB8fCB7IHdlaWdodDogMCwgbWlubGVuOiAxIH0sXG4gICAgICAgIGxhYmVsID0gZy5lZGdlKGUpO1xuICAgIHNpbXBsaWZpZWQuc2V0RWRnZShlLnYsIGUudywge1xuICAgICAgd2VpZ2h0OiBzaW1wbGVMYWJlbC53ZWlnaHQgKyBsYWJlbC53ZWlnaHQsXG4gICAgICBtaW5sZW46IE1hdGgubWF4KHNpbXBsZUxhYmVsLm1pbmxlbiwgbGFiZWwubWlubGVuKVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHNpbXBsaWZpZWQ7XG59XG5cbmZ1bmN0aW9uIGFzTm9uQ29tcG91bmRHcmFwaChnKSB7XG4gIHZhciBzaW1wbGlmaWVkID0gbmV3IEdyYXBoKHsgbXVsdGlncmFwaDogZy5pc011bHRpZ3JhcGgoKSB9KS5zZXRHcmFwaChnLmdyYXBoKCkpO1xuICBfLmZvckVhY2goZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgaWYgKCFnLmNoaWxkcmVuKHYpLmxlbmd0aCkge1xuICAgICAgc2ltcGxpZmllZC5zZXROb2RlKHYsIGcubm9kZSh2KSk7XG4gICAgfVxuICB9KTtcbiAgXy5mb3JFYWNoKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHNpbXBsaWZpZWQuc2V0RWRnZShlLCBnLmVkZ2UoZSkpO1xuICB9KTtcbiAgcmV0dXJuIHNpbXBsaWZpZWQ7XG59XG5cbmZ1bmN0aW9uIHN1Y2Nlc3NvcldlaWdodHMoZykge1xuICB2YXIgd2VpZ2h0TWFwID0gXy5tYXAoZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIHN1Y3MgPSB7fTtcbiAgICBfLmZvckVhY2goZy5vdXRFZGdlcyh2KSwgZnVuY3Rpb24oZSkge1xuICAgICAgc3Vjc1tlLnddID0gKHN1Y3NbZS53XSB8fCAwKSArIGcuZWRnZShlKS53ZWlnaHQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIHN1Y3M7XG4gIH0pO1xuICByZXR1cm4gXy56aXBPYmplY3QoZy5ub2RlcygpLCB3ZWlnaHRNYXApO1xufVxuXG5mdW5jdGlvbiBwcmVkZWNlc3NvcldlaWdodHMoZykge1xuICB2YXIgd2VpZ2h0TWFwID0gXy5tYXAoZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIHByZWRzID0ge307XG4gICAgXy5mb3JFYWNoKGcuaW5FZGdlcyh2KSwgZnVuY3Rpb24oZSkge1xuICAgICAgcHJlZHNbZS52XSA9IChwcmVkc1tlLnZdIHx8IDApICsgZy5lZGdlKGUpLndlaWdodDtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJlZHM7XG4gIH0pO1xuICByZXR1cm4gXy56aXBPYmplY3QoZy5ub2RlcygpLCB3ZWlnaHRNYXApO1xufVxuXG4vKlxuICogRmluZHMgd2hlcmUgYSBsaW5lIHN0YXJ0aW5nIGF0IHBvaW50ICh7eCwgeX0pIHdvdWxkIGludGVyc2VjdCBhIHJlY3RhbmdsZVxuICogKHt4LCB5LCB3aWR0aCwgaGVpZ2h0fSkgaWYgaXQgd2VyZSBwb2ludGluZyBhdCB0aGUgcmVjdGFuZ2xlJ3MgY2VudGVyLlxuICovXG5mdW5jdGlvbiBpbnRlcnNlY3RSZWN0KHJlY3QsIHBvaW50KSB7XG4gIHZhciB4ID0gcmVjdC54O1xuICB2YXIgeSA9IHJlY3QueTtcblxuICAvLyBSZWN0YW5nbGUgaW50ZXJzZWN0aW9uIGFsZ29yaXRobSBmcm9tOlxuICAvLyBodHRwOi8vbWF0aC5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMTA4MTEzL2ZpbmQtZWRnZS1iZXR3ZWVuLXR3by1ib3hlc1xuICB2YXIgZHggPSBwb2ludC54IC0geDtcbiAgdmFyIGR5ID0gcG9pbnQueSAtIHk7XG4gIHZhciB3ID0gcmVjdC53aWR0aCAvIDI7XG4gIHZhciBoID0gcmVjdC5oZWlnaHQgLyAyO1xuXG4gIGlmICghZHggJiYgIWR5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IHBvc3NpYmxlIHRvIGZpbmQgaW50ZXJzZWN0aW9uIGluc2lkZSBvZiB0aGUgcmVjdGFuZ2xlXCIpO1xuICB9XG5cbiAgdmFyIHN4LCBzeTtcbiAgaWYgKE1hdGguYWJzKGR5KSAqIHcgPiBNYXRoLmFicyhkeCkgKiBoKSB7XG4gICAgLy8gSW50ZXJzZWN0aW9uIGlzIHRvcCBvciBib3R0b20gb2YgcmVjdC5cbiAgICBpZiAoZHkgPCAwKSB7XG4gICAgICBoID0gLWg7XG4gICAgfVxuICAgIHN4ID0gaCAqIGR4IC8gZHk7XG4gICAgc3kgPSBoO1xuICB9IGVsc2Uge1xuICAgIC8vIEludGVyc2VjdGlvbiBpcyBsZWZ0IG9yIHJpZ2h0IG9mIHJlY3QuXG4gICAgaWYgKGR4IDwgMCkge1xuICAgICAgdyA9IC13O1xuICAgIH1cbiAgICBzeCA9IHc7XG4gICAgc3kgPSB3ICogZHkgLyBkeDtcbiAgfVxuXG4gIHJldHVybiB7IHg6IHggKyBzeCwgeTogeSArIHN5IH07XG59XG5cbi8qXG4gKiBHaXZlbiBhIERBRyB3aXRoIGVhY2ggbm9kZSBhc3NpZ25lZCBcInJhbmtcIiBhbmQgXCJvcmRlclwiIHByb3BlcnRpZXMsIHRoaXNcbiAqIGZ1bmN0aW9uIHdpbGwgcHJvZHVjZSBhIG1hdHJpeCB3aXRoIHRoZSBpZHMgb2YgZWFjaCBub2RlLlxuICovXG5mdW5jdGlvbiBidWlsZExheWVyTWF0cml4KGcpIHtcbiAgdmFyIGxheWVyaW5nID0gXy5tYXAoXy5yYW5nZShtYXhSYW5rKGcpICsgMSksIGZ1bmN0aW9uKCkgeyByZXR1cm4gW107IH0pO1xuICBfLmZvckVhY2goZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIG5vZGUgPSBnLm5vZGUodiksXG4gICAgICAgIHJhbmsgPSBub2RlLnJhbms7XG4gICAgaWYgKCFfLmlzVW5kZWZpbmVkKHJhbmspKSB7XG4gICAgICBsYXllcmluZ1tyYW5rXVtub2RlLm9yZGVyXSA9IHY7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxheWVyaW5nO1xufVxuXG4vKlxuICogQWRqdXN0cyB0aGUgcmFua3MgZm9yIGFsbCBub2RlcyBpbiB0aGUgZ3JhcGggc3VjaCB0aGF0IGFsbCBub2RlcyB2IGhhdmVcbiAqIHJhbmsodikgPj0gMCBhbmQgYXQgbGVhc3Qgb25lIG5vZGUgdyBoYXMgcmFuayh3KSA9IDAuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVJhbmtzKGcpIHtcbiAgdmFyIG1pbiA9IF8ubWluKF8ubWFwKGcubm9kZXMoKSwgZnVuY3Rpb24odikgeyByZXR1cm4gZy5ub2RlKHYpLnJhbms7IH0pKTtcbiAgXy5mb3JFYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIHZhciBub2RlID0gZy5ub2RlKHYpO1xuICAgIGlmIChfLmhhcyhub2RlLCBcInJhbmtcIikpIHtcbiAgICAgIG5vZGUucmFuayAtPSBtaW47XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRW1wdHlSYW5rcyhnKSB7XG4gIC8vIFJhbmtzIG1heSBub3Qgc3RhcnQgYXQgMCwgc28gd2UgbmVlZCB0byBvZmZzZXQgdGhlbVxuICB2YXIgb2Zmc2V0ID0gXy5taW4oXy5tYXAoZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7IHJldHVybiBnLm5vZGUodikucmFuazsgfSkpO1xuXG4gIHZhciBsYXllcnMgPSBbXTtcbiAgXy5mb3JFYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIHZhciByYW5rID0gZy5ub2RlKHYpLnJhbmsgLSBvZmZzZXQ7XG4gICAgaWYgKCFsYXllcnNbcmFua10pIHtcbiAgICAgIGxheWVyc1tyYW5rXSA9IFtdO1xuICAgIH1cbiAgICBsYXllcnNbcmFua10ucHVzaCh2KTtcbiAgfSk7XG5cbiAgdmFyIGRlbHRhID0gMCxcbiAgICAgIG5vZGVSYW5rRmFjdG9yID0gZy5ncmFwaCgpLm5vZGVSYW5rRmFjdG9yO1xuICBfLmZvckVhY2gobGF5ZXJzLCBmdW5jdGlvbih2cywgaSkge1xuICAgIGlmIChfLmlzVW5kZWZpbmVkKHZzKSAmJiBpICUgbm9kZVJhbmtGYWN0b3IgIT09IDApIHtcbiAgICAgIC0tZGVsdGE7XG4gICAgfSBlbHNlIGlmIChkZWx0YSkge1xuICAgICAgXy5mb3JFYWNoKHZzLCBmdW5jdGlvbih2KSB7IGcubm9kZSh2KS5yYW5rICs9IGRlbHRhOyB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRCb3JkZXJOb2RlKGcsIHByZWZpeCwgcmFuaywgb3JkZXIpIHtcbiAgdmFyIG5vZGUgPSB7XG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwXG4gIH07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIHtcbiAgICBub2RlLnJhbmsgPSByYW5rO1xuICAgIG5vZGUub3JkZXIgPSBvcmRlcjtcbiAgfVxuICByZXR1cm4gYWRkRHVtbXlOb2RlKGcsIFwiYm9yZGVyXCIsIG5vZGUsIHByZWZpeCk7XG59XG5cbmZ1bmN0aW9uIG1heFJhbmsoZykge1xuICByZXR1cm4gXy5tYXgoXy5tYXAoZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIHJhbmsgPSBnLm5vZGUodikucmFuaztcbiAgICBpZiAoIV8uaXNVbmRlZmluZWQocmFuaykpIHtcbiAgICAgIHJldHVybiByYW5rO1xuICAgIH1cbiAgfSkpO1xufVxuXG4vKlxuICogUGFydGl0aW9uIGEgY29sbGVjdGlvbiBpbnRvIHR3byBncm91cHM6IGBsaHNgIGFuZCBgcmhzYC4gSWYgdGhlIHN1cHBsaWVkXG4gKiBmdW5jdGlvbiByZXR1cm5zIHRydWUgZm9yIGFuIGVudHJ5IGl0IGdvZXMgaW50byBgbGhzYC4gT3RoZXJ3aXNlIGl0IGdvZXNcbiAqIGludG8gYHJocy5cbiAqL1xuZnVuY3Rpb24gcGFydGl0aW9uKGNvbGxlY3Rpb24sIGZuKSB7XG4gIHZhciByZXN1bHQgPSB7IGxoczogW10sIHJoczogW10gfTtcbiAgXy5mb3JFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGZuKHZhbHVlKSkge1xuICAgICAgcmVzdWx0Lmxocy5wdXNoKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnJocy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKlxuICogUmV0dXJucyBhIG5ldyBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmbmAgd2l0aCBhIHRpbWVyLiBUaGUgd3JhcHBlciBsb2dzIHRoZVxuICogdGltZSBpdCB0YWtlcyB0byBleGVjdXRlIHRoZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdGltZShuYW1lLCBmbikge1xuICB2YXIgc3RhcnQgPSBfLm5vdygpO1xuICB0cnkge1xuICAgIHJldHVybiBmbigpO1xuICB9IGZpbmFsbHkge1xuICAgIGNvbnNvbGUubG9nKG5hbWUgKyBcIiB0aW1lOiBcIiArIChfLm5vdygpIC0gc3RhcnQpICsgXCJtc1wiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBub3RpbWUobmFtZSwgZm4pIHtcbiAgcmV0dXJuIGZuKCk7XG59XG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBmdW5jdGlvbiBmaWx0ZXJPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEZpbHRlck9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpc0FyZykpO1xuICAgIH07XG59XG52YXIgRmlsdGVyT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmlsdGVyT3BlcmF0b3IocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgIH1cbiAgICBGaWx0ZXJPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEZpbHRlclN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcmVkaWNhdGUsIHRoaXMudGhpc0FyZykpO1xuICAgIH07XG4gICAgcmV0dXJuIEZpbHRlck9wZXJhdG9yO1xufSgpKTtcbnZhciBGaWx0ZXJTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEZpbHRlclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRmlsdGVyU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIF90aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgICAgICBfdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRmlsdGVyU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJlZGljYXRlLmNhbGwodGhpcy50aGlzQXJnLCB2YWx1ZSwgdGhpcy5jb3VudCsrKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEZpbHRlclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX29ic2VydmFibGVfZW1wdHksX29ic2VydmFibGVfb2YsX29ic2VydmFibGVfdGhyb3dFcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4vb2JzZXJ2YWJsZS9lbXB0eSc7XG5pbXBvcnQgeyBvZiB9IGZyb20gJy4vb2JzZXJ2YWJsZS9vZic7XG5pbXBvcnQgeyB0aHJvd0Vycm9yIH0gZnJvbSAnLi9vYnNlcnZhYmxlL3Rocm93RXJyb3InO1xuZXhwb3J0IHZhciBOb3RpZmljYXRpb25LaW5kO1xuLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKE5vdGlmaWNhdGlvbktpbmQpIHtcbiAgICBOb3RpZmljYXRpb25LaW5kW1wiTkVYVFwiXSA9IFwiTlwiO1xuICAgIE5vdGlmaWNhdGlvbktpbmRbXCJFUlJPUlwiXSA9IFwiRVwiO1xuICAgIE5vdGlmaWNhdGlvbktpbmRbXCJDT01QTEVURVwiXSA9IFwiQ1wiO1xufSkoTm90aWZpY2F0aW9uS2luZCB8fCAoTm90aWZpY2F0aW9uS2luZCA9IHt9KSk7XG52YXIgTm90aWZpY2F0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXJyb3IpIHtcbiAgICAgICAgdGhpcy5raW5kID0ga2luZDtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSBraW5kID09PSAnTic7XG4gICAgfVxuICAgIE5vdGlmaWNhdGlvbi5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICBzd2l0Y2ggKHRoaXMua2luZCkge1xuICAgICAgICAgICAgY2FzZSAnTic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLm5leHQgJiYgb2JzZXJ2ZXIubmV4dCh0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci5lcnJvciAmJiBvYnNlcnZlci5lcnJvcih0aGlzLmVycm9yKTtcbiAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci5jb21wbGV0ZSAmJiBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24ucHJvdG90eXBlLmRvID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIga2luZCA9IHRoaXMua2luZDtcbiAgICAgICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dCAmJiBuZXh0KHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgY2FzZSAnRSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yICYmIGVycm9yKHRoaXMuZXJyb3IpO1xuICAgICAgICAgICAgY2FzZSAnQyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlICYmIGNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyICYmIHR5cGVvZiBuZXh0T3JPYnNlcnZlci5uZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYnNlcnZlKG5leHRPck9ic2VydmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRvKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24ucHJvdG90eXBlLnRvT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGtpbmQgPSB0aGlzLmtpbmQ7XG4gICAgICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgICAgICAgY2FzZSAnTic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mKHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgY2FzZSAnRSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IodGhpcy5lcnJvcik7XG4gICAgICAgICAgICBjYXNlICdDJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZW1wdHkoKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuZXhwZWN0ZWQgbm90aWZpY2F0aW9uIGtpbmQgdmFsdWUnKTtcbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5jcmVhdGVOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vdGlmaWNhdGlvbignTicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTm90aWZpY2F0aW9uLnVuZGVmaW5lZFZhbHVlTm90aWZpY2F0aW9uO1xuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLmNyZWF0ZUVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICByZXR1cm4gbmV3IE5vdGlmaWNhdGlvbignRScsIHVuZGVmaW5lZCwgZXJyKTtcbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5jcmVhdGVDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIE5vdGlmaWNhdGlvbi5jb21wbGV0ZU5vdGlmaWNhdGlvbjtcbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5jb21wbGV0ZU5vdGlmaWNhdGlvbiA9IG5ldyBOb3RpZmljYXRpb24oJ0MnKTtcbiAgICBOb3RpZmljYXRpb24udW5kZWZpbmVkVmFsdWVOb3RpZmljYXRpb24gPSBuZXcgTm90aWZpY2F0aW9uKCdOJywgdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gTm90aWZpY2F0aW9uO1xufSgpKTtcbmV4cG9ydCB7IE5vdGlmaWNhdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpY2F0aW9uLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkZW50aXR5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN5bWJvbEl0ZXJhdG9yKCkge1xuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8ICFTeW1ib2wuaXRlcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuICdAQGl0ZXJhdG9yJztcbiAgICB9XG4gICAgcmV0dXJuIFN5bWJvbC5pdGVyYXRvcjtcbn1cbmV4cG9ydCB2YXIgaXRlcmF0b3IgPSAvKkBfX1BVUkVfXyovIGdldFN5bWJvbEl0ZXJhdG9yKCk7XG5leHBvcnQgdmFyICQkaXRlcmF0b3IgPSBpdGVyYXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcFxuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuXG52YXIgbG9kYXNoO1xuXG5pZiAodHlwZW9mIHJlcXVpcmUgPT09IFwiZnVuY3Rpb25cIikge1xuICB0cnkge1xuICAgIGxvZGFzaCA9IHtcbiAgICAgIGNsb25lOiByZXF1aXJlKFwibG9kYXNoL2Nsb25lXCIpLFxuICAgICAgY29uc3RhbnQ6IHJlcXVpcmUoXCJsb2Rhc2gvY29uc3RhbnRcIiksXG4gICAgICBlYWNoOiByZXF1aXJlKFwibG9kYXNoL2VhY2hcIiksXG4gICAgICBmaWx0ZXI6IHJlcXVpcmUoXCJsb2Rhc2gvZmlsdGVyXCIpLFxuICAgICAgaGFzOiAgcmVxdWlyZShcImxvZGFzaC9oYXNcIiksXG4gICAgICBpc0FycmF5OiByZXF1aXJlKFwibG9kYXNoL2lzQXJyYXlcIiksXG4gICAgICBpc0VtcHR5OiByZXF1aXJlKFwibG9kYXNoL2lzRW1wdHlcIiksXG4gICAgICBpc0Z1bmN0aW9uOiByZXF1aXJlKFwibG9kYXNoL2lzRnVuY3Rpb25cIiksXG4gICAgICBpc1VuZGVmaW5lZDogcmVxdWlyZShcImxvZGFzaC9pc1VuZGVmaW5lZFwiKSxcbiAgICAgIGtleXM6IHJlcXVpcmUoXCJsb2Rhc2gva2V5c1wiKSxcbiAgICAgIG1hcDogcmVxdWlyZShcImxvZGFzaC9tYXBcIiksXG4gICAgICByZWR1Y2U6IHJlcXVpcmUoXCJsb2Rhc2gvcmVkdWNlXCIpLFxuICAgICAgc2l6ZTogcmVxdWlyZShcImxvZGFzaC9zaXplXCIpLFxuICAgICAgdHJhbnNmb3JtOiByZXF1aXJlKFwibG9kYXNoL3RyYW5zZm9ybVwiKSxcbiAgICAgIHVuaW9uOiByZXF1aXJlKFwibG9kYXNoL3VuaW9uXCIpLFxuICAgICAgdmFsdWVzOiByZXF1aXJlKFwibG9kYXNoL3ZhbHVlc1wiKVxuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbmlmICghbG9kYXNoKSB7XG4gIGxvZGFzaCA9IHdpbmRvdy5fO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxvZGFzaDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IHZhciBvYnNlcnZhYmxlID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSB8fCAnQEBvYnNlcnZhYmxlJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5mdW5jdGlvbiBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGwoKSB7XG4gICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSAnb2JqZWN0IHVuc3Vic2NyaWJlZCc7XG4gICAgdGhpcy5uYW1lID0gJ09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbiAgICByZXR1cm4gdGhpcztcbn1cbk9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbC5wcm90b3R5cGUgPSAvKkBfX1BVUkVfXyovIE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbmV4cG9ydCB2YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcy5tYXBcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cblxudmFyIGdyYXBobGliO1xuXG5pZiAodHlwZW9mIHJlcXVpcmUgPT09IFwiZnVuY3Rpb25cIikge1xuICB0cnkge1xuICAgIGdyYXBobGliID0gcmVxdWlyZShcImdyYXBobGliXCIpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG5pZiAoIWdyYXBobGliKSB7XG4gIGdyYXBobGliID0gd2luZG93LmdyYXBobGliO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdyYXBobGliO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCxfT3V0ZXJTdWJzY3JpYmVyLF9Jbm5lclN1YnNjcmliZXIsX21hcCxfb2JzZXJ2YWJsZV9mcm9tIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IElubmVyU3Vic2NyaWJlciB9IGZyb20gJy4uL0lubmVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL21hcCc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHtcbiAgICAgICAgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLnBpcGUobWVyZ2VNYXAoZnVuY3Rpb24gKGEsIGkpIHsgcmV0dXJuIGZyb20ocHJvamVjdChhLCBpKSkucGlwZShtYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKTsgfSwgY29uY3VycmVudCkpOyB9O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBNZXJnZU1hcE9wZXJhdG9yKHByb2plY3QsIGNvbmN1cnJlbnQpKTsgfTtcbn1cbnZhciBNZXJnZU1hcE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lcmdlTWFwT3BlcmF0b3IocHJvamVjdCwgY29uY3VycmVudCkge1xuICAgICAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIHRoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG4gICAgfVxuICAgIE1lcmdlTWFwT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgTWVyZ2VNYXBTdWJzY3JpYmVyKG9ic2VydmVyLCB0aGlzLnByb2plY3QsIHRoaXMuY29uY3VycmVudCkpO1xuICAgIH07XG4gICAgcmV0dXJuIE1lcmdlTWFwT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0IHsgTWVyZ2VNYXBPcGVyYXRvciB9O1xudmFyIE1lcmdlTWFwU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhNZXJnZU1hcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWVyZ2VNYXBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcm9qZWN0LCBjb25jdXJyZW50KSB7XG4gICAgICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICBfdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcbiAgICAgICAgX3RoaXMuaGFzQ29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICBfdGhpcy5hY3RpdmUgPSAwO1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPCB0aGlzLmNvbmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyeU5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeU5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0KHZhbHVlLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aXZlKys7XG4gICAgICAgIHRoaXMuX2lubmVyU3ViKHJlc3VsdCwgdmFsdWUsIGluZGV4KTtcbiAgICB9O1xuICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2lubmVyU3ViID0gZnVuY3Rpb24gKGlzaCwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBuZXcgSW5uZXJTdWJzY3JpYmVyKHRoaXMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24uYWRkKGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgIHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGlzaCwgdmFsdWUsIGluZGV4LCBpbm5lclN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgdGhpcy5yZW1vdmUoaW5uZXJTdWIpO1xuICAgICAgICB0aGlzLmFjdGl2ZS0tO1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQoYnVmZmVyLnNoaWZ0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBNZXJnZU1hcFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgTWVyZ2VNYXBTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmZ1bmN0aW9uIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9ySW1wbCgpIHtcbiAgICBFcnJvci5jYWxsKHRoaXMpO1xuICAgIHRoaXMubWVzc2FnZSA9ICdhcmd1bWVudCBvdXQgb2YgcmFuZ2UnO1xuICAgIHRoaXMubmFtZSA9ICdBcmd1bWVudE91dE9mUmFuZ2VFcnJvcic7XG4gICAgcmV0dXJuIHRoaXM7XG59XG5Bcmd1bWVudE91dE9mUmFuZ2VFcnJvckltcGwucHJvdG90eXBlID0gLypAX19QVVJFX18qLyBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5leHBvcnQgdmFyIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yID0gQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JJbXBsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXJndW1lbnRPdXRPZlJhbmdlRXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXBcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmZ1bmN0aW9uIEVtcHR5RXJyb3JJbXBsKCkge1xuICAgIEVycm9yLmNhbGwodGhpcyk7XG4gICAgdGhpcy5tZXNzYWdlID0gJ25vIGVsZW1lbnRzIGluIHNlcXVlbmNlJztcbiAgICB0aGlzLm5hbWUgPSAnRW1wdHlFcnJvcic7XG4gICAgcmV0dXJuIHRoaXM7XG59XG5FbXB0eUVycm9ySW1wbC5wcm90b3R5cGUgPSAvKkBfX1BVUkVfXyovIE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbmV4cG9ydCB2YXIgRW1wdHlFcnJvciA9IEVtcHR5RXJyb3JJbXBsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW1wdHlFcnJvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfc3Vic2NyaWJlVG9BcnJheSxfc2NoZWR1bGVkX3NjaGVkdWxlQXJyYXkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9BcnJheSB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9BcnJheSc7XG5pbXBvcnQgeyBzY2hlZHVsZUFycmF5IH0gZnJvbSAnLi4vc2NoZWR1bGVkL3NjaGVkdWxlQXJyYXknO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21BcnJheShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKCFzY2hlZHVsZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZVRvQXJyYXkoaW5wdXQpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21BcnJheS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU2NoZWR1bGVyIH0gZnJvbSAnLi4vU2NoZWR1bGVyJztcbnZhciBBc3luY1NjaGVkdWxlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBc3luY1NjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY1NjaGVkdWxlcihTY2hlZHVsZXJBY3Rpb24sIG5vdykge1xuICAgICAgICBpZiAobm93ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIG5vdyA9IFNjaGVkdWxlci5ub3c7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgU2NoZWR1bGVyQWN0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoQXN5bmNTY2hlZHVsZXIuZGVsZWdhdGUgJiYgQXN5bmNTY2hlZHVsZXIuZGVsZWdhdGUgIT09IF90aGlzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFzeW5jU2NoZWR1bGVyLmRlbGVnYXRlLm5vdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hY3Rpb25zID0gW107XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHdvcmssIGRlbGF5LCBzdGF0ZSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBc3luY1NjaGVkdWxlci5kZWxlZ2F0ZSAmJiBBc3luY1NjaGVkdWxlci5kZWxlZ2F0ZSAhPT0gdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIEFzeW5jU2NoZWR1bGVyLmRlbGVnYXRlLnNjaGVkdWxlKHdvcmssIGRlbGF5LCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5zY2hlZHVsZS5jYWxsKHRoaXMsIHdvcmssIGRlbGF5LCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlIChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXI7XG59KFNjaGVkdWxlcikpO1xuZXhwb3J0IHsgQXN5bmNTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jU2NoZWR1bGVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3ViamVjdCxfU3Vic2NyaXB0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi9TdWJqZWN0JztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbnZhciBBc3luY1N1YmplY3QgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQXN5bmNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jU3ViamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuaGFzTmV4dCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oYXNDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY1N1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBpZiAodGhpcy5oYXNFcnJvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih0aGlzLnRocm93bkVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBTdWJzY3JpcHRpb24uRU1QVFk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5oYXNDb21wbGV0ZWQgJiYgdGhpcy5oYXNOZXh0KSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl9zdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIEFzeW5jU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLmhhc05leHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZXJyb3IuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuaGFzTmV4dCkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgdGhpcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jU3ViamVjdDtcbn0oU3ViamVjdCkpO1xuZXhwb3J0IHsgQXN5bmNTdWJqZWN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luY1N1YmplY3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpcHRpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG52YXIgQWN0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIEFjdGlvbjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBBY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX0FjdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi9BY3Rpb24nO1xudmFyIEFzeW5jQWN0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEFzeW5jQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIF90aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmlkIHx8IHRoaXMucmVxdWVzdEFzeW5jSWQoc2NoZWR1bGVyLCB0aGlzLmlkLCBkZWxheSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldEludGVydmFsKHNjaGVkdWxlci5mbHVzaC5iaW5kKHNjaGVkdWxlciwgdGhpcyksIGRlbGF5KTtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWxheSAhPT0gbnVsbCAmJiB0aGlzLmRlbGF5ID09PSBkZWxheSAmJiB0aGlzLnBlbmRpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJJbnRlcnZhbChpZCk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdleGVjdXRpbmcgYSBjYW5jZWxsZWQgYWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvciA9IHRoaXMuX2V4ZWN1dGUoc3RhdGUsIGRlbGF5KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wZW5kaW5nID09PSBmYWxzZSAmJiB0aGlzLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHRoaXMuc2NoZWR1bGVyLCB0aGlzLmlkLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLl9leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICB2YXIgZXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3JWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud29yayhzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yZWQgPSB0cnVlO1xuICAgICAgICAgICAgZXJyb3JWYWx1ZSA9ICEhZSAmJiBlIHx8IG5ldyBFcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3JlZCkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yVmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcbiAgICAgICAgdmFyIGluZGV4ID0gYWN0aW9ucy5pbmRleE9mKHRoaXMpO1xuICAgICAgICB0aGlzLndvcmsgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gbnVsbDtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgYWN0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGF5ID0gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBBc3luY0FjdGlvbjtcbn0oQWN0aW9uKSk7XG5leHBvcnQgeyBBc3luY0FjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNBY3Rpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9pc0FycmF5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuL2lzQXJyYXknO1xuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtZXJpYyh2YWwpIHtcbiAgICByZXR1cm4gIWlzQXJyYXkodmFsKSAmJiAodmFsIC0gcGFyc2VGbG9hdCh2YWwpICsgMSkgPj0gMDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzTnVtZXJpYy5qcy5tYXBcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXlMaWtlO1xuIiwidmFyIGJhc2VNYXRjaGVzID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXMnKSxcbiAgICBiYXNlTWF0Y2hlc1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXNQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBwcm9wZXJ0eSA9IHJlcXVpcmUoJy4vcHJvcGVydHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXRlcmF0ZWU7XG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9vZixfb3BlcmF0b3JzX2NvbmNhdEFsbCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBvZiB9IGZyb20gJy4vb2YnO1xuaW1wb3J0IHsgY29uY2F0QWxsIH0gZnJvbSAnLi4vb3BlcmF0b3JzL2NvbmNhdEFsbCc7XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0KCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBjb25jYXRBbGwoKShvZi5hcHBseSh2b2lkIDAsIG9ic2VydmFibGVzKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaG9zdFJlcG9ydEVycm9yKGVycikge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyB0aHJvdyBlcnI7IH0sIDApO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG9zdFJlcG9ydEVycm9yLmpzLm1hcFxuIiwidmFyIGFycmF5TGlrZUtleXMgPSByZXF1aXJlKCcuL19hcnJheUxpa2VLZXlzJyksXG4gICAgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzO1xuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9pc1NjaGVkdWxlcixfZnJvbUFycmF5LF9zY2hlZHVsZWRfc2NoZWR1bGVBcnJheSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvaXNTY2hlZHVsZXInO1xuaW1wb3J0IHsgZnJvbUFycmF5IH0gZnJvbSAnLi9mcm9tQXJyYXknO1xuaW1wb3J0IHsgc2NoZWR1bGVBcnJheSB9IGZyb20gJy4uL3NjaGVkdWxlZC9zY2hlZHVsZUFycmF5JztcbmV4cG9ydCBmdW5jdGlvbiBvZigpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNjaGVkdWxlciA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICBpZiAoaXNTY2hlZHVsZXIoc2NoZWR1bGVyKSkge1xuICAgICAgICBhcmdzLnBvcCgpO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVBcnJheShhcmdzLCBzY2hlZHVsZXIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZyb21BcnJheShhcmdzKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vZi5qcy5tYXBcbiIsInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaWRlbnRpdHk7XG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9ub29wIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuL25vb3AnO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKCFmbnMpIHtcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfVxuICAgIGlmIChmbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBmbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBwaXBlZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZm5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZm4pIHsgcmV0dXJuIGZuKHByZXYpOyB9LCBpbnB1dCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgdmFyIHJ4U3Vic2NyaWJlciA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbidcbiAgICA/IC8qQF9fUFVSRV9fKi8gU3ltYm9sKCdyeFN1YnNjcmliZXInKVxuICAgIDogJ0BAcnhTdWJzY3JpYmVyXycgKyAvKkBfX1BVUkVfXyovIE1hdGgucmFuZG9tKCk7XG5leHBvcnQgdmFyICQkcnhTdWJzY3JpYmVyID0gcnhTdWJzY3JpYmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnhTdWJzY3JpYmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvckltcGwoZXJyb3JzKSB7XG4gICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcnMgP1xuICAgICAgICBlcnJvcnMubGVuZ3RoICsgXCIgZXJyb3JzIG9jY3VycmVkIGR1cmluZyB1bnN1YnNjcmlwdGlvbjpcXG5cIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gaSArIDEgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKTsgfSkuam9pbignXFxuICAnKSA6ICcnO1xuICAgIHRoaXMubmFtZSA9ICdVbnN1YnNjcmlwdGlvbkVycm9yJztcbiAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICByZXR1cm4gdGhpcztcbn1cblVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsLnByb3RvdHlwZSA9IC8qQF9fUFVSRV9fKi8gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuZXhwb3J0IHZhciBVbnN1YnNjcmlwdGlvbkVycm9yID0gVW5zdWJzY3JpcHRpb25FcnJvckltcGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VbnN1YnNjcmlwdGlvbkVycm9yLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc3Vic2NyaWJlVG9BcnJheSxfc3Vic2NyaWJlVG9Qcm9taXNlLF9zdWJzY3JpYmVUb0l0ZXJhYmxlLF9zdWJzY3JpYmVUb09ic2VydmFibGUsX2lzQXJyYXlMaWtlLF9pc1Byb21pc2UsX2lzT2JqZWN0LF9zeW1ib2xfaXRlcmF0b3IsX3N5bWJvbF9vYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IHN1YnNjcmliZVRvQXJyYXkgfSBmcm9tICcuL3N1YnNjcmliZVRvQXJyYXknO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9Qcm9taXNlIH0gZnJvbSAnLi9zdWJzY3JpYmVUb1Byb21pc2UnO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9JdGVyYWJsZSB9IGZyb20gJy4vc3Vic2NyaWJlVG9JdGVyYWJsZSc7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb09ic2VydmFibGUgfSBmcm9tICcuL3N1YnNjcmliZVRvT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4vaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi9pc1Byb21pc2UnO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuL2lzT2JqZWN0JztcbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IHZhciBzdWJzY3JpYmVUbyA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICBpZiAoISFyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdFtTeW1ib2xfb2JzZXJ2YWJsZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZVRvT2JzZXJ2YWJsZShyZXN1bHQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0FycmF5TGlrZShyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVUb0FycmF5KHJlc3VsdCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVUb1Byb21pc2UocmVzdWx0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoISFyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdFtTeW1ib2xfaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVUb0l0ZXJhYmxlKHJlc3VsdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgdmFsdWUgPSBpc09iamVjdChyZXN1bHQpID8gJ2FuIGludmFsaWQgb2JqZWN0JyA6IFwiJ1wiICsgcmVzdWx0ICsgXCInXCI7XG4gICAgICAgIHZhciBtc2cgPSBcIllvdSBwcm92aWRlZCBcIiArIHZhbHVlICsgXCIgd2hlcmUgYSBzdHJlYW0gd2FzIGV4cGVjdGVkLlwiXG4gICAgICAgICAgICArICcgWW91IGNhbiBwcm92aWRlIGFuIE9ic2VydmFibGUsIFByb21pc2UsIEFycmF5LCBvciBJdGVyYWJsZS4nO1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG1zZyk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc3ltYm9sX29ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCB2YXIgc3Vic2NyaWJlVG9PYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgb2JzID0gb2JqW1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xuICAgICAgICBpZiAodHlwZW9mIG9icy5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3ZpZGVkIG9iamVjdCBkb2VzIG5vdCBjb3JyZWN0bHkgaW1wbGVtZW50IFN5bWJvbC5vYnNlcnZhYmxlJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG9PYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfaG9zdFJlcG9ydEVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGhvc3RSZXBvcnRFcnJvciB9IGZyb20gJy4vaG9zdFJlcG9ydEVycm9yJztcbmV4cG9ydCB2YXIgc3Vic2NyaWJlVG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pXG4gICAgICAgICAgICAudGhlbihudWxsLCBob3N0UmVwb3J0RXJyb3IpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvUHJvbWlzZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3N5bWJvbF9pdGVyYXRvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuZXhwb3J0IHZhciBzdWJzY3JpYmVUb0l0ZXJhYmxlID0gZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlW1N5bWJvbF9pdGVyYXRvcl0oKTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICBpZiAoaXRlbS5kb25lKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGl0ZW0udmFsdWUpO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKHRydWUpO1xuICAgICAgICBpZiAodHlwZW9mIGl0ZXJhdG9yLnJldHVybiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVUb0l0ZXJhYmxlLmpzLm1hcFxuIiwiLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXE7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIiwidmFyIGFycmF5TGlrZUtleXMgPSByZXF1aXJlKCcuL19hcnJheUxpa2VLZXlzJyksXG4gICAgYmFzZUtleXNJbiA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzSW4nKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5c0luKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5c0luO1xuIiwidmFyIERhdGFWaWV3ID0gcmVxdWlyZSgnLi9fRGF0YVZpZXcnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBQcm9taXNlID0gcmVxdWlyZSgnLi9fUHJvbWlzZScpLFxuICAgIFNldCA9IHJlcXVpcmUoJy4vX1NldCcpLFxuICAgIFdlYWtNYXAgPSByZXF1aXJlKCcuL19XZWFrTWFwJyksXG4gICAgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGFnO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHJlZkNvdW50KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiByZWZDb3VudE9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgUmVmQ291bnRPcGVyYXRvcihzb3VyY2UpKTtcbiAgICB9O1xufVxudmFyIFJlZkNvdW50T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVmQ291bnRPcGVyYXRvcihjb25uZWN0YWJsZSkge1xuICAgICAgICB0aGlzLmNvbm5lY3RhYmxlID0gY29ubmVjdGFibGU7XG4gICAgfVxuICAgIFJlZkNvdW50T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHZhciBjb25uZWN0YWJsZSA9IHRoaXMuY29ubmVjdGFibGU7XG4gICAgICAgIGNvbm5lY3RhYmxlLl9yZWZDb3VudCsrO1xuICAgICAgICB2YXIgcmVmQ291bnRlciA9IG5ldyBSZWZDb3VudFN1YnNjcmliZXIoc3Vic2NyaWJlciwgY29ubmVjdGFibGUpO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gc291cmNlLnN1YnNjcmliZShyZWZDb3VudGVyKTtcbiAgICAgICAgaWYgKCFyZWZDb3VudGVyLmNsb3NlZCkge1xuICAgICAgICAgICAgcmVmQ291bnRlci5jb25uZWN0aW9uID0gY29ubmVjdGFibGUuY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICByZXR1cm4gUmVmQ291bnRPcGVyYXRvcjtcbn0oKSk7XG52YXIgUmVmQ291bnRTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFJlZkNvdW50U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZWZDb3VudFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNvbm5lY3RhYmxlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb25uZWN0YWJsZSA9IGNvbm5lY3RhYmxlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJlZkNvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29ubmVjdGFibGUgPSB0aGlzLmNvbm5lY3RhYmxlO1xuICAgICAgICBpZiAoIWNvbm5lY3RhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29ubmVjdGFibGUgPSBudWxsO1xuICAgICAgICB2YXIgcmVmQ291bnQgPSBjb25uZWN0YWJsZS5fcmVmQ291bnQ7XG4gICAgICAgIGlmIChyZWZDb3VudCA8PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3RhYmxlLl9yZWZDb3VudCA9IHJlZkNvdW50IC0gMTtcbiAgICAgICAgaWYgKHJlZkNvdW50ID4gMSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbjtcbiAgICAgICAgdmFyIHNoYXJlZENvbm5lY3Rpb24gPSBjb25uZWN0YWJsZS5fY29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgaWYgKHNoYXJlZENvbm5lY3Rpb24gJiYgKCFjb25uZWN0aW9uIHx8IHNoYXJlZENvbm5lY3Rpb24gPT09IGNvbm5lY3Rpb24pKSB7XG4gICAgICAgICAgICBzaGFyZWRDb25uZWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBSZWZDb3VudFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZkNvdW50LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3ViamVjdCxfc2NoZWR1bGVyX3F1ZXVlLF9TdWJzY3JpcHRpb24sX29wZXJhdG9yc19vYnNlcnZlT24sX3V0aWxfT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IsX1N1YmplY3RTdWJzY3JpcHRpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuL1N1YmplY3QnO1xuaW1wb3J0IHsgcXVldWUgfSBmcm9tICcuL3NjaGVkdWxlci9xdWV1ZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBPYnNlcnZlT25TdWJzY3JpYmVyIH0gZnJvbSAnLi9vcGVyYXRvcnMvb2JzZXJ2ZU9uJztcbmltcG9ydCB7IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yIH0gZnJvbSAnLi91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbmltcG9ydCB7IFN1YmplY3RTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YmplY3RTdWJzY3JpcHRpb24nO1xudmFyIFJlcGxheVN1YmplY3QgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoUmVwbGF5U3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXBsYXlTdWJqZWN0KGJ1ZmZlclNpemUsIHdpbmRvd1RpbWUsIHNjaGVkdWxlcikge1xuICAgICAgICBpZiAoYnVmZmVyU2l6ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBidWZmZXJTaXplID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3aW5kb3dUaW1lID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHdpbmRvd1RpbWUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5fZXZlbnRzID0gW107XG4gICAgICAgIF90aGlzLl9pbmZpbml0ZVRpbWVXaW5kb3cgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuX2J1ZmZlclNpemUgPSBidWZmZXJTaXplIDwgMSA/IDEgOiBidWZmZXJTaXplO1xuICAgICAgICBfdGhpcy5fd2luZG93VGltZSA9IHdpbmRvd1RpbWUgPCAxID8gMSA6IHdpbmRvd1RpbWU7XG4gICAgICAgIGlmICh3aW5kb3dUaW1lID09PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpIHtcbiAgICAgICAgICAgIF90aGlzLl9pbmZpbml0ZVRpbWVXaW5kb3cgPSB0cnVlO1xuICAgICAgICAgICAgX3RoaXMubmV4dCA9IF90aGlzLm5leHRJbmZpbml0ZVRpbWVXaW5kb3c7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5uZXh0ID0gX3RoaXMubmV4dFRpbWVXaW5kb3c7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSZXBsYXlTdWJqZWN0LnByb3RvdHlwZS5uZXh0SW5maW5pdGVUaW1lV2luZG93ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgICBfZXZlbnRzLnB1c2godmFsdWUpO1xuICAgICAgICBpZiAoX2V2ZW50cy5sZW5ndGggPiB0aGlzLl9idWZmZXJTaXplKSB7XG4gICAgICAgICAgICBfZXZlbnRzLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgdmFsdWUpO1xuICAgIH07XG4gICAgUmVwbGF5U3ViamVjdC5wcm90b3R5cGUubmV4dFRpbWVXaW5kb3cgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzLnB1c2gobmV3IFJlcGxheUV2ZW50KHRoaXMuX2dldE5vdygpLCB2YWx1ZSkpO1xuICAgICAgICB0aGlzLl90cmltQnVmZmVyVGhlbkdldEV2ZW50cygpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5leHQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBSZXBsYXlTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9pbmZpbml0ZVRpbWVXaW5kb3cgPSB0aGlzLl9pbmZpbml0ZVRpbWVXaW5kb3c7XG4gICAgICAgIHZhciBfZXZlbnRzID0gX2luZmluaXRlVGltZVdpbmRvdyA/IHRoaXMuX2V2ZW50cyA6IHRoaXMuX3RyaW1CdWZmZXJUaGVuR2V0RXZlbnRzKCk7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgdmFyIGxlbiA9IF9ldmVudHMubGVuZ3RoO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNTdG9wcGVkIHx8IHRoaXMuaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlcik7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBuZXcgU3ViamVjdFN1YnNjcmlwdGlvbih0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChzdWJzY3JpYmVyID0gbmV3IE9ic2VydmVPblN1YnNjcmliZXIoc3Vic2NyaWJlciwgc2NoZWR1bGVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9pbmZpbml0ZVRpbWVXaW5kb3cpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KF9ldmVudHNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW4gJiYgIXN1YnNjcmliZXIuY2xvc2VkOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoX2V2ZW50c1tpXS52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IodGhpcy50aHJvd25FcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgUmVwbGF5U3ViamVjdC5wcm90b3R5cGUuX2dldE5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnNjaGVkdWxlciB8fCBxdWV1ZSkubm93KCk7XG4gICAgfTtcbiAgICBSZXBsYXlTdWJqZWN0LnByb3RvdHlwZS5fdHJpbUJ1ZmZlclRoZW5HZXRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub3cgPSB0aGlzLl9nZXROb3coKTtcbiAgICAgICAgdmFyIF9idWZmZXJTaXplID0gdGhpcy5fYnVmZmVyU2l6ZTtcbiAgICAgICAgdmFyIF93aW5kb3dUaW1lID0gdGhpcy5fd2luZG93VGltZTtcbiAgICAgICAgdmFyIF9ldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICAgIHZhciBldmVudHNDb3VudCA9IF9ldmVudHMubGVuZ3RoO1xuICAgICAgICB2YXIgc3BsaWNlQ291bnQgPSAwO1xuICAgICAgICB3aGlsZSAoc3BsaWNlQ291bnQgPCBldmVudHNDb3VudCkge1xuICAgICAgICAgICAgaWYgKChub3cgLSBfZXZlbnRzW3NwbGljZUNvdW50XS50aW1lKSA8IF93aW5kb3dUaW1lKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcGxpY2VDb3VudCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudHNDb3VudCA+IF9idWZmZXJTaXplKSB7XG4gICAgICAgICAgICBzcGxpY2VDb3VudCA9IE1hdGgubWF4KHNwbGljZUNvdW50LCBldmVudHNDb3VudCAtIF9idWZmZXJTaXplKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3BsaWNlQ291bnQgPiAwKSB7XG4gICAgICAgICAgICBfZXZlbnRzLnNwbGljZSgwLCBzcGxpY2VDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9ldmVudHM7XG4gICAgfTtcbiAgICByZXR1cm4gUmVwbGF5U3ViamVjdDtcbn0oU3ViamVjdCkpO1xuZXhwb3J0IHsgUmVwbGF5U3ViamVjdCB9O1xudmFyIFJlcGxheUV2ZW50ID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlcGxheUV2ZW50KHRpbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudGltZSA9IHRpbWU7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIFJlcGxheUV2ZW50O1xufSgpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlcGxheVN1YmplY3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiB0aHJvd0Vycm9yKGVycm9yLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIXNjaGVkdWxlcikge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyb3IpOyB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCAwLCB7IGVycm9yOiBlcnJvciwgc3Vic2NyaWJlcjogc3Vic2NyaWJlciB9KTsgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGlzcGF0Y2goX2EpIHtcbiAgICB2YXIgZXJyb3IgPSBfYS5lcnJvciwgc3Vic2NyaWJlciA9IF9hLnN1YnNjcmliZXI7XG4gICAgc3Vic2NyaWJlci5lcnJvcihlcnJvcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd0Vycm9yLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfdXRpbF9pc1NjaGVkdWxlcixfdXRpbF9pc0FycmF5LF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQsX2Zyb21BcnJheSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5pbXBvcnQgeyBmcm9tQXJyYXkgfSBmcm9tICcuL2Zyb21BcnJheSc7XG52YXIgTk9ORSA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVMYXRlc3QoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdFNlbGVjdG9yID0gbnVsbDtcbiAgICB2YXIgc2NoZWR1bGVyID0gbnVsbDtcbiAgICBpZiAoaXNTY2hlZHVsZXIob2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IG9ic2VydmFibGVzLnBvcCgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9ic2VydmFibGVzW29ic2VydmFibGVzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlc3VsdFNlbGVjdG9yID0gb2JzZXJ2YWJsZXMucG9wKCk7XG4gICAgfVxuICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShvYnNlcnZhYmxlc1swXSkpIHtcbiAgICAgICAgb2JzZXJ2YWJsZXMgPSBvYnNlcnZhYmxlc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheShvYnNlcnZhYmxlcywgc2NoZWR1bGVyKS5saWZ0KG5ldyBDb21iaW5lTGF0ZXN0T3BlcmF0b3IocmVzdWx0U2VsZWN0b3IpKTtcbn1cbnZhciBDb21iaW5lTGF0ZXN0T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29tYmluZUxhdGVzdE9wZXJhdG9yKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMucmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgQ29tYmluZUxhdGVzdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgQ29tYmluZUxhdGVzdFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5yZXN1bHRTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbWJpbmVMYXRlc3RPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBDb21iaW5lTGF0ZXN0T3BlcmF0b3IgfTtcbnZhciBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb21iaW5lTGF0ZXN0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IDA7XG4gICAgICAgIF90aGlzLnZhbHVlcyA9IFtdO1xuICAgICAgICBfdGhpcy5vYnNlcnZhYmxlcyA9IFtdO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uIChvYnNlcnZhYmxlKSB7XG4gICAgICAgIHRoaXMudmFsdWVzLnB1c2goTk9ORSk7XG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZXMucHVzaChvYnNlcnZhYmxlKTtcbiAgICB9O1xuICAgIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlcyA9IHRoaXMub2JzZXJ2YWJsZXM7XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZhYmxlcy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gbGVuO1xuICAgICAgICAgICAgdGhpcy50b1Jlc3BvbmQgPSBsZW47XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBvYnNlcnZhYmxlc1tpXTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBvYnNlcnZhYmxlLCBvYnNlcnZhYmxlLCBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICh1bnVzZWQpIHtcbiAgICAgICAgaWYgKCh0aGlzLmFjdGl2ZSAtPSAxKSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG4gICAgICAgIHZhciBvbGRWYWwgPSB2YWx1ZXNbb3V0ZXJJbmRleF07XG4gICAgICAgIHZhciB0b1Jlc3BvbmQgPSAhdGhpcy50b1Jlc3BvbmRcbiAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgOiBvbGRWYWwgPT09IE5PTkUgPyAtLXRoaXMudG9SZXNwb25kIDogdGhpcy50b1Jlc3BvbmQ7XG4gICAgICAgIHZhbHVlc1tvdXRlckluZGV4XSA9IGlubmVyVmFsdWU7XG4gICAgICAgIGlmICh0b1Jlc3BvbmQgPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJ5UmVzdWx0U2VsZWN0b3IodmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZXMuc2xpY2UoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5UmVzdWx0U2VsZWN0b3IgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnJlc3VsdFNlbGVjdG9yLmFwcGx5KHRoaXMsIHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChyZXN1bHQpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21iaW5lTGF0ZXN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfbWVyZ2VNYXAsX3V0aWxfaWRlbnRpdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuL21lcmdlTWFwJztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vdXRpbC9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VBbGwoY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHtcbiAgICAgICAgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlTWFwKGlkZW50aXR5LCBjb25jdXJyZW50KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlQWxsLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfZnJvbSxfZW1wdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4vZnJvbSc7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4vZW1wdHknO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmVyKG9ic2VydmFibGVGYWN0b3J5KSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbnB1dDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlucHV0ID0gb2JzZXJ2YWJsZUZhY3RvcnkoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzb3VyY2UgPSBpbnB1dCA/IGZyb20oaW5wdXQpIDogZW1wdHkoKTtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX2Zyb21BcnJheSxfdXRpbF9pc0FycmF5LF9TdWJzY3JpYmVyLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQsXy4uX2ludGVybmFsX3N5bWJvbF9pdGVyYXRvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgZnJvbUFycmF5IH0gZnJvbSAnLi9mcm9tQXJyYXknO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheSc7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uLy4uL2ludGVybmFsL3N5bWJvbC9pdGVyYXRvcic7XG5leHBvcnQgZnVuY3Rpb24gemlwKCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHRTZWxlY3RvciA9IG9ic2VydmFibGVzW29ic2VydmFibGVzLmxlbmd0aCAtIDFdO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb2JzZXJ2YWJsZXMucG9wKCk7XG4gICAgfVxuICAgIHJldHVybiBmcm9tQXJyYXkob2JzZXJ2YWJsZXMsIHVuZGVmaW5lZCkubGlmdChuZXcgWmlwT3BlcmF0b3IocmVzdWx0U2VsZWN0b3IpKTtcbn1cbnZhciBaaXBPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBaaXBPcGVyYXRvcihyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgfVxuICAgIFppcE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgWmlwU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnJlc3VsdFNlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gWmlwT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0IHsgWmlwT3BlcmF0b3IgfTtcbnZhciBaaXBTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFppcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gWmlwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcmVzdWx0U2VsZWN0b3IsIHZhbHVlcykge1xuICAgICAgICBpZiAodmFsdWVzID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHZhbHVlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLml0ZXJhdG9ycyA9IFtdO1xuICAgICAgICBfdGhpcy5hY3RpdmUgPSAwO1xuICAgICAgICBfdGhpcy5yZXN1bHRTZWxlY3RvciA9ICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdmdW5jdGlvbicpID8gcmVzdWx0U2VsZWN0b3IgOiBudWxsO1xuICAgICAgICBfdGhpcy52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgWmlwU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9ycyA9IHRoaXMuaXRlcmF0b3JzO1xuICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9ycy5wdXNoKG5ldyBTdGF0aWNBcnJheUl0ZXJhdG9yKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlW1N5bWJvbF9pdGVyYXRvcl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9ycy5wdXNoKG5ldyBTdGF0aWNJdGVyYXRvcih2YWx1ZVtTeW1ib2xfaXRlcmF0b3JdKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGl0ZXJhdG9ycy5wdXNoKG5ldyBaaXBCdWZmZXJJdGVyYXRvcih0aGlzLmRlc3RpbmF0aW9uLCB0aGlzLCB2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBaaXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpdGVyYXRvcnMgPSB0aGlzLml0ZXJhdG9ycztcbiAgICAgICAgdmFyIGxlbiA9IGl0ZXJhdG9ycy5sZW5ndGg7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aXZlID0gbGVuO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvcnNbaV07XG4gICAgICAgICAgICBpZiAoaXRlcmF0b3Iuc3RpbGxVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChpdGVyYXRvci5zdWJzY3JpYmUoaXRlcmF0b3IsIGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlLS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFppcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUluYWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFjdGl2ZS0tO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgWmlwU3Vic2NyaWJlci5wcm90b3R5cGUuY2hlY2tJdGVyYXRvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpdGVyYXRvcnMgPSB0aGlzLml0ZXJhdG9ycztcbiAgICAgICAgdmFyIGxlbiA9IGl0ZXJhdG9ycy5sZW5ndGg7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yc1tpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3IuaGFzVmFsdWUgPT09ICdmdW5jdGlvbicgJiYgIWl0ZXJhdG9yLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNob3VsZENvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yc1tpXTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICBpZiAoaXRlcmF0b3IuaGFzQ29tcGxldGVkKCkpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFyZ3MucHVzaChyZXN1bHQudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgICAgICB0aGlzLl90cnlyZXN1bHRTZWxlY3RvcihhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQoYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZENvbXBsZXRlKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBaaXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5cmVzdWx0U2VsZWN0b3IgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5yZXN1bHRTZWxlY3Rvci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gWmlwU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgWmlwU3Vic2NyaWJlciB9O1xudmFyIFN0YXRpY0l0ZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0YXRpY0l0ZXJhdG9yKGl0ZXJhdG9yKSB7XG4gICAgICAgIHRoaXMuaXRlcmF0b3IgPSBpdGVyYXRvcjtcbiAgICAgICAgdGhpcy5uZXh0UmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgIH1cbiAgICBTdGF0aWNJdGVyYXRvci5wcm90b3R5cGUuaGFzVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgU3RhdGljSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLm5leHRSZXN1bHQ7XG4gICAgICAgIHRoaXMubmV4dFJlc3VsdCA9IHRoaXMuaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgU3RhdGljSXRlcmF0b3IucHJvdG90eXBlLmhhc0NvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5leHRSZXN1bHQgPSB0aGlzLm5leHRSZXN1bHQ7XG4gICAgICAgIHJldHVybiBuZXh0UmVzdWx0ICYmIG5leHRSZXN1bHQuZG9uZTtcbiAgICB9O1xuICAgIHJldHVybiBTdGF0aWNJdGVyYXRvcjtcbn0oKSk7XG52YXIgU3RhdGljQXJyYXlJdGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdGF0aWNBcnJheUl0ZXJhdG9yKGFycmF5KSB7XG4gICAgICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgfVxuICAgIFN0YXRpY0FycmF5SXRlcmF0b3IucHJvdG90eXBlW1N5bWJvbF9pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgU3RhdGljQXJyYXlJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaSA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgdmFyIGFycmF5ID0gdGhpcy5hcnJheTtcbiAgICAgICAgcmV0dXJuIGkgPCB0aGlzLmxlbmd0aCA/IHsgdmFsdWU6IGFycmF5W2ldLCBkb25lOiBmYWxzZSB9IDogeyB2YWx1ZTogbnVsbCwgZG9uZTogdHJ1ZSB9O1xuICAgIH07XG4gICAgU3RhdGljQXJyYXlJdGVyYXRvci5wcm90b3R5cGUuaGFzVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5Lmxlbmd0aCA+IHRoaXMuaW5kZXg7XG4gICAgfTtcbiAgICBTdGF0aWNBcnJheUl0ZXJhdG9yLnByb3RvdHlwZS5oYXNDb21wbGV0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5Lmxlbmd0aCA9PT0gdGhpcy5pbmRleDtcbiAgICB9O1xuICAgIHJldHVybiBTdGF0aWNBcnJheUl0ZXJhdG9yO1xufSgpKTtcbnZhciBaaXBCdWZmZXJJdGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhaaXBCdWZmZXJJdGVyYXRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBaaXBCdWZmZXJJdGVyYXRvcihkZXN0aW5hdGlvbiwgcGFyZW50LCBvYnNlcnZhYmxlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIF90aGlzLm9ic2VydmFibGUgPSBvYnNlcnZhYmxlO1xuICAgICAgICBfdGhpcy5zdGlsbFVuc3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgIF90aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICBfdGhpcy5pc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlW1N5bWJvbF9pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDAgJiYgdGhpcy5pc0NvbXBsZXRlKSB7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbnVsbCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IGJ1ZmZlci5zaGlmdCgpLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUuaGFzVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5sZW5ndGggPiAwO1xuICAgIH07XG4gICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlLmhhc0NvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmlzQ29tcGxldGU7XG4gICAgfTtcbiAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5SW5hY3RpdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5idWZmZXIucHVzaChpbm5lclZhbHVlKTtcbiAgICAgICAgdGhpcy5wYXJlbnQuY2hlY2tJdGVyYXRvcnMoKTtcbiAgICB9O1xuICAgIFppcEJ1ZmZlckl0ZXJhdG9yLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCB0aGlzLm9ic2VydmFibGUsIHRoaXMsIGluZGV4KTtcbiAgICB9O1xuICAgIHJldHVybiBaaXBCdWZmZXJJdGVyYXRvcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD16aXAuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QoeCkge1xuICAgIHJldHVybiB4ICE9PSBudWxsICYmIHR5cGVvZiB4ID09PSAnb2JqZWN0Jztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzT2JqZWN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gY2FuUmVwb3J0RXJyb3Iob2JzZXJ2ZXIpIHtcbiAgICB3aGlsZSAob2JzZXJ2ZXIpIHtcbiAgICAgICAgdmFyIF9hID0gb2JzZXJ2ZXIsIGNsb3NlZF8xID0gX2EuY2xvc2VkLCBkZXN0aW5hdGlvbiA9IF9hLmRlc3RpbmF0aW9uLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQ7XG4gICAgICAgIGlmIChjbG9zZWRfMSB8fCBpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZXN0aW5hdGlvbiAmJiBkZXN0aW5hdGlvbiBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIG9ic2VydmVyID0gZGVzdGluYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYnNlcnZlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYW5SZXBvcnRFcnJvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX1N1YnNjcmlwdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlucHV0W2krK10pO1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1Yi5hZGQodGhpcy5zY2hlZHVsZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gc3ViO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBcnJheS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbnZhciBuZXh0SGFuZGxlID0gMTtcbnZhciB0YXNrc0J5SGFuZGxlID0ge307XG5mdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgdmFyIGNiID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIGlmIChjYikge1xuICAgICAgICBjYigpO1xuICAgIH1cbn1cbmV4cG9ydCB2YXIgSW1tZWRpYXRlID0ge1xuICAgIHNldEltbWVkaWF0ZTogZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIHZhciBoYW5kbGUgPSBuZXh0SGFuZGxlKys7XG4gICAgICAgIHRhc2tzQnlIYW5kbGVbaGFuZGxlXSA9IGNiO1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZTtcbiAgICB9LFxuICAgIGNsZWFySW1tZWRpYXRlOiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbW1lZGlhdGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF91dGlsX0ltbWVkaWF0ZSxfQXN5bmNBY3Rpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEltbWVkaWF0ZSB9IGZyb20gJy4uL3V0aWwvSW1tZWRpYXRlJztcbmltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG52YXIgQXNhcEFjdGlvbiA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBc2FwQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzYXBBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc2FwQWN0aW9uLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWxheSAhPT0gbnVsbCAmJiBkZWxheSA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkLmNhbGwodGhpcywgc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHNjaGVkdWxlci5hY3Rpb25zLnB1c2godGhpcyk7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGVkIHx8IChzY2hlZHVsZXIuc2NoZWR1bGVkID0gSW1tZWRpYXRlLnNldEltbWVkaWF0ZShzY2hlZHVsZXIuZmx1c2guYmluZChzY2hlZHVsZXIsIG51bGwpKSk7XG4gICAgfTtcbiAgICBBc2FwQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoZGVsYXkgIT09IG51bGwgJiYgZGVsYXkgPiAwKSB8fCAoZGVsYXkgPT09IG51bGwgJiYgdGhpcy5kZWxheSA+IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZWR1bGVyLmFjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBJbW1lZGlhdGUuY2xlYXJJbW1lZGlhdGUoaWQpO1xuICAgICAgICAgICAgc2NoZWR1bGVyLnNjaGVkdWxlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgcmV0dXJuIEFzYXBBY3Rpb247XG59KEFzeW5jQWN0aW9uKSk7XG5leHBvcnQgeyBBc2FwQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc2FwQWN0aW9uLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfQXN5bmNTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi9Bc3luY1NjaGVkdWxlcic7XG52YXIgQXNhcFNjaGVkdWxlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBc2FwU2NoZWR1bGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzYXBTY2hlZHVsZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgQXNhcFNjaGVkdWxlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgY291bnQgPSBhY3Rpb25zLmxlbmd0aDtcbiAgICAgICAgYWN0aW9uID0gYWN0aW9uIHx8IGFjdGlvbnMuc2hpZnQoKTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKCsraW5kZXggPCBjb3VudCAmJiAoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSk7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBjb3VudCAmJiAoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc2FwU2NoZWR1bGVyO1xufShBc3luY1NjaGVkdWxlcikpO1xuZXhwb3J0IHsgQXNhcFNjaGVkdWxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXNhcFNjaGVkdWxlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX0FzYXBBY3Rpb24sX0FzYXBTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgQXNhcEFjdGlvbiB9IGZyb20gJy4vQXNhcEFjdGlvbic7XG5pbXBvcnQgeyBBc2FwU2NoZWR1bGVyIH0gZnJvbSAnLi9Bc2FwU2NoZWR1bGVyJztcbmV4cG9ydCB2YXIgYXNhcCA9IC8qQF9fUFVSRV9fKi8gbmV3IEFzYXBTY2hlZHVsZXIoQXNhcEFjdGlvbik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc2FwLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfY29uZmlnLF91dGlsX2hvc3RSZXBvcnRFcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBob3N0UmVwb3J0RXJyb3IgfSBmcm9tICcuL3V0aWwvaG9zdFJlcG9ydEVycm9yJztcbmV4cG9ydCB2YXIgZW1wdHkgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB9LFxuICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7IH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZlci5qcy5tYXBcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iLCJ2YXIgYXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25WYWx1ZScpLFxuICAgIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpO1xuXG4vKipcbiAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgaWYgKGlzTmV3KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5T2JqZWN0O1xuIiwidmFyIGJhc2VJc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vX2Jhc2VJc0FyZ3VtZW50cycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJndW1lbnRzO1xuIiwidmFyIGJhc2VJc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19iYXNlSXNUeXBlZEFycmF5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG4iLCJ2YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAqL1xuZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvS2V5O1xuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfQXN5bmNBY3Rpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG52YXIgQW5pbWF0aW9uRnJhbWVBY3Rpb24gPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQW5pbWF0aW9uRnJhbWVBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uRnJhbWVBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBbmltYXRpb25GcmFtZUFjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVsYXkgIT09IG51bGwgJiYgZGVsYXkgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBzY2hlZHVsZXIuYWN0aW9ucy5wdXNoKHRoaXMpO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlZCB8fCAoc2NoZWR1bGVyLnNjaGVkdWxlZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7IHJldHVybiBzY2hlZHVsZXIuZmx1c2gobnVsbCk7IH0pKTtcbiAgICB9O1xuICAgIEFuaW1hdGlvbkZyYW1lQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoZGVsYXkgIT09IG51bGwgJiYgZGVsYXkgPiAwKSB8fCAoZGVsYXkgPT09IG51bGwgJiYgdGhpcy5kZWxheSA+IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZWR1bGVyLmFjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gICAgICAgICAgICBzY2hlZHVsZXIuc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICByZXR1cm4gQW5pbWF0aW9uRnJhbWVBY3Rpb247XG59KEFzeW5jQWN0aW9uKSk7XG5leHBvcnQgeyBBbmltYXRpb25GcmFtZUFjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QW5pbWF0aW9uRnJhbWVBY3Rpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9BbmltYXRpb25GcmFtZUFjdGlvbixfQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgQW5pbWF0aW9uRnJhbWVBY3Rpb24gfSBmcm9tICcuL0FuaW1hdGlvbkZyYW1lQWN0aW9uJztcbmltcG9ydCB7IEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyIH0gZnJvbSAnLi9BbmltYXRpb25GcmFtZVNjaGVkdWxlcic7XG5leHBvcnQgdmFyIGFuaW1hdGlvbkZyYW1lID0gLypAX19QVVJFX18qLyBuZXcgQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIoQW5pbWF0aW9uRnJhbWVBY3Rpb24pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5pbWF0aW9uRnJhbWUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9Bc3luY1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuL0FzeW5jU2NoZWR1bGVyJztcbnZhciBBbmltYXRpb25GcmFtZVNjaGVkdWxlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBbmltYXRpb25GcmFtZVNjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBbmltYXRpb25GcmFtZVNjaGVkdWxlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBbmltYXRpb25GcmFtZVNjaGVkdWxlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgY291bnQgPSBhY3Rpb25zLmxlbmd0aDtcbiAgICAgICAgYWN0aW9uID0gYWN0aW9uIHx8IGFjdGlvbnMuc2hpZnQoKTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKCsraW5kZXggPCBjb3VudCAmJiAoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSk7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBjb3VudCAmJiAoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRpb25GcmFtZVNjaGVkdWxlcjtcbn0oQXN5bmNTY2hlZHVsZXIpKTtcbmV4cG9ydCB7IEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BbmltYXRpb25GcmFtZVNjaGVkdWxlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX0FzeW5jQWN0aW9uLF9Bc3luY1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQXN5bmNBY3Rpb24gfSBmcm9tICcuL0FzeW5jQWN0aW9uJztcbmltcG9ydCB7IEFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi9Bc3luY1NjaGVkdWxlcic7XG52YXIgVmlydHVhbFRpbWVTY2hlZHVsZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVmlydHVhbFRpbWVTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVmlydHVhbFRpbWVTY2hlZHVsZXIoU2NoZWR1bGVyQWN0aW9uLCBtYXhGcmFtZXMpIHtcbiAgICAgICAgaWYgKFNjaGVkdWxlckFjdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBTY2hlZHVsZXJBY3Rpb24gPSBWaXJ0dWFsQWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhGcmFtZXMgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgbWF4RnJhbWVzID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFNjaGVkdWxlckFjdGlvbiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuZnJhbWU7IH0pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm1heEZyYW1lcyA9IG1heEZyYW1lcztcbiAgICAgICAgX3RoaXMuZnJhbWUgPSAwO1xuICAgICAgICBfdGhpcy5pbmRleCA9IC0xO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFZpcnR1YWxUaW1lU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgYWN0aW9ucyA9IF9hLmFjdGlvbnMsIG1heEZyYW1lcyA9IF9hLm1heEZyYW1lcztcbiAgICAgICAgdmFyIGVycm9yLCBhY3Rpb247XG4gICAgICAgIHdoaWxlICgoYWN0aW9uID0gYWN0aW9uc1swXSkgJiYgYWN0aW9uLmRlbGF5IDw9IG1heEZyYW1lcykge1xuICAgICAgICAgICAgYWN0aW9ucy5zaGlmdCgpO1xuICAgICAgICAgICAgdGhpcy5mcmFtZSA9IGFjdGlvbi5kZWxheTtcbiAgICAgICAgICAgIGlmIChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpcnR1YWxUaW1lU2NoZWR1bGVyLmZyYW1lVGltZUZhY3RvciA9IDEwO1xuICAgIHJldHVybiBWaXJ0dWFsVGltZVNjaGVkdWxlcjtcbn0oQXN5bmNTY2hlZHVsZXIpKTtcbmV4cG9ydCB7IFZpcnR1YWxUaW1lU2NoZWR1bGVyIH07XG52YXIgVmlydHVhbEFjdGlvbiA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhWaXJ0dWFsQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFZpcnR1YWxBY3Rpb24oc2NoZWR1bGVyLCB3b3JrLCBpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgaW5kZXggPSBzY2hlZHVsZXIuaW5kZXggKz0gMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIF90aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIF90aGlzLmluZGV4ID0gc2NoZWR1bGVyLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVmlydHVhbEFjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmlkKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5zY2hlZHVsZS5jYWxsKHRoaXMsIHN0YXRlLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBWaXJ0dWFsQWN0aW9uKHRoaXMuc2NoZWR1bGVyLCB0aGlzLndvcmspO1xuICAgICAgICB0aGlzLmFkZChhY3Rpb24pO1xuICAgICAgICByZXR1cm4gYWN0aW9uLnNjaGVkdWxlKHN0YXRlLCBkZWxheSk7XG4gICAgfTtcbiAgICBWaXJ0dWFsQWN0aW9uLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsYXkgPSBzY2hlZHVsZXIuZnJhbWUgKyBkZWxheTtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcbiAgICAgICAgYWN0aW9ucy5wdXNoKHRoaXMpO1xuICAgICAgICBhY3Rpb25zLnNvcnQoVmlydHVhbEFjdGlvbi5zb3J0QWN0aW9ucyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgVmlydHVhbEFjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgVmlydHVhbEFjdGlvbi5wcm90b3R5cGUuX2V4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX2V4ZWN1dGUuY2FsbCh0aGlzLCBzdGF0ZSwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWaXJ0dWFsQWN0aW9uLnNvcnRBY3Rpb25zID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgaWYgKGEuZGVsYXkgPT09IGIuZGVsYXkpIHtcbiAgICAgICAgICAgIGlmIChhLmluZGV4ID09PSBiLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhLmluZGV4ID4gYi5pbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGEuZGVsYXkgPiBiLmRlbGF5KSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFZpcnR1YWxBY3Rpb247XG59KEFzeW5jQWN0aW9uKSk7XG5leHBvcnQgeyBWaXJ0dWFsQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WaXJ0dWFsVGltZVNjaGVkdWxlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JzZXJ2YWJsZShvYmopIHtcbiAgICByZXR1cm4gISFvYmogJiYgKG9iaiBpbnN0YW5jZW9mIE9ic2VydmFibGUgfHwgKHR5cGVvZiBvYmoubGlmdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNPYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfQXN5bmNTdWJqZWN0LF9vcGVyYXRvcnNfbWFwLF91dGlsX2NhblJlcG9ydEVycm9yLF91dGlsX2lzQXJyYXksX3V0aWxfaXNTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgQXN5bmNTdWJqZWN0IH0gZnJvbSAnLi4vQXN5bmNTdWJqZWN0JztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4uL29wZXJhdG9ycy9tYXAnO1xuaW1wb3J0IHsgY2FuUmVwb3J0RXJyb3IgfSBmcm9tICcuLi91dGlsL2NhblJlcG9ydEVycm9yJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmV4cG9ydCBmdW5jdGlvbiBiaW5kQ2FsbGJhY2soY2FsbGJhY2tGdW5jLCByZXN1bHRTZWxlY3Rvciwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIGlmIChpc1NjaGVkdWxlcihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpbmRDYWxsYmFjayhjYWxsYmFja0Z1bmMsIHNjaGVkdWxlcikuYXBwbHkodm9pZCAwLCBhcmdzKS5waXBlKG1hcChmdW5jdGlvbiAoYXJncykgeyByZXR1cm4gaXNBcnJheShhcmdzKSA/IHJlc3VsdFNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgYXJncykgOiByZXN1bHRTZWxlY3RvcihhcmdzKTsgfSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgICAgdmFyIHN1YmplY3Q7XG4gICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgICAgc3ViamVjdDogc3ViamVjdCxcbiAgICAgICAgICAgIGNhbGxiYWNrRnVuYzogY2FsbGJhY2tGdW5jLFxuICAgICAgICAgICAgc2NoZWR1bGVyOiBzY2hlZHVsZXIsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgaWYgKCFzY2hlZHVsZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdCA9IG5ldyBBc3luY1N1YmplY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5uZXJBcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyQXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5uZXh0KGlubmVyQXJncy5sZW5ndGggPD0gMSA/IGlubmVyQXJnc1swXSA6IGlubmVyQXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja0Z1bmMuYXBwbHkoY29udGV4dCwgYXJncy5jb25jYXQoW2hhbmRsZXJdKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhblJlcG9ydEVycm9yKHN1YmplY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YmplY3Quc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0ge1xuICAgICAgICAgICAgICAgICAgICBhcmdzOiBhcmdzLCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyLCBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2gsIDAsIHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGFyZ3MgPSBzdGF0ZS5hcmdzLCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlciwgcGFyYW1zID0gc3RhdGUucGFyYW1zO1xuICAgIHZhciBjYWxsYmFja0Z1bmMgPSBwYXJhbXMuY2FsbGJhY2tGdW5jLCBjb250ZXh0ID0gcGFyYW1zLmNvbnRleHQsIHNjaGVkdWxlciA9IHBhcmFtcy5zY2hlZHVsZXI7XG4gICAgdmFyIHN1YmplY3QgPSBwYXJhbXMuc3ViamVjdDtcbiAgICBpZiAoIXN1YmplY3QpIHtcbiAgICAgICAgc3ViamVjdCA9IHBhcmFtcy5zdWJqZWN0ID0gbmV3IEFzeW5jU3ViamVjdCgpO1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpbm5lckFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgaW5uZXJBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBpbm5lckFyZ3MubGVuZ3RoIDw9IDEgPyBpbm5lckFyZ3NbMF0gOiBpbm5lckFyZ3M7XG4gICAgICAgICAgICBfdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTmV4dCwgMCwgeyB2YWx1ZTogdmFsdWUsIHN1YmplY3Q6IHN1YmplY3QgfSkpO1xuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2FsbGJhY2tGdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MuY29uY2F0KFtoYW5kbGVyXSkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHN1YmplY3QuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZChzdWJqZWN0LnN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaE5leHQoc3RhdGUpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZSwgc3ViamVjdCA9IHN0YXRlLnN1YmplY3Q7XG4gICAgc3ViamVjdC5uZXh0KHZhbHVlKTtcbiAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaEVycm9yKHN0YXRlKSB7XG4gICAgdmFyIGVyciA9IHN0YXRlLmVyciwgc3ViamVjdCA9IHN0YXRlLnN1YmplY3Q7XG4gICAgc3ViamVjdC5lcnJvcihlcnIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZENhbGxiYWNrLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfQXN5bmNTdWJqZWN0LF9vcGVyYXRvcnNfbWFwLF91dGlsX2NhblJlcG9ydEVycm9yLF91dGlsX2lzU2NoZWR1bGVyLF91dGlsX2lzQXJyYXkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgQXN5bmNTdWJqZWN0IH0gZnJvbSAnLi4vQXN5bmNTdWJqZWN0JztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4uL29wZXJhdG9ycy9tYXAnO1xuaW1wb3J0IHsgY2FuUmVwb3J0RXJyb3IgfSBmcm9tICcuLi91dGlsL2NhblJlcG9ydEVycm9yJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5JztcbmV4cG9ydCBmdW5jdGlvbiBiaW5kTm9kZUNhbGxiYWNrKGNhbGxiYWNrRnVuYywgcmVzdWx0U2VsZWN0b3IsIHNjaGVkdWxlcikge1xuICAgIGlmIChyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICBpZiAoaXNTY2hlZHVsZXIocmVzdWx0U2VsZWN0b3IpKSB7XG4gICAgICAgICAgICBzY2hlZHVsZXIgPSByZXN1bHRTZWxlY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBiaW5kTm9kZUNhbGxiYWNrKGNhbGxiYWNrRnVuYywgc2NoZWR1bGVyKS5hcHBseSh2b2lkIDAsIGFyZ3MpLnBpcGUobWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiBpc0FycmF5KGFyZ3MpID8gcmVzdWx0U2VsZWN0b3IuYXBwbHkodm9pZCAwLCBhcmdzKSA6IHJlc3VsdFNlbGVjdG9yKGFyZ3MpOyB9KSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgIHN1YmplY3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICBjYWxsYmFja0Z1bmM6IGNhbGxiYWNrRnVuYyxcbiAgICAgICAgICAgIHNjaGVkdWxlcjogc2NoZWR1bGVyLFxuICAgICAgICAgICAgY29udGV4dDogdGhpcyxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IHBhcmFtcy5jb250ZXh0O1xuICAgICAgICAgICAgdmFyIHN1YmplY3QgPSBwYXJhbXMuc3ViamVjdDtcbiAgICAgICAgICAgIGlmICghc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzdWJqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YmplY3QgPSBwYXJhbXMuc3ViamVjdCA9IG5ldyBBc3luY1N1YmplY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5uZXJBcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyQXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVyciA9IGlubmVyQXJncy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0Lm5leHQoaW5uZXJBcmdzLmxlbmd0aCA8PSAxID8gaW5uZXJBcmdzWzBdIDogaW5uZXJBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrRnVuYy5hcHBseShjb250ZXh0LCBhcmdzLmNvbmNhdChbaGFuZGxlcl0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FuUmVwb3J0RXJyb3Ioc3ViamVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViamVjdC5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCAwLCB7IHBhcmFtczogcGFyYW1zLCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyLCBjb250ZXh0OiBjb250ZXh0IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gZGlzcGF0Y2goc3RhdGUpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzdGF0ZS5wYXJhbXMsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBjb250ZXh0ID0gc3RhdGUuY29udGV4dDtcbiAgICB2YXIgY2FsbGJhY2tGdW5jID0gcGFyYW1zLmNhbGxiYWNrRnVuYywgYXJncyA9IHBhcmFtcy5hcmdzLCBzY2hlZHVsZXIgPSBwYXJhbXMuc2NoZWR1bGVyO1xuICAgIHZhciBzdWJqZWN0ID0gcGFyYW1zLnN1YmplY3Q7XG4gICAgaWYgKCFzdWJqZWN0KSB7XG4gICAgICAgIHN1YmplY3QgPSBwYXJhbXMuc3ViamVjdCA9IG5ldyBBc3luY1N1YmplY3QoKTtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaW5uZXJBcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGlubmVyQXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGVyciA9IGlubmVyQXJncy5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIF90aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hFcnJvciwgMCwgeyBlcnI6IGVyciwgc3ViamVjdDogc3ViamVjdCB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpbm5lckFyZ3MubGVuZ3RoIDw9IDEgPyBpbm5lckFyZ3NbMF0gOiBpbm5lckFyZ3M7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaE5leHQsIDAsIHsgdmFsdWU6IHZhbHVlLCBzdWJqZWN0OiBzdWJqZWN0IH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNhbGxiYWNrRnVuYy5hcHBseShjb250ZXh0LCBhcmdzLmNvbmNhdChbaGFuZGxlcl0pKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hFcnJvciwgMCwgeyBlcnI6IGVyciwgc3ViamVjdDogc3ViamVjdCB9KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZGQoc3ViamVjdC5zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hOZXh0KGFyZykge1xuICAgIHZhciB2YWx1ZSA9IGFyZy52YWx1ZSwgc3ViamVjdCA9IGFyZy5zdWJqZWN0O1xuICAgIHN1YmplY3QubmV4dCh2YWx1ZSk7XG4gICAgc3ViamVjdC5jb21wbGV0ZSgpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hFcnJvcihhcmcpIHtcbiAgICB2YXIgZXJyID0gYXJnLmVyciwgc3ViamVjdCA9IGFyZy5zdWJqZWN0O1xuICAgIHN1YmplY3QuZXJyb3IoZXJyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpbmROb2RlQ2FsbGJhY2suanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF91dGlsX2lzQXJyYXksX29wZXJhdG9yc19tYXAsX3V0aWxfaXNPYmplY3QsX2Zyb20gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheSc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWFwJztcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi4vdXRpbC9pc09iamVjdCc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBmb3JrSm9pbigpIHtcbiAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHNvdXJjZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgaWYgKHNvdXJjZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBmaXJzdF8xID0gc291cmNlc1swXTtcbiAgICAgICAgaWYgKGlzQXJyYXkoZmlyc3RfMSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JrSm9pbkludGVybmFsKGZpcnN0XzEsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc09iamVjdChmaXJzdF8xKSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZmlyc3RfMSkgPT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZmlyc3RfMSk7XG4gICAgICAgICAgICByZXR1cm4gZm9ya0pvaW5JbnRlcm5hbChrZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBmaXJzdF8xW2tleV07IH0pLCBrZXlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHNvdXJjZXNbc291cmNlcy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgcmVzdWx0U2VsZWN0b3JfMSA9IHNvdXJjZXMucG9wKCk7XG4gICAgICAgIHNvdXJjZXMgPSAoc291cmNlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShzb3VyY2VzWzBdKSkgPyBzb3VyY2VzWzBdIDogc291cmNlcztcbiAgICAgICAgcmV0dXJuIGZvcmtKb2luSW50ZXJuYWwoc291cmNlcywgbnVsbCkucGlwZShtYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIHJlc3VsdFNlbGVjdG9yXzEuYXBwbHkodm9pZCAwLCBhcmdzKTsgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gZm9ya0pvaW5JbnRlcm5hbChzb3VyY2VzLCBudWxsKTtcbn1cbmZ1bmN0aW9uIGZvcmtKb2luSW50ZXJuYWwoc291cmNlcywga2V5cykge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgbGVuID0gc291cmNlcy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KGxlbik7XG4gICAgICAgIHZhciBjb21wbGV0ZWQgPSAwO1xuICAgICAgICB2YXIgZW1pdHRlZCA9IDA7XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBmcm9tKHNvdXJjZXNbaV0pO1xuICAgICAgICAgICAgdmFyIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChzb3VyY2Uuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdHRlZCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA9PT0gbGVuIHx8ICFoYXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVtaXR0ZWQgPT09IGxlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChrZXlzID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwga2V5LCBpKSB7IHJldHVybiAocmVzdWx0W2tleV0gPSB2YWx1ZXNbaV0sIHJlc3VsdCk7IH0sIHt9KSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIF9sb29wXzEoaSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcmtKb2luLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfdXRpbF9pc0FycmF5LF91dGlsX2lzRnVuY3Rpb24sX29wZXJhdG9yc19tYXAgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4uL29wZXJhdG9ycy9tYXAnO1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucykucGlwZShtYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIGlzQXJyYXkoYXJncykgPyByZXN1bHRTZWxlY3Rvci5hcHBseSh2b2lkIDAsIGFyZ3MpIDogcmVzdWx0U2VsZWN0b3IoYXJncyk7IH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZXIoZSkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNldHVwU3Vic2NyaXB0aW9uKHRhcmdldCwgZXZlbnROYW1lLCBoYW5kbGVyLCBzdWJzY3JpYmVyLCBvcHRpb25zKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHNldHVwU3Vic2NyaXB0aW9uKHNvdXJjZU9iaiwgZXZlbnROYW1lLCBoYW5kbGVyLCBzdWJzY3JpYmVyLCBvcHRpb25zKSB7XG4gICAgdmFyIHVuc3Vic2NyaWJlO1xuICAgIGlmIChpc0V2ZW50VGFyZ2V0KHNvdXJjZU9iaikpIHtcbiAgICAgICAgdmFyIHNvdXJjZV8xID0gc291cmNlT2JqO1xuICAgICAgICBzb3VyY2VPYmouYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZV8xLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTsgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcihzb3VyY2VPYmopKSB7XG4gICAgICAgIHZhciBzb3VyY2VfMiA9IHNvdXJjZU9iajtcbiAgICAgICAgc291cmNlT2JqLm9uKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlXzIub2ZmKGV2ZW50TmFtZSwgaGFuZGxlcik7IH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHNvdXJjZU9iaikpIHtcbiAgICAgICAgdmFyIHNvdXJjZV8zID0gc291cmNlT2JqO1xuICAgICAgICBzb3VyY2VPYmouYWRkTGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzb3VyY2VfMy5yZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIpOyB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChzb3VyY2VPYmogJiYgc291cmNlT2JqLmxlbmd0aCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc291cmNlT2JqLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBzZXR1cFN1YnNjcmlwdGlvbihzb3VyY2VPYmpbaV0sIGV2ZW50TmFtZSwgaGFuZGxlciwgc3Vic2NyaWJlciwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgZXZlbnQgdGFyZ2V0Jyk7XG4gICAgfVxuICAgIHN1YnNjcmliZXIuYWRkKHVuc3Vic2NyaWJlKTtcbn1cbmZ1bmN0aW9uIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHNvdXJjZU9iaikge1xuICAgIHJldHVybiBzb3VyY2VPYmogJiYgdHlwZW9mIHNvdXJjZU9iai5hZGRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygc291cmNlT2JqLnJlbW92ZUxpc3RlbmVyID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcihzb3VyY2VPYmopIHtcbiAgICByZXR1cm4gc291cmNlT2JqICYmIHR5cGVvZiBzb3VyY2VPYmoub24gPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHNvdXJjZU9iai5vZmYgPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBpc0V2ZW50VGFyZ2V0KHNvdXJjZU9iaikge1xuICAgIHJldHVybiBzb3VyY2VPYmogJiYgdHlwZW9mIHNvdXJjZU9iai5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBzb3VyY2VPYmoucmVtb3ZlRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfaXNBcnJheSxfdXRpbF9pc0Z1bmN0aW9uLF9vcGVyYXRvcnNfbWFwIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWFwJztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXZlbnRQYXR0ZXJuKGFkZEhhbmRsZXIsIHJlbW92ZUhhbmRsZXIsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmcm9tRXZlbnRQYXR0ZXJuKGFkZEhhbmRsZXIsIHJlbW92ZUhhbmRsZXIpLnBpcGUobWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiBpc0FycmF5KGFyZ3MpID8gcmVzdWx0U2VsZWN0b3IuYXBwbHkodm9pZCAwLCBhcmdzKSA6IHJlc3VsdFNlbGVjdG9yKGFyZ3MpOyB9KSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGVbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyLm5leHQoZS5sZW5ndGggPT09IDEgPyBlWzBdIDogZSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciByZXRWYWx1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldFZhbHVlID0gYWRkSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNGdW5jdGlvbihyZW1vdmVIYW5kbGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlSGFuZGxlcihoYW5kbGVyLCByZXRWYWx1ZSk7IH07XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tRXZlbnRQYXR0ZXJuLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfdXRpbF9pZGVudGl0eSxfdXRpbF9pc1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZShpbml0aWFsU3RhdGVPck9wdGlvbnMsIGNvbmRpdGlvbiwgaXRlcmF0ZSwgcmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGUsIHNjaGVkdWxlcikge1xuICAgIHZhciByZXN1bHRTZWxlY3RvcjtcbiAgICB2YXIgaW5pdGlhbFN0YXRlO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBpbml0aWFsU3RhdGVPck9wdGlvbnM7XG4gICAgICAgIGluaXRpYWxTdGF0ZSA9IG9wdGlvbnMuaW5pdGlhbFN0YXRlO1xuICAgICAgICBjb25kaXRpb24gPSBvcHRpb25zLmNvbmRpdGlvbjtcbiAgICAgICAgaXRlcmF0ZSA9IG9wdGlvbnMuaXRlcmF0ZTtcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBvcHRpb25zLnJlc3VsdFNlbGVjdG9yIHx8IGlkZW50aXR5O1xuICAgICAgICBzY2hlZHVsZXIgPSBvcHRpb25zLnNjaGVkdWxlcjtcbiAgICB9XG4gICAgZWxzZSBpZiAocmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGUgPT09IHVuZGVmaW5lZCB8fCBpc1NjaGVkdWxlcihyZXN1bHRTZWxlY3Rvck9yT2JzZXJ2YWJsZSkpIHtcbiAgICAgICAgaW5pdGlhbFN0YXRlID0gaW5pdGlhbFN0YXRlT3JPcHRpb25zO1xuICAgICAgICByZXN1bHRTZWxlY3RvciA9IGlkZW50aXR5O1xuICAgICAgICBzY2hlZHVsZXIgPSByZXN1bHRTZWxlY3Rvck9yT2JzZXJ2YWJsZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0ZSA9IGluaXRpYWxTdGF0ZU9yT3B0aW9ucztcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3Rvck9yT2JzZXJ2YWJsZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaCwgMCwge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXI6IHN1YnNjcmliZXIsXG4gICAgICAgICAgICAgICAgaXRlcmF0ZTogaXRlcmF0ZSxcbiAgICAgICAgICAgICAgICBjb25kaXRpb246IGNvbmRpdGlvbixcbiAgICAgICAgICAgICAgICByZXN1bHRTZWxlY3RvcjogcmVzdWx0U2VsZWN0b3IsXG4gICAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbmRpdGlvblJlc3VsdCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25SZXN1bHQgPSBjb25kaXRpb24oc3RhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFjb25kaXRpb25SZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0U2VsZWN0b3Ioc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGl0ZXJhdGUoc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBjb25kaXRpb24gPSBzdGF0ZS5jb25kaXRpb247XG4gICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5uZWVkSXRlcmF0ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RhdGUuc3RhdGUgPSBzdGF0ZS5pdGVyYXRlKHN0YXRlLnN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdGF0ZS5uZWVkSXRlcmF0ZSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgdmFyIGNvbmRpdGlvblJlc3VsdCA9IHZvaWQgMDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbmRpdGlvblJlc3VsdCA9IGNvbmRpdGlvbihzdGF0ZS5zdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvbmRpdGlvblJlc3VsdCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHZhbHVlO1xuICAgIHRyeSB7XG4gICAgICAgIHZhbHVlID0gc3RhdGUucmVzdWx0U2VsZWN0b3Ioc3RhdGUuc3RhdGUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNjaGVkdWxlKHN0YXRlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYXRlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfZGVmZXIsX2VtcHR5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGRlZmVyIH0gZnJvbSAnLi9kZWZlcic7XG5pbXBvcnQgeyBFTVBUWSB9IGZyb20gJy4vZW1wdHknO1xuZXhwb3J0IGZ1bmN0aW9uIGlpZihjb25kaXRpb24sIHRydWVSZXN1bHQsIGZhbHNlUmVzdWx0KSB7XG4gICAgaWYgKHRydWVSZXN1bHQgPT09IHZvaWQgMCkge1xuICAgICAgICB0cnVlUmVzdWx0ID0gRU1QVFk7XG4gICAgfVxuICAgIGlmIChmYWxzZVJlc3VsdCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGZhbHNlUmVzdWx0ID0gRU1QVFk7XG4gICAgfVxuICAgIHJldHVybiBkZWZlcihmdW5jdGlvbiAoKSB7IHJldHVybiBjb25kaXRpb24oKSA/IHRydWVSZXN1bHQgOiBmYWxzZVJlc3VsdDsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1paWYuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF9zY2hlZHVsZXJfYXN5bmMsX3V0aWxfaXNOdW1lcmljIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IGlzTnVtZXJpYyB9IGZyb20gJy4uL3V0aWwvaXNOdW1lcmljJztcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcnZhbChwZXJpb2QsIHNjaGVkdWxlcikge1xuICAgIGlmIChwZXJpb2QgPT09IHZvaWQgMCkge1xuICAgICAgICBwZXJpb2QgPSAwO1xuICAgIH1cbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIGlmICghaXNOdW1lcmljKHBlcmlvZCkgfHwgcGVyaW9kIDwgMCkge1xuICAgICAgICBwZXJpb2QgPSAwO1xuICAgIH1cbiAgICBpZiAoIXNjaGVkdWxlciB8fCB0eXBlb2Ygc2NoZWR1bGVyLnNjaGVkdWxlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFzeW5jO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgc3Vic2NyaWJlci5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCBwZXJpb2QsIHsgc3Vic2NyaWJlcjogc3Vic2NyaWJlciwgY291bnRlcjogMCwgcGVyaW9kOiBwZXJpb2QgfSkpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBjb3VudGVyID0gc3RhdGUuY291bnRlciwgcGVyaW9kID0gc3RhdGUucGVyaW9kO1xuICAgIHN1YnNjcmliZXIubmV4dChjb3VudGVyKTtcbiAgICB0aGlzLnNjaGVkdWxlKHsgc3Vic2NyaWJlcjogc3Vic2NyaWJlciwgY291bnRlcjogY291bnRlciArIDEsIHBlcmlvZDogcGVyaW9kIH0sIHBlcmlvZCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcnZhbC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfbm9vcCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbC9ub29wJztcbmV4cG9ydCB2YXIgTkVWRVIgPSAvKkBfX1BVUkVfXyovIG5ldyBPYnNlcnZhYmxlKG5vb3ApO1xuZXhwb3J0IGZ1bmN0aW9uIG5ldmVyKCkge1xuICAgIHJldHVybiBORVZFUjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5ldmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfZnJvbSxfdXRpbF9pc0FycmF5LF9lbXB0eSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9mcm9tJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgRU1QVFkgfSBmcm9tICcuL2VtcHR5JztcbmV4cG9ydCBmdW5jdGlvbiBvbkVycm9yUmVzdW1lTmV4dCgpIHtcbiAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHNvdXJjZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgaWYgKHNvdXJjZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBFTVBUWTtcbiAgICB9XG4gICAgdmFyIGZpcnN0ID0gc291cmNlc1swXSwgcmVtYWluZGVyID0gc291cmNlcy5zbGljZSgxKTtcbiAgICBpZiAoc291cmNlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShmaXJzdCkpIHtcbiAgICAgICAgcmV0dXJuIG9uRXJyb3JSZXN1bWVOZXh0LmFwcGx5KHZvaWQgMCwgZmlyc3QpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1Yk5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmFkZChvbkVycm9yUmVzdW1lTmV4dC5hcHBseSh2b2lkIDAsIHJlbWFpbmRlcikuc3Vic2NyaWJlKHN1YnNjcmliZXIpKTsgfTtcbiAgICAgICAgcmV0dXJuIGZyb20oZmlyc3QpLnN1YnNjcmliZSh7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHsgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSxcbiAgICAgICAgICAgIGVycm9yOiBzdWJOZXh0LFxuICAgICAgICAgICAgY29tcGxldGU6IHN1Yk5leHQsXG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25FcnJvclJlc3VtZU5leHQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF9TdWJzY3JpcHRpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBwYWlycyhvYmosIHNjaGVkdWxlcikge1xuICAgIGlmICghc2NoZWR1bGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aCAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoW2tleSwgb2JqW2tleV1dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2gsIDAsIHsga2V5czoga2V5cywgaW5kZXg6IDAsIHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uLCBvYmo6IG9iaiB9KSk7XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZGlzcGF0Y2goc3RhdGUpIHtcbiAgICB2YXIga2V5cyA9IHN0YXRlLmtleXMsIGluZGV4ID0gc3RhdGUuaW5kZXgsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBzdWJzY3JpcHRpb24gPSBzdGF0ZS5zdWJzY3JpcHRpb24sIG9iaiA9IHN0YXRlLm9iajtcbiAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIGlmIChpbmRleCA8IGtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpbmRleF07XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoW2tleSwgb2JqW2tleV1dKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5hZGQodGhpcy5zY2hlZHVsZSh7IGtleXM6IGtleXMsIGluZGV4OiBpbmRleCArIDEsIHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uLCBvYmo6IG9iaiB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWlycy5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3V0aWxfbm90LF91dGlsX3N1YnNjcmliZVRvLF9vcGVyYXRvcnNfZmlsdGVyLF9PYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG5vdCB9IGZyb20gJy4uL3V0aWwvbm90JztcbmltcG9ydCB7IHN1YnNjcmliZVRvIH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUbyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICcuLi9vcGVyYXRvcnMvZmlsdGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBwYXJ0aXRpb24oc291cmNlLCBwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBmaWx0ZXIocHJlZGljYXRlLCB0aGlzQXJnKShuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmVUbyhzb3VyY2UpKSksXG4gICAgICAgIGZpbHRlcihub3QocHJlZGljYXRlLCB0aGlzQXJnKSkobmV3IE9ic2VydmFibGUoc3Vic2NyaWJlVG8oc291cmNlKSkpXG4gICAgXTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnRpdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlKHN0YXJ0LCBjb3VudCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgaWYgKGNvdW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvdW50ID0gc3RhcnQ7XG4gICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBzdGFydDtcbiAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaCwgMCwge1xuICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCwgY291bnQ6IGNvdW50LCBzdGFydDogc3RhcnQsIHN1YnNjcmliZXI6IHN1YnNjcmliZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCsrID49IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChjdXJyZW50KyspO1xuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIHN0YXJ0ID0gc3RhdGUuc3RhcnQsIGluZGV4ID0gc3RhdGUuaW5kZXgsIGNvdW50ID0gc3RhdGUuY291bnQsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuICAgIGlmIChpbmRleCA+PSBjb3VudCkge1xuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3Vic2NyaWJlci5uZXh0KHN0YXJ0KTtcbiAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdGF0ZS5pbmRleCA9IGluZGV4ICsgMTtcbiAgICBzdGF0ZS5zdGFydCA9IHN0YXJ0ICsgMTtcbiAgICB0aGlzLnNjaGVkdWxlKHN0YXRlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhbmdlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfZnJvbSxfZW1wdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4vZnJvbSc7XG5pbXBvcnQgeyBFTVBUWSB9IGZyb20gJy4vZW1wdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHVzaW5nKHJlc291cmNlRmFjdG9yeSwgb2JzZXJ2YWJsZUZhY3RvcnkpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHJlc291cmNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzb3VyY2UgPSByZXNvdXJjZUZhY3RvcnkoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBvYnNlcnZhYmxlRmFjdG9yeShyZXNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc291cmNlID0gcmVzdWx0ID8gZnJvbShyZXN1bHQpIDogRU1QVFk7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBpZiAocmVzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICByZXNvdXJjZS51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNpbmcuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi9pbnRlcm5hbC9PYnNlcnZhYmxlJztcbmV4cG9ydCB7IENvbm5lY3RhYmxlT2JzZXJ2YWJsZSB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9Db25uZWN0YWJsZU9ic2VydmFibGUnO1xuZXhwb3J0IHsgR3JvdXBlZE9ic2VydmFibGUgfSBmcm9tICcuL2ludGVybmFsL29wZXJhdG9ycy9ncm91cEJ5JztcbmV4cG9ydCB7IG9ic2VydmFibGUgfSBmcm9tICcuL2ludGVybmFsL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCB7IFN1YmplY3QgfSBmcm9tICcuL2ludGVybmFsL1N1YmplY3QnO1xuZXhwb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAnLi9pbnRlcm5hbC9CZWhhdmlvclN1YmplY3QnO1xuZXhwb3J0IHsgUmVwbGF5U3ViamVjdCB9IGZyb20gJy4vaW50ZXJuYWwvUmVwbGF5U3ViamVjdCc7XG5leHBvcnQgeyBBc3luY1N1YmplY3QgfSBmcm9tICcuL2ludGVybmFsL0FzeW5jU3ViamVjdCc7XG5leHBvcnQgeyBhc2FwIGFzIGFzYXBTY2hlZHVsZXIgfSBmcm9tICcuL2ludGVybmFsL3NjaGVkdWxlci9hc2FwJztcbmV4cG9ydCB7IGFzeW5jIGFzIGFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi9pbnRlcm5hbC9zY2hlZHVsZXIvYXN5bmMnO1xuZXhwb3J0IHsgcXVldWUgYXMgcXVldWVTY2hlZHVsZXIgfSBmcm9tICcuL2ludGVybmFsL3NjaGVkdWxlci9xdWV1ZSc7XG5leHBvcnQgeyBhbmltYXRpb25GcmFtZSBhcyBhbmltYXRpb25GcmFtZVNjaGVkdWxlciB9IGZyb20gJy4vaW50ZXJuYWwvc2NoZWR1bGVyL2FuaW1hdGlvbkZyYW1lJztcbmV4cG9ydCB7IFZpcnR1YWxUaW1lU2NoZWR1bGVyLCBWaXJ0dWFsQWN0aW9uIH0gZnJvbSAnLi9pbnRlcm5hbC9zY2hlZHVsZXIvVmlydHVhbFRpbWVTY2hlZHVsZXInO1xuZXhwb3J0IHsgU2NoZWR1bGVyIH0gZnJvbSAnLi9pbnRlcm5hbC9TY2hlZHVsZXInO1xuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9pbnRlcm5hbC9TdWJzY3JpcHRpb24nO1xuZXhwb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4vaW50ZXJuYWwvU3Vic2NyaWJlcic7XG5leHBvcnQgeyBOb3RpZmljYXRpb24sIE5vdGlmaWNhdGlvbktpbmQgfSBmcm9tICcuL2ludGVybmFsL05vdGlmaWNhdGlvbic7XG5leHBvcnQgeyBwaXBlIH0gZnJvbSAnLi9pbnRlcm5hbC91dGlsL3BpcGUnO1xuZXhwb3J0IHsgbm9vcCB9IGZyb20gJy4vaW50ZXJuYWwvdXRpbC9ub29wJztcbmV4cG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi9pbnRlcm5hbC91dGlsL2lkZW50aXR5JztcbmV4cG9ydCB7IGlzT2JzZXJ2YWJsZSB9IGZyb20gJy4vaW50ZXJuYWwvdXRpbC9pc09ic2VydmFibGUnO1xuZXhwb3J0IHsgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgfSBmcm9tICcuL2ludGVybmFsL3V0aWwvQXJndW1lbnRPdXRPZlJhbmdlRXJyb3InO1xuZXhwb3J0IHsgRW1wdHlFcnJvciB9IGZyb20gJy4vaW50ZXJuYWwvdXRpbC9FbXB0eUVycm9yJztcbmV4cG9ydCB7IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yIH0gZnJvbSAnLi9pbnRlcm5hbC91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbmV4cG9ydCB7IFVuc3Vic2NyaXB0aW9uRXJyb3IgfSBmcm9tICcuL2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcic7XG5leHBvcnQgeyBUaW1lb3V0RXJyb3IgfSBmcm9tICcuL2ludGVybmFsL3V0aWwvVGltZW91dEVycm9yJztcbmV4cG9ydCB7IGJpbmRDYWxsYmFjayB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9iaW5kQ2FsbGJhY2snO1xuZXhwb3J0IHsgYmluZE5vZGVDYWxsYmFjayB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9iaW5kTm9kZUNhbGxiYWNrJztcbmV4cG9ydCB7IGNvbWJpbmVMYXRlc3QgfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvY29tYmluZUxhdGVzdCc7XG5leHBvcnQgeyBjb25jYXQgfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvY29uY2F0JztcbmV4cG9ydCB7IGRlZmVyIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2RlZmVyJztcbmV4cG9ydCB7IGVtcHR5IH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2VtcHR5JztcbmV4cG9ydCB7IGZvcmtKb2luIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2ZvcmtKb2luJztcbmV4cG9ydCB7IGZyb20gfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvZnJvbSc7XG5leHBvcnQgeyBmcm9tRXZlbnQgfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvZnJvbUV2ZW50JztcbmV4cG9ydCB7IGZyb21FdmVudFBhdHRlcm4gfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvZnJvbUV2ZW50UGF0dGVybic7XG5leHBvcnQgeyBnZW5lcmF0ZSB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9nZW5lcmF0ZSc7XG5leHBvcnQgeyBpaWYgfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvaWlmJztcbmV4cG9ydCB7IGludGVydmFsIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2ludGVydmFsJztcbmV4cG9ydCB7IG1lcmdlIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL21lcmdlJztcbmV4cG9ydCB7IG5ldmVyIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL25ldmVyJztcbmV4cG9ydCB7IG9mIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL29mJztcbmV4cG9ydCB7IG9uRXJyb3JSZXN1bWVOZXh0IH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL29uRXJyb3JSZXN1bWVOZXh0JztcbmV4cG9ydCB7IHBhaXJzIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL3BhaXJzJztcbmV4cG9ydCB7IHBhcnRpdGlvbiB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9wYXJ0aXRpb24nO1xuZXhwb3J0IHsgcmFjZSB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9yYWNlJztcbmV4cG9ydCB7IHJhbmdlIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL3JhbmdlJztcbmV4cG9ydCB7IHRocm93RXJyb3IgfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvdGhyb3dFcnJvcic7XG5leHBvcnQgeyB0aW1lciB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS90aW1lcic7XG5leHBvcnQgeyB1c2luZyB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS91c2luZyc7XG5leHBvcnQgeyB6aXAgfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvemlwJztcbmV4cG9ydCB7IHNjaGVkdWxlZCB9IGZyb20gJy4vaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZCc7XG5leHBvcnQgeyBFTVBUWSB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9lbXB0eSc7XG5leHBvcnQgeyBORVZFUiB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9uZXZlcic7XG5leHBvcnQgeyBjb25maWcgfSBmcm9tICcuL2ludGVybmFsL2NvbmZpZyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsInZhciBTY2hlZHVsZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2NoZWR1bGVyKFNjaGVkdWxlckFjdGlvbiwgbm93KSB7XG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgbm93ID0gU2NoZWR1bGVyLm5vdztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLlNjaGVkdWxlckFjdGlvbiA9IFNjaGVkdWxlckFjdGlvbjtcbiAgICAgICAgdGhpcy5ub3cgPSBub3c7XG4gICAgfVxuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLlNjaGVkdWxlckFjdGlvbih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgU2NoZWR1bGVyLm5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIERhdGUubm93KCk7IH07XG4gICAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKSk7XG5leHBvcnQgeyBTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjaGVkdWxlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX1N1YnNjcmlwdGlvbixfT2JzZXJ2YWJsZSxfU3ViamVjdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBncm91cEJ5KGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IsIGR1cmF0aW9uU2VsZWN0b3IsIHN1YmplY3RTZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgR3JvdXBCeU9wZXJhdG9yKGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IsIGR1cmF0aW9uU2VsZWN0b3IsIHN1YmplY3RTZWxlY3RvcikpO1xuICAgIH07XG59XG52YXIgR3JvdXBCeU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdyb3VwQnlPcGVyYXRvcihrZXlTZWxlY3RvciwgZWxlbWVudFNlbGVjdG9yLCBkdXJhdGlvblNlbGVjdG9yLCBzdWJqZWN0U2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgICAgICB0aGlzLmVsZW1lbnRTZWxlY3RvciA9IGVsZW1lbnRTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3RvcjtcbiAgICAgICAgdGhpcy5zdWJqZWN0U2VsZWN0b3IgPSBzdWJqZWN0U2VsZWN0b3I7XG4gICAgfVxuICAgIEdyb3VwQnlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEdyb3VwQnlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMua2V5U2VsZWN0b3IsIHRoaXMuZWxlbWVudFNlbGVjdG9yLCB0aGlzLmR1cmF0aW9uU2VsZWN0b3IsIHRoaXMuc3ViamVjdFNlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gR3JvdXBCeU9wZXJhdG9yO1xufSgpKTtcbnZhciBHcm91cEJ5U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhHcm91cEJ5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBHcm91cEJ5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwga2V5U2VsZWN0b3IsIGVsZW1lbnRTZWxlY3RvciwgZHVyYXRpb25TZWxlY3Rvciwgc3ViamVjdFNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5lbGVtZW50U2VsZWN0b3IgPSBlbGVtZW50U2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5zdWJqZWN0U2VsZWN0b3IgPSBzdWJqZWN0U2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmdyb3VwcyA9IG51bGw7XG4gICAgICAgIF90aGlzLmF0dGVtcHRlZFRvVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEdyb3VwQnlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAga2V5ID0gdGhpcy5rZXlTZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2dyb3VwKHZhbHVlLCBrZXkpO1xuICAgIH07XG4gICAgR3JvdXBCeVN1YnNjcmliZXIucHJvdG90eXBlLl9ncm91cCA9IGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIHZhciBncm91cHMgPSB0aGlzLmdyb3VwcztcbiAgICAgICAgaWYgKCFncm91cHMpIHtcbiAgICAgICAgICAgIGdyb3VwcyA9IHRoaXMuZ3JvdXBzID0gbmV3IE1hcCgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBncm91cCA9IGdyb3Vwcy5nZXQoa2V5KTtcbiAgICAgICAgdmFyIGVsZW1lbnQ7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRTZWxlY3Rvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gdGhpcy5lbGVtZW50U2VsZWN0b3IodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWdyb3VwKSB7XG4gICAgICAgICAgICBncm91cCA9ICh0aGlzLnN1YmplY3RTZWxlY3RvciA/IHRoaXMuc3ViamVjdFNlbGVjdG9yKCkgOiBuZXcgU3ViamVjdCgpKTtcbiAgICAgICAgICAgIGdyb3Vwcy5zZXQoa2V5LCBncm91cCk7XG4gICAgICAgICAgICB2YXIgZ3JvdXBlZE9ic2VydmFibGUgPSBuZXcgR3JvdXBlZE9ic2VydmFibGUoa2V5LCBncm91cCwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoZ3JvdXBlZE9ic2VydmFibGUpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IHRoaXMuZHVyYXRpb25TZWxlY3RvcihuZXcgR3JvdXBlZE9ic2VydmFibGUoa2V5LCBncm91cCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmFkZChkdXJhdGlvbi5zdWJzY3JpYmUobmV3IEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyKGtleSwgZ3JvdXAsIHRoaXMpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFncm91cC5jbG9zZWQpIHtcbiAgICAgICAgICAgIGdyb3VwLm5leHQoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEdyb3VwQnlTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBncm91cHMgPSB0aGlzLmdyb3VwcztcbiAgICAgICAgaWYgKGdyb3Vwcykge1xuICAgICAgICAgICAgZ3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBncm91cC5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBncm91cHMuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgfTtcbiAgICBHcm91cEJ5U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ3JvdXBzID0gdGhpcy5ncm91cHM7XG4gICAgICAgIGlmIChncm91cHMpIHtcbiAgICAgICAgICAgIGdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChncm91cCwga2V5KSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZ3JvdXBzLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgR3JvdXBCeVN1YnNjcmliZXIucHJvdG90eXBlLnJlbW92ZUdyb3VwID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB0aGlzLmdyb3Vwcy5kZWxldGUoa2V5KTtcbiAgICB9O1xuICAgIEdyb3VwQnlTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5hdHRlbXB0ZWRUb1Vuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gR3JvdXBCeVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbnZhciBHcm91cER1cmF0aW9uU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhHcm91cER1cmF0aW9uU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBHcm91cER1cmF0aW9uU3Vic2NyaWJlcihrZXksIGdyb3VwLCBwYXJlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZ3JvdXApIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmtleSA9IGtleTtcbiAgICAgICAgX3RoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgICAgX3RoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBHcm91cER1cmF0aW9uU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBwYXJlbnQgPSBfYS5wYXJlbnQsIGtleSA9IF9hLmtleTtcbiAgICAgICAgdGhpcy5rZXkgPSB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVHcm91cChrZXkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gR3JvdXBEdXJhdGlvblN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbnZhciBHcm91cGVkT2JzZXJ2YWJsZSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhHcm91cGVkT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBHcm91cGVkT2JzZXJ2YWJsZShrZXksIGdyb3VwU3ViamVjdCwgcmVmQ291bnRTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMua2V5ID0ga2V5O1xuICAgICAgICBfdGhpcy5ncm91cFN1YmplY3QgPSBncm91cFN1YmplY3Q7XG4gICAgICAgIF90aGlzLnJlZkNvdW50U3Vic2NyaXB0aW9uID0gcmVmQ291bnRTdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgR3JvdXBlZE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCByZWZDb3VudFN1YnNjcmlwdGlvbiA9IF9hLnJlZkNvdW50U3Vic2NyaXB0aW9uLCBncm91cFN1YmplY3QgPSBfYS5ncm91cFN1YmplY3Q7XG4gICAgICAgIGlmIChyZWZDb3VudFN1YnNjcmlwdGlvbiAmJiAhcmVmQ291bnRTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24uYWRkKG5ldyBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uKHJlZkNvdW50U3Vic2NyaXB0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChncm91cFN1YmplY3Quc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBHcm91cGVkT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZSkpO1xuZXhwb3J0IHsgR3JvdXBlZE9ic2VydmFibGUgfTtcbnZhciBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKElubmVyUmVmQ291bnRTdWJzY3JpcHRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW5uZXJSZWZDb3VudFN1YnNjcmlwdGlvbihwYXJlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQuY291bnQrKztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xuICAgICAgICBpZiAoIXBhcmVudC5jbG9zZWQgJiYgIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICBwYXJlbnQuY291bnQgLT0gMTtcbiAgICAgICAgICAgIGlmIChwYXJlbnQuY291bnQgPT09IDAgJiYgcGFyZW50LmF0dGVtcHRlZFRvVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIElubmVyUmVmQ291bnRTdWJzY3JpcHRpb247XG59KFN1YnNjcmlwdGlvbikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JvdXBCeS5qcy5tYXBcbiIsImltcG9ydCB7IE9ic2VydmFibGUsIG9mLCBCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIGlzT2JzZXJ2YWJsZSwgU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IHBsdWNrLCBtYXAsIG1lcmdlTWFwIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XG5pbXBvcnQgeyBFZGdlIH0gZnJvbSBcIi4vRWRnZVwiO1xuaW1wb3J0IHVwZGF0ZSBmcm9tICdpbW11dGFiaWxpdHktaGVscGVyJztcbmltcG9ydCBfZGVmYXVsdCBmcm9tIFwiaW1tdXRhYmlsaXR5LWhlbHBlclwiO1xuXG4vLyBJZiBhIG5hbWUgaXNuJ3Qgc3VwcGxpZWQgZm9yIGEgZ2l2ZW4gcHJvcGVydHksIHRoaXMgaXMgdGhlIG5hbWUgdGhhdCBpcyB1c2VkXG5leHBvcnQgY29uc3QgUFJPUF9ERUZBVUxUX05BTUUgPSAnJztcblxuLy8gUmVwcmVzZW50cyB3aGV0aGVyIGEgZ2l2ZW4gcHJvcGVydHkgaXMgYW4gaW5wdXQgcHJvcGVydHkgb3Igb3V0cHV0IHByb3BlcnR5XG5leHBvcnQgZW51bSBJTyB7IElucHV0PTEsIE91dHB1dD0yIH07XG5cbi8vIEV2ZXJ5IG5vZGUgb3V0cHV0cyBhIGRpY3Rpb25hcnkgd2hlcmUgdGhlIGtleXMgYXJlIHByb3BlcnR5IG5hbWVzIGFuZCB0aGUgdmFsdWVzIGNhbiBiZSBhbnl0aGluZ1xuaW50ZXJmYWNlIE5vZGVPdXRwdXQge1xuICAgIFtuYW1lOiBzdHJpbmddOiBhbnlcbn07XG5cbi8vIEluZm9ybWF0aW9uIGFib3V0IGEgZ2l2ZW4gaW5wdXQgZm9yIGEgbm9kZVxuZXhwb3J0IGludGVyZmFjZSBJbnB1dEluZm8ge1xuICAgIG5hbWU6IHN0cmluZywgLy8gVGhlIG5hbWUgb2YgdGhpcyBpbnB1dFxuICAgIG9wdGlvbmFsPzogYm9vbGVhbiwgLy8gV2hldGhlciBvciBub3QgYSB2YWx1ZSBuZWVkcyB0byBiZSBzdXBwbGllZFxuICAgIGRlZmF1bHQ/OiBhbnksIC8vIHRoZSBkZWZhdWx0IHZhbHVlIGlmIGEgdmFsdWUgaXNuJ3Qgc3VwcGxpZWRcbiAgICByZXN0PzogYm9vbGVhbiwgLy8gd2hldGhlciB0aGlzIGlucHV0IHNob3VsZCBcImNvbnN1bWVcIiBldmVyeXRoaW5nIGVsc2UgcGFzc2VkIHRvIGl0XG4gICAgdHlwZT86IHN0cmluZywgLy8gdGhlIHR5cGUgb2YgdGhpcyBpbnB1dFxuICAgIHJhdz86IGJvb2xlYW4gLy8gV2hldGhlciB0byBpbnB1dCB0aGUgcmF3IHN0cmVhbSBvYmplY3QgaXRzZWxmIChhcyBvcHBvc2VkIHRvIHRoZSB2YWx1ZSBvZiB0aGUgc3RyZWFtKVxufVxuXG4vLyBJbmZvcm1hdGlvbiBhYm91dCBhIGdpdmVuIG91dHB1dCBmb3IgYSBub2RlXG5leHBvcnQgaW50ZXJmYWNlIE91dHB1dEluZm8ge1xuICAgIG5hbWU6IHN0cmluZywgLy8gVGhlIG5hbWUgb2YgdGhpcyBvdXRwdXRcbiAgICB0eXBlPzogc3RyaW5nLCAvLyBUaGUgdHlwZSBvZiB0aGlzIG91dHB1dFxuICAgIHJhdz86IGJvb2xlYW4gLy8gV2hldGhlciB0aGUgb3V0cHV0IHN1cHBsaWVkIHNob3VsZCBiZSB0YWtlbiBhcyBhIHJhdyBzdHJlYW1cbn1cblxuLy8gVGhlIGxheW91dCBvZiBhIGdpdmVuIHByb3BlcnR5OiB4LCB5LCB3aWR0aCwgYW5kIGhlaWdodFxuZXhwb3J0IGludGVyZmFjZSBOb2RlUHJvcExheW91dCB7XG4gICAgeDogbnVtYmVyLFxuICAgIHk6IG51bWJlcixcbiAgICB3aWR0aDogbnVtYmVyLFxuICAgIGhlaWdodDogbnVtYmVyXG59XG5cbi8vIFRoZSBsYXlvdXQgb2YgYSBnaXZlbiBub2RlXG5leHBvcnQgaW50ZXJmYWNlIE5vZGVMYXlvdXQge1xuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgeDogbnVtYmVyLFxuICAgIHk6IG51bWJlcixcbiAgICBpbnB1dHM6IHtcbiAgICAgICAgW25hbWU6IHN0cmluZ106IE5vZGVQcm9wTGF5b3V0XG4gICAgfSxcbiAgICBvdXRwdXRzOiB7XG4gICAgICAgIFtuYW1lOiBzdHJpbmddOiBOb2RlUHJvcExheW91dFxuICAgIH0sXG59XG5cbi8qKlxuICogQSBjbGFzcyByZXByZXNlbnRpbmcgYSBub2RlLiBOb2RlcyBoYXZlIGlucHV0IGFuZCBvdXRwdXQgcHJvcGVydGllcywgZWFjaCBvZiB3aGljaCBoYXMgdmFsdWVzLlxuICogVGhlIG5vZGUgaXRzZWxmIGRvZXMgKm5vdCogaGF2ZSBhIHZhbHVlXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOb2RlIHtcbiAgICBwcml2YXRlIHN0YXRpYyBub2RlQ291bnQ6IG51bWJlciA9IDE7IC8vIEhvdyBtYW55IG5vZGVzIGFyZSB0aGVyZSAodXNlZCBmb3IgZ2V0dGluZyB1bmlxdWUgSURzKVxuXG4gICAgcHJpdmF0ZSBpZDogbnVtYmVyOyAvLyBUaGlzIG5vZGUncyB1bmlxdWUgSURcbiAgICBwcml2YXRlIGluY29taW5nRWRnZXM6IEJlaGF2aW9yU3ViamVjdDxFZGdlW10+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChbXSk7IC8vIEEgc3RyZWFtIHdob3NlIHZhbHVlIGlzIGFuIGFycmF5IG9mIGluY29taW5nIGVkZ2VzXG4gICAgcHJpdmF0ZSBvdXRnb2luZ0VkZ2VzOiBCZWhhdmlvclN1YmplY3Q8RWRnZVtdPiA9IG5ldyBCZWhhdmlvclN1YmplY3QoW10pOyAvLyBBIHN0cmVhbSB3aG9zZSB2YWx1ZSBpcyBhbiBhcnJheSBvZiBvdXRnb2luZyBlZGdlc1xuICAgIHByaXZhdGUgbGF5b3V0OiBTdWJqZWN0PE5vZGVMYXlvdXQ+ID0gbmV3IEJlaGF2aW9yU3ViamVjdCh7IHdpZHRoOiAwLCBoZWlnaHQ6IDAsIHg6IDAsIHk6IDAsIGlucHV0czoge30sIG91dHB1dHM6IHt9IH0pOyAvLyBBIHN0cmVhbSB3aXRoIGluZm8gYWJvdXQgaG93IHRoaXMgbm9kZSBzaG91bGQgYmUgcG9zaXRpb25lZFxuICAgIHByb3RlY3RlZCBpbnB1dFN0cmVhbTogT2JzZXJ2YWJsZTxhbnlbXT47IC8vIEEgc3RyZWFtIHRoYXQgY29tYmluZXMgaW5mb3JtYXRpb24gZnJvbSB0aGlzLmluY29taW5nRWRnZXMgdG8gY29tcHV0ZSAqYWxsKiBvZiB0aGUgaW5wdXRzIHRvIHRoaXMgbm9kZVxuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgbGFiZWw6IHN0cmluZykge1xuICAgICAgICB0aGlzLmlkID0gTm9kZS5ub2RlQ291bnQrKzsgLy8gR2V0IGEgdW5pcXVlIGlkXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgaHVtYW4tcmVhZGFibGUgbGFiZWwgZm9yIHRoaXMgbm9kZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRMYWJlbCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5sYWJlbDsgfSBcblxuICAgIC8qKlxuICAgICAqIEdldCBhIHN0cmVhbSB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHRoaXMgbm9kZSdzIGxheW91dFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRMYXlvdXRTdHJlYW0oKTogT2JzZXJ2YWJsZTxOb2RlTGF5b3V0PiB7IHJldHVybiB0aGlzLmxheW91dDsgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSBsYXlvdXQgb2YgdGhpcyBub2RlIChub3RlOiB0aGlzIHNob3VsZCAqbm90KiBiZSBjYWxsZWQgbWFudWFsbHkpXG4gICAgICogQHBhcmFtIGwgVGhlIG5ldyBsYXlvdXQgZm9yIHRoaXMgbm9kZVxuICAgICAqL1xuICAgIHB1YmxpYyBfc2V0TGF5b3V0KGw6IE5vZGVMYXlvdXQpOiB2b2lkIHsgdGhpcy5sYXlvdXQubmV4dChsKTsgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgXCJpbnB1dFN0cmVhbVwiIHByb3BlcnR5LCB3aGljaCBjb21wdXRlcyBvbmUgb2JqZWN0IG9mIGlucHV0IHZhbHVlcyBmcm9tIHRoaXMgbm9kZSdzIGlucHV0IGVkZ2VzXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGVzdGFibGlzaElucHV0U3RyZWFtKCk6IHZvaWQge1xuICAgICAgICAvL0lucHV0SW5mb1N0cmVhbTogQSBzdHJlYW0gb2YgSW5wdXRJbmZvIGFycmF5c1xuICAgICAgICBjb25zdCBpbnB1dEluZm9TdHJlYW0gPSB0aGlzLmdldElucHV0SW5mb1N0cmVhbSgpO1xuXG4gICAgICAgIC8vIGlucHV0QW5kSW5mbzogQSBzdHJlYW0gd2l0aCBsZW5ndGgtdHdvIGl0ZW1zOlxuICAgICAgICAvLyAgICAxKSB0aGUgZmlyc3QgaXMgYW4gSW5wdXRJbmZvIGFycmF5XG4gICAgICAgIC8vICAgIDIpIGFuIGFycmF5IG9mIEVkZ2VzXG4gICAgICAgIGNvbnN0IGlucHV0QW5kSW5mbyA9IGNvbWJpbmVMYXRlc3QodGhpcy5pbmNvbWluZ0VkZ2VzLCBpbnB1dEluZm9TdHJlYW0pO1xuXG4gICAgICAgIC8vIHRoaXMuaW5wdXRTdHJlYW06IGEgc3RyZWFtIG9mIChhcnJheXMgb2YgKHN0cmVhbXMgb2YgYXJnIHZhbHVlcykgKVxuICAgICAgICB0aGlzLmlucHV0U3RyZWFtID0gaW5wdXRBbmRJbmZvLnBpcGUobWFwKChbaW5jb21pbmdFZGdlcywgaW5wdXRJbmZvXTogW0VkZ2VbXSwgSW5wdXRJbmZvW11dKSA9PiB7XG4gICAgICAgICAgICAvLyBGb3IgZXZlcnkgaW5wdXQgcHJvcGVydHkgKHN0cmluZykgc3BlY2lmaWVkIGJ5IGlucHV0SW5mbywgZ2V0IGFuICphcnJheSBvZiBzdHJlYW1zKiB0aGF0IGFyZSBwb2ludGluZyB0byB0aGF0IGlucHV0IHByb3BlcnR5XG4gICAgICAgICAgICBjb25zdCBwcm9wU3RyZWFtczogTWFwPFN0cmluZywgT2JzZXJ2YWJsZTxhbnk+W10+ID0gbmV3IE1hcCgpO1xuXG4gICAgICAgICAgICAvL0xvdCBhdCBldmVyeSBpbmNvbWluZyBlZGdlIGFuZCBidWNrZXQgdGhlbSBpbnRvIHRoZSBjb3JyZWN0IHByb3BlcnR5XG4gICAgICAgICAgICBpbmNvbWluZ0VkZ2VzLmZvckVhY2goKGVkZ2U6IEVkZ2UpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHByb3AgfSA9IGVkZ2UuZ2V0VG8oKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlZGdlU3RyZWFtID0gZWRnZS5nZXRTdHJlYW0oKTtcbiAgICAgICAgICAgICAgICBpZihwcm9wU3RyZWFtcy5oYXMocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyZWFtcyA9IHByb3BTdHJlYW1zLmdldChwcm9wKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3U3RyZWFtcyA9IHVwZGF0ZShzdHJlYW1zLCB7JHB1c2g6IFtlZGdlU3RyZWFtXX0pO1xuICAgICAgICAgICAgICAgICAgICBwcm9wU3RyZWFtcy5zZXQocHJvcCwgbmV3U3RyZWFtcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcFN0cmVhbXMuc2V0KHByb3AsIFtlZGdlU3RyZWFtXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBtYXAgb2YgaW5wdXQgcHJvcGVydGllcyB0byBsaXN0cyBvZiBzdHJlYW1zLi4uXG4gICAgICAgICAgICAvLyBub3csIHdlIHdhbnQgdG8gY29udmVydCB0aGF0IGludG8gYW4gb3JkZXJlZCBhcnJheSBvZiBhcmd1bWVudCB2YWx1ZXNcbiAgICAgICAgICAgIC8vIHdob3NlIG9yZGVyIGlzIGRldGVybWluZWQgYnkgdGhpcy5pbnB1dEluZm9cblxuICAgICAgICAgICAgY29uc3QgYXJncyA9IFtdO1xuICAgICAgICAgICAgLy8gRm9yIGV2ZXJ5IGlucHV0SW5mby4uLlxuICAgICAgICAgICAgaW5wdXRJbmZvLmZvckVhY2goKGlpOiBJbnB1dEluZm8pOiB2b2lkID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG5hbWUsIHJhdyB9ID0gaWk7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIHN0cmVhbSBmb3IgdGhhdC4uLlxuICAgICAgICAgICAgICAgIGlmKHByb3BTdHJlYW1zLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wcyA9IHByb3BTdHJlYW1zLmdldChuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoaWkucmVzdCkgeyAvLyBJZiB3ZSdyZSBzdXBwb3NlZCB0byBjb25zdW1lIHRoZSByZXN0IG9mIHRoZSBhcmd1bWVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaCguLi5wcm9wcyk7IC8vIEp1c3QgcHVzaCBhbGwgb2YgdGhlbSBpbiB0aGVyZSBhcyBhcmd1bWVudHNcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKHByb3BzLmxlbmd0aCA9PT0gMSkgeyAvLyBJZiB3ZSBoYXZlIG9uZSB0aGluZyBwYXNzZWQgaW4gZm9yIHRoaXMgcHJvcCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYocmF3KSB7IC8vIElmIGl0J3MgcmF3LCB3cmFwIGl0IGluIGFuIG9ic2VydmFibGUgKHNvIHRoYXQgd2hlbiBpdCdzIHVud3JhcHBlZCwgd2UgZ2V0IHRoZSByYXcgc3RyZWFtIGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKG9mKHByb3BzWzBdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChwcm9wc1swXSk7IC8vIE90aGVyd2lzZSwganVzdCBwYXNzIHRoZSBhY3R1YWwgc3RyZWFtXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2godW5kZWZpbmVkKTsgLy8gVGhpcyBzaG91bGRuJ3QgYmUgY2FsbGVkLi4uXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goY29tYmluZUxhdGVzdCguLi5wcm9wcykpOyAvLyBJZiB3ZSBoYXZlIG11bHRpcGxlIGl0ZW1zLCB1c2UgY29tYmluZUxhdGVzdCAoVE9ETzogbm90IHN1cmUgaWYgdGhpcyBpcyBhY3R1YWxseSB0aGUgYmVzdCB0aGluZyB0byBkbylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZihpaS5kZWZhdWx0KSB7IC8vIElmIG5vdGhpbmcgd2FzIHN1cHBsaWVkIGJ1dCB0aGVyZSdzIGEgZGVmYXVsdCB2YWx1ZSwganVzdCB1c2UgdGhlIGRlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKG9mKGlpLmRlZmF1bHQpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2godW5kZWZpbmVkKTsgLy8gT3RoZXJ3aXNlLCBqdXN0IGFkZCBpdCBhcyBhbiB1bmRlZmluZWQgYXJnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gYXJncztcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYSBzdHJlYW0gb2YgbGlzdHMgb2YgaW5jb21pbmcgZWRnZXNcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SW5jb21pbmdFZGdlc1N0cmVhbSgpOiBPYnNlcnZhYmxlPEVkZ2VbXT4geyByZXR1cm4gdGhpcy5pbmNvbWluZ0VkZ2VzOyB9XG4gICAgLyoqXG4gICAgICogR2V0IGEgc3RyZWFtIG9mIGxpc3RzIG9mIG91dGdvaW5nIGVkZ2VzXG4gICAgICovXG4gICAgcHVibGljIGdldE91dGdvaW5nRWRnZXNTdHJlYW0oKTogT2JzZXJ2YWJsZTxFZGdlW10+IHsgcmV0dXJuIHRoaXMub3V0Z29pbmdFZGdlczsgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGFuIGVkZ2UgdGhhdCBwb2ludHMgdG8gb25lIG9mIHRoaXMgbm9kZSdzIGlucHV0IHByb3BzXG4gICAgICogQHBhcmFtIGVkZ2UgVGhlIEVkZ2Ugb2JqZWN0IHRoYXQgcG9pbnRzIHRvIG9uZSBvZiB0aGlzIG5vZGUncyBpbnB1dCBwcm9wc1xuICAgICAqL1xuICAgIHB1YmxpYyBhZGRJbmNvbWluZ0VkZ2UoZWRnZTogRWRnZSk6IHZvaWQge1xuICAgICAgICBjb25zdCBpZSA9IHRoaXMuaW5jb21pbmdFZGdlcy5nZXRWYWx1ZSgpO1xuICAgICAgICBjb25zdCBuZXdJbmNvbWluZ0VkZ2VzID0gdXBkYXRlKGllLCB7JHB1c2g6IFtlZGdlXX0pO1xuICAgICAgICB0aGlzLmluY29taW5nRWRnZXMubmV4dChuZXdJbmNvbWluZ0VkZ2VzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYW4gZWRnZSB0aGF0IHBvaW50cyBmcm9tIG9uZSBvZiB0aGlzIG5vZGUncyBvdXRwdXQgcHJvcHNcbiAgICAgKiBAcGFyYW0gZWRnZSBUaGUgRWRnZSBvYmplY3QgdGhhdCBwb2ludHMgYXdheSBmcm9tIG9uZSBvZiB0aGlzIG5vZGUncyBvdXRwdXQgcHJvcHNcbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkT3V0Z29pbmdFZGdlKGVkZ2U6IEVkZ2UpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgb2UgPSB0aGlzLm91dGdvaW5nRWRnZXMuZ2V0VmFsdWUoKTtcbiAgICAgICAgY29uc3QgbmV3T3V0Z29pbmdFZGdlcyA9IHVwZGF0ZShvZSwgeyRwdXNoOiBbZWRnZV19KTtcbiAgICAgICAgdGhpcy5vdXRnb2luZ0VkZ2VzLm5leHQobmV3T3V0Z29pbmdFZGdlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGVkZ2UgdGhhdCBwb2ludHMgYXQgb25lIG9mIHRoZSBpbnB1dCBwcm9wc1xuICAgICAqIEBwYXJhbSBlZGdlIFRoZSBlZGdlIHRvIHJlbW92ZVxuICAgICAqL1xuICAgIHB1YmxpYyByZW1vdmVJbmNvbWluZ0VkZ2UoZWRnZTogRWRnZSk6IHZvaWQge1xuICAgICAgICBjb25zdCBpZSA9IHRoaXMuaW5jb21pbmdFZGdlcy5nZXRWYWx1ZSgpO1xuICAgICAgICBjb25zdCBpID0gaWUuaW5kZXhPZihlZGdlKTtcbiAgICAgICAgaWYoaT49MCkgeyAvLyBJZiB0aGlzIGVkZ2UgYWN0dWFsbHkgYmVsb25ncyB0byB0aGlzIG5vZGUuLi5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBsaXN0IG9mIGVkZ2VzIHRoYXQgaGFzIGVkZ2UgcmVtb3ZlZCAodXNpbmcgb3AgdGhhdCBkb2VzIG5vdCBtdXRhdGUgdGhlIGFjdHVhbCBhcnJheSlcbiAgICAgICAgICAgIGNvbnN0IG5ld0luY29taW5nRWRnZXMgPSB1cGRhdGUoaWUsIHskc3BsaWNlOiBbW2ksIDFdXX0pO1xuICAgICAgICAgICAgLy8gU2V0IG15IGluY29taW5nIGVkZ2VzIGxpc3QgdG8gdGhhdCBhcnJheSB3aXRob3V0IGVkZ2VcbiAgICAgICAgICAgIHRoaXMuaW5jb21pbmdFZGdlcy5uZXh0KG5ld0luY29taW5nRWRnZXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGVkZ2UgdGhhdCBsZWF2ZXMgZnJvbSBvbmUgb2YgdGhlIG91dHB1dCBwcm9wc1xuICAgICAqIEBwYXJhbSBlZGdlIFRoZSBlZGdlIHRvIHJlbW92ZVxuICAgICAqL1xuICAgIHB1YmxpYyByZW1vdmVPdXRnb2luZ0VkZ2UoZWRnZTogRWRnZSk6IHZvaWQge1xuICAgICAgICBjb25zdCBvZSA9IHRoaXMub3V0Z29pbmdFZGdlcy5nZXRWYWx1ZSgpO1xuICAgICAgICBjb25zdCBpID0gb2UuaW5kZXhPZihlZGdlKTtcbiAgICAgICAgaWYoaT49MCkgeyAvLyBJZiB0aGlzIGVkZ2UgYWN0dWFsbHkgYmVsb25ncyB0byB0aGlzIG5vZGUuLi5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBsaXN0IG9mIGVkZ2VzIHRoYXQgaGFzIGVkZ2UgcmVtb3ZlZCAodXNpbmcgb3AgdGhhdCBkb2VzIG5vdCBtdXRhdGUgdGhlIGFjdHVhbCBhcnJheSlcbiAgICAgICAgICAgIGNvbnN0IG5ld091dGdvaW5nRWRnZXMgPSB1cGRhdGUob2UsIHskc3BsaWNlOiBbW2ksIDFdXX0pO1xuICAgICAgICAgICAgLy8gU2V0IG15IG91dGdvaW5nIGVkZ2VzIGxpc3QgdG8gdGhhdCBhcnJheSB3aXRob3V0IGVkZ2VcbiAgICAgICAgICAgIHRoaXMub3V0Z29pbmdFZGdlcy5uZXh0KG5ld091dGdvaW5nRWRnZXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgc3RyZWFtIHdpdGggdGhpcyBub2RlJ3Mgb3V0cHV0IHZhbHVlcyAoZXZlcnkgb3V0cHV0IHNob3VsZCBiZSBhbiBvYmplY3QpXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGdldE91dHB1dFN0cmVhbSgpOiBPYnNlcnZhYmxlPE5vZGVPdXRwdXQ+O1xuICAgIC8qKlxuICAgICAqIEdldCBhIHN0cmVhbSB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHRoaXMgbm9kZSdzIGlucHV0c1xuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRJbnB1dEluZm9TdHJlYW0oKTogT2JzZXJ2YWJsZTxJbnB1dEluZm9bXT47XG4gICAgLyoqXG4gICAgICogR2V0IGEgc3RyZWFtIHdpdGggaW5mb3JtYXRpb24gYWJvdXQgdGhpcyBub2RlJ3Mgb3V0cHV0c1xuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRPdXRwdXRJbmZvU3RyZWFtKCk6IE9ic2VydmFibGU8T3V0cHV0SW5mb1tdPjtcblxuICAgIC8qKlxuICAgICAqIENsZWFuIHVwIGFmdGVyIHRoaXMgbm9kZSBnZXRzIHJlbW92ZWQgZnJvbSBhIHNjZW5lXG4gICAgICovXG4gICAgcHVibGljIHJlbW92ZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbmNvbWluZ0VkZ2VzLmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMub3V0Z29pbmdFZGdlcy5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLmxheW91dC5jb21wbGV0ZSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBzdHJlYW0gd2l0aCB2YWx1ZXMgb2YgYSBnaXZlbiBvdXRwdXQgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0gcHJvcCBUaGUgbmFtZSBvZiB0aGUgb3V0cHV0IHByb3BlcnR5IHdlIGFyZSBpbnRlcmVzdGVkIGluXG4gICAgICovXG4gICAgcHVibGljIHBsdWNrT3V0cHV0KHByb3A6IHN0cmluZz1QUk9QX0RFRkFVTFRfTkFNRSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IG91dHB1dFN0cmVhbSA9IHRoaXMuZ2V0T3V0cHV0U3RyZWFtKCk7XG4gICAgICAgIHJldHVybiBvdXRwdXRTdHJlYW0ucGlwZShwbHVjayhwcm9wKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoaXMgbm9kZSdzIHVuaXF1ZSBJRFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRJRCgpOiBzdHJpbmcgeyByZXR1cm4gYG5vZGUtJHt0aGlzLmlkfWA7IH1cbn1cblxuLyoqIFxuICogQSBub2RlIHRoYXQgcmVwcmVzZW50cyBhIGNvbnN0YW50IHZhbHVlXG4gKi9cbmV4cG9ydCBjbGFzcyBDb25zdGFudE5vZGUgZXh0ZW5kcyBOb2RlIHtcbiAgICBwcml2YXRlIHN0cmVhbTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIHByaXZhdGUgaW5wdXRJbmZvU3RyZWFtOiBPYnNlcnZhYmxlPElucHV0SW5mb1tdPiA9IG9mKFtdKTsgLy8gVGhlcmUgYXJlIG5vIGlucHV0cyB0byBhIGNvbnN0YW50XG4gICAgcHJpdmF0ZSBvdXRwdXRJbmZvU3RyZWFtOiBPYnNlcnZhYmxlPE91dHB1dEluZm9bXT47XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHZhbHVlOiBhbnksIG91dHB1dEluZm86IE91dHB1dEluZm89e25hbWU6IFBST1BfREVGQVVMVF9OQU1FfSkge1xuICAgICAgICBzdXBlcihgJHt2YWx1ZX1gKTtcbiAgICAgICAgdGhpcy5zdHJlYW0gPSBvZih7IFtvdXRwdXRJbmZvLm5hbWVdOiB2YWx1ZSB9KTsgLy8gVGhlIG91dHB1dCBzdHJlYW1cbiAgICAgICAgdGhpcy5vdXRwdXRJbmZvU3RyZWFtID0gb2YoW291dHB1dEluZm9dKTsgLy8gVGhlcmUgaXMgdHlwaWNhbGx5IG9uZSBvdXRwdXQgd2l0aCB0aGUgZGVmYXVsdCBuYW1lXG4gICAgICAgIHRoaXMuZXN0YWJsaXNoSW5wdXRTdHJlYW0oKTsgLy8gKGRlZmluZWQgYnkgc3VwZXJjbGFzcylcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0T3V0cHV0U3RyZWFtKCk6IE9ic2VydmFibGU8YW55PiB7IHJldHVybiB0aGlzLnN0cmVhbTsgfTtcbiAgICBwdWJsaWMgZ2V0SW5wdXRJbmZvU3RyZWFtKCk6IE9ic2VydmFibGU8SW5wdXRJbmZvW10+IHsgcmV0dXJuIHRoaXMuaW5wdXRJbmZvU3RyZWFtOyB9O1xuICAgIHB1YmxpYyBnZXRPdXRwdXRJbmZvU3RyZWFtKCk6IE9ic2VydmFibGU8T3V0cHV0SW5mb1tdPiB7IHJldHVybiB0aGlzLm91dHB1dEluZm9TdHJlYW07IH07XG59XG5cbi8qKlxuICogQSBzdXBlcmNsYXNzIHRoYXQgcmVwcmVzZW50cyBhbnkgbm9kZSB3aGVyZSB0aGUgaW5wdXQgYW5kIG91dHB1dCBpbmZvIGRvZXMgKm5vdCogY2hhbmdlIG92ZXIgdGltZSAoc2hvdWxkIGJlICBtb3N0IE5vZGVzKVxuICovXG5hYnN0cmFjdCBjbGFzcyBTdGF0aWNJbmZvTm9kZSBleHRlbmRzIE5vZGUge1xuICAgIHByb3RlY3RlZCBvdXQ6IE9ic2VydmFibGU8Tm9kZU91dHB1dD47IC8vIFRoZSBvdXRwdXQgc3RyZWFtIHRoYXRcbiAgICBwcm90ZWN0ZWQgbWFuYWdlZE91dDogT2JzZXJ2YWJsZTxOb2RlT3V0cHV0PjsgLy8gVGhlICphY3R1YWwqIG91dHB1dCBzdHJlYW0gdGhhdCBnZXRzIHBhc3NlZCBvbiAobmVlZCB0byBtYW5hZ2UgZm9yICdyYXcnIHZhbHVlcylcbiAgICBwcml2YXRlIGlucHV0SW5mb1N0cmVhbTogT2JzZXJ2YWJsZTxJbnB1dEluZm9bXT47IC8vIEEgc3RyZWFtIHdpdGggaW5wdXQgaW5mb3JtYXRpb25cbiAgICBwcml2YXRlIG91dHB1dEluZm9TdHJlYW06IE9ic2VydmFibGU8T3V0cHV0SW5mb1tdPjsgLy8gQSBzdHJlYW0gd2l0aCBvdXRwdXQgaW5mb3JtYXRpb25cblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihsYWJlbDogc3RyaW5nLCBpbnB1dHM6IElucHV0SW5mb1tdLCBvdXRwdXQ6IE91dHB1dEluZm9bXSkge1xuICAgICAgICBzdXBlcihsYWJlbCk7XG4gICAgICAgIHRoaXMuaW5wdXRJbmZvU3RyZWFtID0gb2YoaW5wdXRzKTsgLy8gSW5wdXQgaW5mbyBpcyBhIGNvbnN0YW50IHZhbHVlLCBzbyB1c2Ugb2ZcbiAgICAgICAgdGhpcy5vdXRwdXRJbmZvU3RyZWFtID0gb2Yob3V0cHV0KTsgLy8gT3V0cHV0IGluZm8gaXMgYSBjb25zdGFudCB2YWx1ZSwgc28gdXNlIG9mXG4gICAgICAgIHRoaXMuZXN0YWJsaXNoSW5wdXRTdHJlYW0oKTsgLy8gRnJvbSB0aGUgc3VwZXJjbGFzc1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRPdXRwdXRTdHJlYW0oKTogT2JzZXJ2YWJsZTxOb2RlT3V0cHV0PiB7IHJldHVybiB0aGlzLm1hbmFnZWRPdXQ7IH1cbiAgICBwdWJsaWMgZ2V0SW5wdXRJbmZvU3RyZWFtKCk6IE9ic2VydmFibGU8SW5wdXRJbmZvW10+IHsgcmV0dXJuIHRoaXMuaW5wdXRJbmZvU3RyZWFtOyB9XG4gICAgcHVibGljIGdldE91dHB1dEluZm9TdHJlYW0oKTogT2JzZXJ2YWJsZTxPdXRwdXRJbmZvW10+IHsgcmV0dXJuIHRoaXMub3V0cHV0SW5mb1N0cmVhbTsgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIG91dHB1dCBzdHJlYW0gdGhhdCBoYW5kbGVzICdyYXcnIG91dHB1dCBhdHRyaWJ1dGVzXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGVzdGFibGlzaE91dHB1dFN0cmVhbSgpOiB2b2lkIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0aGUgb3V0cHV0SW5mbyBzdHJlYW0gdG8ga25vdyB3aGF0IHNob3VsZCBiZSByYXdcbiAgICAgICAgY29uc3Qgb3V0cHV0SW5mb1N0cmVhbSA9IHRoaXMuZ2V0T3V0cHV0SW5mb1N0cmVhbSgpO1xuXG4gICAgICAgIC8vIENvbWJpbmUgdGhlIGFjdHVhbCBvdXRwdXQgYW5kIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvdXRwdXQgaW50byBvbmUgc3RyZWFtXG4gICAgICAgIGNvbnN0IG91dHB1dEFuZEluZm8gPSBjb21iaW5lTGF0ZXN0KHRoaXMub3V0LCBvdXRwdXRJbmZvU3RyZWFtKVxuXG4gICAgICAgIHRoaXMubWFuYWdlZE91dCA9IG91dHB1dEFuZEluZm8ucGlwZShtZXJnZU1hcCgoW291dFZhbHVlLCBvdXRwdXRJbmZvXTogW05vZGVPdXRwdXQsIE91dHB1dEluZm9bXV0pID0+IHtcbiAgICAgICAgICAgIC8vT3V0VmFsdWUgaXMgYW4gb2JqZWN0IChrZXlzIGFyZSBzdHJpbmdzIGFuZCB2YWx1ZXMgYXJlIHN0cmVhbXMpXG5cbiAgICAgICAgICAgIC8vVGhlIGxpc3Qgb2YgcHJvcGVydGllcyB0aGF0IGFyZSBtYXJrZWQgYXMgcmF3XG4gICAgICAgICAgICBjb25zdCByYXdQcm9wczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KG91dHB1dEluZm8uZmlsdGVyKChvaSkgPT4gb2kucmF3KS5tYXAoKG9pKSA9PiBvaS5uYW1lKSk7XG5cbiAgICAgICAgICAgIC8vIERlY29tcG9zZSB0aGUgb3V0cHV0IG9iamVjdCBpbnRvIGEgbGlzdCBvZiBzdHJlYW1zIHdpdGggaW5kaXZpZHVhbCBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogQSBzdHJlYW0gd2l0aCB2YWx1ZSBPYnNlcnZhYmxlKHthOiAxLCBiOiAyfSkgYmVjb21lcyBbT2JzZXJ2YWJsZSh7YTogMX0pLCBPYnNlcnZhYmxlKHtiOiAyfSldXG4gICAgICAgICAgICBjb25zdCBpbmRpdmlkdWFsRGljdFN0cmVhbXMgPSBPYmplY3Qua2V5cyhvdXRWYWx1ZSkubWFwKChrZXk6IHN0cmluZykgPT4gIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSBvdXRWYWx1ZVtrZXldO1xuICAgICAgICAgICAgICAgIGlmKHJhd1Byb3BzLmhhcyhrZXkpICYmIGlzT2JzZXJ2YWJsZSh2YWwpKSAge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSBzdXBwb3NlZCB0byBvdXRwdXQgdGhlIHJhdyBzdHJlYW0sIGp1c3QgcGlwZSB0aGUgc3RyZWFtJ3MgdmFsdWUgaW50byB0aGlzIHByb3BlcnRpZSdzIHN0cmVhbVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsLnBpcGUobWFwKCh2KSA9PiAoeyBba2V5XTogdiB9KSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwganVzdCByZXR1cm4gYSBzdHJlYW0gd2l0aCBhIHN0YXRpYyB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoeyBba2V5XTogdmFsIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBDb21iaW5lIGFsbCBvZiB0aGUgcHJvcGVydHkgc3RyZWFtcyBiYWNrIGludG8gb25lIG9iamVjdCAobm93LCB0aGUgcmF3IHZhbHVlcyBoYXZlIGJlZW4gaGFuZGxlZClcbiAgICAgICAgICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KC4uLmluZGl2aWR1YWxEaWN0U3RyZWFtcykucGlwZShtYXAoKHZhbCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCAuLi52YWwpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSlcbiAgICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIG5vZGUgdGhhdCBpcyBhIHNpbmdsZSBvcGVyYXRpb24gKHN0YXRpYyBpbmZvcm1hdGlvbiwgYW55IG51bWJlciBvZiBpbnB1dHMsIG9uZSBvdXRwdXQpXG4gKi9cbmV4cG9ydCBjbGFzcyBPcE5vZGUgZXh0ZW5kcyBTdGF0aWNJbmZvTm9kZSB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGxhYmVsOiBzdHJpbmcsIHByaXZhdGUgZnVuYzogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnksIGlucHV0czogSW5wdXRJbmZvW10sIG91dHB1dDogT3V0cHV0SW5mbykge1xuICAgICAgICBzdXBlcihsYWJlbCwgaW5wdXRzLCBbb3V0cHV0XSk7XG4gICAgICAgIHRoaXMuZXN0YWJsaXNoSW5wdXRTdHJlYW0oKTtcblxuICAgICAgICAvLyB0aGlzLmlucHV0U3RyZWFtOiBhIHN0cmVhbSBvZiAoYXJyYXlzIG9mIChzdHJlYW1zIG9mIGFyZyB2YWx1ZXMpIClcbiAgICAgICAgLy8gICB4OiAoMS0tLTItLTMpIC1cXFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICA+LS0gKCspXG4gICAgICAgIC8vICAgeTogKDUtLS02LS0tKSAtL1xuICAgICAgICAvLyB0aGlzLmlucHV0U3RyZWFtOiBTdHJlYW0oIFsgU3RyZWFtKDEsMiwzKSwgU3RyZWFtKDUsNikgXSApXG4gICAgICAgIHRoaXMub3V0ID0gdGhpcy5pbnB1dFN0cmVhbS5waXBlKFxuICAgICAgICAgICAgICAgIG1lcmdlTWFwKChhcmdzOiBPYnNlcnZhYmxlPGFueT5bXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBhcmdzIGlzIGFuIGFycmF5IG9mIHN0cmVhbXNcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QoLi4uYXJncyk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbWFwKChhcmdWYWx1ZXM6IGFueVtdKSA9PiAoeyBbb3V0cHV0Lm5hbWVdOiB0aGlzLmZ1bmMoLi4uYXJnVmFsdWVzKSB9KSAvL2FyZ1ZhbHVlcyBpcyBhbiBhcnJheSBvZiBhcmcgdmFsdWVzXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZXN0YWJsaXNoT3V0cHV0U3RyZWFtKCk7XG4gICAgfVxufVxuXG4vKiogXG4gKiBBIG5vZGUgdGhhdCBnZW5lcmF0ZXMgcmFuZG9tIG51bWJlcnMgYXQgYW4gaW50ZXJ2YWxcbiAqL1xuZXhwb3J0IGNsYXNzIEdlbk5vZGUgZXh0ZW5kcyBTdGF0aWNJbmZvTm9kZSB7XG4gICAgcHJpdmF0ZSBpbnRlcnZhbElEOiBudW1iZXIgPSAtMTsgLy8gVGhlIElEIG9mIHRoZSBKYXZhU2NyaXB0IHRpbWVyXG4gICAgcHJvdGVjdGVkIG91dDogU3ViamVjdDxOb2RlT3V0cHV0PjsgLy8gVGhlIG91cHV0IHN0cmVhbVxuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZyA9ICdnZW4nKSB7XG4gICAgICAgIHN1cGVyKG5hbWUsIFt7XG4gICAgICAgICAgICBuYW1lOiAnZGVsYXknIC8vIG9uZSBpbnB1dCBmb3IgZGVsYXkgYmV0d2VlbiBnZW5lcmF0aW9uc1xuICAgICAgICB9XSwgW3tcbiAgICAgICAgICAgIG5hbWU6IFBST1BfREVGQVVMVF9OQU1FIC8vIG9uZSBwdXRwdXQgd2l0aCB0aGUgcmFuZG9tIG51bWJlclxuICAgICAgICB9XSk7XG4gICAgICAgIHRoaXMub3V0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDx7W2tleTogc3RyaW5nXTogbnVtYmVyfT4odGhpcy5nZXRSYW5kb20oKSk7IC8vIFRoZSBvdXRwdXQgc3RhcnRzIHdpdGggYSByYW5kb20gdmFsdWVcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLmlucHV0U3RyZWFtLnBpcGUoXG4gICAgICAgICAgICBtYXAoKGlucDogT2JzZXJ2YWJsZTxhbnk+W10pID0+IHsgLy8gY29tYmluZSBhbGwgb2YgdGhlIGFyZ3VtZW50cyBpbnRvICBvbmUgYXJyYXlcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tYmluZUxhdGVzdCguLi5pbnApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKS5waXBlKFxuICAgICAgICAgICAgbWVyZ2VNYXAoKGFyZ3M6IE9ic2VydmFibGU8YW55W10+KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gIFRha2UgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBhcmdcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJncy5waXBlKG1hcCgoYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnc1swXVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICkuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIG5leHQ6IChkZWxheTogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gIGRlbGF5IGlzIHRoZSBjdXJyZW50IGRlbGF5IGJldHdlZW4gcmFuZG9tIG51bWJlciBnZW5lcmF0aW9uc1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTsgLy8gY2xlYXIgYW55IGV4aXN0aW5nIHRpbWVyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoZGVsYXkpOyAvLyBhbmQgc2V0IGEgbmV3IHRpbWVyXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVzdGFibGlzaE91dHB1dFN0cmVhbSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFyIGFueSBzZXQgdGltZXIgZm9yIGdlbmVyYXRpbmcgYSBuZXcgbnVtYmVyXG4gICAgICovXG4gICAgcHJpdmF0ZSBjbGVhcigpOiB2b2lkIHtcbiAgICAgICAgaWYodGhpcy5pbnRlcnZhbElEID49IDApIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbElEKTtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWxJRCA9IC0xO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IGEgdGltZXIgZm9yIGdlbmVyYXRpbmcgYSBuZXcgbnVtYmVyXG4gICAgICogQHBhcmFtIGRlbGF5IEhvdyBsb25nIHRvIHdhaXQgYmVmb3JlIGdlbmVyYXRpbmcgYSBuZXcgbnVtYmVyXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXQoZGVsYXk6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmludGVydmFsSUQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm91dC5uZXh0KHRoaXMuZ2V0UmFuZG9tKCkpO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgbmV3IHJhbmRvbSBudW1iZXJcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldFJhbmRvbSgpOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9IHtcbiAgICAgICAgcmV0dXJuIHsgW1BST1BfREVGQVVMVF9OQU1FXTogTWF0aC5yYW5kb20oKSB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhpcyBub2RlIGZyb20gdGhlIHNjZW5lXG4gICAgICovXG4gICAgcHVibGljIHJlbW92ZSgpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5vdXQuY29tcGxldGUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9O1xufSIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBzdGFja0NsZWFyID0gcmVxdWlyZSgnLi9fc3RhY2tDbGVhcicpLFxuICAgIHN0YWNrRGVsZXRlID0gcmVxdWlyZSgnLi9fc3RhY2tEZWxldGUnKSxcbiAgICBzdGFja0dldCA9IHJlcXVpcmUoJy4vX3N0YWNrR2V0JyksXG4gICAgc3RhY2tIYXMgPSByZXF1aXJlKCcuL19zdGFja0hhcycpLFxuICAgIHN0YWNrU2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YWNrO1xuIiwidmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDYWNoZTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlQ3JlYXRlO1xuIiwidmFyIGlzS2V5YWJsZSA9IHJlcXVpcmUoJy4vX2lzS2V5YWJsZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFwRGF0YTtcbiIsInZhciBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ25WYWx1ZTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2RlZmluZVByb3BlcnR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnblZhbHVlO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFByb3RvdHlwZTtcbiIsInZhciBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGNyZWF0ZUJhc2VFYWNoID0gcmVxdWlyZSgnLi9fY3JlYXRlQmFzZUVhY2gnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqL1xudmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUVhY2g7XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICBzdHJpbmdUb1BhdGggPSByZXF1aXJlKCcuL19zdHJpbmdUb1BhdGgnKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYXN0UGF0aDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlNYXA7XG4iLCJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5JyksXG4gICAgb3ZlclJlc3QgPSByZXF1aXJlKCcuL19vdmVyUmVzdCcpLFxuICAgIHNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fc2V0VG9TdHJpbmcnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVJlc3Q7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICkge1xuICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSXRlcmF0ZWVDYWxsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvbmdlc3RQYXRoOiBsb25nZXN0UGF0aCxcbiAgc2xhY2s6IHNsYWNrXG59O1xuXG4vKlxuICogSW5pdGlhbGl6ZXMgcmFua3MgZm9yIHRoZSBpbnB1dCBncmFwaCB1c2luZyB0aGUgbG9uZ2VzdCBwYXRoIGFsZ29yaXRobS4gVGhpc1xuICogYWxnb3JpdGhtIHNjYWxlcyB3ZWxsIGFuZCBpcyBmYXN0IGluIHByYWN0aWNlLCBpdCB5aWVsZHMgcmF0aGVyIHBvb3JcbiAqIHNvbHV0aW9ucy4gTm9kZXMgYXJlIHB1c2hlZCB0byB0aGUgbG93ZXN0IGxheWVyIHBvc3NpYmxlLCBsZWF2aW5nIHRoZSBib3R0b21cbiAqIHJhbmtzIHdpZGUgYW5kIGxlYXZpbmcgZWRnZXMgbG9uZ2VyIHRoYW4gbmVjZXNzYXJ5LiBIb3dldmVyLCBkdWUgdG8gaXRzXG4gKiBzcGVlZCwgdGhpcyBhbGdvcml0aG0gaXMgZ29vZCBmb3IgZ2V0dGluZyBhbiBpbml0aWFsIHJhbmtpbmcgdGhhdCBjYW4gYmUgZmVkXG4gKiBpbnRvIG90aGVyIGFsZ29yaXRobXMuXG4gKlxuICogVGhpcyBhbGdvcml0aG0gZG9lcyBub3Qgbm9ybWFsaXplIGxheWVycyBiZWNhdXNlIGl0IHdpbGwgYmUgdXNlZCBieSBvdGhlclxuICogYWxnb3JpdGhtcyBpbiBtb3N0IGNhc2VzLiBJZiB1c2luZyB0aGlzIGFsZ29yaXRobSBkaXJlY3RseSwgYmUgc3VyZSB0b1xuICogcnVuIG5vcm1hbGl6ZSBhdCB0aGUgZW5kLlxuICpcbiAqIFByZS1jb25kaXRpb25zOlxuICpcbiAqICAgIDEuIElucHV0IGdyYXBoIGlzIGEgREFHLlxuICogICAgMi4gSW5wdXQgZ3JhcGggbm9kZSBsYWJlbHMgY2FuIGJlIGFzc2lnbmVkIHByb3BlcnRpZXMuXG4gKlxuICogUG9zdC1jb25kaXRpb25zOlxuICpcbiAqICAgIDEuIEVhY2ggbm9kZSB3aWxsIGJlIGFzc2lnbiBhbiAodW5ub3JtYWxpemVkKSBcInJhbmtcIiBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gbG9uZ2VzdFBhdGgoZykge1xuICB2YXIgdmlzaXRlZCA9IHt9O1xuXG4gIGZ1bmN0aW9uIGRmcyh2KSB7XG4gICAgdmFyIGxhYmVsID0gZy5ub2RlKHYpO1xuICAgIGlmIChfLmhhcyh2aXNpdGVkLCB2KSkge1xuICAgICAgcmV0dXJuIGxhYmVsLnJhbms7XG4gICAgfVxuICAgIHZpc2l0ZWRbdl0gPSB0cnVlO1xuXG4gICAgdmFyIHJhbmsgPSBfLm1pbihfLm1hcChnLm91dEVkZ2VzKHYpLCBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gZGZzKGUudykgLSBnLmVkZ2UoZSkubWlubGVuO1xuICAgIH0pKTtcblxuICAgIGlmIChyYW5rID09PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgfHwgLy8gcmV0dXJuIHZhbHVlIG9mIF8ubWFwKFtdKSBmb3IgTG9kYXNoIDNcbiAgICAgICAgcmFuayA9PT0gdW5kZWZpbmVkIHx8IC8vIHJldHVybiB2YWx1ZSBvZiBfLm1hcChbXSkgZm9yIExvZGFzaCA0XG4gICAgICAgIHJhbmsgPT09IG51bGwpIHsgLy8gcmV0dXJuIHZhbHVlIG9mIF8ubWFwKFtudWxsXSlcbiAgICAgIHJhbmsgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiAobGFiZWwucmFuayA9IHJhbmspO1xuICB9XG5cbiAgXy5mb3JFYWNoKGcuc291cmNlcygpLCBkZnMpO1xufVxuXG4vKlxuICogUmV0dXJucyB0aGUgYW1vdW50IG9mIHNsYWNrIGZvciB0aGUgZ2l2ZW4gZWRnZS4gVGhlIHNsYWNrIGlzIGRlZmluZWQgYXMgdGhlXG4gKiBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGxlbmd0aCBvZiB0aGUgZWRnZSBhbmQgaXRzIG1pbmltdW0gbGVuZ3RoLlxuICovXG5mdW5jdGlvbiBzbGFjayhnLCBlKSB7XG4gIHJldHVybiBnLm5vZGUoZS53KS5yYW5rIC0gZy5ub2RlKGUudikucmFuayAtIGcuZWRnZShlKS5taW5sZW47XG59XG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIGF1ZGl0KGR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYXVkaXRPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEF1ZGl0T3BlcmF0b3IoZHVyYXRpb25TZWxlY3RvcikpO1xuICAgIH07XG59XG52YXIgQXVkaXRPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBdWRpdE9wZXJhdG9yKGR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3RvcjtcbiAgICB9XG4gICAgQXVkaXRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEF1ZGl0U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmR1cmF0aW9uU2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBBdWRpdE9wZXJhdG9yO1xufSgpKTtcbnZhciBBdWRpdFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQXVkaXRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEF1ZGl0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXVkaXRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICBpZiAoIXRoaXMudGhyb3R0bGVkKSB7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvblNlbGVjdG9yID0gdGhpcy5kdXJhdGlvblNlbGVjdG9yO1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gZHVyYXRpb25TZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGlmICghaW5uZXJTdWJzY3JpcHRpb24gfHwgaW5uZXJTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhclRocm90dGxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZCh0aGlzLnRocm90dGxlZCA9IGlubmVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQXVkaXRTdWJzY3JpYmVyLnByb3RvdHlwZS5jbGVhclRocm90dGxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCB2YWx1ZSA9IF9hLnZhbHVlLCBoYXNWYWx1ZSA9IF9hLmhhc1ZhbHVlLCB0aHJvdHRsZWQgPSBfYS50aHJvdHRsZWQ7XG4gICAgICAgIGlmICh0aHJvdHRsZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHRocm90dGxlZCk7XG4gICAgICAgICAgICB0aGlzLnRocm90dGxlZCA9IG51bGw7XG4gICAgICAgICAgICB0aHJvdHRsZWQudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXVkaXRTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgpIHtcbiAgICAgICAgdGhpcy5jbGVhclRocm90dGxlKCk7XG4gICAgfTtcbiAgICBBdWRpdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNsZWFyVGhyb3R0bGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBBdWRpdFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXVkaXQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zY2hlZHVsZXJfYXN5bmMsX2F1ZGl0LF9vYnNlcnZhYmxlX3RpbWVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IGF1ZGl0IH0gZnJvbSAnLi9hdWRpdCc7XG5pbXBvcnQgeyB0aW1lciB9IGZyb20gJy4uL29ic2VydmFibGUvdGltZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGF1ZGl0VGltZShkdXJhdGlvbiwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFzeW5jO1xuICAgIH1cbiAgICByZXR1cm4gYXVkaXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGltZXIoZHVyYXRpb24sIHNjaGVkdWxlcik7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXVkaXRUaW1lLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiBidWZmZXIoY2xvc2luZ05vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJ1ZmZlck9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgQnVmZmVyT3BlcmF0b3IoY2xvc2luZ05vdGlmaWVyKSk7XG4gICAgfTtcbn1cbnZhciBCdWZmZXJPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdWZmZXJPcGVyYXRvcihjbG9zaW5nTm90aWZpZXIpIHtcbiAgICAgICAgdGhpcy5jbG9zaW5nTm90aWZpZXIgPSBjbG9zaW5nTm90aWZpZXI7XG4gICAgfVxuICAgIEJ1ZmZlck9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgQnVmZmVyU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNsb3NpbmdOb3RpZmllcikpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlck9wZXJhdG9yO1xufSgpKTtcbnZhciBCdWZmZXJTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEJ1ZmZlclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY2xvc2luZ05vdGlmaWVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgX3RoaXMuYWRkKHN1YnNjcmliZVRvUmVzdWx0KF90aGlzLCBjbG9zaW5nTm90aWZpZXIpKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBCdWZmZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICB9O1xuICAgIEJ1ZmZlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoYnVmZmVyKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBidWZmZXJDb3VudChidWZmZXJTaXplLCBzdGFydEJ1ZmZlckV2ZXJ5KSB7XG4gICAgaWYgKHN0YXJ0QnVmZmVyRXZlcnkgPT09IHZvaWQgMCkge1xuICAgICAgICBzdGFydEJ1ZmZlckV2ZXJ5ID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJ1ZmZlckNvdW50T3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBCdWZmZXJDb3VudE9wZXJhdG9yKGJ1ZmZlclNpemUsIHN0YXJ0QnVmZmVyRXZlcnkpKTtcbiAgICB9O1xufVxudmFyIEJ1ZmZlckNvdW50T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyQ291bnRPcGVyYXRvcihidWZmZXJTaXplLCBzdGFydEJ1ZmZlckV2ZXJ5KSB7XG4gICAgICAgIHRoaXMuYnVmZmVyU2l6ZSA9IGJ1ZmZlclNpemU7XG4gICAgICAgIHRoaXMuc3RhcnRCdWZmZXJFdmVyeSA9IHN0YXJ0QnVmZmVyRXZlcnk7XG4gICAgICAgIGlmICghc3RhcnRCdWZmZXJFdmVyeSB8fCBidWZmZXJTaXplID09PSBzdGFydEJ1ZmZlckV2ZXJ5KSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZXJDbGFzcyA9IEJ1ZmZlckNvdW50U3Vic2NyaWJlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlckNsYXNzID0gQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBCdWZmZXJDb3VudE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgdGhpcy5zdWJzY3JpYmVyQ2xhc3Moc3Vic2NyaWJlciwgdGhpcy5idWZmZXJTaXplLCB0aGlzLnN0YXJ0QnVmZmVyRXZlcnkpKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJDb3VudE9wZXJhdG9yO1xufSgpKTtcbnZhciBCdWZmZXJDb3VudFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQnVmZmVyQ291bnRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJ1ZmZlckNvdW50U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgYnVmZmVyU2l6ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYnVmZmVyU2l6ZSA9IGJ1ZmZlclNpemU7XG4gICAgICAgIF90aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEJ1ZmZlckNvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBidWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoID09IHRoaXMuYnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyQ291bnRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG52YXIgQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJ1ZmZlclNraXBDb3VudFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGJ1ZmZlclNpemUsIHN0YXJ0QnVmZmVyRXZlcnkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmJ1ZmZlclNpemUgPSBidWZmZXJTaXplO1xuICAgICAgICBfdGhpcy5zdGFydEJ1ZmZlckV2ZXJ5ID0gc3RhcnRCdWZmZXJFdmVyeTtcbiAgICAgICAgX3RoaXMuYnVmZmVycyA9IFtdO1xuICAgICAgICBfdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgYnVmZmVyU2l6ZSA9IF9hLmJ1ZmZlclNpemUsIHN0YXJ0QnVmZmVyRXZlcnkgPSBfYS5zdGFydEJ1ZmZlckV2ZXJ5LCBidWZmZXJzID0gX2EuYnVmZmVycywgY291bnQgPSBfYS5jb3VudDtcbiAgICAgICAgdGhpcy5jb3VudCsrO1xuICAgICAgICBpZiAoY291bnQgJSBzdGFydEJ1ZmZlckV2ZXJ5ID09PSAwKSB7XG4gICAgICAgICAgICBidWZmZXJzLnB1c2goW10pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSBidWZmZXJzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGJ1ZmZlcnNbaV07XG4gICAgICAgICAgICBidWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gYnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGJ1ZmZlcnMgPSBfYS5idWZmZXJzLCBkZXN0aW5hdGlvbiA9IF9hLmRlc3RpbmF0aW9uO1xuICAgICAgICB3aGlsZSAoYnVmZmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gYnVmZmVycy5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyQ291bnQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9zY2hlZHVsZXJfYXN5bmMsX1N1YnNjcmliZXIsX3V0aWxfaXNTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyVGltZShidWZmZXJUaW1lU3Bhbikge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBzY2hlZHVsZXIgPSBhc3luYztcbiAgICBpZiAoaXNTY2hlZHVsZXIoYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSkpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgbGVuZ3RoLS07XG4gICAgfVxuICAgIHZhciBidWZmZXJDcmVhdGlvbkludGVydmFsID0gbnVsbDtcbiAgICBpZiAobGVuZ3RoID49IDIpIHtcbiAgICAgICAgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCA9IGFyZ3VtZW50c1sxXTtcbiAgICB9XG4gICAgdmFyIG1heEJ1ZmZlclNpemUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgaWYgKGxlbmd0aCA+PSAzKSB7XG4gICAgICAgIG1heEJ1ZmZlclNpemUgPSBhcmd1bWVudHNbMl07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBidWZmZXJUaW1lT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBCdWZmZXJUaW1lT3BlcmF0b3IoYnVmZmVyVGltZVNwYW4sIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIG1heEJ1ZmZlclNpemUsIHNjaGVkdWxlcikpO1xuICAgIH07XG59XG52YXIgQnVmZmVyVGltZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJ1ZmZlclRpbWVPcGVyYXRvcihidWZmZXJUaW1lU3BhbiwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgbWF4QnVmZmVyU2l6ZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyVGltZVNwYW4gPSBidWZmZXJUaW1lU3BhbjtcbiAgICAgICAgdGhpcy5idWZmZXJDcmVhdGlvbkludGVydmFsID0gYnVmZmVyQ3JlYXRpb25JbnRlcnZhbDtcbiAgICAgICAgdGhpcy5tYXhCdWZmZXJTaXplID0gbWF4QnVmZmVyU2l6ZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgfVxuICAgIEJ1ZmZlclRpbWVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEJ1ZmZlclRpbWVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuYnVmZmVyVGltZVNwYW4sIHRoaXMuYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgdGhpcy5tYXhCdWZmZXJTaXplLCB0aGlzLnNjaGVkdWxlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlclRpbWVPcGVyYXRvcjtcbn0oKSk7XG52YXIgQ29udGV4dCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb250ZXh0KCkge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gQ29udGV4dDtcbn0oKSk7XG52YXIgQnVmZmVyVGltZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQnVmZmVyVGltZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyVGltZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGJ1ZmZlclRpbWVTcGFuLCBidWZmZXJDcmVhdGlvbkludGVydmFsLCBtYXhCdWZmZXJTaXplLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmJ1ZmZlclRpbWVTcGFuID0gYnVmZmVyVGltZVNwYW47XG4gICAgICAgIF90aGlzLmJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgPSBidWZmZXJDcmVhdGlvbkludGVydmFsO1xuICAgICAgICBfdGhpcy5tYXhCdWZmZXJTaXplID0gbWF4QnVmZmVyU2l6ZTtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5jb250ZXh0cyA9IFtdO1xuICAgICAgICB2YXIgY29udGV4dCA9IF90aGlzLm9wZW5Db250ZXh0KCk7XG4gICAgICAgIF90aGlzLnRpbWVzcGFuT25seSA9IGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgPT0gbnVsbCB8fCBidWZmZXJDcmVhdGlvbkludGVydmFsIDwgMDtcbiAgICAgICAgaWYgKF90aGlzLnRpbWVzcGFuT25seSkge1xuICAgICAgICAgICAgdmFyIHRpbWVTcGFuT25seVN0YXRlID0geyBzdWJzY3JpYmVyOiBfdGhpcywgY29udGV4dDogY29udGV4dCwgYnVmZmVyVGltZVNwYW46IGJ1ZmZlclRpbWVTcGFuIH07XG4gICAgICAgICAgICBfdGhpcy5hZGQoY29udGV4dC5jbG9zZUFjdGlvbiA9IHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaEJ1ZmZlclRpbWVTcGFuT25seSwgYnVmZmVyVGltZVNwYW4sIHRpbWVTcGFuT25seVN0YXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY2xvc2VTdGF0ZSA9IHsgc3Vic2NyaWJlcjogX3RoaXMsIGNvbnRleHQ6IGNvbnRleHQgfTtcbiAgICAgICAgICAgIHZhciBjcmVhdGlvblN0YXRlID0geyBidWZmZXJUaW1lU3BhbjogYnVmZmVyVGltZVNwYW4sIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWw6IGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIHN1YnNjcmliZXI6IF90aGlzLCBzY2hlZHVsZXI6IHNjaGVkdWxlciB9O1xuICAgICAgICAgICAgX3RoaXMuYWRkKGNvbnRleHQuY2xvc2VBY3Rpb24gPSBzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hCdWZmZXJDbG9zZSwgYnVmZmVyVGltZVNwYW4sIGNsb3NlU3RhdGUpKTtcbiAgICAgICAgICAgIF90aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hCdWZmZXJDcmVhdGlvbiwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgY3JlYXRpb25TdGF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHZhciBsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgIHZhciBmaWxsZWRCdWZmZXJDb250ZXh0O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8xID0gY29udGV4dHNbaV07XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gY29udGV4dF8xLmJ1ZmZlcjtcbiAgICAgICAgICAgIGJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChidWZmZXIubGVuZ3RoID09IHRoaXMubWF4QnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgICAgIGZpbGxlZEJ1ZmZlckNvbnRleHQgPSBjb250ZXh0XzE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbGxlZEJ1ZmZlckNvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMub25CdWZmZXJGdWxsKGZpbGxlZEJ1ZmZlckNvbnRleHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmNvbnRleHRzLmxlbmd0aCA9IDA7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2Vycm9yLmNhbGwodGhpcywgZXJyKTtcbiAgICB9O1xuICAgIEJ1ZmZlclRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGNvbnRleHRzID0gX2EuY29udGV4dHMsIGRlc3RpbmF0aW9uID0gX2EuZGVzdGluYXRpb247XG4gICAgICAgIHdoaWxlIChjb250ZXh0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8yID0gY29udGV4dHMuc2hpZnQoKTtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQoY29udGV4dF8yLmJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIEJ1ZmZlclRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29udGV4dHMgPSBudWxsO1xuICAgIH07XG4gICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLm9uQnVmZmVyRnVsbCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY2xvc2VDb250ZXh0KGNvbnRleHQpO1xuICAgICAgICB2YXIgY2xvc2VBY3Rpb24gPSBjb250ZXh0LmNsb3NlQWN0aW9uO1xuICAgICAgICBjbG9zZUFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnJlbW92ZShjbG9zZUFjdGlvbik7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQgJiYgdGhpcy50aW1lc3Bhbk9ubHkpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSB0aGlzLm9wZW5Db250ZXh0KCk7XG4gICAgICAgICAgICB2YXIgYnVmZmVyVGltZVNwYW4gPSB0aGlzLmJ1ZmZlclRpbWVTcGFuO1xuICAgICAgICAgICAgdmFyIHRpbWVTcGFuT25seVN0YXRlID0geyBzdWJzY3JpYmVyOiB0aGlzLCBjb250ZXh0OiBjb250ZXh0LCBidWZmZXJUaW1lU3BhbjogYnVmZmVyVGltZVNwYW4gfTtcbiAgICAgICAgICAgIHRoaXMuYWRkKGNvbnRleHQuY2xvc2VBY3Rpb24gPSB0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaEJ1ZmZlclRpbWVTcGFuT25seSwgYnVmZmVyVGltZVNwYW4sIHRpbWVTcGFuT25seVN0YXRlKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlclRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5vcGVuQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCgpO1xuICAgICAgICB0aGlzLmNvbnRleHRzLnB1c2goY29udGV4dCk7XG4gICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH07XG4gICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLmNsb3NlQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChjb250ZXh0LmJ1ZmZlcik7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHZhciBzcGxpY2VJbmRleCA9IGNvbnRleHRzID8gY29udGV4dHMuaW5kZXhPZihjb250ZXh0KSA6IC0xO1xuICAgICAgICBpZiAoc3BsaWNlSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgY29udGV4dHMuc3BsaWNlKGNvbnRleHRzLmluZGV4T2YoY29udGV4dCksIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyVGltZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmZ1bmN0aW9uIGRpc3BhdGNoQnVmZmVyVGltZVNwYW5Pbmx5KHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuICAgIHZhciBwcmV2Q29udGV4dCA9IHN0YXRlLmNvbnRleHQ7XG4gICAgaWYgKHByZXZDb250ZXh0KSB7XG4gICAgICAgIHN1YnNjcmliZXIuY2xvc2VDb250ZXh0KHByZXZDb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICBzdGF0ZS5jb250ZXh0ID0gc3Vic2NyaWJlci5vcGVuQ29udGV4dCgpO1xuICAgICAgICBzdGF0ZS5jb250ZXh0LmNsb3NlQWN0aW9uID0gdGhpcy5zY2hlZHVsZShzdGF0ZSwgc3RhdGUuYnVmZmVyVGltZVNwYW4pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoQnVmZmVyQ3JlYXRpb24oc3RhdGUpIHtcbiAgICB2YXIgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCA9IHN0YXRlLmJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIGJ1ZmZlclRpbWVTcGFuID0gc3RhdGUuYnVmZmVyVGltZVNwYW4sIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBzY2hlZHVsZXIgPSBzdGF0ZS5zY2hlZHVsZXI7XG4gICAgdmFyIGNvbnRleHQgPSBzdWJzY3JpYmVyLm9wZW5Db250ZXh0KCk7XG4gICAgdmFyIGFjdGlvbiA9IHRoaXM7XG4gICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICBzdWJzY3JpYmVyLmFkZChjb250ZXh0LmNsb3NlQWN0aW9uID0gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoQnVmZmVyQ2xvc2UsIGJ1ZmZlclRpbWVTcGFuLCB7IHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIGNvbnRleHQ6IGNvbnRleHQgfSkpO1xuICAgICAgICBhY3Rpb24uc2NoZWR1bGUoc3RhdGUsIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoQnVmZmVyQ2xvc2UoYXJnKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBhcmcuc3Vic2NyaWJlciwgY29udGV4dCA9IGFyZy5jb250ZXh0O1xuICAgIHN1YnNjcmliZXIuY2xvc2VDb250ZXh0KGNvbnRleHQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyVGltZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmlwdGlvbixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCxfT3V0ZXJTdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyVG9nZ2xlKG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYnVmZmVyVG9nZ2xlT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBCdWZmZXJUb2dnbGVPcGVyYXRvcihvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSk7XG4gICAgfTtcbn1cbnZhciBCdWZmZXJUb2dnbGVPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdWZmZXJUb2dnbGVPcGVyYXRvcihvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMub3BlbmluZ3MgPSBvcGVuaW5ncztcbiAgICAgICAgdGhpcy5jbG9zaW5nU2VsZWN0b3IgPSBjbG9zaW5nU2VsZWN0b3I7XG4gICAgfVxuICAgIEJ1ZmZlclRvZ2dsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm9wZW5pbmdzLCB0aGlzLmNsb3NpbmdTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlclRvZ2dsZU9wZXJhdG9yO1xufSgpKTtcbnZhciBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyVG9nZ2xlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb3BlbmluZ3MsIGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub3BlbmluZ3MgPSBvcGVuaW5ncztcbiAgICAgICAgX3RoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuICAgICAgICBfdGhpcy5jb250ZXh0cyA9IFtdO1xuICAgICAgICBfdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHQoX3RoaXMsIG9wZW5pbmdzKSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgdmFyIGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29udGV4dHNbaV0uYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHdoaWxlIChjb250ZXh0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8xID0gY29udGV4dHMuc2hpZnQoKTtcbiAgICAgICAgICAgIGNvbnRleHRfMS5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGNvbnRleHRfMS5idWZmZXIgPSBudWxsO1xuICAgICAgICAgICAgY29udGV4dF8xLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb250ZXh0cyA9IG51bGw7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2Vycm9yLmNhbGwodGhpcywgZXJyKTtcbiAgICB9O1xuICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgd2hpbGUgKGNvbnRleHRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzIgPSBjb250ZXh0cy5zaGlmdCgpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGNvbnRleHRfMi5idWZmZXIpO1xuICAgICAgICAgICAgY29udGV4dF8yLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgY29udGV4dF8yLmJ1ZmZlciA9IG51bGw7XG4gICAgICAgICAgICBjb250ZXh0XzIuc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRleHRzID0gbnVsbDtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgb3V0ZXJWYWx1ZSA/IHRoaXMuY2xvc2VCdWZmZXIob3V0ZXJWYWx1ZSkgOiB0aGlzLm9wZW5CdWZmZXIoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmNsb3NlQnVmZmVyKGlubmVyU3ViLmNvbnRleHQpO1xuICAgIH07XG4gICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUub3BlbkJ1ZmZlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGNsb3NpbmdTZWxlY3RvciA9IHRoaXMuY2xvc2luZ1NlbGVjdG9yO1xuICAgICAgICAgICAgdmFyIGNsb3NpbmdOb3RpZmllciA9IGNsb3NpbmdTZWxlY3Rvci5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChjbG9zaW5nTm90aWZpZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyeVN1YnNjcmliZShjbG9zaW5nTm90aWZpZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLmNsb3NlQnVmZmVyID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgaWYgKGNvbnRleHRzICYmIGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBjb250ZXh0LmJ1ZmZlciwgc3Vic2NyaXB0aW9uID0gY29udGV4dC5zdWJzY3JpcHRpb247XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoYnVmZmVyKTtcbiAgICAgICAgICAgIGNvbnRleHRzLnNwbGljZShjb250ZXh0cy5pbmRleE9mKGNvbnRleHQpLCAxKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKGNsb3NpbmdOb3RpZmllcikge1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB2YXIgYnVmZmVyID0gW107XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHZhciBjb250ZXh0ID0geyBidWZmZXI6IGJ1ZmZlciwgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb24gfTtcbiAgICAgICAgY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgY2xvc2luZ05vdGlmaWVyLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKCFpbm5lclN1YnNjcmlwdGlvbiB8fCBpbm5lclN1YnNjcmlwdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VCdWZmZXIoY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbm5lclN1YnNjcmlwdGlvbi5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgICAgIHRoaXMuYWRkKGlubmVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5hZGQoaW5uZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyVG9nZ2xlU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJUb2dnbGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpcHRpb24sX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlcldoZW4oY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBCdWZmZXJXaGVuT3BlcmF0b3IoY2xvc2luZ1NlbGVjdG9yKSk7XG4gICAgfTtcbn1cbnZhciBCdWZmZXJXaGVuT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyV2hlbk9wZXJhdG9yKGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3RvcjtcbiAgICB9XG4gICAgQnVmZmVyV2hlbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgQnVmZmVyV2hlblN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jbG9zaW5nU2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJXaGVuT3BlcmF0b3I7XG59KCkpO1xudmFyIEJ1ZmZlcldoZW5TdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEJ1ZmZlcldoZW5TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJ1ZmZlcldoZW5TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuc3Vic2NyaWJpbmcgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMub3BlbkJ1ZmZlcigpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICB9O1xuICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmluZyA9IGZhbHNlO1xuICAgIH07XG4gICAgQnVmZmVyV2hlblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5vcGVuQnVmZmVyKCk7XG4gICAgfTtcbiAgICBCdWZmZXJXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmliaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5CdWZmZXIoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyV2hlblN1YnNjcmliZXIucHJvdG90eXBlLm9wZW5CdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjbG9zaW5nU3Vic2NyaXB0aW9uID0gdGhpcy5jbG9zaW5nU3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoY2xvc2luZ1N1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoY2xvc2luZ1N1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBjbG9zaW5nU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBpZiAodGhpcy5idWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgICAgIHZhciBjbG9zaW5nTm90aWZpZXI7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY2xvc2luZ1NlbGVjdG9yID0gdGhpcy5jbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgICAgICBjbG9zaW5nTm90aWZpZXIgPSBjbG9zaW5nU2VsZWN0b3IoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGNsb3NpbmdTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMuY2xvc2luZ1N1YnNjcmlwdGlvbiA9IGNsb3NpbmdTdWJzY3JpcHRpb247XG4gICAgICAgIHRoaXMuYWRkKGNsb3NpbmdTdWJzY3JpcHRpb24pO1xuICAgICAgICB0aGlzLnN1YnNjcmliaW5nID0gdHJ1ZTtcbiAgICAgICAgY2xvc2luZ1N1YnNjcmlwdGlvbi5hZGQoc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgY2xvc2luZ05vdGlmaWVyKSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJpbmcgPSBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJXaGVuU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJXaGVuLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF9Jbm5lclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBJbm5lclN1YnNjcmliZXIgfSBmcm9tICcuLi9Jbm5lclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiBjYXRjaEVycm9yKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNhdGNoRXJyb3JPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICB2YXIgb3BlcmF0b3IgPSBuZXcgQ2F0Y2hPcGVyYXRvcihzZWxlY3Rvcik7XG4gICAgICAgIHZhciBjYXVnaHQgPSBzb3VyY2UubGlmdChvcGVyYXRvcik7XG4gICAgICAgIHJldHVybiAob3BlcmF0b3IuY2F1Z2h0ID0gY2F1Z2h0KTtcbiAgICB9O1xufVxudmFyIENhdGNoT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2F0Y2hPcGVyYXRvcihzZWxlY3Rvcikge1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgfVxuICAgIENhdGNoT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBDYXRjaFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5zZWxlY3RvciwgdGhpcy5jYXVnaHQpKTtcbiAgICB9O1xuICAgIHJldHVybiBDYXRjaE9wZXJhdG9yO1xufSgpKTtcbnZhciBDYXRjaFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQ2F0Y2hTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENhdGNoU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgc2VsZWN0b3IsIGNhdWdodCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuY2F1Z2h0ID0gY2F1Z2h0O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENhdGNoU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuc2VsZWN0b3IoZXJyLCB0aGlzLmNhdWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyMikge1xuICAgICAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZXJyb3IuY2FsbCh0aGlzLCBlcnIyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl91bnN1YnNjcmliZUFuZFJlY3ljbGUoKTtcbiAgICAgICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBuZXcgSW5uZXJTdWJzY3JpYmVyKHRoaXMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHRoaXMuYWRkKGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgICAgICBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCByZXN1bHQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ2F0Y2hTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhdGNoRXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9vYnNlcnZhYmxlX2NvbWJpbmVMYXRlc3QgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgQ29tYmluZUxhdGVzdE9wZXJhdG9yIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0JztcbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lQWxsKHByb2plY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IENvbWJpbmVMYXRlc3RPcGVyYXRvcihwcm9qZWN0KSk7IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21iaW5lQWxsLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9pc0FycmF5LF9vYnNlcnZhYmxlX2NvbWJpbmVMYXRlc3QsX29ic2VydmFibGVfZnJvbSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5JztcbmltcG9ydCB7IENvbWJpbmVMYXRlc3RPcGVyYXRvciB9IGZyb20gJy4uL29ic2VydmFibGUvY29tYmluZUxhdGVzdCc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9mcm9tJztcbnZhciBub25lID0ge307XG5leHBvcnQgZnVuY3Rpb24gY29tYmluZUxhdGVzdCgpIHtcbiAgICB2YXIgb2JzZXJ2YWJsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYnNlcnZhYmxlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcHJvamVjdCA9IG51bGw7XG4gICAgaWYgKHR5cGVvZiBvYnNlcnZhYmxlc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm9qZWN0ID0gb2JzZXJ2YWJsZXMucG9wKCk7XG4gICAgfVxuICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShvYnNlcnZhYmxlc1swXSkpIHtcbiAgICAgICAgb2JzZXJ2YWJsZXMgPSBvYnNlcnZhYmxlc1swXS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQuY2FsbChmcm9tKFtzb3VyY2VdLmNvbmNhdChvYnNlcnZhYmxlcykpLCBuZXcgQ29tYmluZUxhdGVzdE9wZXJhdG9yKHByb2plY3QpKTsgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9vYnNlcnZhYmxlX2NvbmNhdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBjb25jYXQgYXMgY29uY2F0U3RhdGljIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9jb25jYXQnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICB2YXIgb2JzZXJ2YWJsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYnNlcnZhYmxlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQuY2FsbChjb25jYXRTdGF0aWMuYXBwbHkodm9pZCAwLCBbc291cmNlXS5jb25jYXQob2JzZXJ2YWJsZXMpKSk7IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9tZXJnZU1hcCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJy4vbWVyZ2VNYXAnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiBtZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgMSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRNYXAuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9jb25jYXRNYXAgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgY29uY2F0TWFwIH0gZnJvbSAnLi9jb25jYXRNYXAnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdE1hcFRvKGlubmVyT2JzZXJ2YWJsZSwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICByZXR1cm4gY29uY2F0TWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlubmVyT2JzZXJ2YWJsZTsgfSwgcmVzdWx0U2VsZWN0b3IpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0TWFwVG8uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gY291bnQocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBDb3VudE9wZXJhdG9yKHByZWRpY2F0ZSwgc291cmNlKSk7IH07XG59XG52YXIgQ291bnRPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb3VudE9wZXJhdG9yKHByZWRpY2F0ZSwgc291cmNlKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgQ291bnRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IENvdW50U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByZWRpY2F0ZSwgdGhpcy5zb3VyY2UpKTtcbiAgICB9O1xuICAgIHJldHVybiBDb3VudE9wZXJhdG9yO1xufSgpKTtcbnZhciBDb3VudFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQ291bnRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvdW50U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBfdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnByZWRpY2F0ZSkge1xuICAgICAgICAgICAgdGhpcy5fdHJ5UHJlZGljYXRlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY291bnQrKztcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5UHJlZGljYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByZWRpY2F0ZSh2YWx1ZSwgdGhpcy5pbmRleCsrLCB0aGlzLnNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuY291bnQrKztcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLmNvdW50KTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIENvdW50U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y291bnQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlKGR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IERlYm91bmNlT3BlcmF0b3IoZHVyYXRpb25TZWxlY3RvcikpOyB9O1xufVxudmFyIERlYm91bmNlT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVib3VuY2VPcGVyYXRvcihkdXJhdGlvblNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgfVxuICAgIERlYm91bmNlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBEZWJvdW5jZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kdXJhdGlvblNlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVib3VuY2VPcGVyYXRvcjtcbn0oKSk7XG52YXIgRGVib3VuY2VTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKERlYm91bmNlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZWJvdW5jZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5kdXJhdGlvblN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRGVib3VuY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuZHVyYXRpb25TZWxlY3Rvci5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cnlOZXh0KHZhbHVlLCByZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGVib3VuY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZW1pdFZhbHVlKCk7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIERlYm91bmNlU3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeU5leHQgPSBmdW5jdGlvbiAodmFsdWUsIGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLmR1cmF0aW9uU3Vic2NyaXB0aW9uO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgZHVyYXRpb24pO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uICYmICFzdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmFkZCh0aGlzLmR1cmF0aW9uU3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGVib3VuY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZW1pdFZhbHVlKCk7XG4gICAgfTtcbiAgICBEZWJvdW5jZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVtaXRWYWx1ZSgpO1xuICAgIH07XG4gICAgRGVib3VuY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5lbWl0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuZHVyYXRpb25TdWJzY3JpcHRpb247XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kdXJhdGlvblN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fbmV4dC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERlYm91bmNlU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJvdW5jZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX3NjaGVkdWxlcl9hc3luYyBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgYXN5bmMgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlVGltZShkdWVUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRGVib3VuY2VUaW1lT3BlcmF0b3IoZHVlVGltZSwgc2NoZWR1bGVyKSk7IH07XG59XG52YXIgRGVib3VuY2VUaW1lT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVib3VuY2VUaW1lT3BlcmF0b3IoZHVlVGltZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHRoaXMuZHVlVGltZSA9IGR1ZVRpbWU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIH1cbiAgICBEZWJvdW5jZVRpbWVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IERlYm91bmNlVGltZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kdWVUaW1lLCB0aGlzLnNjaGVkdWxlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERlYm91bmNlVGltZU9wZXJhdG9yO1xufSgpKTtcbnZhciBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKERlYm91bmNlVGltZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGVib3VuY2VUaW1lU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVlVGltZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kdWVUaW1lID0gZHVlVGltZTtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5kZWJvdW5jZWRTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICBfdGhpcy5sYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICBfdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERlYm91bmNlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY2xlYXJEZWJvdW5jZSgpO1xuICAgICAgICB0aGlzLmxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5hZGQodGhpcy5kZWJvdW5jZWRTdWJzY3JpcHRpb24gPSB0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaE5leHQsIHRoaXMuZHVlVGltZSwgdGhpcykpO1xuICAgIH07XG4gICAgRGVib3VuY2VUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRlYm91bmNlZE5leHQoKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgRGVib3VuY2VUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuZGVib3VuY2VkTmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jbGVhckRlYm91bmNlKCk7XG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgbGFzdFZhbHVlID0gdGhpcy5sYXN0VmFsdWU7XG4gICAgICAgICAgICB0aGlzLmxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQobGFzdFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGVib3VuY2VUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuY2xlYXJEZWJvdW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRlYm91bmNlZFN1YnNjcmlwdGlvbiA9IHRoaXMuZGVib3VuY2VkU3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoZGVib3VuY2VkU3Vic2NyaXB0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShkZWJvdW5jZWRTdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgZGVib3VuY2VkU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLmRlYm91bmNlZFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5mdW5jdGlvbiBkaXNwYXRjaE5leHQoc3Vic2NyaWJlcikge1xuICAgIHN1YnNjcmliZXIuZGVib3VuY2VkTmV4dCgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVib3VuY2VUaW1lLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRJZkVtcHR5KGRlZmF1bHRWYWx1ZSkge1xuICAgIGlmIChkZWZhdWx0VmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgICBkZWZhdWx0VmFsdWUgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IERlZmF1bHRJZkVtcHR5T3BlcmF0b3IoZGVmYXVsdFZhbHVlKSk7IH07XG59XG52YXIgRGVmYXVsdElmRW1wdHlPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWZhdWx0SWZFbXB0eU9wZXJhdG9yKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gICAgRGVmYXVsdElmRW1wdHlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IERlZmF1bHRJZkVtcHR5U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmRlZmF1bHRWYWx1ZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIERlZmF1bHRJZkVtcHR5T3BlcmF0b3I7XG59KCkpO1xudmFyIERlZmF1bHRJZkVtcHR5U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhEZWZhdWx0SWZFbXB0eVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgX3RoaXMuaXNFbXB0eSA9IHRydWU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmlzRW1wdHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIERlZmF1bHRJZkVtcHR5U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc0VtcHR5KSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodGhpcy5kZWZhdWx0VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBEZWZhdWx0SWZFbXB0eVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRJZkVtcHR5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKCt2YWx1ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0RhdGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9zY2hlZHVsZXJfYXN5bmMsX3V0aWxfaXNEYXRlLF9TdWJzY3JpYmVyLF9Ob3RpZmljYXRpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IGlzRGF0ZSB9IGZyb20gJy4uL3V0aWwvaXNEYXRlJztcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL05vdGlmaWNhdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gZGVsYXkoZGVsYXksIHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhc3luYztcbiAgICB9XG4gICAgdmFyIGFic29sdXRlRGVsYXkgPSBpc0RhdGUoZGVsYXkpO1xuICAgIHZhciBkZWxheUZvciA9IGFic29sdXRlRGVsYXkgPyAoK2RlbGF5IC0gc2NoZWR1bGVyLm5vdygpKSA6IE1hdGguYWJzKGRlbGF5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IERlbGF5T3BlcmF0b3IoZGVsYXlGb3IsIHNjaGVkdWxlcikpOyB9O1xufVxudmFyIERlbGF5T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVsYXlPcGVyYXRvcihkZWxheSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgfVxuICAgIERlbGF5T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBEZWxheVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kZWxheSwgdGhpcy5zY2hlZHVsZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBEZWxheU9wZXJhdG9yO1xufSgpKTtcbnZhciBEZWxheVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRGVsYXlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlbGF5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZGVsYXksIHNjaGVkdWxlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVsYXkgPSBkZWxheTtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5xdWV1ZSA9IFtdO1xuICAgICAgICBfdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuZXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERlbGF5U3Vic2NyaWJlci5kaXNwYXRjaCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgc291cmNlID0gc3RhdGUuc291cmNlO1xuICAgICAgICB2YXIgcXVldWUgPSBzb3VyY2UucXVldWU7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSBzdGF0ZS5zY2hlZHVsZXI7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHN0YXRlLmRlc3RpbmF0aW9uO1xuICAgICAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCAmJiAocXVldWVbMF0udGltZSAtIHNjaGVkdWxlci5ub3coKSkgPD0gMCkge1xuICAgICAgICAgICAgcXVldWUuc2hpZnQoKS5ub3RpZmljYXRpb24ub2JzZXJ2ZShkZXN0aW5hdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBkZWxheV8xID0gTWF0aC5tYXgoMCwgcXVldWVbMF0udGltZSAtIHNjaGVkdWxlci5ub3coKSk7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlKHN0YXRlLCBkZWxheV8xKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHNvdXJjZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fc2NoZWR1bGUgPSBmdW5jdGlvbiAoc2NoZWR1bGVyKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24uYWRkKHNjaGVkdWxlci5zY2hlZHVsZShEZWxheVN1YnNjcmliZXIuZGlzcGF0Y2gsIHRoaXMuZGVsYXksIHtcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcywgZGVzdGluYXRpb246IHRoaXMuZGVzdGluYXRpb24sIHNjaGVkdWxlcjogc2NoZWR1bGVyXG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIERlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuc2NoZWR1bGVOb3RpZmljYXRpb24gPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLmVycm9yZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIHZhciBtZXNzYWdlID0gbmV3IERlbGF5TWVzc2FnZShzY2hlZHVsZXIubm93KCkgKyB0aGlzLmRlbGF5LCBub3RpZmljYXRpb24pO1xuICAgICAgICB0aGlzLnF1ZXVlLnB1c2gobWVzc2FnZSk7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3NjaGVkdWxlKHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZU5vdGlmaWNhdGlvbihOb3RpZmljYXRpb24uY3JlYXRlTmV4dCh2YWx1ZSkpO1xuICAgIH07XG4gICAgRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuZXJyb3JlZCA9IHRydWU7XG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBEZWxheVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZU5vdGlmaWNhdGlvbihOb3RpZmljYXRpb24uY3JlYXRlQ29tcGxldGUoKSk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBEZWxheVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbnZhciBEZWxheU1lc3NhZ2UgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVsYXlNZXNzYWdlKHRpbWUsIG5vdGlmaWNhdGlvbikge1xuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lO1xuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbiA9IG5vdGlmaWNhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIERlbGF5TWVzc2FnZTtcbn0oKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX09ic2VydmFibGUsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gZGVsYXlXaGVuKGRlbGF5RHVyYXRpb25TZWxlY3Rvciwgc3Vic2NyaXB0aW9uRGVsYXkpIHtcbiAgICBpZiAoc3Vic2NyaXB0aW9uRGVsYXkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uRGVsYXlPYnNlcnZhYmxlKHNvdXJjZSwgc3Vic2NyaXB0aW9uRGVsYXkpXG4gICAgICAgICAgICAgICAgLmxpZnQobmV3IERlbGF5V2hlbk9wZXJhdG9yKGRlbGF5RHVyYXRpb25TZWxlY3RvcikpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IERlbGF5V2hlbk9wZXJhdG9yKGRlbGF5RHVyYXRpb25TZWxlY3RvcikpOyB9O1xufVxudmFyIERlbGF5V2hlbk9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlbGF5V2hlbk9wZXJhdG9yKGRlbGF5RHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmRlbGF5RHVyYXRpb25TZWxlY3RvciA9IGRlbGF5RHVyYXRpb25TZWxlY3RvcjtcbiAgICB9XG4gICAgRGVsYXlXaGVuT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBEZWxheVdoZW5TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZGVsYXlEdXJhdGlvblNlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVsYXlXaGVuT3BlcmF0b3I7XG59KCkpO1xudmFyIERlbGF5V2hlblN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRGVsYXlXaGVuU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZWxheVdoZW5TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBkZWxheUR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlbGF5RHVyYXRpb25TZWxlY3RvciA9IGRlbGF5RHVyYXRpb25TZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuY29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmRlbGF5Tm90aWZpZXJTdWJzY3JpcHRpb25zID0gW107XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEZWxheVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChvdXRlclZhbHVlKTtcbiAgICAgICAgdGhpcy5yZW1vdmVTdWJzY3JpcHRpb24oaW5uZXJTdWIpO1xuICAgICAgICB0aGlzLnRyeUNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBEZWxheVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvciwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5fZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5yZW1vdmVTdWJzY3JpcHRpb24oaW5uZXJTdWIpO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cnlDb21wbGV0ZSgpO1xuICAgIH07XG4gICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGRlbGF5Tm90aWZpZXIgPSB0aGlzLmRlbGF5RHVyYXRpb25TZWxlY3Rvcih2YWx1ZSwgaW5kZXgpO1xuICAgICAgICAgICAgaWYgKGRlbGF5Tm90aWZpZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyeURlbGF5KGRlbGF5Tm90aWZpZXIsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnRyeUNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLnJlbW92ZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25JZHggPSB0aGlzLmRlbGF5Tm90aWZpZXJTdWJzY3JpcHRpb25zLmluZGV4T2Yoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbklkeCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsYXlOb3RpZmllclN1YnNjcmlwdGlvbnMuc3BsaWNlKHN1YnNjcmlwdGlvbklkeCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi5vdXRlclZhbHVlO1xuICAgIH07XG4gICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5RGVsYXkgPSBmdW5jdGlvbiAoZGVsYXlOb3RpZmllciwgdmFsdWUpIHtcbiAgICAgICAgdmFyIG5vdGlmaWVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgZGVsYXlOb3RpZmllciwgdmFsdWUpO1xuICAgICAgICBpZiAobm90aWZpZXJTdWJzY3JpcHRpb24gJiYgIW5vdGlmaWVyU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChub3RpZmllclN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB0aGlzLmRlbGF5Tm90aWZpZXJTdWJzY3JpcHRpb25zLnB1c2gobm90aWZpZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZWxheVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS50cnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcGxldGVkICYmIHRoaXMuZGVsYXlOb3RpZmllclN1YnNjcmlwdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBEZWxheVdoZW5TdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbnZhciBTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGUgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3Vic2NyaXB0aW9uRGVsYXlPYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbkRlbGF5T2JzZXJ2YWJsZShzb3VyY2UsIHN1YnNjcmlwdGlvbkRlbGF5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgX3RoaXMuc3Vic2NyaXB0aW9uRGVsYXkgPSBzdWJzY3JpcHRpb25EZWxheTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbkRlbGF5LnN1YnNjcmliZShuZXcgU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuc291cmNlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uRGVsYXlPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlKSk7XG52YXIgU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIocGFyZW50LCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIF90aGlzLnNvdXJjZVN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHVudXNlZCkge1xuICAgICAgICB0aGlzLnN1YnNjcmliZVRvU291cmNlKCk7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnBhcmVudC5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVUb1NvdXJjZSgpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5zdWJzY3JpYmVUb1NvdXJjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnNvdXJjZVN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc291cmNlU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZS5zdWJzY3JpYmUodGhpcy5wYXJlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheVdoZW4uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gZGVtYXRlcmlhbGl6ZSgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZGVtYXRlcmlhbGl6ZU9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgRGVNYXRlcmlhbGl6ZU9wZXJhdG9yKCkpO1xuICAgIH07XG59XG52YXIgRGVNYXRlcmlhbGl6ZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlTWF0ZXJpYWxpemVPcGVyYXRvcigpIHtcbiAgICB9XG4gICAgRGVNYXRlcmlhbGl6ZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERlTWF0ZXJpYWxpemVPcGVyYXRvcjtcbn0oKSk7XG52YXIgRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgIH1cbiAgICBEZU1hdGVyaWFsaXplU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFsdWUub2JzZXJ2ZSh0aGlzLmRlc3RpbmF0aW9uKTtcbiAgICB9O1xuICAgIHJldHVybiBEZU1hdGVyaWFsaXplU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVtYXRlcmlhbGl6ZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gZGlzdGluY3Qoa2V5U2VsZWN0b3IsIGZsdXNoZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IERpc3RpbmN0T3BlcmF0b3Ioa2V5U2VsZWN0b3IsIGZsdXNoZXMpKTsgfTtcbn1cbnZhciBEaXN0aW5jdE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERpc3RpbmN0T3BlcmF0b3Ioa2V5U2VsZWN0b3IsIGZsdXNoZXMpIHtcbiAgICAgICAgdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgICAgICB0aGlzLmZsdXNoZXMgPSBmbHVzaGVzO1xuICAgIH1cbiAgICBEaXN0aW5jdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRGlzdGluY3RTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMua2V5U2VsZWN0b3IsIHRoaXMuZmx1c2hlcykpO1xuICAgIH07XG4gICAgcmV0dXJuIERpc3RpbmN0T3BlcmF0b3I7XG59KCkpO1xudmFyIERpc3RpbmN0U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhEaXN0aW5jdFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGlzdGluY3RTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBrZXlTZWxlY3RvciwgZmx1c2hlcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMua2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICAgICAgX3RoaXMudmFsdWVzID0gbmV3IFNldCgpO1xuICAgICAgICBpZiAoZmx1c2hlcykge1xuICAgICAgICAgICAgX3RoaXMuYWRkKHN1YnNjcmliZVRvUmVzdWx0KF90aGlzLCBmbHVzaGVzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEaXN0aW5jdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy52YWx1ZXMuY2xlYXIoKTtcbiAgICB9O1xuICAgIERpc3RpbmN0U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuX2Vycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIERpc3RpbmN0U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMua2V5U2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMuX3VzZUtleVNlbGVjdG9yKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpbmFsaXplTmV4dCh2YWx1ZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEaXN0aW5jdFN1YnNjcmliZXIucHJvdG90eXBlLl91c2VLZXlTZWxlY3RvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAga2V5ID0gdGhpcy5rZXlTZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9maW5hbGl6ZU5leHQoa2V5LCB2YWx1ZSk7XG4gICAgfTtcbiAgICBEaXN0aW5jdFN1YnNjcmliZXIucHJvdG90eXBlLl9maW5hbGl6ZU5leHQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG4gICAgICAgIGlmICghdmFsdWVzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICB2YWx1ZXMuYWRkKGtleSk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRGlzdGluY3RTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IERpc3RpbmN0U3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzdGluY3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gZGlzdGluY3RVbnRpbENoYW5nZWQoY29tcGFyZSwga2V5U2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IERpc3RpbmN0VW50aWxDaGFuZ2VkT3BlcmF0b3IoY29tcGFyZSwga2V5U2VsZWN0b3IpKTsgfTtcbn1cbnZhciBEaXN0aW5jdFVudGlsQ2hhbmdlZE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERpc3RpbmN0VW50aWxDaGFuZ2VkT3BlcmF0b3IoY29tcGFyZSwga2V5U2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5jb21wYXJlID0gY29tcGFyZTtcbiAgICAgICAgdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgIH1cbiAgICBEaXN0aW5jdFVudGlsQ2hhbmdlZE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuY29tcGFyZSwgdGhpcy5rZXlTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERpc3RpbmN0VW50aWxDaGFuZ2VkT3BlcmF0b3I7XG59KCkpO1xudmFyIERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb21wYXJlLCBrZXlTZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMua2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuaGFzS2V5ID0gZmFsc2U7XG4gICAgICAgIGlmICh0eXBlb2YgY29tcGFyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgX3RoaXMuY29tcGFyZSA9IGNvbXBhcmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICByZXR1cm4geCA9PT0geTtcbiAgICB9O1xuICAgIERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBrZXlTZWxlY3RvciA9IHRoaXMua2V5U2VsZWN0b3I7XG4gICAgICAgICAgICBrZXkgPSBrZXlTZWxlY3RvciA/IGtleVNlbGVjdG9yKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5oYXNLZXkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBhcmUgPSB0aGlzLmNvbXBhcmU7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29tcGFyZSh0aGlzLmtleSwga2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oYXNLZXkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3RpbmN0VW50aWxDaGFuZ2VkLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfZGlzdGluY3RVbnRpbENoYW5nZWQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQgfSBmcm9tICcuL2Rpc3RpbmN0VW50aWxDaGFuZ2VkJztcbmV4cG9ydCBmdW5jdGlvbiBkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZChrZXksIGNvbXBhcmUpIHtcbiAgICByZXR1cm4gZGlzdGluY3RVbnRpbENoYW5nZWQoZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuIGNvbXBhcmUgPyBjb21wYXJlKHhba2V5XSwgeVtrZXldKSA6IHhba2V5XSA9PT0geVtrZXldOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfdXRpbF9FbXB0eUVycm9yLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBFbXB0eUVycm9yIH0gZnJvbSAnLi4vdXRpbC9FbXB0eUVycm9yJztcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiB0aHJvd0lmRW1wdHkoZXJyb3JGYWN0b3J5KSB7XG4gICAgaWYgKGVycm9yRmFjdG9yeSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGVycm9yRmFjdG9yeSA9IGRlZmF1bHRFcnJvckZhY3Rvcnk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgVGhyb3dJZkVtcHR5T3BlcmF0b3IoZXJyb3JGYWN0b3J5KSk7XG4gICAgfTtcbn1cbnZhciBUaHJvd0lmRW1wdHlPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaHJvd0lmRW1wdHlPcGVyYXRvcihlcnJvckZhY3RvcnkpIHtcbiAgICAgICAgdGhpcy5lcnJvckZhY3RvcnkgPSBlcnJvckZhY3Rvcnk7XG4gICAgfVxuICAgIFRocm93SWZFbXB0eU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgVGhyb3dJZkVtcHR5U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmVycm9yRmFjdG9yeSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFRocm93SWZFbXB0eU9wZXJhdG9yO1xufSgpKTtcbnZhciBUaHJvd0lmRW1wdHlTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFRocm93SWZFbXB0eVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGhyb3dJZkVtcHR5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZXJyb3JGYWN0b3J5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5lcnJvckZhY3RvcnkgPSBlcnJvckZhY3Rvcnk7XG4gICAgICAgIF90aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGhyb3dJZkVtcHR5U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBUaHJvd0lmRW1wdHlTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGVyciA9IHZvaWQgMDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZXJyID0gdGhpcy5lcnJvckZhY3RvcnkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZXJyID0gZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBUaHJvd0lmRW1wdHlTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JGYWN0b3J5KCkge1xuICAgIHJldHVybiBuZXcgRW1wdHlFcnJvcigpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3dJZkVtcHR5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfdXRpbF9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvcixfb2JzZXJ2YWJsZV9lbXB0eSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgfSBmcm9tICcuLi91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yJztcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9lbXB0eSc7XG5leHBvcnQgZnVuY3Rpb24gdGFrZShjb3VudCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGVtcHR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFRha2VPcGVyYXRvcihjb3VudCkpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbnZhciBUYWtlT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFrZU9wZXJhdG9yKHRvdGFsKSB7XG4gICAgICAgIHRoaXMudG90YWwgPSB0b3RhbDtcbiAgICAgICAgaWYgKHRoaXMudG90YWwgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVGFrZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgVGFrZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy50b3RhbCkpO1xuICAgIH07XG4gICAgcmV0dXJuIFRha2VPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGFrZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVGFrZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGFrZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHRvdGFsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy50b3RhbCA9IHRvdGFsO1xuICAgICAgICBfdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGFrZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciB0b3RhbCA9IHRoaXMudG90YWw7XG4gICAgICAgIHZhciBjb3VudCA9ICsrdGhpcy5jb3VudDtcbiAgICAgICAgaWYgKGNvdW50IDw9IHRvdGFsKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgaWYgKGNvdW50ID09PSB0b3RhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBUYWtlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3V0aWxfQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IsX2ZpbHRlcixfdGhyb3dJZkVtcHR5LF9kZWZhdWx0SWZFbXB0eSxfdGFrZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBBcmd1bWVudE91dE9mUmFuZ2VFcnJvciB9IGZyb20gJy4uL3V0aWwvQXJndW1lbnRPdXRPZlJhbmdlRXJyb3InO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAnLi9maWx0ZXInO1xuaW1wb3J0IHsgdGhyb3dJZkVtcHR5IH0gZnJvbSAnLi90aHJvd0lmRW1wdHknO1xuaW1wb3J0IHsgZGVmYXVsdElmRW1wdHkgfSBmcm9tICcuL2RlZmF1bHRJZkVtcHR5JztcbmltcG9ydCB7IHRha2UgfSBmcm9tICcuL3Rha2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnRBdChpbmRleCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IoKTtcbiAgICB9XG4gICAgdmFyIGhhc0RlZmF1bHRWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMjtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnBpcGUoZmlsdGVyKGZ1bmN0aW9uICh2LCBpKSB7IHJldHVybiBpID09PSBpbmRleDsgfSksIHRha2UoMSksIGhhc0RlZmF1bHRWYWx1ZVxuICAgICAgICAgICAgPyBkZWZhdWx0SWZFbXB0eShkZWZhdWx0VmFsdWUpXG4gICAgICAgICAgICA6IHRocm93SWZFbXB0eShmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IoKTsgfSkpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbGVtZW50QXQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9vYnNlcnZhYmxlX2NvbmNhdCxfb2JzZXJ2YWJsZV9vZiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBjb25jYXQgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2NvbmNhdCc7XG5pbXBvcnQgeyBvZiB9IGZyb20gJy4uL29ic2VydmFibGUvb2YnO1xuZXhwb3J0IGZ1bmN0aW9uIGVuZFdpdGgoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJyYXlbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIGNvbmNhdChzb3VyY2UsIG9mLmFwcGx5KHZvaWQgMCwgYXJyYXkpKTsgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuZFdpdGguanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gZXZlcnkocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBFdmVyeU9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpc0FyZywgc291cmNlKSk7IH07XG59XG52YXIgRXZlcnlPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFdmVyeU9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpc0FyZywgc291cmNlKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgRXZlcnlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBFdmVyeVN1YnNjcmliZXIob2JzZXJ2ZXIsIHRoaXMucHJlZGljYXRlLCB0aGlzLnRoaXNBcmcsIHRoaXMuc291cmNlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRXZlcnlPcGVyYXRvcjtcbn0oKSk7XG52YXIgRXZlcnlTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEV2ZXJ5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFdmVyeVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSwgdGhpc0FyZywgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIF90aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgX3RoaXMudGhpc0FyZyA9IHRoaXNBcmcgfHwgX3RoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRXZlcnlTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChldmVyeVZhbHVlTWF0Y2gpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGV2ZXJ5VmFsdWVNYXRjaCk7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIEV2ZXJ5U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUuY2FsbCh0aGlzLnRoaXNBcmcsIHZhbHVlLCB0aGlzLmluZGV4KyssIHRoaXMuc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5Q29tcGxldGUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFdmVyeVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ub3RpZnlDb21wbGV0ZSh0cnVlKTtcbiAgICB9O1xuICAgIHJldHVybiBFdmVyeVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZXJ5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiBleGhhdXN0KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgU3dpdGNoRmlyc3RPcGVyYXRvcigpKTsgfTtcbn1cbnZhciBTd2l0Y2hGaXJzdE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN3aXRjaEZpcnN0T3BlcmF0b3IoKSB7XG4gICAgfVxuICAgIFN3aXRjaEZpcnN0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTd2l0Y2hGaXJzdFN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFN3aXRjaEZpcnN0T3BlcmF0b3I7XG59KCkpO1xudmFyIFN3aXRjaEZpcnN0U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTd2l0Y2hGaXJzdFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3dpdGNoRmlyc3RTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5oYXNDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGFzU3Vic2NyaXB0aW9uID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3dpdGNoRmlyc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmhhc1N1YnNjcmlwdGlvbiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCB2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTd2l0Y2hGaXJzdFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5oYXNDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoIXRoaXMuaGFzU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN3aXRjaEZpcnN0U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5yZW1vdmUoaW5uZXJTdWIpO1xuICAgICAgICB0aGlzLmhhc1N1YnNjcmlwdGlvbiA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5oYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN3aXRjaEZpcnN0U3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGhhdXN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF9Jbm5lclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQsX21hcCxfb2JzZXJ2YWJsZV9mcm9tIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgSW5uZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vSW5uZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL21hcCc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBleGhhdXN0TWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UucGlwZShleGhhdXN0TWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBmcm9tKHByb2plY3QoYSwgaSkpLnBpcGUobWFwKGZ1bmN0aW9uIChiLCBpaSkgeyByZXR1cm4gcmVzdWx0U2VsZWN0b3IoYSwgYiwgaSwgaWkpOyB9KSk7IH0pKTsgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBFeGhhdXN0TWFwT3BlcmF0b3IocHJvamVjdCkpO1xuICAgIH07XG59XG52YXIgRXhoYXVzdE1hcE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV4aGF1c3RNYXBPcGVyYXRvcihwcm9qZWN0KSB7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgfVxuICAgIEV4aGF1c3RNYXBPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEV4aGF1c3RNYXBTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJvamVjdCkpO1xuICAgIH07XG4gICAgcmV0dXJuIEV4aGF1c3RNYXBPcGVyYXRvcjtcbn0oKSk7XG52YXIgRXhoYXVzdE1hcFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRXhoYXVzdE1hcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRXhoYXVzdE1hcFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByb2plY3QpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICBfdGhpcy5oYXNTdWJzY3JpcHRpb24gPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGFzQ29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBFeGhhdXN0TWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1N1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy50cnlOZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXhoYXVzdE1hcFN1YnNjcmliZXIucHJvdG90eXBlLnRyeU5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0KHZhbHVlLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGFzU3Vic2NyaXB0aW9uID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5faW5uZXJTdWIocmVzdWx0LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH07XG4gICAgRXhoYXVzdE1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9pbm5lclN1YiA9IGZ1bmN0aW9uIChyZXN1bHQsIHZhbHVlLCBpbmRleCkge1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpYmVyID0gbmV3IElubmVyU3Vic2NyaWJlcih0aGlzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZChpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCByZXN1bHQsIHZhbHVlLCBpbmRleCwgaW5uZXJTdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIEV4aGF1c3RNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1N1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIEV4aGF1c3RNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChpbm5lclZhbHVlKTtcbiAgICB9O1xuICAgIEV4aGF1c3RNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgRXhoYXVzdE1hcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLnJlbW92ZShpbm5lclN1Yik7XG4gICAgICAgIHRoaXMuaGFzU3Vic2NyaXB0aW9uID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmhhc0NvbXBsZXRlZCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRXhoYXVzdE1hcFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhoYXVzdE1hcC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gZXhwYW5kKHByb2plY3QsIGNvbmN1cnJlbnQsIHNjaGVkdWxlcikge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHtcbiAgICAgICAgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICB9XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uY3VycmVudCA9IChjb25jdXJyZW50IHx8IDApIDwgMSA/IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSA6IGNvbmN1cnJlbnQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBFeHBhbmRPcGVyYXRvcihwcm9qZWN0LCBjb25jdXJyZW50LCBzY2hlZHVsZXIpKTsgfTtcbn1cbnZhciBFeHBhbmRPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFeHBhbmRPcGVyYXRvcihwcm9qZWN0LCBjb25jdXJyZW50LCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgfVxuICAgIEV4cGFuZE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRXhwYW5kU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByb2plY3QsIHRoaXMuY29uY3VycmVudCwgdGhpcy5zY2hlZHVsZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBFeHBhbmRPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBFeHBhbmRPcGVyYXRvciB9O1xudmFyIEV4cGFuZFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRXhwYW5kU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFeHBhbmRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcm9qZWN0LCBjb25jdXJyZW50LCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICBfdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IDA7XG4gICAgICAgIF90aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoY29uY3VycmVudCA8IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSkge1xuICAgICAgICAgICAgX3RoaXMuYnVmZmVyID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBFeHBhbmRTdWJzY3JpYmVyLmRpc3BhdGNoID0gZnVuY3Rpb24gKGFyZykge1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IGFyZy5zdWJzY3JpYmVyLCByZXN1bHQgPSBhcmcucmVzdWx0LCB2YWx1ZSA9IGFyZy52YWx1ZSwgaW5kZXggPSBhcmcuaW5kZXg7XG4gICAgICAgIHN1YnNjcmliZXIuc3Vic2NyaWJlVG9Qcm9qZWN0aW9uKHJlc3VsdCwgdmFsdWUsIGluZGV4KTtcbiAgICB9O1xuICAgIEV4cGFuZFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPCB0aGlzLmNvbmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvamVjdCA9IHRoaXMucHJvamVjdDtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gcHJvamVjdCh2YWx1ZSwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zY2hlZHVsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVUb1Byb2plY3Rpb24ocmVzdWx0LCB2YWx1ZSwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0geyBzdWJzY3JpYmVyOiB0aGlzLCByZXN1bHQ6IHJlc3VsdCwgdmFsdWU6IHZhbHVlLCBpbmRleDogaW5kZXggfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uXzEgPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8xLmFkZCh0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShFeHBhbmRTdWJzY3JpYmVyLmRpc3BhdGNoLCAwLCBzdGF0ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXhwYW5kU3Vic2NyaWJlci5wcm90b3R5cGUuc3Vic2NyaWJlVG9Qcm9qZWN0aW9uID0gZnVuY3Rpb24gKHJlc3VsdCwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHRoaXMuYWN0aXZlKys7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZChzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCByZXN1bHQsIHZhbHVlLCBpbmRleCkpO1xuICAgIH07XG4gICAgRXhwYW5kU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmhhc0NvbXBsZXRlZCAmJiB0aGlzLmFjdGl2ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIEV4cGFuZFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5fbmV4dChpbm5lclZhbHVlKTtcbiAgICB9O1xuICAgIEV4cGFuZFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ucmVtb3ZlKGlubmVyU3ViKTtcbiAgICAgICAgdGhpcy5hY3RpdmUtLTtcbiAgICAgICAgaWYgKGJ1ZmZlciAmJiBidWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fbmV4dChidWZmZXIuc2hpZnQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzQ29tcGxldGVkICYmIHRoaXMuYWN0aXZlID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBFeHBhbmRTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IEV4cGFuZFN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cGFuZC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX1N1YnNjcmlwdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBmaW5hbGl6ZShjYWxsYmFjaykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRmluYWxseU9wZXJhdG9yKGNhbGxiYWNrKSk7IH07XG59XG52YXIgRmluYWxseU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZpbmFsbHlPcGVyYXRvcihjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuICAgIEZpbmFsbHlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEZpbmFsbHlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuY2FsbGJhY2spKTtcbiAgICB9O1xuICAgIHJldHVybiBGaW5hbGx5T3BlcmF0b3I7XG59KCkpO1xudmFyIEZpbmFsbHlTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEZpbmFsbHlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZpbmFsbHlTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWRkKG5ldyBTdWJzY3JpcHRpb24oY2FsbGJhY2spKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gRmluYWxseVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmFsaXplLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJlZGljYXRlIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRmluZFZhbHVlT3BlcmF0b3IocHJlZGljYXRlLCBzb3VyY2UsIGZhbHNlLCB0aGlzQXJnKSk7IH07XG59XG52YXIgRmluZFZhbHVlT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmluZFZhbHVlT3BlcmF0b3IocHJlZGljYXRlLCBzb3VyY2UsIHlpZWxkSW5kZXgsIHRoaXNBcmcpIHtcbiAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLnlpZWxkSW5kZXggPSB5aWVsZEluZGV4O1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgIH1cbiAgICBGaW5kVmFsdWVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBGaW5kVmFsdWVTdWJzY3JpYmVyKG9ic2VydmVyLCB0aGlzLnByZWRpY2F0ZSwgdGhpcy5zb3VyY2UsIHRoaXMueWllbGRJbmRleCwgdGhpcy50aGlzQXJnKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRmluZFZhbHVlT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0IHsgRmluZFZhbHVlT3BlcmF0b3IgfTtcbnZhciBGaW5kVmFsdWVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEZpbmRWYWx1ZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRmluZFZhbHVlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlLCBzb3VyY2UsIHlpZWxkSW5kZXgsIHRoaXNBcmcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBfdGhpcy55aWVsZEluZGV4ID0geWllbGRJbmRleDtcbiAgICAgICAgX3RoaXMudGhpc0FyZyA9IHRoaXNBcmc7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBGaW5kVmFsdWVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgRmluZFZhbHVlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgcHJlZGljYXRlID0gX2EucHJlZGljYXRlLCB0aGlzQXJnID0gX2EudGhpc0FyZztcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcgfHwgdGhpcywgdmFsdWUsIGluZGV4LCB0aGlzLnNvdXJjZSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlDb21wbGV0ZSh0aGlzLnlpZWxkSW5kZXggPyBpbmRleCA6IHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZpbmRWYWx1ZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ub3RpZnlDb21wbGV0ZSh0aGlzLnlpZWxkSW5kZXggPyAtMSA6IHVuZGVmaW5lZCk7XG4gICAgfTtcbiAgICByZXR1cm4gRmluZFZhbHVlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgRmluZFZhbHVlU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmluZC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX29wZXJhdG9yc19maW5kIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IEZpbmRWYWx1ZU9wZXJhdG9yIH0gZnJvbSAnLi4vb3BlcmF0b3JzL2ZpbmQnO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IEZpbmRWYWx1ZU9wZXJhdG9yKHByZWRpY2F0ZSwgc291cmNlLCB0cnVlLCB0aGlzQXJnKSk7IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maW5kSW5kZXguanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF91dGlsX0VtcHR5RXJyb3IsX2ZpbHRlcixfdGFrZSxfZGVmYXVsdElmRW1wdHksX3Rocm93SWZFbXB0eSxfdXRpbF9pZGVudGl0eSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBFbXB0eUVycm9yIH0gZnJvbSAnLi4vdXRpbC9FbXB0eUVycm9yJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJy4vZmlsdGVyJztcbmltcG9ydCB7IHRha2UgfSBmcm9tICcuL3Rha2UnO1xuaW1wb3J0IHsgZGVmYXVsdElmRW1wdHkgfSBmcm9tICcuL2RlZmF1bHRJZkVtcHR5JztcbmltcG9ydCB7IHRocm93SWZFbXB0eSB9IGZyb20gJy4vdGhyb3dJZkVtcHR5JztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vdXRpbC9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gZmlyc3QocHJlZGljYXRlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICB2YXIgaGFzRGVmYXVsdFZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+PSAyO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UucGlwZShwcmVkaWNhdGUgPyBmaWx0ZXIoZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIHByZWRpY2F0ZSh2LCBpLCBzb3VyY2UpOyB9KSA6IGlkZW50aXR5LCB0YWtlKDEpLCBoYXNEZWZhdWx0VmFsdWUgPyBkZWZhdWx0SWZFbXB0eShkZWZhdWx0VmFsdWUpIDogdGhyb3dJZkVtcHR5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBFbXB0eUVycm9yKCk7IH0pKTsgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpcnN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGlnbm9yZUVsZW1lbnRzKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpZ25vcmVFbGVtZW50c09wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgSWdub3JlRWxlbWVudHNPcGVyYXRvcigpKTtcbiAgICB9O1xufVxudmFyIElnbm9yZUVsZW1lbnRzT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSWdub3JlRWxlbWVudHNPcGVyYXRvcigpIHtcbiAgICB9XG4gICAgSWdub3JlRWxlbWVudHNPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IElnbm9yZUVsZW1lbnRzU3Vic2NyaWJlcihzdWJzY3JpYmVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gSWdub3JlRWxlbWVudHNPcGVyYXRvcjtcbn0oKSk7XG52YXIgSWdub3JlRWxlbWVudHNTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKElnbm9yZUVsZW1lbnRzU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJZ25vcmVFbGVtZW50c1N1YnNjcmliZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgSWdub3JlRWxlbWVudHNTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh1bnVzZWQpIHtcbiAgICB9O1xuICAgIHJldHVybiBJZ25vcmVFbGVtZW50c1N1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlnbm9yZUVsZW1lbnRzLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBJc0VtcHR5T3BlcmF0b3IoKSk7IH07XG59XG52YXIgSXNFbXB0eU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIElzRW1wdHlPcGVyYXRvcigpIHtcbiAgICB9XG4gICAgSXNFbXB0eU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IElzRW1wdHlTdWJzY3JpYmVyKG9ic2VydmVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gSXNFbXB0eU9wZXJhdG9yO1xufSgpKTtcbnZhciBJc0VtcHR5U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhJc0VtcHR5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJc0VtcHR5U3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgfVxuICAgIElzRW1wdHlTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpc0VtcHR5KSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQoaXNFbXB0eSk7XG4gICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBJc0VtcHR5U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5ub3RpZnlDb21wbGV0ZShmYWxzZSk7XG4gICAgfTtcbiAgICBJc0VtcHR5U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm5vdGlmeUNvbXBsZXRlKHRydWUpO1xuICAgIH07XG4gICAgcmV0dXJuIElzRW1wdHlTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0VtcHR5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfdXRpbF9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvcixfb2JzZXJ2YWJsZV9lbXB0eSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgfSBmcm9tICcuLi91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yJztcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9lbXB0eSc7XG5leHBvcnQgZnVuY3Rpb24gdGFrZUxhc3QoY291bnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gdGFrZUxhc3RPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBUYWtlTGFzdE9wZXJhdG9yKGNvdW50KSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxudmFyIFRha2VMYXN0T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFrZUxhc3RPcGVyYXRvcih0b3RhbCkge1xuICAgICAgICB0aGlzLnRvdGFsID0gdG90YWw7XG4gICAgICAgIGlmICh0aGlzLnRvdGFsIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIFRha2VMYXN0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBUYWtlTGFzdFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy50b3RhbCkpO1xuICAgIH07XG4gICAgcmV0dXJuIFRha2VMYXN0T3BlcmF0b3I7XG59KCkpO1xudmFyIFRha2VMYXN0U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhUYWtlTGFzdFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGFrZUxhc3RTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCB0b3RhbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudG90YWwgPSB0b3RhbDtcbiAgICAgICAgX3RoaXMucmluZyA9IG5ldyBBcnJheSgpO1xuICAgICAgICBfdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGFrZUxhc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmluZyA9IHRoaXMucmluZztcbiAgICAgICAgdmFyIHRvdGFsID0gdGhpcy50b3RhbDtcbiAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5jb3VudCsrO1xuICAgICAgICBpZiAocmluZy5sZW5ndGggPCB0b3RhbCkge1xuICAgICAgICAgICAgcmluZy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGNvdW50ICUgdG90YWw7XG4gICAgICAgICAgICByaW5nW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUYWtlTGFzdFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5jb3VudDtcbiAgICAgICAgaWYgKGNvdW50ID4gMCkge1xuICAgICAgICAgICAgdmFyIHRvdGFsID0gdGhpcy5jb3VudCA+PSB0aGlzLnRvdGFsID8gdGhpcy50b3RhbCA6IHRoaXMuY291bnQ7XG4gICAgICAgICAgICB2YXIgcmluZyA9IHRoaXMucmluZztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG90YWw7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBpZHggPSAoY291bnQrKykgJSB0b3RhbDtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHJpbmdbaWR4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBUYWtlTGFzdFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2VMYXN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9FbXB0eUVycm9yLF9maWx0ZXIsX3Rha2VMYXN0LF90aHJvd0lmRW1wdHksX2RlZmF1bHRJZkVtcHR5LF91dGlsX2lkZW50aXR5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IEVtcHR5RXJyb3IgfSBmcm9tICcuLi91dGlsL0VtcHR5RXJyb3InO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAnLi9maWx0ZXInO1xuaW1wb3J0IHsgdGFrZUxhc3QgfSBmcm9tICcuL3Rha2VMYXN0JztcbmltcG9ydCB7IHRocm93SWZFbXB0eSB9IGZyb20gJy4vdGhyb3dJZkVtcHR5JztcbmltcG9ydCB7IGRlZmF1bHRJZkVtcHR5IH0gZnJvbSAnLi9kZWZhdWx0SWZFbXB0eSc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIGxhc3QocHJlZGljYXRlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICB2YXIgaGFzRGVmYXVsdFZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+PSAyO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UucGlwZShwcmVkaWNhdGUgPyBmaWx0ZXIoZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIHByZWRpY2F0ZSh2LCBpLCBzb3VyY2UpOyB9KSA6IGlkZW50aXR5LCB0YWtlTGFzdCgxKSwgaGFzRGVmYXVsdFZhbHVlID8gZGVmYXVsdElmRW1wdHkoZGVmYXVsdFZhbHVlKSA6IHRocm93SWZFbXB0eShmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRW1wdHlFcnJvcigpOyB9KSk7IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYXN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG1hcFRvKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBNYXBUb09wZXJhdG9yKHZhbHVlKSk7IH07XG59XG52YXIgTWFwVG9PcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXBUb09wZXJhdG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgTWFwVG9PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IE1hcFRvU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnZhbHVlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFwVG9PcGVyYXRvcjtcbn0oKSk7XG52YXIgTWFwVG9TdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKE1hcFRvU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYXBUb1N1YnNjcmliZXIoZGVzdGluYXRpb24sIHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1hcFRvU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodGhpcy52YWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFwVG9TdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBUby5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX05vdGlmaWNhdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vTm90aWZpY2F0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBtYXRlcmlhbGl6ZSgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWF0ZXJpYWxpemVPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IE1hdGVyaWFsaXplT3BlcmF0b3IoKSk7XG4gICAgfTtcbn1cbnZhciBNYXRlcmlhbGl6ZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hdGVyaWFsaXplT3BlcmF0b3IoKSB7XG4gICAgfVxuICAgIE1hdGVyaWFsaXplT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBNYXRlcmlhbGl6ZVN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIE1hdGVyaWFsaXplT3BlcmF0b3I7XG59KCkpO1xudmFyIE1hdGVyaWFsaXplU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhNYXRlcmlhbGl6ZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWF0ZXJpYWxpemVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICB9XG4gICAgTWF0ZXJpYWxpemVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoTm90aWZpY2F0aW9uLmNyZWF0ZU5leHQodmFsdWUpKTtcbiAgICB9O1xuICAgIE1hdGVyaWFsaXplU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KE5vdGlmaWNhdGlvbi5jcmVhdGVFcnJvcihlcnIpKTtcbiAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIE1hdGVyaWFsaXplU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KE5vdGlmaWNhdGlvbi5jcmVhdGVDb21wbGV0ZSgpKTtcbiAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBNYXRlcmlhbGl6ZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGVyaWFsaXplLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW4oYWNjdW11bGF0b3IsIHNlZWQpIHtcbiAgICB2YXIgaGFzU2VlZCA9IGZhbHNlO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgaGFzU2VlZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBzY2FuT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTY2FuT3BlcmF0b3IoYWNjdW11bGF0b3IsIHNlZWQsIGhhc1NlZWQpKTtcbiAgICB9O1xufVxudmFyIFNjYW5PcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY2FuT3BlcmF0b3IoYWNjdW11bGF0b3IsIHNlZWQsIGhhc1NlZWQpIHtcbiAgICAgICAgaWYgKGhhc1NlZWQgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgaGFzU2VlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcjtcbiAgICAgICAgdGhpcy5zZWVkID0gc2VlZDtcbiAgICAgICAgdGhpcy5oYXNTZWVkID0gaGFzU2VlZDtcbiAgICB9XG4gICAgU2Nhbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgU2NhblN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5hY2N1bXVsYXRvciwgdGhpcy5zZWVkLCB0aGlzLmhhc1NlZWQpKTtcbiAgICB9O1xuICAgIHJldHVybiBTY2FuT3BlcmF0b3I7XG59KCkpO1xudmFyIFNjYW5TdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFNjYW5TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNjYW5TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBhY2N1bXVsYXRvciwgX3NlZWQsIGhhc1NlZWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmFjY3VtdWxhdG9yID0gYWNjdW11bGF0b3I7XG4gICAgICAgIF90aGlzLl9zZWVkID0gX3NlZWQ7XG4gICAgICAgIF90aGlzLmhhc1NlZWQgPSBoYXNTZWVkO1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjYW5TdWJzY3JpYmVyLnByb3RvdHlwZSwgXCJzZWVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VlZDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuaGFzU2VlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9zZWVkID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFNjYW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzU2VlZCkge1xuICAgICAgICAgICAgdGhpcy5zZWVkID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyeU5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTY2FuU3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeU5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5hY2N1bXVsYXRvcih0aGlzLnNlZWQsIHZhbHVlLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VlZCA9IHJlc3VsdDtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gU2NhblN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjYW4uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zY2FuLF90YWtlTGFzdCxfZGVmYXVsdElmRW1wdHksX3V0aWxfcGlwZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBzY2FuIH0gZnJvbSAnLi9zY2FuJztcbmltcG9ydCB7IHRha2VMYXN0IH0gZnJvbSAnLi90YWtlTGFzdCc7XG5pbXBvcnQgeyBkZWZhdWx0SWZFbXB0eSB9IGZyb20gJy4vZGVmYXVsdElmRW1wdHknO1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gJy4uL3V0aWwvcGlwZSc7XG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlKGFjY3VtdWxhdG9yLCBzZWVkKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcmVkdWNlT3BlcmF0b3JGdW5jdGlvbldpdGhTZWVkKHNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIHBpcGUoc2NhbihhY2N1bXVsYXRvciwgc2VlZCksIHRha2VMYXN0KDEpLCBkZWZhdWx0SWZFbXB0eShzZWVkKSkoc291cmNlKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlZHVjZU9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBwaXBlKHNjYW4oZnVuY3Rpb24gKGFjYywgdmFsdWUsIGluZGV4KSB7IHJldHVybiBhY2N1bXVsYXRvcihhY2MsIHZhbHVlLCBpbmRleCArIDEpOyB9KSwgdGFrZUxhc3QoMSkpKHNvdXJjZSk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZHVjZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3JlZHVjZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyByZWR1Y2UgfSBmcm9tICcuL3JlZHVjZSc7XG5leHBvcnQgZnVuY3Rpb24gbWF4KGNvbXBhcmVyKSB7XG4gICAgdmFyIG1heCA9ICh0eXBlb2YgY29tcGFyZXIgPT09ICdmdW5jdGlvbicpXG4gICAgICAgID8gZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuIGNvbXBhcmVyKHgsIHkpID4gMCA/IHggOiB5OyB9XG4gICAgICAgIDogZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuIHggPiB5ID8geCA6IHk7IH07XG4gICAgcmV0dXJuIHJlZHVjZShtYXgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF4LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfb2JzZXJ2YWJsZV9tZXJnZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBtZXJnZSBhcyBtZXJnZVN0YXRpYyB9IGZyb20gJy4uL29ic2VydmFibGUvbWVyZ2UnO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlKCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdC5jYWxsKG1lcmdlU3RhdGljLmFwcGx5KHZvaWQgMCwgW3NvdXJjZV0uY29uY2F0KG9ic2VydmFibGVzKSkpOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2UuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9tZXJnZU1hcCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJy4vbWVyZ2VNYXAnO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlTWFwVG8oaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHtcbiAgICAgICAgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbWVyZ2VNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5uZXJPYnNlcnZhYmxlOyB9LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlubmVyT2JzZXJ2YWJsZTsgfSwgY29uY3VycmVudCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcFRvLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCxfT3V0ZXJTdWJzY3JpYmVyLF9Jbm5lclN1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgSW5uZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vSW5uZXJTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVNjYW4oYWNjdW11bGF0b3IsIHNlZWQsIGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgTWVyZ2VTY2FuT3BlcmF0b3IoYWNjdW11bGF0b3IsIHNlZWQsIGNvbmN1cnJlbnQpKTsgfTtcbn1cbnZhciBNZXJnZVNjYW5PcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNZXJnZVNjYW5PcGVyYXRvcihhY2N1bXVsYXRvciwgc2VlZCwgY29uY3VycmVudCkge1xuICAgICAgICB0aGlzLmFjY3VtdWxhdG9yID0gYWNjdW11bGF0b3I7XG4gICAgICAgIHRoaXMuc2VlZCA9IHNlZWQ7XG4gICAgICAgIHRoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG4gICAgfVxuICAgIE1lcmdlU2Nhbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgTWVyZ2VTY2FuU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmFjY3VtdWxhdG9yLCB0aGlzLnNlZWQsIHRoaXMuY29uY3VycmVudCkpO1xuICAgIH07XG4gICAgcmV0dXJuIE1lcmdlU2Nhbk9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydCB7IE1lcmdlU2Nhbk9wZXJhdG9yIH07XG52YXIgTWVyZ2VTY2FuU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhNZXJnZVNjYW5TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1lcmdlU2NhblN1YnNjcmliZXIoZGVzdGluYXRpb24sIGFjY3VtdWxhdG9yLCBhY2MsIGNvbmN1cnJlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmFjY3VtdWxhdG9yID0gYWNjdW11bGF0b3I7XG4gICAgICAgIF90aGlzLmFjYyA9IGFjYztcbiAgICAgICAgX3RoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG4gICAgICAgIF90aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgX3RoaXMuYWN0aXZlID0gMDtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1lcmdlU2NhblN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA8IHRoaXMuY29uY3VycmVudCkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgICAgIHZhciBpc2ggPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBhY2N1bXVsYXRvciA9IHRoaXMuYWNjdW11bGF0b3I7XG4gICAgICAgICAgICAgICAgaXNoID0gYWNjdW11bGF0b3IodGhpcy5hY2MsIHZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZXN0aW5hdGlvbi5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWN0aXZlKys7XG4gICAgICAgICAgICB0aGlzLl9pbm5lclN1Yihpc2gsIHZhbHVlLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWVyZ2VTY2FuU3Vic2NyaWJlci5wcm90b3R5cGUuX2lubmVyU3ViID0gZnVuY3Rpb24gKGlzaCwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBuZXcgSW5uZXJTdWJzY3JpYmVyKHRoaXMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24uYWRkKGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgIHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGlzaCwgdmFsdWUsIGluZGV4LCBpbm5lclN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgTWVyZ2VTY2FuU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA9PT0gMCAmJiB0aGlzLmJ1ZmZlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLmFjYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgTWVyZ2VTY2FuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICB0aGlzLmFjYyA9IGlubmVyVmFsdWU7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KGlubmVyVmFsdWUpO1xuICAgIH07XG4gICAgTWVyZ2VTY2FuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5yZW1vdmUoaW5uZXJTdWIpO1xuICAgICAgICB0aGlzLmFjdGl2ZS0tO1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQoYnVmZmVyLnNoaWZ0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodGhpcy5hY2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gTWVyZ2VTY2FuU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBNZXJnZVNjYW5TdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZVNjYW4uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9yZWR1Y2UgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgcmVkdWNlIH0gZnJvbSAnLi9yZWR1Y2UnO1xuZXhwb3J0IGZ1bmN0aW9uIG1pbihjb21wYXJlcikge1xuICAgIHZhciBtaW4gPSAodHlwZW9mIGNvbXBhcmVyID09PSAnZnVuY3Rpb24nKVxuICAgICAgICA/IGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiBjb21wYXJlcih4LCB5KSA8IDAgPyB4IDogeTsgfVxuICAgICAgICA6IGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiB4IDwgeSA/IHggOiB5OyB9O1xuICAgIHJldHVybiByZWR1Y2UobWluKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX29ic2VydmFibGVfQ29ubmVjdGFibGVPYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGNvbm5lY3RhYmxlT2JzZXJ2YWJsZURlc2NyaXB0b3IgfSBmcm9tICcuLi9vYnNlcnZhYmxlL0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gbXVsdGljYXN0KHN1YmplY3RPclN1YmplY3RGYWN0b3J5LCBzZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBtdWx0aWNhc3RPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICB2YXIgc3ViamVjdEZhY3Rvcnk7XG4gICAgICAgIGlmICh0eXBlb2Ygc3ViamVjdE9yU3ViamVjdEZhY3RvcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN1YmplY3RGYWN0b3J5ID0gc3ViamVjdE9yU3ViamVjdEZhY3Rvcnk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdWJqZWN0RmFjdG9yeSA9IGZ1bmN0aW9uIHN1YmplY3RGYWN0b3J5KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBNdWx0aWNhc3RPcGVyYXRvcihzdWJqZWN0RmFjdG9yeSwgc2VsZWN0b3IpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29ubmVjdGFibGUgPSBPYmplY3QuY3JlYXRlKHNvdXJjZSwgY29ubmVjdGFibGVPYnNlcnZhYmxlRGVzY3JpcHRvcik7XG4gICAgICAgIGNvbm5lY3RhYmxlLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgY29ubmVjdGFibGUuc3ViamVjdEZhY3RvcnkgPSBzdWJqZWN0RmFjdG9yeTtcbiAgICAgICAgcmV0dXJuIGNvbm5lY3RhYmxlO1xuICAgIH07XG59XG52YXIgTXVsdGljYXN0T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTXVsdGljYXN0T3BlcmF0b3Ioc3ViamVjdEZhY3RvcnksIHNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuc3ViamVjdEZhY3RvcnkgPSBzdWJqZWN0RmFjdG9yeTtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgIH1cbiAgICBNdWx0aWNhc3RPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcjtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLnN1YmplY3RGYWN0b3J5KCk7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBzZWxlY3RvcihzdWJqZWN0KS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5hZGQoc291cmNlLnN1YnNjcmliZShzdWJqZWN0KSk7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICByZXR1cm4gTXVsdGljYXN0T3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0IHsgTXVsdGljYXN0T3BlcmF0b3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11bHRpY2FzdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX29ic2VydmFibGVfZnJvbSxfdXRpbF9pc0FycmF5LF9PdXRlclN1YnNjcmliZXIsX0lubmVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvZnJvbSc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5JztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBJbm5lclN1YnNjcmliZXIgfSBmcm9tICcuLi9Jbm5lclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiBvbkVycm9yUmVzdW1lTmV4dCgpIHtcbiAgICB2YXIgbmV4dFNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBuZXh0U291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBpZiAobmV4dFNvdXJjZXMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobmV4dFNvdXJjZXNbMF0pKSB7XG4gICAgICAgIG5leHRTb3VyY2VzID0gbmV4dFNvdXJjZXNbMF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgT25FcnJvclJlc3VtZU5leHRPcGVyYXRvcihuZXh0U291cmNlcykpOyB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9uRXJyb3JSZXN1bWVOZXh0U3RhdGljKCkge1xuICAgIHZhciBuZXh0U291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG5leHRTb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzb3VyY2UgPSBudWxsO1xuICAgIGlmIChuZXh0U291cmNlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShuZXh0U291cmNlc1swXSkpIHtcbiAgICAgICAgbmV4dFNvdXJjZXMgPSBuZXh0U291cmNlc1swXTtcbiAgICB9XG4gICAgc291cmNlID0gbmV4dFNvdXJjZXMuc2hpZnQoKTtcbiAgICByZXR1cm4gZnJvbShzb3VyY2UsIG51bGwpLmxpZnQobmV3IE9uRXJyb3JSZXN1bWVOZXh0T3BlcmF0b3IobmV4dFNvdXJjZXMpKTtcbn1cbnZhciBPbkVycm9yUmVzdW1lTmV4dE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9uRXJyb3JSZXN1bWVOZXh0T3BlcmF0b3IobmV4dFNvdXJjZXMpIHtcbiAgICAgICAgdGhpcy5uZXh0U291cmNlcyA9IG5leHRTb3VyY2VzO1xuICAgIH1cbiAgICBPbkVycm9yUmVzdW1lTmV4dE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgT25FcnJvclJlc3VtZU5leHRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMubmV4dFNvdXJjZXMpKTtcbiAgICB9O1xuICAgIHJldHVybiBPbkVycm9yUmVzdW1lTmV4dE9wZXJhdG9yO1xufSgpKTtcbnZhciBPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoT25FcnJvclJlc3VtZU5leHRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE9uRXJyb3JSZXN1bWVOZXh0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgbmV4dFNvdXJjZXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIF90aGlzLm5leHRTb3VyY2VzID0gbmV4dFNvdXJjZXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT25FcnJvclJlc3VtZU5leHRTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvciwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVUb05leHRTb3VyY2UoKTtcbiAgICB9O1xuICAgIE9uRXJyb3JSZXN1bWVOZXh0U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVUb05leHRTb3VyY2UoKTtcbiAgICB9O1xuICAgIE9uRXJyb3JSZXN1bWVOZXh0U3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLnN1YnNjcmliZVRvTmV4dFNvdXJjZSgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVUb05leHRTb3VyY2UoKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgT25FcnJvclJlc3VtZU5leHRTdWJzY3JpYmVyLnByb3RvdHlwZS5zdWJzY3JpYmVUb05leHRTb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXh0ID0gdGhpcy5uZXh0U291cmNlcy5zaGlmdCgpO1xuICAgICAgICBpZiAoISFuZXh0KSB7XG4gICAgICAgICAgICB2YXIgaW5uZXJTdWJzY3JpYmVyID0gbmV3IElubmVyU3Vic2NyaWJlcih0aGlzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgICAgICBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBuZXh0LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE9uRXJyb3JSZXN1bWVOZXh0U3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbkVycm9yUmVzdW1lTmV4dC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBwYWlyd2lzZSgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFBhaXJ3aXNlT3BlcmF0b3IoKSk7IH07XG59XG52YXIgUGFpcndpc2VPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQYWlyd2lzZU9wZXJhdG9yKCkge1xuICAgIH1cbiAgICBQYWlyd2lzZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgUGFpcndpc2VTdWJzY3JpYmVyKHN1YnNjcmliZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBQYWlyd2lzZU9wZXJhdG9yO1xufSgpKTtcbnZhciBQYWlyd2lzZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoUGFpcndpc2VTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBhaXJ3aXNlU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaGFzUHJldiA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFBhaXJ3aXNlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhaXI7XG4gICAgICAgIGlmICh0aGlzLmhhc1ByZXYpIHtcbiAgICAgICAgICAgIHBhaXIgPSBbdGhpcy5wcmV2LCB2YWx1ZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhhc1ByZXYgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJldiA9IHZhbHVlO1xuICAgICAgICBpZiAocGFpcikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHBhaXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUGFpcndpc2VTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWlyd2lzZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3V0aWxfbm90LF9maWx0ZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgbm90IH0gZnJvbSAnLi4vdXRpbC9ub3QnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAnLi9maWx0ZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnRpdGlvbihwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykoc291cmNlKSxcbiAgICAgICAgICAgIGZpbHRlcihub3QocHJlZGljYXRlLCB0aGlzQXJnKSkoc291cmNlKVxuICAgICAgICBdO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJ0aXRpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9tYXAgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuZXhwb3J0IGZ1bmN0aW9uIHBsdWNrKCkge1xuICAgIHZhciBwcm9wZXJ0aWVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgcHJvcGVydGllc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gcHJvcGVydGllcy5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xpc3Qgb2YgcHJvcGVydGllcyBjYW5ub3QgYmUgZW1wdHkuJyk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBtYXAocGx1Y2tlcihwcm9wZXJ0aWVzLCBsZW5ndGgpKShzb3VyY2UpOyB9O1xufVxuZnVuY3Rpb24gcGx1Y2tlcihwcm9wcywgbGVuZ3RoKSB7XG4gICAgdmFyIG1hcHBlciA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHZhciBjdXJyZW50UHJvcCA9IHg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwID0gY3VycmVudFByb3BbcHJvcHNbaV1dO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQcm9wID0gcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRQcm9wO1xuICAgIH07XG4gICAgcmV0dXJuIG1hcHBlcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBsdWNrLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfU3ViamVjdCxfbXVsdGljYXN0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmltcG9ydCB7IG11bHRpY2FzdCB9IGZyb20gJy4vbXVsdGljYXN0JztcbmV4cG9ydCBmdW5jdGlvbiBwdWJsaXNoKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yID9cbiAgICAgICAgbXVsdGljYXN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBTdWJqZWN0KCk7IH0sIHNlbGVjdG9yKSA6XG4gICAgICAgIG11bHRpY2FzdChuZXcgU3ViamVjdCgpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2guanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9CZWhhdmlvclN1YmplY3QsX211bHRpY2FzdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICcuLi9CZWhhdmlvclN1YmplY3QnO1xuaW1wb3J0IHsgbXVsdGljYXN0IH0gZnJvbSAnLi9tdWx0aWNhc3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2hCZWhhdmlvcih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBtdWx0aWNhc3QobmV3IEJlaGF2aW9yU3ViamVjdCh2YWx1ZSkpKHNvdXJjZSk7IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoQmVoYXZpb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9Bc3luY1N1YmplY3QsX211bHRpY2FzdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBBc3luY1N1YmplY3QgfSBmcm9tICcuLi9Bc3luY1N1YmplY3QnO1xuaW1wb3J0IHsgbXVsdGljYXN0IH0gZnJvbSAnLi9tdWx0aWNhc3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2hMYXN0KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBtdWx0aWNhc3QobmV3IEFzeW5jU3ViamVjdCgpKShzb3VyY2UpOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGlzaExhc3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9SZXBsYXlTdWJqZWN0LF9tdWx0aWNhc3QgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgUmVwbGF5U3ViamVjdCB9IGZyb20gJy4uL1JlcGxheVN1YmplY3QnO1xuaW1wb3J0IHsgbXVsdGljYXN0IH0gZnJvbSAnLi9tdWx0aWNhc3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2hSZXBsYXkoYnVmZmVyU2l6ZSwgd2luZG93VGltZSwgc2VsZWN0b3JPclNjaGVkdWxlciwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNlbGVjdG9yT3JTY2hlZHVsZXIgJiYgdHlwZW9mIHNlbGVjdG9yT3JTY2hlZHVsZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gc2VsZWN0b3JPclNjaGVkdWxlcjtcbiAgICB9XG4gICAgdmFyIHNlbGVjdG9yID0gdHlwZW9mIHNlbGVjdG9yT3JTY2hlZHVsZXIgPT09ICdmdW5jdGlvbicgPyBzZWxlY3Rvck9yU2NoZWR1bGVyIDogdW5kZWZpbmVkO1xuICAgIHZhciBzdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3QoYnVmZmVyU2l6ZSwgd2luZG93VGltZSwgc2NoZWR1bGVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gbXVsdGljYXN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YmplY3Q7IH0sIHNlbGVjdG9yKShzb3VyY2UpOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGlzaFJlcGxheS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3V0aWxfaXNBcnJheSxfb2JzZXJ2YWJsZV9yYWNlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgcmFjZSBhcyByYWNlU3RhdGljIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9yYWNlJztcbmV4cG9ydCBmdW5jdGlvbiByYWNlKCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiByYWNlT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgaWYgKG9ic2VydmFibGVzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG9ic2VydmFibGVzWzBdKSkge1xuICAgICAgICAgICAgb2JzZXJ2YWJsZXMgPSBvYnNlcnZhYmxlc1swXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQuY2FsbChyYWNlU3RhdGljLmFwcGx5KHZvaWQgMCwgW3NvdXJjZV0uY29uY2F0KG9ic2VydmFibGVzKSkpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYWNlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfb2JzZXJ2YWJsZV9lbXB0eSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgZW1wdHkgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2VtcHR5JztcbmV4cG9ydCBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgICBpZiAoY291bnQgPT09IHZvaWQgMCkge1xuICAgICAgICBjb3VudCA9IC0xO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvdW50IDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBSZXBlYXRPcGVyYXRvcigtMSwgc291cmNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFJlcGVhdE9wZXJhdG9yKGNvdW50IC0gMSwgc291cmNlKSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxudmFyIFJlcGVhdE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlcGVhdE9wZXJhdG9yKGNvdW50LCBzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IGNvdW50O1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgUmVwZWF0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBSZXBlYXRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuY291bnQsIHRoaXMuc291cmNlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVwZWF0T3BlcmF0b3I7XG59KCkpO1xudmFyIFJlcGVhdFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoUmVwZWF0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXBlYXRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb3VudCwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb3VudCA9IGNvdW50O1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmVwZWF0U3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHNvdXJjZSA9IF9hLnNvdXJjZSwgY291bnQgPSBfYS5jb3VudDtcbiAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmNvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb3VudCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudCA9IGNvdW50IC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUodGhpcy5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlKCkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUmVwZWF0U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwZWF0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3ViamVjdCxfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi4vU3ViamVjdCc7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiByZXBlYXRXaGVuKG5vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBSZXBlYXRXaGVuT3BlcmF0b3Iobm90aWZpZXIpKTsgfTtcbn1cbnZhciBSZXBlYXRXaGVuT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVwZWF0V2hlbk9wZXJhdG9yKG5vdGlmaWVyKSB7XG4gICAgICAgIHRoaXMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICB9XG4gICAgUmVwZWF0V2hlbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgUmVwZWF0V2hlblN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5ub3RpZmllciwgc291cmNlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVwZWF0V2hlbk9wZXJhdG9yO1xufSgpKTtcbnZhciBSZXBlYXRXaGVuU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhSZXBlYXRXaGVuU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXBlYXRXaGVuU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgbm90aWZpZXIsIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBfdGhpcy5zb3VyY2VJc0JlaW5nU3Vic2NyaWJlZFRvID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSZXBlYXRXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLnNvdXJjZUlzQmVpbmdTdWJzY3JpYmVkVG8gPSB0cnVlO1xuICAgICAgICB0aGlzLnNvdXJjZS5zdWJzY3JpYmUodGhpcyk7XG4gICAgfTtcbiAgICBSZXBlYXRXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgaWYgKHRoaXMuc291cmNlSXNCZWluZ1N1YnNjcmliZWRUbyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmNvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlcGVhdFdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zb3VyY2VJc0JlaW5nU3Vic2NyaWJlZFRvID0gZmFsc2U7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5yZXRyaWVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVUb1JldHJpZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5yZXRyaWVzU3Vic2NyaXB0aW9uIHx8IHRoaXMucmV0cmllc1N1YnNjcmlwdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlKCk7XG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMubmV4dCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXBlYXRXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBub3RpZmljYXRpb25zID0gX2Eubm90aWZpY2F0aW9ucywgcmV0cmllc1N1YnNjcmlwdGlvbiA9IF9hLnJldHJpZXNTdWJzY3JpcHRpb247XG4gICAgICAgIGlmIChub3RpZmljYXRpb25zKSB7XG4gICAgICAgICAgICBub3RpZmljYXRpb25zLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXRyaWVzU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICByZXRyaWVzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLnJldHJpZXNTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmV0cmllcyA9IG51bGw7XG4gICAgfTtcbiAgICBSZXBlYXRXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF91bnN1YnNjcmliZSA9IHRoaXMuX3Vuc3Vic2NyaWJlO1xuICAgICAgICB0aGlzLl91bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl91bnN1YnNjcmliZSA9IF91bnN1YnNjcmliZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBSZXBlYXRXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUuc3Vic2NyaWJlVG9SZXRyaWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMgPSBuZXcgU3ViamVjdCgpO1xuICAgICAgICB2YXIgcmV0cmllcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBub3RpZmllciA9IHRoaXMubm90aWZpZXI7XG4gICAgICAgICAgICByZXRyaWVzID0gbm90aWZpZXIodGhpcy5ub3RpZmljYXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJldHJpZXMgPSByZXRyaWVzO1xuICAgICAgICB0aGlzLnJldHJpZXNTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCByZXRyaWVzKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXBlYXRXaGVuU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXBlYXRXaGVuLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHJldHJ5KGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09PSB2b2lkIDApIHtcbiAgICAgICAgY291bnQgPSAtMTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBSZXRyeU9wZXJhdG9yKGNvdW50LCBzb3VyY2UpKTsgfTtcbn1cbnZhciBSZXRyeU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJldHJ5T3BlcmF0b3IoY291bnQsIHNvdXJjZSkge1xuICAgICAgICB0aGlzLmNvdW50ID0gY291bnQ7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICBSZXRyeU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgUmV0cnlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuY291bnQsIHRoaXMuc291cmNlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmV0cnlPcGVyYXRvcjtcbn0oKSk7XG52YXIgUmV0cnlTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFJldHJ5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXRyeVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNvdW50LCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNvdW50ID0gY291bnQ7XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSZXRyeVN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBzb3VyY2UgPSBfYS5zb3VyY2UsIGNvdW50ID0gX2EuY291bnQ7XG4gICAgICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5lcnJvci5jYWxsKHRoaXMsIGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb3VudCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudCA9IGNvdW50IC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUodGhpcy5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlKCkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUmV0cnlTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXRyeS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YmplY3QsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL1N1YmplY3QnO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gcmV0cnlXaGVuKG5vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBSZXRyeVdoZW5PcGVyYXRvcihub3RpZmllciwgc291cmNlKSk7IH07XG59XG52YXIgUmV0cnlXaGVuT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmV0cnlXaGVuT3BlcmF0b3Iobm90aWZpZXIsIHNvdXJjZSkge1xuICAgICAgICB0aGlzLm5vdGlmaWVyID0gbm90aWZpZXI7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICBSZXRyeVdoZW5PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFJldHJ5V2hlblN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5ub3RpZmllciwgdGhpcy5zb3VyY2UpKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXRyeVdoZW5PcGVyYXRvcjtcbn0oKSk7XG52YXIgUmV0cnlXaGVuU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhSZXRyeVdoZW5TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJldHJ5V2hlblN1YnNjcmliZXIoZGVzdGluYXRpb24sIG5vdGlmaWVyLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm5vdGlmaWVyID0gbm90aWZpZXI7XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSZXRyeVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIGVycm9ycyA9IHRoaXMuZXJyb3JzO1xuICAgICAgICAgICAgdmFyIHJldHJpZXMgPSB0aGlzLnJldHJpZXM7XG4gICAgICAgICAgICB2YXIgcmV0cmllc1N1YnNjcmlwdGlvbiA9IHRoaXMucmV0cmllc1N1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIGlmICghcmV0cmllcykge1xuICAgICAgICAgICAgICAgIGVycm9ycyA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vdGlmaWVyID0gdGhpcy5ub3RpZmllcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0cmllcyA9IG5vdGlmaWVyKGVycm9ycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmVycm9yLmNhbGwodGhpcywgZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHJpZXNTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCByZXRyaWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLnJldHJpZXNTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlKCk7XG4gICAgICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICAgICAgICAgIHRoaXMucmV0cmllcyA9IHJldHJpZXM7XG4gICAgICAgICAgICB0aGlzLnJldHJpZXNTdWJzY3JpcHRpb24gPSByZXRyaWVzU3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgZXJyb3JzLm5leHQoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmV0cnlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBlcnJvcnMgPSBfYS5lcnJvcnMsIHJldHJpZXNTdWJzY3JpcHRpb24gPSBfYS5yZXRyaWVzU3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICBlcnJvcnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0cmllc1N1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgcmV0cmllc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5yZXRyaWVzU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJldHJpZXMgPSBudWxsO1xuICAgIH07XG4gICAgUmV0cnlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB2YXIgX3Vuc3Vic2NyaWJlID0gdGhpcy5fdW5zdWJzY3JpYmU7XG4gICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlKCk7XG4gICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gX3Vuc3Vic2NyaWJlO1xuICAgICAgICB0aGlzLnNvdXJjZS5zdWJzY3JpYmUodGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gUmV0cnlXaGVuU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXRyeVdoZW4uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIHNhbXBsZShub3RpZmllcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgU2FtcGxlT3BlcmF0b3Iobm90aWZpZXIpKTsgfTtcbn1cbnZhciBTYW1wbGVPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTYW1wbGVPcGVyYXRvcihub3RpZmllcikge1xuICAgICAgICB0aGlzLm5vdGlmaWVyID0gbm90aWZpZXI7XG4gICAgfVxuICAgIFNhbXBsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICB2YXIgc2FtcGxlU3Vic2NyaWJlciA9IG5ldyBTYW1wbGVTdWJzY3JpYmVyKHN1YnNjcmliZXIpO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gc291cmNlLnN1YnNjcmliZShzYW1wbGVTdWJzY3JpYmVyKTtcbiAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChzdWJzY3JpYmVUb1Jlc3VsdChzYW1wbGVTdWJzY3JpYmVyLCB0aGlzLm5vdGlmaWVyKSk7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICByZXR1cm4gU2FtcGxlT3BlcmF0b3I7XG59KCkpO1xudmFyIFNhbXBsZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2FtcGxlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYW1wbGVTdWJzY3JpYmVyKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTYW1wbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgIH07XG4gICAgU2FtcGxlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmVtaXRWYWx1ZSgpO1xuICAgIH07XG4gICAgU2FtcGxlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZW1pdFZhbHVlKCk7XG4gICAgfTtcbiAgICBTYW1wbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5lbWl0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodGhpcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTYW1wbGVTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNhbXBsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX3NjaGVkdWxlcl9hc3luYyBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgYXN5bmMgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuZXhwb3J0IGZ1bmN0aW9uIHNhbXBsZVRpbWUocGVyaW9kLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgU2FtcGxlVGltZU9wZXJhdG9yKHBlcmlvZCwgc2NoZWR1bGVyKSk7IH07XG59XG52YXIgU2FtcGxlVGltZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNhbXBsZVRpbWVPcGVyYXRvcihwZXJpb2QsIHNjaGVkdWxlcikge1xuICAgICAgICB0aGlzLnBlcmlvZCA9IHBlcmlvZDtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgfVxuICAgIFNhbXBsZVRpbWVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFNhbXBsZVRpbWVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucGVyaW9kLCB0aGlzLnNjaGVkdWxlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFNhbXBsZVRpbWVPcGVyYXRvcjtcbn0oKSk7XG52YXIgU2FtcGxlVGltZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2FtcGxlVGltZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2FtcGxlVGltZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHBlcmlvZCwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wZXJpb2QgPSBwZXJpb2Q7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaE5vdGlmaWNhdGlvbiwgcGVyaW9kLCB7IHN1YnNjcmliZXI6IF90aGlzLCBwZXJpb2Q6IHBlcmlvZCB9KSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2FtcGxlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMubGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgIH07XG4gICAgU2FtcGxlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodGhpcy5sYXN0VmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU2FtcGxlVGltZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmZ1bmN0aW9uIGRpc3BhdGNoTm90aWZpY2F0aW9uKHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBwZXJpb2QgPSBzdGF0ZS5wZXJpb2Q7XG4gICAgc3Vic2NyaWJlci5ub3RpZnlOZXh0KCk7XG4gICAgdGhpcy5zY2hlZHVsZShzdGF0ZSwgcGVyaW9kKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNhbXBsZVRpbWUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gc2VxdWVuY2VFcXVhbChjb21wYXJlVG8sIGNvbXBhcmF0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFNlcXVlbmNlRXF1YWxPcGVyYXRvcihjb21wYXJlVG8sIGNvbXBhcmF0b3IpKTsgfTtcbn1cbnZhciBTZXF1ZW5jZUVxdWFsT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2VxdWVuY2VFcXVhbE9wZXJhdG9yKGNvbXBhcmVUbywgY29tcGFyYXRvcikge1xuICAgICAgICB0aGlzLmNvbXBhcmVUbyA9IGNvbXBhcmVUbztcbiAgICAgICAgdGhpcy5jb21wYXJhdG9yID0gY29tcGFyYXRvcjtcbiAgICB9XG4gICAgU2VxdWVuY2VFcXVhbE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jb21wYXJlVG8sIHRoaXMuY29tcGFyYXRvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFNlcXVlbmNlRXF1YWxPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBTZXF1ZW5jZUVxdWFsT3BlcmF0b3IgfTtcbnZhciBTZXF1ZW5jZUVxdWFsU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTZXF1ZW5jZUVxdWFsU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTZXF1ZW5jZUVxdWFsU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY29tcGFyZVRvLCBjb21wYXJhdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb21wYXJlVG8gPSBjb21wYXJlVG87XG4gICAgICAgIF90aGlzLmNvbXBhcmF0b3IgPSBjb21wYXJhdG9yO1xuICAgICAgICBfdGhpcy5fYSA9IFtdO1xuICAgICAgICBfdGhpcy5fYiA9IFtdO1xuICAgICAgICBfdGhpcy5fb25lQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24uYWRkKGNvbXBhcmVUby5zdWJzY3JpYmUobmV3IFNlcXVlbmNlRXF1YWxDb21wYXJlVG9TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBfdGhpcykpKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTZXF1ZW5jZUVxdWFsU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX29uZUNvbXBsZXRlICYmIHRoaXMuX2IubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tWYWx1ZXMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX29uZUNvbXBsZXRlKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQodGhpcy5fYS5sZW5ndGggPT09IDAgJiYgdGhpcy5fYi5sZW5ndGggPT09IDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fb25lQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyLnByb3RvdHlwZS5jaGVja1ZhbHVlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9jID0gdGhpcywgX2EgPSBfYy5fYSwgX2IgPSBfYy5fYiwgY29tcGFyYXRvciA9IF9jLmNvbXBhcmF0b3I7XG4gICAgICAgIHdoaWxlIChfYS5sZW5ndGggPiAwICYmIF9iLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBhID0gX2Euc2hpZnQoKTtcbiAgICAgICAgICAgIHZhciBiID0gX2Iuc2hpZnQoKTtcbiAgICAgICAgICAgIHZhciBhcmVFcXVhbCA9IGZhbHNlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhcmVFcXVhbCA9IGNvbXBhcmF0b3IgPyBjb21wYXJhdG9yKGEsIGIpIDogYSA9PT0gYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYXJlRXF1YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTZXF1ZW5jZUVxdWFsU3Vic2NyaWJlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIFNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0QiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5fb25lQ29tcGxldGUgJiYgdGhpcy5fYS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9iLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5jaGVja1ZhbHVlcygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZXF1ZW5jZUVxdWFsU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGVCID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fb25lQ29tcGxldGUpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCh0aGlzLl9hLmxlbmd0aCA9PT0gMCAmJiB0aGlzLl9iLmxlbmd0aCA9PT0gMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9vbmVDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTZXF1ZW5jZUVxdWFsU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIgfTtcbnZhciBTZXF1ZW5jZUVxdWFsQ29tcGFyZVRvU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTZXF1ZW5jZUVxdWFsQ29tcGFyZVRvU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTZXF1ZW5jZUVxdWFsQ29tcGFyZVRvU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcGFyZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2VxdWVuY2VFcXVhbENvbXBhcmVUb1N1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm5leHRCKHZhbHVlKTtcbiAgICB9O1xuICAgIFNlcXVlbmNlRXF1YWxDb21wYXJlVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMucGFyZW50LmVycm9yKGVycik7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFNlcXVlbmNlRXF1YWxDb21wYXJlVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucGFyZW50LmNvbXBsZXRlQigpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gU2VxdWVuY2VFcXVhbENvbXBhcmVUb1N1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcXVlbmNlRXF1YWwuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9tdWx0aWNhc3QsX3JlZkNvdW50LF9TdWJqZWN0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG11bHRpY2FzdCB9IGZyb20gJy4vbXVsdGljYXN0JztcbmltcG9ydCB7IHJlZkNvdW50IH0gZnJvbSAnLi9yZWZDb3VudCc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi4vU3ViamVjdCc7XG5mdW5jdGlvbiBzaGFyZVN1YmplY3RGYWN0b3J5KCkge1xuICAgIHJldHVybiBuZXcgU3ViamVjdCgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNoYXJlKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiByZWZDb3VudCgpKG11bHRpY2FzdChzaGFyZVN1YmplY3RGYWN0b3J5KShzb3VyY2UpKTsgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfUmVwbGF5U3ViamVjdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0IH0gZnJvbSAnLi4vUmVwbGF5U3ViamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gc2hhcmVSZXBsYXkoY29uZmlnT3JCdWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICB2YXIgY29uZmlnO1xuICAgIGlmIChjb25maWdPckJ1ZmZlclNpemUgJiYgdHlwZW9mIGNvbmZpZ09yQnVmZmVyU2l6ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgY29uZmlnID0gY29uZmlnT3JCdWZmZXJTaXplO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uZmlnID0ge1xuICAgICAgICAgICAgYnVmZmVyU2l6ZTogY29uZmlnT3JCdWZmZXJTaXplLFxuICAgICAgICAgICAgd2luZG93VGltZTogd2luZG93VGltZSxcbiAgICAgICAgICAgIHJlZkNvdW50OiBmYWxzZSxcbiAgICAgICAgICAgIHNjaGVkdWxlcjogc2NoZWR1bGVyXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChzaGFyZVJlcGxheU9wZXJhdG9yKGNvbmZpZykpOyB9O1xufVxuZnVuY3Rpb24gc2hhcmVSZXBsYXlPcGVyYXRvcihfYSkge1xuICAgIHZhciBfYiA9IF9hLmJ1ZmZlclNpemUsIGJ1ZmZlclNpemUgPSBfYiA9PT0gdm9pZCAwID8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIDogX2IsIF9jID0gX2Eud2luZG93VGltZSwgd2luZG93VGltZSA9IF9jID09PSB2b2lkIDAgPyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgOiBfYywgdXNlUmVmQ291bnQgPSBfYS5yZWZDb3VudCwgc2NoZWR1bGVyID0gX2Euc2NoZWR1bGVyO1xuICAgIHZhciBzdWJqZWN0O1xuICAgIHZhciByZWZDb3VudCA9IDA7XG4gICAgdmFyIHN1YnNjcmlwdGlvbjtcbiAgICB2YXIgaGFzRXJyb3IgPSBmYWxzZTtcbiAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgIHJldHVybiBmdW5jdGlvbiBzaGFyZVJlcGxheU9wZXJhdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmVmQ291bnQrKztcbiAgICAgICAgaWYgKCFzdWJqZWN0IHx8IGhhc0Vycm9yKSB7XG4gICAgICAgICAgICBoYXNFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgc3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0KGJ1ZmZlclNpemUsIHdpbmRvd1RpbWUsIHNjaGVkdWxlcik7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBzb3VyY2Uuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHsgc3ViamVjdC5uZXh0KHZhbHVlKTsgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YmplY3QuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbm5lclN1YiA9IHN1YmplY3Quc3Vic2NyaWJlKHRoaXMpO1xuICAgICAgICB0aGlzLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZWZDb3VudC0tO1xuICAgICAgICAgICAgaW5uZXJTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24gJiYgIWlzQ29tcGxldGUgJiYgdXNlUmVmQ291bnQgJiYgcmVmQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgc3ViamVjdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlUmVwbGF5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfdXRpbF9FbXB0eUVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBFbXB0eUVycm9yIH0gZnJvbSAnLi4vdXRpbC9FbXB0eUVycm9yJztcbmV4cG9ydCBmdW5jdGlvbiBzaW5nbGUocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTaW5nbGVPcGVyYXRvcihwcmVkaWNhdGUsIHNvdXJjZSkpOyB9O1xufVxudmFyIFNpbmdsZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNpbmdsZU9wZXJhdG9yKHByZWRpY2F0ZSwgc291cmNlKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgU2luZ2xlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTaW5nbGVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJlZGljYXRlLCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFNpbmdsZU9wZXJhdG9yO1xufSgpKTtcbnZhciBTaW5nbGVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFNpbmdsZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2luZ2xlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBfdGhpcy5zZWVuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNpbmdsZVN1YnNjcmliZXIucHJvdG90eXBlLmFwcGx5U2luZ2xlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VlblZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKCdTZXF1ZW5jZSBjb250YWlucyBtb3JlIHRoYW4gb25lIGVsZW1lbnQnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VlblZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuc2luZ2xlVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2luZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICBpZiAodGhpcy5wcmVkaWNhdGUpIHtcbiAgICAgICAgICAgIHRoaXMudHJ5TmV4dCh2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hcHBseVNpbmdsZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2luZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5TmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIHRoaXMuc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlTaW5nbGVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaW5nbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmICh0aGlzLmluZGV4ID4gMCkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh0aGlzLnNlZW5WYWx1ZSA/IHRoaXMuc2luZ2xlVmFsdWUgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKG5ldyBFbXB0eUVycm9yKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNpbmdsZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpbmdsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBza2lwKGNvdW50KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTa2lwT3BlcmF0b3IoY291bnQpKTsgfTtcbn1cbnZhciBTa2lwT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2tpcE9wZXJhdG9yKHRvdGFsKSB7XG4gICAgICAgIHRoaXMudG90YWwgPSB0b3RhbDtcbiAgICB9XG4gICAgU2tpcE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgU2tpcFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy50b3RhbCkpO1xuICAgIH07XG4gICAgcmV0dXJuIFNraXBPcGVyYXRvcjtcbn0oKSk7XG52YXIgU2tpcFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2tpcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2tpcFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHRvdGFsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy50b3RhbCA9IHRvdGFsO1xuICAgICAgICBfdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2tpcFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgaWYgKCsrdGhpcy5jb3VudCA+IHRoaXMudG90YWwpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh4KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNraXBTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1za2lwLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfdXRpbF9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgfSBmcm9tICcuLi91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yJztcbmV4cG9ydCBmdW5jdGlvbiBza2lwTGFzdChjb3VudCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgU2tpcExhc3RPcGVyYXRvcihjb3VudCkpOyB9O1xufVxudmFyIFNraXBMYXN0T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2tpcExhc3RPcGVyYXRvcihfc2tpcENvdW50KSB7XG4gICAgICAgIHRoaXMuX3NraXBDb3VudCA9IF9za2lwQ291bnQ7XG4gICAgICAgIGlmICh0aGlzLl9za2lwQ291bnQgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgU2tpcExhc3RPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NraXBDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFNraXBMYXN0U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLl9za2lwQ291bnQpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNraXBMYXN0T3BlcmF0b3I7XG59KCkpO1xudmFyIFNraXBMYXN0U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTa2lwTGFzdFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2tpcExhc3RTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBfc2tpcENvdW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fc2tpcENvdW50ID0gX3NraXBDb3VudDtcbiAgICAgICAgX3RoaXMuX2NvdW50ID0gMDtcbiAgICAgICAgX3RoaXMuX3JpbmcgPSBuZXcgQXJyYXkoX3NraXBDb3VudCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2tpcExhc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgc2tpcENvdW50ID0gdGhpcy5fc2tpcENvdW50O1xuICAgICAgICB2YXIgY291bnQgPSB0aGlzLl9jb3VudCsrO1xuICAgICAgICBpZiAoY291bnQgPCBza2lwQ291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JpbmdbY291bnRdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gY291bnQgJSBza2lwQ291bnQ7XG4gICAgICAgICAgICB2YXIgcmluZyA9IHRoaXMuX3Jpbmc7XG4gICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSByaW5nW2N1cnJlbnRJbmRleF07XG4gICAgICAgICAgICByaW5nW2N1cnJlbnRJbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChvbGRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTa2lwTGFzdFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNraXBMYXN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF9Jbm5lclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBJbm5lclN1YnNjcmliZXIgfSBmcm9tICcuLi9Jbm5lclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiBza2lwVW50aWwobm90aWZpZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFNraXBVbnRpbE9wZXJhdG9yKG5vdGlmaWVyKSk7IH07XG59XG52YXIgU2tpcFVudGlsT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2tpcFVudGlsT3BlcmF0b3Iobm90aWZpZXIpIHtcbiAgICAgICAgdGhpcy5ub3RpZmllciA9IG5vdGlmaWVyO1xuICAgIH1cbiAgICBTa2lwVW50aWxPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTa2lwVW50aWxTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCB0aGlzLm5vdGlmaWVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2tpcFVudGlsT3BlcmF0b3I7XG59KCkpO1xudmFyIFNraXBVbnRpbFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2tpcFVudGlsU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTa2lwVW50aWxTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBub3RpZmllcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaWJlciA9IG5ldyBJbm5lclN1YnNjcmliZXIoX3RoaXMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgX3RoaXMuYWRkKGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgIF90aGlzLmlubmVyU3Vic2NyaXB0aW9uID0gaW5uZXJTdWJzY3JpYmVyO1xuICAgICAgICBzdWJzY3JpYmVUb1Jlc3VsdChfdGhpcywgbm90aWZpZXIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNraXBVbnRpbFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9uZXh0LmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTa2lwVW50aWxTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5pbm5lclN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5pbm5lclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTa2lwVW50aWxTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB9O1xuICAgIHJldHVybiBTa2lwVW50aWxTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNraXBVbnRpbC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBza2lwV2hpbGUocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTa2lwV2hpbGVPcGVyYXRvcihwcmVkaWNhdGUpKTsgfTtcbn1cbnZhciBTa2lwV2hpbGVPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTa2lwV2hpbGVPcGVyYXRvcihwcmVkaWNhdGUpIHtcbiAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgfVxuICAgIFNraXBXaGlsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgU2tpcFdoaWxlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByZWRpY2F0ZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFNraXBXaGlsZU9wZXJhdG9yO1xufSgpKTtcbnZhciBTa2lwV2hpbGVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFNraXBXaGlsZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2tpcFdoaWxlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIF90aGlzLnNraXBwaW5nID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNraXBXaGlsZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmICh0aGlzLnNraXBwaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnRyeUNhbGxQcmVkaWNhdGUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5za2lwcGluZykge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNraXBXaGlsZVN1YnNjcmliZXIucHJvdG90eXBlLnRyeUNhbGxQcmVkaWNhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnByZWRpY2F0ZSh2YWx1ZSwgdGhpcy5pbmRleCsrKTtcbiAgICAgICAgICAgIHRoaXMuc2tpcHBpbmcgPSBCb29sZWFuKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU2tpcFdoaWxlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2tpcFdoaWxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfb2JzZXJ2YWJsZV9jb25jYXQsX3V0aWxfaXNTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgY29uY2F0IH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9jb25jYXQnO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmV4cG9ydCBmdW5jdGlvbiBzdGFydFdpdGgoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJyYXlbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNjaGVkdWxlciA9IGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xuICAgIGlmIChpc1NjaGVkdWxlcihzY2hlZHVsZXIpKSB7XG4gICAgICAgIGFycmF5LnBvcCgpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gY29uY2F0KGFycmF5LCBzb3VyY2UsIHNjaGVkdWxlcik7IH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gY29uY2F0KGFycmF5LCBzb3VyY2UpOyB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXJ0V2l0aC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX09ic2VydmFibGUsX3NjaGVkdWxlcl9hc2FwLF91dGlsX2lzTnVtZXJpYyBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgYXNhcCB9IGZyb20gJy4uL3NjaGVkdWxlci9hc2FwJztcbmltcG9ydCB7IGlzTnVtZXJpYyB9IGZyb20gJy4uL3V0aWwvaXNOdW1lcmljJztcbnZhciBTdWJzY3JpYmVPbk9ic2VydmFibGUgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3Vic2NyaWJlT25PYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZU9uT2JzZXJ2YWJsZShzb3VyY2UsIGRlbGF5VGltZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIGlmIChkZWxheVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXlUaW1lID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IGFzYXA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBfdGhpcy5kZWxheVRpbWUgPSBkZWxheVRpbWU7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZGVsYXlUaW1lKSB8fCBkZWxheVRpbWUgPCAwKSB7XG4gICAgICAgICAgICBfdGhpcy5kZWxheVRpbWUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2NoZWR1bGVyIHx8IHR5cGVvZiBzY2hlZHVsZXIuc2NoZWR1bGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIF90aGlzLnNjaGVkdWxlciA9IGFzYXA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpYmVPbk9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHNvdXJjZSwgZGVsYXksIHNjaGVkdWxlcikge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgc2NoZWR1bGVyID0gYXNhcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFN1YnNjcmliZU9uT2JzZXJ2YWJsZShzb3VyY2UsIGRlbGF5LCBzY2hlZHVsZXIpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlT25PYnNlcnZhYmxlLmRpc3BhdGNoID0gZnVuY3Rpb24gKGFyZykge1xuICAgICAgICB2YXIgc291cmNlID0gYXJnLnNvdXJjZSwgc3Vic2NyaWJlciA9IGFyZy5zdWJzY3JpYmVyO1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQoc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVPbk9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZGVsYXkgPSB0aGlzLmRlbGF5VGltZTtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoU3Vic2NyaWJlT25PYnNlcnZhYmxlLmRpc3BhdGNoLCBkZWxheSwge1xuICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsIHN1YnNjcmliZXI6IHN1YnNjcmliZXJcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaWJlT25PYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBTdWJzY3JpYmVPbk9ic2VydmFibGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZU9uT2JzZXJ2YWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX29ic2VydmFibGVfU3Vic2NyaWJlT25PYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IFN1YnNjcmliZU9uT2JzZXJ2YWJsZSB9IGZyb20gJy4uL29ic2VydmFibGUvU3Vic2NyaWJlT25PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBzdWJzY3JpYmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgZGVsYXkgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gc3Vic2NyaWJlT25PcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFN1YnNjcmliZU9uT3BlcmF0b3Ioc2NoZWR1bGVyLCBkZWxheSkpO1xuICAgIH07XG59XG52YXIgU3Vic2NyaWJlT25PcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVPbk9wZXJhdG9yKHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICB9XG4gICAgU3Vic2NyaWJlT25PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpYmVPbk9ic2VydmFibGUoc291cmNlLCB0aGlzLmRlbGF5LCB0aGlzLnNjaGVkdWxlcikuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZU9uT3BlcmF0b3I7XG59KCkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlT24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX0lubmVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCxfbWFwLF9vYnNlcnZhYmxlX2Zyb20gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBJbm5lclN1YnNjcmliZXIgfSBmcm9tICcuLi9Jbm5lclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2Zyb20nO1xuZXhwb3J0IGZ1bmN0aW9uIHN3aXRjaE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5waXBlKHN3aXRjaE1hcChmdW5jdGlvbiAoYSwgaSkgeyByZXR1cm4gZnJvbShwcm9qZWN0KGEsIGkpKS5waXBlKG1hcChmdW5jdGlvbiAoYiwgaWkpIHsgcmV0dXJuIHJlc3VsdFNlbGVjdG9yKGEsIGIsIGksIGlpKTsgfSkpOyB9KSk7IH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgU3dpdGNoTWFwT3BlcmF0b3IocHJvamVjdCkpOyB9O1xufVxudmFyIFN3aXRjaE1hcE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN3aXRjaE1hcE9wZXJhdG9yKHByb2plY3QpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICB9XG4gICAgU3dpdGNoTWFwT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTd2l0Y2hNYXBTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJvamVjdCkpO1xuICAgIH07XG4gICAgcmV0dXJuIFN3aXRjaE1hcE9wZXJhdG9yO1xufSgpKTtcbnZhciBTd2l0Y2hNYXBTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN3aXRjaE1hcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3dpdGNoTWFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTd2l0Y2hNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByb2plY3QodmFsdWUsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lubmVyU3ViKHJlc3VsdCwgdmFsdWUsIGluZGV4KTtcbiAgICB9O1xuICAgIFN3aXRjaE1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9pbm5lclN1YiA9IGZ1bmN0aW9uIChyZXN1bHQsIHZhbHVlLCBpbmRleCkge1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSB0aGlzLmlubmVyU3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoaW5uZXJTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIGlubmVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaWJlciA9IG5ldyBJbm5lclN1YnNjcmliZXIodGhpcywgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5hZGQoaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgdGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHJlc3VsdCwgdmFsdWUsIGluZGV4LCBpbm5lclN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSB0aGlzLmlubmVyU3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoIWlubmVyU3Vic2NyaXB0aW9uIHx8IGlubmVyU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBTd2l0Y2hNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5uZXJTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgIH07XG4gICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ucmVtb3ZlKGlubmVyU3ViKTtcbiAgICAgICAgdGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3dpdGNoTWFwU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hNYXAuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zd2l0Y2hNYXAsX3V0aWxfaWRlbnRpdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAnLi9zd2l0Y2hNYXAnO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiBzd2l0Y2hBbGwoKSB7XG4gICAgcmV0dXJuIHN3aXRjaE1hcChpZGVudGl0eSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hBbGwuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zd2l0Y2hNYXAgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAnLi9zd2l0Y2hNYXAnO1xuZXhwb3J0IGZ1bmN0aW9uIHN3aXRjaE1hcFRvKGlubmVyT2JzZXJ2YWJsZSwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICByZXR1cm4gcmVzdWx0U2VsZWN0b3IgPyBzd2l0Y2hNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5uZXJPYnNlcnZhYmxlOyB9LCByZXN1bHRTZWxlY3RvcikgOiBzd2l0Y2hNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5uZXJPYnNlcnZhYmxlOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXRjaE1hcFRvLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiB0YWtlVW50aWwobm90aWZpZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFRha2VVbnRpbE9wZXJhdG9yKG5vdGlmaWVyKSk7IH07XG59XG52YXIgVGFrZVVudGlsT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFrZVVudGlsT3BlcmF0b3Iobm90aWZpZXIpIHtcbiAgICAgICAgdGhpcy5ub3RpZmllciA9IG5vdGlmaWVyO1xuICAgIH1cbiAgICBUYWtlVW50aWxPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIHRha2VVbnRpbFN1YnNjcmliZXIgPSBuZXcgVGFrZVVudGlsU3Vic2NyaWJlcihzdWJzY3JpYmVyKTtcbiAgICAgICAgdmFyIG5vdGlmaWVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGFrZVVudGlsU3Vic2NyaWJlciwgdGhpcy5ub3RpZmllcik7XG4gICAgICAgIGlmIChub3RpZmllclN1YnNjcmlwdGlvbiAmJiAhdGFrZVVudGlsU3Vic2NyaWJlci5zZWVuVmFsdWUpIHtcbiAgICAgICAgICAgIHRha2VVbnRpbFN1YnNjcmliZXIuYWRkKG5vdGlmaWVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKHRha2VVbnRpbFN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWtlVW50aWxTdWJzY3JpYmVyO1xuICAgIH07XG4gICAgcmV0dXJuIFRha2VVbnRpbE9wZXJhdG9yO1xufSgpKTtcbnZhciBUYWtlVW50aWxTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFRha2VVbnRpbFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGFrZVVudGlsU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2VlblZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGFrZVVudGlsU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLnNlZW5WYWx1ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICB9O1xuICAgIFRha2VVbnRpbFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgIH07XG4gICAgcmV0dXJuIFRha2VVbnRpbFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZVVudGlsLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHRha2VXaGlsZShwcmVkaWNhdGUsIGluY2x1c2l2ZSkge1xuICAgIGlmIChpbmNsdXNpdmUgPT09IHZvaWQgMCkge1xuICAgICAgICBpbmNsdXNpdmUgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBUYWtlV2hpbGVPcGVyYXRvcihwcmVkaWNhdGUsIGluY2x1c2l2ZSkpO1xuICAgIH07XG59XG52YXIgVGFrZVdoaWxlT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFrZVdoaWxlT3BlcmF0b3IocHJlZGljYXRlLCBpbmNsdXNpdmUpIHtcbiAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIHRoaXMuaW5jbHVzaXZlID0gaW5jbHVzaXZlO1xuICAgIH1cbiAgICBUYWtlV2hpbGVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFRha2VXaGlsZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcmVkaWNhdGUsIHRoaXMuaW5jbHVzaXZlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZVdoaWxlT3BlcmF0b3I7XG59KCkpO1xudmFyIFRha2VXaGlsZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVGFrZVdoaWxlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUYWtlV2hpbGVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcmVkaWNhdGUsIGluY2x1c2l2ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICBfdGhpcy5pbmNsdXNpdmUgPSBpbmNsdXNpdmU7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUYWtlV2hpbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUodmFsdWUsIHRoaXMuaW5kZXgrKyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5leHRPckNvbXBsZXRlKHZhbHVlLCByZXN1bHQpO1xuICAgIH07XG4gICAgVGFrZVdoaWxlU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dE9yQ29tcGxldGUgPSBmdW5jdGlvbiAodmFsdWUsIHByZWRpY2F0ZVJlc3VsdCkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoQm9vbGVhbihwcmVkaWNhdGVSZXN1bHQpKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRha2VXaGlsZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2VXaGlsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX3V0aWxfbm9vcCxfdXRpbF9pc0Z1bmN0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbC9ub29wJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHRhcChuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHRhcE9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgRG9PcGVyYXRvcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSk7XG4gICAgfTtcbn1cbnZhciBEb09wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERvT3BlcmF0b3IobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB0aGlzLm5leHRPck9ic2VydmVyID0gbmV4dE9yT2JzZXJ2ZXI7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgdGhpcy5jb21wbGV0ZSA9IGNvbXBsZXRlO1xuICAgIH1cbiAgICBEb09wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgVGFwU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm5leHRPck9ic2VydmVyLCB0aGlzLmVycm9yLCB0aGlzLmNvbXBsZXRlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRG9PcGVyYXRvcjtcbn0oKSk7XG52YXIgVGFwU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhUYXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRhcFN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl90YXBOZXh0ID0gbm9vcDtcbiAgICAgICAgX3RoaXMuX3RhcEVycm9yID0gbm9vcDtcbiAgICAgICAgX3RoaXMuX3RhcENvbXBsZXRlID0gbm9vcDtcbiAgICAgICAgX3RoaXMuX3RhcEVycm9yID0gZXJyb3IgfHwgbm9vcDtcbiAgICAgICAgX3RoaXMuX3RhcENvbXBsZXRlID0gY29tcGxldGUgfHwgbm9vcDtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpKSB7XG4gICAgICAgICAgICBfdGhpcy5fY29udGV4dCA9IF90aGlzO1xuICAgICAgICAgICAgX3RoaXMuX3RhcE5leHQgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgX3RoaXMuX2NvbnRleHQgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgICAgIF90aGlzLl90YXBOZXh0ID0gb2JzZXJ2ZXJPck5leHQubmV4dCB8fCBub29wO1xuICAgICAgICAgICAgX3RoaXMuX3RhcEVycm9yID0gb2JzZXJ2ZXJPck5leHQuZXJyb3IgfHwgbm9vcDtcbiAgICAgICAgICAgIF90aGlzLl90YXBDb21wbGV0ZSA9IG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlIHx8IG5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fdGFwTmV4dC5jYWxsKHRoaXMuX2NvbnRleHQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFRhcFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuX3RhcEVycm9yLmNhbGwodGhpcy5fY29udGV4dCwgZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgVGFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fdGFwQ29tcGxldGUuY2FsbCh0aGlzLl9jb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBUYXBTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YXAuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IHZhciBkZWZhdWx0VGhyb3R0bGVDb25maWcgPSB7XG4gICAgbGVhZGluZzogdHJ1ZSxcbiAgICB0cmFpbGluZzogZmFsc2Vcbn07XG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGUoZHVyYXRpb25TZWxlY3RvciwgY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbmZpZyA9IGRlZmF1bHRUaHJvdHRsZUNvbmZpZztcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBUaHJvdHRsZU9wZXJhdG9yKGR1cmF0aW9uU2VsZWN0b3IsIGNvbmZpZy5sZWFkaW5nLCBjb25maWcudHJhaWxpbmcpKTsgfTtcbn1cbnZhciBUaHJvdHRsZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRocm90dGxlT3BlcmF0b3IoZHVyYXRpb25TZWxlY3RvciwgbGVhZGluZywgdHJhaWxpbmcpIHtcbiAgICAgICAgdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3RvcjtcbiAgICAgICAgdGhpcy5sZWFkaW5nID0gbGVhZGluZztcbiAgICAgICAgdGhpcy50cmFpbGluZyA9IHRyYWlsaW5nO1xuICAgIH1cbiAgICBUaHJvdHRsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgVGhyb3R0bGVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZHVyYXRpb25TZWxlY3RvciwgdGhpcy5sZWFkaW5nLCB0aGlzLnRyYWlsaW5nKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGhyb3R0bGVPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGhyb3R0bGVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFRocm90dGxlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaHJvdHRsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGR1cmF0aW9uU2VsZWN0b3IsIF9sZWFkaW5nLCBfdHJhaWxpbmcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIF90aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5fbGVhZGluZyA9IF9sZWFkaW5nO1xuICAgICAgICBfdGhpcy5fdHJhaWxpbmcgPSBfdHJhaWxpbmc7XG4gICAgICAgIF90aGlzLl9oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRocm90dGxlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5faGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICB0aGlzLl9zZW5kVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKCF0aGlzLl90aHJvdHRsZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9sZWFkaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRocm90dGxlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgVGhyb3R0bGVTdWJzY3JpYmVyLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfaGFzVmFsdWUgPSBfYS5faGFzVmFsdWUsIF9zZW5kVmFsdWUgPSBfYS5fc2VuZFZhbHVlO1xuICAgICAgICBpZiAoX2hhc1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoX3NlbmRWYWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnRocm90dGxlKF9zZW5kVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2hhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3NlbmRWYWx1ZSA9IG51bGw7XG4gICAgfTtcbiAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLnRocm90dGxlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IHRoaXMudHJ5RHVyYXRpb25TZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgIGlmICghIWR1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmFkZCh0aGlzLl90aHJvdHRsZWQgPSBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBkdXJhdGlvbikpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLnRyeUR1cmF0aW9uU2VsZWN0b3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmR1cmF0aW9uU2VsZWN0b3IodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLnRocm90dGxpbmdEb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfdGhyb3R0bGVkID0gX2EuX3Rocm90dGxlZCwgX3RyYWlsaW5nID0gX2EuX3RyYWlsaW5nO1xuICAgICAgICBpZiAoX3Rocm90dGxlZCkge1xuICAgICAgICAgICAgX3Rocm90dGxlZC51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rocm90dGxlZCA9IG51bGw7XG4gICAgICAgIGlmIChfdHJhaWxpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy50aHJvdHRsaW5nRG9uZSgpO1xuICAgIH07XG4gICAgVGhyb3R0bGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50aHJvdHRsaW5nRG9uZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFRocm90dGxlU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvdHRsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX3NjaGVkdWxlcl9hc3luYyxfdGhyb3R0bGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IGRlZmF1bHRUaHJvdHRsZUNvbmZpZyB9IGZyb20gJy4vdGhyb3R0bGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlVGltZShkdXJhdGlvbiwgc2NoZWR1bGVyLCBjb25maWcpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkge1xuICAgICAgICBjb25maWcgPSBkZWZhdWx0VGhyb3R0bGVDb25maWc7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgVGhyb3R0bGVUaW1lT3BlcmF0b3IoZHVyYXRpb24sIHNjaGVkdWxlciwgY29uZmlnLmxlYWRpbmcsIGNvbmZpZy50cmFpbGluZykpOyB9O1xufVxudmFyIFRocm90dGxlVGltZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRocm90dGxlVGltZU9wZXJhdG9yKGR1cmF0aW9uLCBzY2hlZHVsZXIsIGxlYWRpbmcsIHRyYWlsaW5nKSB7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIHRoaXMubGVhZGluZyA9IGxlYWRpbmc7XG4gICAgICAgIHRoaXMudHJhaWxpbmcgPSB0cmFpbGluZztcbiAgICB9XG4gICAgVGhyb3R0bGVUaW1lT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBUaHJvdHRsZVRpbWVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZHVyYXRpb24sIHRoaXMuc2NoZWR1bGVyLCB0aGlzLmxlYWRpbmcsIHRoaXMudHJhaWxpbmcpKTtcbiAgICB9O1xuICAgIHJldHVybiBUaHJvdHRsZVRpbWVPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGhyb3R0bGVUaW1lU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhUaHJvdHRsZVRpbWVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRocm90dGxlVGltZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGR1cmF0aW9uLCBzY2hlZHVsZXIsIGxlYWRpbmcsIHRyYWlsaW5nKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLmxlYWRpbmcgPSBsZWFkaW5nO1xuICAgICAgICBfdGhpcy50cmFpbGluZyA9IHRyYWlsaW5nO1xuICAgICAgICBfdGhpcy5faGFzVHJhaWxpbmdWYWx1ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fdHJhaWxpbmdWYWx1ZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGhyb3R0bGVUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMudGhyb3R0bGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50cmFpbGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyYWlsaW5nVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYXNUcmFpbGluZ1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKHRoaXMudGhyb3R0bGVkID0gdGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hOZXh0LCB0aGlzLmR1cmF0aW9uLCB7IHN1YnNjcmliZXI6IHRoaXMgfSkpO1xuICAgICAgICAgICAgaWYgKHRoaXMubGVhZGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnRyYWlsaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhaWxpbmdWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhc1RyYWlsaW5nVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBUaHJvdHRsZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9oYXNUcmFpbGluZ1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodGhpcy5fdHJhaWxpbmdWYWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRocm90dGxlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLmNsZWFyVGhyb3R0bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aHJvdHRsZWQgPSB0aGlzLnRocm90dGxlZDtcbiAgICAgICAgaWYgKHRocm90dGxlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudHJhaWxpbmcgJiYgdGhpcy5faGFzVHJhaWxpbmdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLl90cmFpbGluZ1ZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmFpbGluZ1ZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYXNUcmFpbGluZ1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdHRsZWQudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHRocm90dGxlZCk7XG4gICAgICAgICAgICB0aGlzLnRocm90dGxlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBUaHJvdHRsZVRpbWVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5mdW5jdGlvbiBkaXNwYXRjaE5leHQoYXJnKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBhcmcuc3Vic2NyaWJlcjtcbiAgICBzdWJzY3JpYmVyLmNsZWFyVGhyb3R0bGUoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm90dGxlVGltZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3NjaGVkdWxlcl9hc3luYyxfc2Nhbixfb2JzZXJ2YWJsZV9kZWZlcixfbWFwIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IHNjYW4gfSBmcm9tICcuL3NjYW4nO1xuaW1wb3J0IHsgZGVmZXIgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2RlZmVyJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmV4cG9ydCBmdW5jdGlvbiB0aW1lSW50ZXJ2YWwoc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFzeW5jO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gZGVmZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5waXBlKHNjYW4oZnVuY3Rpb24gKF9hLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gX2EuY3VycmVudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHsgdmFsdWU6IHZhbHVlLCBjdXJyZW50OiBzY2hlZHVsZXIubm93KCksIGxhc3Q6IGN1cnJlbnQgfSk7XG4gICAgICAgICAgICB9LCB7IGN1cnJlbnQ6IHNjaGVkdWxlci5ub3coKSwgdmFsdWU6IHVuZGVmaW5lZCwgbGFzdDogdW5kZWZpbmVkIH0pLCBtYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBfYS5jdXJyZW50LCBsYXN0ID0gX2EubGFzdCwgdmFsdWUgPSBfYS52YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFRpbWVJbnRlcnZhbCh2YWx1ZSwgY3VycmVudCAtIGxhc3QpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxudmFyIFRpbWVJbnRlcnZhbCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaW1lSW50ZXJ2YWwodmFsdWUsIGludGVydmFsKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IGludGVydmFsO1xuICAgIH1cbiAgICByZXR1cm4gVGltZUludGVydmFsO1xufSgpKTtcbmV4cG9ydCB7IFRpbWVJbnRlcnZhbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZUludGVydmFsLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfc2NoZWR1bGVyX2FzeW5jLF91dGlsX2lzRGF0ZSxfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBhc3luYyB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBpc0RhdGUgfSBmcm9tICcuLi91dGlsL2lzRGF0ZSc7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiB0aW1lb3V0V2l0aChkdWUsIHdpdGhPYnNlcnZhYmxlLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHZhciBhYnNvbHV0ZVRpbWVvdXQgPSBpc0RhdGUoZHVlKTtcbiAgICAgICAgdmFyIHdhaXRGb3IgPSBhYnNvbHV0ZVRpbWVvdXQgPyAoK2R1ZSAtIHNjaGVkdWxlci5ub3coKSkgOiBNYXRoLmFicyhkdWUpO1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFRpbWVvdXRXaXRoT3BlcmF0b3Iod2FpdEZvciwgYWJzb2x1dGVUaW1lb3V0LCB3aXRoT2JzZXJ2YWJsZSwgc2NoZWR1bGVyKSk7XG4gICAgfTtcbn1cbnZhciBUaW1lb3V0V2l0aE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbWVvdXRXaXRoT3BlcmF0b3Iod2FpdEZvciwgYWJzb2x1dGVUaW1lb3V0LCB3aXRoT2JzZXJ2YWJsZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHRoaXMud2FpdEZvciA9IHdhaXRGb3I7XG4gICAgICAgIHRoaXMuYWJzb2x1dGVUaW1lb3V0ID0gYWJzb2x1dGVUaW1lb3V0O1xuICAgICAgICB0aGlzLndpdGhPYnNlcnZhYmxlID0gd2l0aE9ic2VydmFibGU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIH1cbiAgICBUaW1lb3V0V2l0aE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgVGltZW91dFdpdGhTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuYWJzb2x1dGVUaW1lb3V0LCB0aGlzLndhaXRGb3IsIHRoaXMud2l0aE9ic2VydmFibGUsIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGltZW91dFdpdGhPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGltZW91dFdpdGhTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFRpbWVvdXRXaXRoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaW1lb3V0V2l0aFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGFic29sdXRlVGltZW91dCwgd2FpdEZvciwgd2l0aE9ic2VydmFibGUsIHNjaGVkdWxlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWJzb2x1dGVUaW1lb3V0ID0gYWJzb2x1dGVUaW1lb3V0O1xuICAgICAgICBfdGhpcy53YWl0Rm9yID0gd2FpdEZvcjtcbiAgICAgICAgX3RoaXMud2l0aE9ic2VydmFibGUgPSB3aXRoT2JzZXJ2YWJsZTtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5hY3Rpb24gPSBudWxsO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZVRpbWVvdXQoKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUaW1lb3V0V2l0aFN1YnNjcmliZXIuZGlzcGF0Y2hUaW1lb3V0ID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHdpdGhPYnNlcnZhYmxlID0gc3Vic2NyaWJlci53aXRoT2JzZXJ2YWJsZTtcbiAgICAgICAgc3Vic2NyaWJlci5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlKCk7XG4gICAgICAgIHN1YnNjcmliZXIuYWRkKHN1YnNjcmliZVRvUmVzdWx0KHN1YnNjcmliZXIsIHdpdGhPYnNlcnZhYmxlKSk7XG4gICAgfTtcbiAgICBUaW1lb3V0V2l0aFN1YnNjcmliZXIucHJvdG90eXBlLnNjaGVkdWxlVGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IHRoaXMuYWN0aW9uO1xuICAgICAgICBpZiAoYWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbiA9IGFjdGlvbi5zY2hlZHVsZSh0aGlzLCB0aGlzLndhaXRGb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGQodGhpcy5hY3Rpb24gPSB0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShUaW1lb3V0V2l0aFN1YnNjcmliZXIuZGlzcGF0Y2hUaW1lb3V0LCB0aGlzLndhaXRGb3IsIHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGltZW91dFdpdGhTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuYWJzb2x1dGVUaW1lb3V0KSB7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlVGltZW91dCgpO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX25leHQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBUaW1lb3V0V2l0aFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3Rpb24gPSBudWxsO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IG51bGw7XG4gICAgICAgIHRoaXMud2l0aE9ic2VydmFibGUgPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIFRpbWVvdXRXaXRoU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0V2l0aC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3NjaGVkdWxlcl9hc3luYyxfdXRpbF9UaW1lb3V0RXJyb3IsX3RpbWVvdXRXaXRoLF9vYnNlcnZhYmxlX3Rocm93RXJyb3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgYXN5bmMgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgVGltZW91dEVycm9yIH0gZnJvbSAnLi4vdXRpbC9UaW1lb3V0RXJyb3InO1xuaW1wb3J0IHsgdGltZW91dFdpdGggfSBmcm9tICcuL3RpbWVvdXRXaXRoJztcbmltcG9ydCB7IHRocm93RXJyb3IgfSBmcm9tICcuLi9vYnNlcnZhYmxlL3Rocm93RXJyb3InO1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVvdXQoZHVlLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIHJldHVybiB0aW1lb3V0V2l0aChkdWUsIHRocm93RXJyb3IobmV3IFRpbWVvdXRFcnJvcigpKSwgc2NoZWR1bGVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zY2hlZHVsZXJfYXN5bmMsX21hcCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBhc3luYyB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL21hcCc7XG5leHBvcnQgZnVuY3Rpb24gdGltZXN0YW1wKHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhc3luYztcbiAgICB9XG4gICAgcmV0dXJuIG1hcChmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIG5ldyBUaW1lc3RhbXAodmFsdWUsIHNjaGVkdWxlci5ub3coKSk7IH0pO1xufVxudmFyIFRpbWVzdGFtcCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaW1lc3RhbXAodmFsdWUsIHRpbWVzdGFtcCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gdGltZXN0YW1wO1xuICAgIH1cbiAgICByZXR1cm4gVGltZXN0YW1wO1xufSgpKTtcbmV4cG9ydCB7IFRpbWVzdGFtcCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXN0YW1wLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfcmVkdWNlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IHJlZHVjZSB9IGZyb20gJy4vcmVkdWNlJztcbmZ1bmN0aW9uIHRvQXJyYXlSZWR1Y2VyKGFyciwgaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtpdGVtXTtcbiAgICB9XG4gICAgYXJyLnB1c2goaXRlbSk7XG4gICAgcmV0dXJuIGFycjtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgIHJldHVybiByZWR1Y2UodG9BcnJheVJlZHVjZXIsIFtdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvQXJyYXkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJqZWN0LF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIHdpbmRvdyh3aW5kb3dCb3VuZGFyaWVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHdpbmRvd09wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgV2luZG93T3BlcmF0b3Iod2luZG93Qm91bmRhcmllcykpO1xuICAgIH07XG59XG52YXIgV2luZG93T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2luZG93T3BlcmF0b3Iod2luZG93Qm91bmRhcmllcykge1xuICAgICAgICB0aGlzLndpbmRvd0JvdW5kYXJpZXMgPSB3aW5kb3dCb3VuZGFyaWVzO1xuICAgIH1cbiAgICBXaW5kb3dPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIHdpbmRvd1N1YnNjcmliZXIgPSBuZXcgV2luZG93U3Vic2NyaWJlcihzdWJzY3JpYmVyKTtcbiAgICAgICAgdmFyIHNvdXJjZVN1YnNjcmlwdGlvbiA9IHNvdXJjZS5zdWJzY3JpYmUod2luZG93U3Vic2NyaWJlcik7XG4gICAgICAgIGlmICghc291cmNlU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgd2luZG93U3Vic2NyaWJlci5hZGQoc3Vic2NyaWJlVG9SZXN1bHQod2luZG93U3Vic2NyaWJlciwgdGhpcy53aW5kb3dCb3VuZGFyaWVzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZVN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dPcGVyYXRvcjtcbn0oKSk7XG52YXIgV2luZG93U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhXaW5kb3dTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFdpbmRvd1N1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLndpbmRvdyA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQoX3RoaXMud2luZG93KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMub3BlbldpbmRvdygpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuX2Vycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLndpbmRvdy5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy53aW5kb3cuZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLndpbmRvdy5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMud2luZG93ID0gbnVsbDtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm9wZW5XaW5kb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwcmV2V2luZG93ID0gdGhpcy53aW5kb3c7XG4gICAgICAgIGlmIChwcmV2V2luZG93KSB7XG4gICAgICAgICAgICBwcmV2V2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgdmFyIG5ld1dpbmRvdyA9IHRoaXMud2luZG93ID0gbmV3IFN1YmplY3QoKTtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dChuZXdXaW5kb3cpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd1N1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfU3ViamVjdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL1N1YmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHdpbmRvd0NvdW50KHdpbmRvd1NpemUsIHN0YXJ0V2luZG93RXZlcnkpIHtcbiAgICBpZiAoc3RhcnRXaW5kb3dFdmVyeSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHN0YXJ0V2luZG93RXZlcnkgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gd2luZG93Q291bnRPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFdpbmRvd0NvdW50T3BlcmF0b3Iod2luZG93U2l6ZSwgc3RhcnRXaW5kb3dFdmVyeSkpO1xuICAgIH07XG59XG52YXIgV2luZG93Q291bnRPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXaW5kb3dDb3VudE9wZXJhdG9yKHdpbmRvd1NpemUsIHN0YXJ0V2luZG93RXZlcnkpIHtcbiAgICAgICAgdGhpcy53aW5kb3dTaXplID0gd2luZG93U2l6ZTtcbiAgICAgICAgdGhpcy5zdGFydFdpbmRvd0V2ZXJ5ID0gc3RhcnRXaW5kb3dFdmVyeTtcbiAgICB9XG4gICAgV2luZG93Q291bnRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFdpbmRvd0NvdW50U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLndpbmRvd1NpemUsIHRoaXMuc3RhcnRXaW5kb3dFdmVyeSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd0NvdW50T3BlcmF0b3I7XG59KCkpO1xudmFyIFdpbmRvd0NvdW50U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhXaW5kb3dDb3VudFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2luZG93Q291bnRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCB3aW5kb3dTaXplLCBzdGFydFdpbmRvd0V2ZXJ5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy53aW5kb3dTaXplID0gd2luZG93U2l6ZTtcbiAgICAgICAgX3RoaXMuc3RhcnRXaW5kb3dFdmVyeSA9IHN0YXJ0V2luZG93RXZlcnk7XG4gICAgICAgIF90aGlzLndpbmRvd3MgPSBbbmV3IFN1YmplY3QoKV07XG4gICAgICAgIF90aGlzLmNvdW50ID0gMDtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dChfdGhpcy53aW5kb3dzWzBdKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBXaW5kb3dDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBzdGFydFdpbmRvd0V2ZXJ5ID0gKHRoaXMuc3RhcnRXaW5kb3dFdmVyeSA+IDApID8gdGhpcy5zdGFydFdpbmRvd0V2ZXJ5IDogdGhpcy53aW5kb3dTaXplO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICB2YXIgd2luZG93U2l6ZSA9IHRoaXMud2luZG93U2l6ZTtcbiAgICAgICAgdmFyIHdpbmRvd3MgPSB0aGlzLndpbmRvd3M7XG4gICAgICAgIHZhciBsZW4gPSB3aW5kb3dzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW4gJiYgIXRoaXMuY2xvc2VkOyBpKyspIHtcbiAgICAgICAgICAgIHdpbmRvd3NbaV0ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGMgPSB0aGlzLmNvdW50IC0gd2luZG93U2l6ZSArIDE7XG4gICAgICAgIGlmIChjID49IDAgJiYgYyAlIHN0YXJ0V2luZG93RXZlcnkgPT09IDAgJiYgIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB3aW5kb3dzLnNoaWZ0KCkuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKyt0aGlzLmNvdW50ICUgc3RhcnRXaW5kb3dFdmVyeSA9PT0gMCAmJiAhdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHZhciB3aW5kb3dfMSA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICAgICAgICB3aW5kb3dzLnB1c2god2luZG93XzEpO1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh3aW5kb3dfMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdpbmRvd0NvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcbiAgICAgICAgaWYgKHdpbmRvd3MpIHtcbiAgICAgICAgICAgIHdoaWxlICh3aW5kb3dzLmxlbmd0aCA+IDAgJiYgIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgd2luZG93cy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgV2luZG93Q291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3aW5kb3dzID0gdGhpcy53aW5kb3dzO1xuICAgICAgICBpZiAod2luZG93cykge1xuICAgICAgICAgICAgd2hpbGUgKHdpbmRvd3MubGVuZ3RoID4gMCAmJiAhdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dzLnNoaWZ0KCkuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBXaW5kb3dDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHRoaXMud2luZG93cyA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93Q291bnRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3dDb3VudC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YmplY3QsX3NjaGVkdWxlcl9hc3luYyxfU3Vic2NyaWJlcixfdXRpbF9pc051bWVyaWMsX3V0aWxfaXNTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGlzTnVtZXJpYyB9IGZyb20gJy4uL3V0aWwvaXNOdW1lcmljJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XG5leHBvcnQgZnVuY3Rpb24gd2luZG93VGltZSh3aW5kb3dUaW1lU3Bhbikge1xuICAgIHZhciBzY2hlZHVsZXIgPSBhc3luYztcbiAgICB2YXIgd2luZG93Q3JlYXRpb25JbnRlcnZhbCA9IG51bGw7XG4gICAgdmFyIG1heFdpbmRvd1NpemUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgaWYgKGlzU2NoZWR1bGVyKGFyZ3VtZW50c1szXSkpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXJndW1lbnRzWzNdO1xuICAgIH1cbiAgICBpZiAoaXNTY2hlZHVsZXIoYXJndW1lbnRzWzJdKSkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhcmd1bWVudHNbMl07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTnVtZXJpYyhhcmd1bWVudHNbMl0pKSB7XG4gICAgICAgIG1heFdpbmRvd1NpemUgPSBhcmd1bWVudHNbMl07XG4gICAgfVxuICAgIGlmIChpc1NjaGVkdWxlcihhcmd1bWVudHNbMV0pKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFyZ3VtZW50c1sxXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNOdW1lcmljKGFyZ3VtZW50c1sxXSkpIHtcbiAgICAgICAgd2luZG93Q3JlYXRpb25JbnRlcnZhbCA9IGFyZ3VtZW50c1sxXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHdpbmRvd1RpbWVPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFdpbmRvd1RpbWVPcGVyYXRvcih3aW5kb3dUaW1lU3Bhbiwgd2luZG93Q3JlYXRpb25JbnRlcnZhbCwgbWF4V2luZG93U2l6ZSwgc2NoZWR1bGVyKSk7XG4gICAgfTtcbn1cbnZhciBXaW5kb3dUaW1lT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2luZG93VGltZU9wZXJhdG9yKHdpbmRvd1RpbWVTcGFuLCB3aW5kb3dDcmVhdGlvbkludGVydmFsLCBtYXhXaW5kb3dTaXplLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy53aW5kb3dUaW1lU3BhbiA9IHdpbmRvd1RpbWVTcGFuO1xuICAgICAgICB0aGlzLndpbmRvd0NyZWF0aW9uSW50ZXJ2YWwgPSB3aW5kb3dDcmVhdGlvbkludGVydmFsO1xuICAgICAgICB0aGlzLm1heFdpbmRvd1NpemUgPSBtYXhXaW5kb3dTaXplO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgV2luZG93VGltZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgV2luZG93VGltZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy53aW5kb3dUaW1lU3BhbiwgdGhpcy53aW5kb3dDcmVhdGlvbkludGVydmFsLCB0aGlzLm1heFdpbmRvd1NpemUsIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93VGltZU9wZXJhdG9yO1xufSgpKTtcbnZhciBDb3VudGVkU3ViamVjdCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb3VudGVkU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb3VudGVkU3ViamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9udW1iZXJPZk5leHRlZFZhbHVlcyA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ291bnRlZFN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbnVtYmVyT2ZOZXh0ZWRWYWx1ZXMrKztcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgdmFsdWUpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvdW50ZWRTdWJqZWN0LnByb3RvdHlwZSwgXCJudW1iZXJPZk5leHRlZFZhbHVlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX251bWJlck9mTmV4dGVkVmFsdWVzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gQ291bnRlZFN1YmplY3Q7XG59KFN1YmplY3QpKTtcbnZhciBXaW5kb3dUaW1lU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhXaW5kb3dUaW1lU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBXaW5kb3dUaW1lU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgd2luZG93VGltZVNwYW4sIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwsIG1heFdpbmRvd1NpemUsIHNjaGVkdWxlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgX3RoaXMud2luZG93VGltZVNwYW4gPSB3aW5kb3dUaW1lU3BhbjtcbiAgICAgICAgX3RoaXMud2luZG93Q3JlYXRpb25JbnRlcnZhbCA9IHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWw7XG4gICAgICAgIF90aGlzLm1heFdpbmRvd1NpemUgPSBtYXhXaW5kb3dTaXplO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndpbmRvd3MgPSBbXTtcbiAgICAgICAgdmFyIHdpbmRvdyA9IF90aGlzLm9wZW5XaW5kb3coKTtcbiAgICAgICAgaWYgKHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwgIT09IG51bGwgJiYgd2luZG93Q3JlYXRpb25JbnRlcnZhbCA+PSAwKSB7XG4gICAgICAgICAgICB2YXIgY2xvc2VTdGF0ZSA9IHsgc3Vic2NyaWJlcjogX3RoaXMsIHdpbmRvdzogd2luZG93LCBjb250ZXh0OiBudWxsIH07XG4gICAgICAgICAgICB2YXIgY3JlYXRpb25TdGF0ZSA9IHsgd2luZG93VGltZVNwYW46IHdpbmRvd1RpbWVTcGFuLCB3aW5kb3dDcmVhdGlvbkludGVydmFsOiB3aW5kb3dDcmVhdGlvbkludGVydmFsLCBzdWJzY3JpYmVyOiBfdGhpcywgc2NoZWR1bGVyOiBzY2hlZHVsZXIgfTtcbiAgICAgICAgICAgIF90aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hXaW5kb3dDbG9zZSwgd2luZG93VGltZVNwYW4sIGNsb3NlU3RhdGUpKTtcbiAgICAgICAgICAgIF90aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hXaW5kb3dDcmVhdGlvbiwgd2luZG93Q3JlYXRpb25JbnRlcnZhbCwgY3JlYXRpb25TdGF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRpbWVTcGFuT25seVN0YXRlID0geyBzdWJzY3JpYmVyOiBfdGhpcywgd2luZG93OiB3aW5kb3csIHdpbmRvd1RpbWVTcGFuOiB3aW5kb3dUaW1lU3BhbiB9O1xuICAgICAgICAgICAgX3RoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaFdpbmRvd1RpbWVTcGFuT25seSwgd2luZG93VGltZVNwYW4sIHRpbWVTcGFuT25seVN0YXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBXaW5kb3dUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHdpbmRvd3MgPSB0aGlzLndpbmRvd3M7XG4gICAgICAgIHZhciBsZW4gPSB3aW5kb3dzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIHdpbmRvd18xID0gd2luZG93c1tpXTtcbiAgICAgICAgICAgIGlmICghd2luZG93XzEuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgd2luZG93XzEubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvd18xLm51bWJlck9mTmV4dGVkVmFsdWVzID49IHRoaXMubWF4V2luZG93U2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlV2luZG93KHdpbmRvd18xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdpbmRvd1RpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB3aW5kb3dzID0gdGhpcy53aW5kb3dzO1xuICAgICAgICB3aGlsZSAod2luZG93cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB3aW5kb3dzLnNoaWZ0KCkuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgfTtcbiAgICBXaW5kb3dUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcbiAgICAgICAgd2hpbGUgKHdpbmRvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIHdpbmRvd18yID0gd2luZG93cy5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKCF3aW5kb3dfMi5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dfMi5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIFdpbmRvd1RpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5vcGVuV2luZG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd2luZG93ID0gbmV3IENvdW50ZWRTdWJqZWN0KCk7XG4gICAgICAgIHRoaXMud2luZG93cy5wdXNoKHdpbmRvdyk7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQod2luZG93KTtcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9O1xuICAgIFdpbmRvd1RpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5jbG9zZVdpbmRvdyA9IGZ1bmN0aW9uICh3aW5kb3cpIHtcbiAgICAgICAgd2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgIHZhciB3aW5kb3dzID0gdGhpcy53aW5kb3dzO1xuICAgICAgICB3aW5kb3dzLnNwbGljZSh3aW5kb3dzLmluZGV4T2Yod2luZG93KSwgMSk7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93VGltZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmZ1bmN0aW9uIGRpc3BhdGNoV2luZG93VGltZVNwYW5Pbmx5KHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCB3aW5kb3dUaW1lU3BhbiA9IHN0YXRlLndpbmRvd1RpbWVTcGFuLCB3aW5kb3cgPSBzdGF0ZS53aW5kb3c7XG4gICAgaWYgKHdpbmRvdykge1xuICAgICAgICBzdWJzY3JpYmVyLmNsb3NlV2luZG93KHdpbmRvdyk7XG4gICAgfVxuICAgIHN0YXRlLndpbmRvdyA9IHN1YnNjcmliZXIub3BlbldpbmRvdygpO1xuICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUsIHdpbmRvd1RpbWVTcGFuKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoV2luZG93Q3JlYXRpb24oc3RhdGUpIHtcbiAgICB2YXIgd2luZG93VGltZVNwYW4gPSBzdGF0ZS53aW5kb3dUaW1lU3Bhbiwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIHNjaGVkdWxlciA9IHN0YXRlLnNjaGVkdWxlciwgd2luZG93Q3JlYXRpb25JbnRlcnZhbCA9IHN0YXRlLndpbmRvd0NyZWF0aW9uSW50ZXJ2YWw7XG4gICAgdmFyIHdpbmRvdyA9IHN1YnNjcmliZXIub3BlbldpbmRvdygpO1xuICAgIHZhciBhY3Rpb24gPSB0aGlzO1xuICAgIHZhciBjb250ZXh0ID0geyBhY3Rpb246IGFjdGlvbiwgc3Vic2NyaXB0aW9uOiBudWxsIH07XG4gICAgdmFyIHRpbWVTcGFuU3RhdGUgPSB7IHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIHdpbmRvdzogd2luZG93LCBjb250ZXh0OiBjb250ZXh0IH07XG4gICAgY29udGV4dC5zdWJzY3JpcHRpb24gPSBzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hXaW5kb3dDbG9zZSwgd2luZG93VGltZVNwYW4sIHRpbWVTcGFuU3RhdGUpO1xuICAgIGFjdGlvbi5hZGQoY29udGV4dC5zdWJzY3JpcHRpb24pO1xuICAgIGFjdGlvbi5zY2hlZHVsZShzdGF0ZSwgd2luZG93Q3JlYXRpb25JbnRlcnZhbCk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaFdpbmRvd0Nsb3NlKHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCB3aW5kb3cgPSBzdGF0ZS53aW5kb3csIGNvbnRleHQgPSBzdGF0ZS5jb250ZXh0O1xuICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuYWN0aW9uICYmIGNvbnRleHQuc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIGNvbnRleHQuYWN0aW9uLnJlbW92ZShjb250ZXh0LnN1YnNjcmlwdGlvbik7XG4gICAgfVxuICAgIHN1YnNjcmliZXIuY2xvc2VXaW5kb3cod2luZG93KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1RpbWUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJqZWN0LF9TdWJzY3JpcHRpb24sX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL1N1YmplY3QnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIHdpbmRvd1RvZ2dsZShvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBXaW5kb3dUb2dnbGVPcGVyYXRvcihvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSk7IH07XG59XG52YXIgV2luZG93VG9nZ2xlT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2luZG93VG9nZ2xlT3BlcmF0b3Iob3BlbmluZ3MsIGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLm9wZW5pbmdzID0gb3BlbmluZ3M7XG4gICAgICAgIHRoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuICAgIH1cbiAgICBXaW5kb3dUb2dnbGVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFdpbmRvd1RvZ2dsZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5vcGVuaW5ncywgdGhpcy5jbG9zaW5nU2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dUb2dnbGVPcGVyYXRvcjtcbn0oKSk7XG52YXIgV2luZG93VG9nZ2xlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFdpbmRvd1RvZ2dsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9wZW5pbmdzID0gb3BlbmluZ3M7XG4gICAgICAgIF90aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuY29udGV4dHMgPSBbXTtcbiAgICAgICAgX3RoaXMuYWRkKF90aGlzLm9wZW5TdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdChfdGhpcywgb3BlbmluZ3MsIG9wZW5pbmdzKSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgaWYgKGNvbnRleHRzKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gY29udGV4dHMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnRleHRzW2ldLndpbmRvdy5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB0aGlzLmNvbnRleHRzID0gbnVsbDtcbiAgICAgICAgaWYgKGNvbnRleHRzKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gY29udGV4dHMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbikge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0XzEgPSBjb250ZXh0c1tpbmRleF07XG4gICAgICAgICAgICAgICAgY29udGV4dF8xLndpbmRvdy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMS5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9lcnJvci5jYWxsKHRoaXMsIGVycik7XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHRoaXMuY29udGV4dHMgPSBudWxsO1xuICAgICAgICBpZiAoY29udGV4dHMpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHRfMiA9IGNvbnRleHRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzIud2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dF8yLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHRoaXMuY29udGV4dHMgPSBudWxsO1xuICAgICAgICBpZiAoY29udGV4dHMpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHRfMyA9IGNvbnRleHRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzMud2luZG93LnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dF8zLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIGlmIChvdXRlclZhbHVlID09PSB0aGlzLm9wZW5pbmdzKSB7XG4gICAgICAgICAgICB2YXIgY2xvc2luZ05vdGlmaWVyID0gdm9pZCAwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgY2xvc2luZ1NlbGVjdG9yID0gdGhpcy5jbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgY2xvc2luZ05vdGlmaWVyID0gY2xvc2luZ1NlbGVjdG9yKGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB3aW5kb3dfMSA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgdmFyIGNvbnRleHRfNCA9IHsgd2luZG93OiB3aW5kb3dfMSwgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb24gfTtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dHMucHVzaChjb250ZXh0XzQpO1xuICAgICAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgY2xvc2luZ05vdGlmaWVyLCBjb250ZXh0XzQpO1xuICAgICAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VXaW5kb3codGhpcy5jb250ZXh0cy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlubmVyU3Vic2NyaXB0aW9uLmNvbnRleHQgPSBjb250ZXh0XzQ7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQod2luZG93XzEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jbG9zZVdpbmRvdyh0aGlzLmNvbnRleHRzLmluZGV4T2Yob3V0ZXJWYWx1ZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXIpIHtcbiAgICAgICAgaWYgKGlubmVyICE9PSB0aGlzLm9wZW5TdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VXaW5kb3codGhpcy5jb250ZXh0cy5pbmRleE9mKGlubmVyLmNvbnRleHQpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuY2xvc2VXaW5kb3cgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHZhciBjb250ZXh0ID0gY29udGV4dHNbaW5kZXhdO1xuICAgICAgICB2YXIgd2luZG93ID0gY29udGV4dC53aW5kb3csIHN1YnNjcmlwdGlvbiA9IGNvbnRleHQuc3Vic2NyaXB0aW9uO1xuICAgICAgICBjb250ZXh0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB3aW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93VG9nZ2xlU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3dUb2dnbGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJqZWN0LF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIHdpbmRvd1doZW4oY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHdpbmRvd1doZW5PcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFdpbmRvd09wZXJhdG9yKGNsb3NpbmdTZWxlY3RvcikpO1xuICAgIH07XG59XG52YXIgV2luZG93T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2luZG93T3BlcmF0b3IoY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuICAgIH1cbiAgICBXaW5kb3dPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFdpbmRvd1N1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jbG9zaW5nU2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dPcGVyYXRvcjtcbn0oKSk7XG52YXIgV2luZG93U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhXaW5kb3dTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFdpbmRvd1N1YnNjcmliZXIoZGVzdGluYXRpb24sIGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgX3RoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuICAgICAgICBfdGhpcy5vcGVuV2luZG93KCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLm9wZW5XaW5kb3coaW5uZXJTdWIpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuX2Vycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMub3BlbldpbmRvdyhpbm5lclN1Yik7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLndpbmRvdy5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy53aW5kb3cuZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlQ2xvc2luZ05vdGlmaWNhdGlvbigpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLndpbmRvdy5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVDbG9zaW5nTm90aWZpY2F0aW9uKCk7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZUNsb3NpbmdOb3RpZmljYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NpbmdOb3RpZmljYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2luZ05vdGlmaWNhdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5vcGVuV2luZG93ID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIGlmIChpbm5lclN1YiA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBpbm5lclN1YiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlubmVyU3ViKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShpbm5lclN1Yik7XG4gICAgICAgICAgICBpbm5lclN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2V2luZG93ID0gdGhpcy53aW5kb3c7XG4gICAgICAgIGlmIChwcmV2V2luZG93KSB7XG4gICAgICAgICAgICBwcmV2V2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdpbmRvdyA9IHRoaXMud2luZG93ID0gbmV3IFN1YmplY3QoKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHdpbmRvdyk7XG4gICAgICAgIHZhciBjbG9zaW5nTm90aWZpZXI7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY2xvc2luZ1NlbGVjdG9yID0gdGhpcy5jbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgICAgICBjbG9zaW5nTm90aWZpZXIgPSBjbG9zaW5nU2VsZWN0b3IoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlKTtcbiAgICAgICAgICAgIHRoaXMud2luZG93LmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRkKHRoaXMuY2xvc2luZ05vdGlmaWNhdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGNsb3NpbmdOb3RpZmllcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd1N1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93V2hlbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gd2l0aExhdGVzdEZyb20oKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHZhciBwcm9qZWN0O1xuICAgICAgICBpZiAodHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcHJvamVjdCA9IGFyZ3MucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9ic2VydmFibGVzID0gYXJncztcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBXaXRoTGF0ZXN0RnJvbU9wZXJhdG9yKG9ic2VydmFibGVzLCBwcm9qZWN0KSk7XG4gICAgfTtcbn1cbnZhciBXaXRoTGF0ZXN0RnJvbU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3Iob2JzZXJ2YWJsZXMsIHByb2plY3QpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzO1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgIH1cbiAgICBXaXRoTGF0ZXN0RnJvbU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMub2JzZXJ2YWJsZXMsIHRoaXMucHJvamVjdCkpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3I7XG59KCkpO1xudmFyIFdpdGhMYXRlc3RGcm9tU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvYnNlcnZhYmxlcywgcHJvamVjdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub2JzZXJ2YWJsZXMgPSBvYnNlcnZhYmxlcztcbiAgICAgICAgX3RoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIF90aGlzLnRvUmVzcG9uZCA9IFtdO1xuICAgICAgICB2YXIgbGVuID0gb2JzZXJ2YWJsZXMubGVuZ3RoO1xuICAgICAgICBfdGhpcy52YWx1ZXMgPSBuZXcgQXJyYXkobGVuKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgX3RoaXMudG9SZXNwb25kLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBvYnNlcnZhYmxlc1tpXTtcbiAgICAgICAgICAgIF90aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdChfdGhpcywgb2JzZXJ2YWJsZSwgb2JzZXJ2YWJsZSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMudmFsdWVzW291dGVySW5kZXhdID0gaW5uZXJWYWx1ZTtcbiAgICAgICAgdmFyIHRvUmVzcG9uZCA9IHRoaXMudG9SZXNwb25kO1xuICAgICAgICBpZiAodG9SZXNwb25kLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBmb3VuZCA9IHRvUmVzcG9uZC5pbmRleE9mKG91dGVySW5kZXgpO1xuICAgICAgICAgICAgaWYgKGZvdW5kICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHRvUmVzcG9uZC5zcGxpY2UoZm91bmQsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgIH07XG4gICAgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy50b1Jlc3BvbmQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFt2YWx1ZV0uY29uY2F0KHRoaXMudmFsdWVzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb2plY3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cnlQcm9qZWN0KGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIucHJvdG90eXBlLl90cnlQcm9qZWN0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpdGhMYXRlc3RGcm9tLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfb2JzZXJ2YWJsZV96aXAgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgemlwIGFzIHppcFN0YXRpYyB9IGZyb20gJy4uL29ic2VydmFibGUvemlwJztcbmV4cG9ydCBmdW5jdGlvbiB6aXAoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHppcE9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdC5jYWxsKHppcFN0YXRpYy5hcHBseSh2b2lkIDAsIFtzb3VyY2VdLmNvbmNhdChvYnNlcnZhYmxlcykpKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9emlwLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfb2JzZXJ2YWJsZV96aXAgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgWmlwT3BlcmF0b3IgfSBmcm9tICcuLi9vYnNlcnZhYmxlL3ppcCc7XG5leHBvcnQgZnVuY3Rpb24gemlwQWxsKHByb2plY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFppcE9wZXJhdG9yKHByb2plY3QpKTsgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXppcEFsbC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCB7IGF1ZGl0IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2F1ZGl0JztcbmV4cG9ydCB7IGF1ZGl0VGltZSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9hdWRpdFRpbWUnO1xuZXhwb3J0IHsgYnVmZmVyIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlcic7XG5leHBvcnQgeyBidWZmZXJDb3VudCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJDb3VudCc7XG5leHBvcnQgeyBidWZmZXJUaW1lIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlclRpbWUnO1xuZXhwb3J0IHsgYnVmZmVyVG9nZ2xlIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlclRvZ2dsZSc7XG5leHBvcnQgeyBidWZmZXJXaGVuIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlcldoZW4nO1xuZXhwb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9jYXRjaEVycm9yJztcbmV4cG9ydCB7IGNvbWJpbmVBbGwgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUFsbCc7XG5leHBvcnQgeyBjb21iaW5lTGF0ZXN0IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvbWJpbmVMYXRlc3QnO1xuZXhwb3J0IHsgY29uY2F0IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdCc7XG5leHBvcnQgeyBjb25jYXRBbGwgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0QWxsJztcbmV4cG9ydCB7IGNvbmNhdE1hcCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRNYXAnO1xuZXhwb3J0IHsgY29uY2F0TWFwVG8gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0TWFwVG8nO1xuZXhwb3J0IHsgY291bnQgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvY291bnQnO1xuZXhwb3J0IHsgZGVib3VuY2UgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVib3VuY2UnO1xuZXhwb3J0IHsgZGVib3VuY2VUaW1lIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlVGltZSc7XG5leHBvcnQgeyBkZWZhdWx0SWZFbXB0eSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9kZWZhdWx0SWZFbXB0eSc7XG5leHBvcnQgeyBkZWxheSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9kZWxheSc7XG5leHBvcnQgeyBkZWxheVdoZW4gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVsYXlXaGVuJztcbmV4cG9ydCB7IGRlbWF0ZXJpYWxpemUgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVtYXRlcmlhbGl6ZSc7XG5leHBvcnQgeyBkaXN0aW5jdCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdCc7XG5leHBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdFVudGlsQ2hhbmdlZCc7XG5leHBvcnQgeyBkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCc7XG5leHBvcnQgeyBlbGVtZW50QXQgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZWxlbWVudEF0JztcbmV4cG9ydCB7IGVuZFdpdGggfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZW5kV2l0aCc7XG5leHBvcnQgeyBldmVyeSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9ldmVyeSc7XG5leHBvcnQgeyBleGhhdXN0IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2V4aGF1c3QnO1xuZXhwb3J0IHsgZXhoYXVzdE1hcCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9leGhhdXN0TWFwJztcbmV4cG9ydCB7IGV4cGFuZCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9leHBhbmQnO1xuZXhwb3J0IHsgZmlsdGVyIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbHRlcic7XG5leHBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9maW5hbGl6ZSc7XG5leHBvcnQgeyBmaW5kIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmQnO1xuZXhwb3J0IHsgZmluZEluZGV4IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmRJbmRleCc7XG5leHBvcnQgeyBmaXJzdCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9maXJzdCc7XG5leHBvcnQgeyBncm91cEJ5IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2dyb3VwQnknO1xuZXhwb3J0IHsgaWdub3JlRWxlbWVudHMgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvaWdub3JlRWxlbWVudHMnO1xuZXhwb3J0IHsgaXNFbXB0eSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9pc0VtcHR5JztcbmV4cG9ydCB7IGxhc3QgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbGFzdCc7XG5leHBvcnQgeyBtYXAgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwJztcbmV4cG9ydCB7IG1hcFRvIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL21hcFRvJztcbmV4cG9ydCB7IG1hdGVyaWFsaXplIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL21hdGVyaWFsaXplJztcbmV4cG9ydCB7IG1heCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9tYXgnO1xuZXhwb3J0IHsgbWVyZ2UgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2UnO1xuZXhwb3J0IHsgbWVyZ2VBbGwgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VBbGwnO1xuZXhwb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXAnO1xuZXhwb3J0IHsgbWVyZ2VNYXAgYXMgZmxhdE1hcCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcCc7XG5leHBvcnQgeyBtZXJnZU1hcFRvIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwVG8nO1xuZXhwb3J0IHsgbWVyZ2VTY2FuIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlU2Nhbic7XG5leHBvcnQgeyBtaW4gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWluJztcbmV4cG9ydCB7IG11bHRpY2FzdCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9tdWx0aWNhc3QnO1xuZXhwb3J0IHsgb2JzZXJ2ZU9uIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL29ic2VydmVPbic7XG5leHBvcnQgeyBvbkVycm9yUmVzdW1lTmV4dCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9vbkVycm9yUmVzdW1lTmV4dCc7XG5leHBvcnQgeyBwYWlyd2lzZSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9wYWlyd2lzZSc7XG5leHBvcnQgeyBwYXJ0aXRpb24gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcGFydGl0aW9uJztcbmV4cG9ydCB7IHBsdWNrIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3BsdWNrJztcbmV4cG9ydCB7IHB1Ymxpc2ggfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaCc7XG5leHBvcnQgeyBwdWJsaXNoQmVoYXZpb3IgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaEJlaGF2aW9yJztcbmV4cG9ydCB7IHB1Ymxpc2hMYXN0IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3B1Ymxpc2hMYXN0JztcbmV4cG9ydCB7IHB1Ymxpc2hSZXBsYXkgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaFJlcGxheSc7XG5leHBvcnQgeyByYWNlIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3JhY2UnO1xuZXhwb3J0IHsgcmVkdWNlIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3JlZHVjZSc7XG5leHBvcnQgeyByZXBlYXQgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmVwZWF0JztcbmV4cG9ydCB7IHJlcGVhdFdoZW4gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmVwZWF0V2hlbic7XG5leHBvcnQgeyByZXRyeSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9yZXRyeSc7XG5leHBvcnQgeyByZXRyeVdoZW4gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmV0cnlXaGVuJztcbmV4cG9ydCB7IHJlZkNvdW50IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3JlZkNvdW50JztcbmV4cG9ydCB7IHNhbXBsZSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9zYW1wbGUnO1xuZXhwb3J0IHsgc2FtcGxlVGltZSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9zYW1wbGVUaW1lJztcbmV4cG9ydCB7IHNjYW4gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2Nhbic7XG5leHBvcnQgeyBzZXF1ZW5jZUVxdWFsIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NlcXVlbmNlRXF1YWwnO1xuZXhwb3J0IHsgc2hhcmUgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2hhcmUnO1xuZXhwb3J0IHsgc2hhcmVSZXBsYXkgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2hhcmVSZXBsYXknO1xuZXhwb3J0IHsgc2luZ2xlIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NpbmdsZSc7XG5leHBvcnQgeyBza2lwIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NraXAnO1xuZXhwb3J0IHsgc2tpcExhc3QgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcExhc3QnO1xuZXhwb3J0IHsgc2tpcFVudGlsIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NraXBVbnRpbCc7XG5leHBvcnQgeyBza2lwV2hpbGUgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcFdoaWxlJztcbmV4cG9ydCB7IHN0YXJ0V2l0aCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9zdGFydFdpdGgnO1xuZXhwb3J0IHsgc3Vic2NyaWJlT24gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc3Vic2NyaWJlT24nO1xuZXhwb3J0IHsgc3dpdGNoQWxsIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaEFsbCc7XG5leHBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwJztcbmV4cG9ydCB7IHN3aXRjaE1hcFRvIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaE1hcFRvJztcbmV4cG9ydCB7IHRha2UgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZSc7XG5leHBvcnQgeyB0YWtlTGFzdCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy90YWtlTGFzdCc7XG5leHBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZVVudGlsJztcbmV4cG9ydCB7IHRha2VXaGlsZSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy90YWtlV2hpbGUnO1xuZXhwb3J0IHsgdGFwIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RhcCc7XG5leHBvcnQgeyB0aHJvdHRsZSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy90aHJvdHRsZSc7XG5leHBvcnQgeyB0aHJvdHRsZVRpbWUgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGhyb3R0bGVUaW1lJztcbmV4cG9ydCB7IHRocm93SWZFbXB0eSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy90aHJvd0lmRW1wdHknO1xuZXhwb3J0IHsgdGltZUludGVydmFsIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVJbnRlcnZhbCc7XG5leHBvcnQgeyB0aW1lb3V0IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVvdXQnO1xuZXhwb3J0IHsgdGltZW91dFdpdGggfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZW91dFdpdGgnO1xuZXhwb3J0IHsgdGltZXN0YW1wIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVzdGFtcCc7XG5leHBvcnQgeyB0b0FycmF5IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RvQXJyYXknO1xuZXhwb3J0IHsgd2luZG93IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvdyc7XG5leHBvcnQgeyB3aW5kb3dDb3VudCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dDb3VudCc7XG5leHBvcnQgeyB3aW5kb3dUaW1lIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1RpbWUnO1xuZXhwb3J0IHsgd2luZG93VG9nZ2xlIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1RvZ2dsZSc7XG5leHBvcnQgeyB3aW5kb3dXaGVuIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1doZW4nO1xuZXhwb3J0IHsgd2l0aExhdGVzdEZyb20gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvd2l0aExhdGVzdEZyb20nO1xuZXhwb3J0IHsgemlwIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3ppcCc7XG5leHBvcnQgeyB6aXBBbGwgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvemlwQWxsJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3ViamVjdCxfT2JzZXJ2YWJsZSxfU3Vic2NyaWJlcixfU3Vic2NyaXB0aW9uLF9vcGVyYXRvcnNfcmVmQ291bnQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3RTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3ViamVjdCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgcmVmQ291bnQgYXMgaGlnaGVyT3JkZXJSZWZDb3VudCB9IGZyb20gJy4uL29wZXJhdG9ycy9yZWZDb3VudCc7XG52YXIgQ29ubmVjdGFibGVPYnNlcnZhYmxlID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKENvbm5lY3RhYmxlT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb25uZWN0YWJsZU9ic2VydmFibGUoc291cmNlLCBzdWJqZWN0RmFjdG9yeSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIF90aGlzLnN1YmplY3RGYWN0b3J5ID0gc3ViamVjdEZhY3Rvcnk7XG4gICAgICAgIF90aGlzLl9yZWZDb3VudCA9IDA7XG4gICAgICAgIF90aGlzLl9pc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3ViamVjdCgpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUuZ2V0U3ViamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLl9zdWJqZWN0O1xuICAgICAgICBpZiAoIXN1YmplY3QgfHwgc3ViamVjdC5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YmplY3QgPSB0aGlzLnN1YmplY3RGYWN0b3J5KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1YmplY3Q7XG4gICAgfTtcbiAgICBDb25uZWN0YWJsZU9ic2VydmFibGUucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb25uZWN0aW9uID0gdGhpcy5fY29ubmVjdGlvbjtcbiAgICAgICAgaWYgKCFjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9pc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgICAgICBjb25uZWN0aW9uID0gdGhpcy5fY29ubmVjdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uYWRkKHRoaXMuc291cmNlXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZShuZXcgQ29ubmVjdGFibGVTdWJzY3JpYmVyKHRoaXMuZ2V0U3ViamVjdCgpLCB0aGlzKSkpO1xuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICB9O1xuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUucmVmQ291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBoaWdoZXJPcmRlclJlZkNvdW50KCkodGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29ubmVjdGFibGVPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBDb25uZWN0YWJsZU9ic2VydmFibGUgfTtcbnZhciBjb25uZWN0YWJsZVByb3RvID0gQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZTtcbmV4cG9ydCB2YXIgY29ubmVjdGFibGVPYnNlcnZhYmxlRGVzY3JpcHRvciA9IHtcbiAgICBvcGVyYXRvcjogeyB2YWx1ZTogbnVsbCB9LFxuICAgIF9yZWZDb3VudDogeyB2YWx1ZTogMCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICBfc3ViamVjdDogeyB2YWx1ZTogbnVsbCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICBfY29ubmVjdGlvbjogeyB2YWx1ZTogbnVsbCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICBfc3Vic2NyaWJlOiB7IHZhbHVlOiBjb25uZWN0YWJsZVByb3RvLl9zdWJzY3JpYmUgfSxcbiAgICBfaXNDb21wbGV0ZTogeyB2YWx1ZTogY29ubmVjdGFibGVQcm90by5faXNDb21wbGV0ZSwgd3JpdGFibGU6IHRydWUgfSxcbiAgICBnZXRTdWJqZWN0OiB7IHZhbHVlOiBjb25uZWN0YWJsZVByb3RvLmdldFN1YmplY3QgfSxcbiAgICBjb25uZWN0OiB7IHZhbHVlOiBjb25uZWN0YWJsZVByb3RvLmNvbm5lY3QgfSxcbiAgICByZWZDb3VudDogeyB2YWx1ZTogY29ubmVjdGFibGVQcm90by5yZWZDb3VudCB9XG59O1xudmFyIENvbm5lY3RhYmxlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb25uZWN0YWJsZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29ubmVjdGFibGVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb25uZWN0YWJsZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29ubmVjdGFibGUgPSBjb25uZWN0YWJsZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb25uZWN0YWJsZVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fZXJyb3IuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH07XG4gICAgQ29ubmVjdGFibGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGFibGUuX2lzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICB0aGlzLl91bnN1YnNjcmliZSgpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgQ29ubmVjdGFibGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb25uZWN0YWJsZSA9IHRoaXMuY29ubmVjdGFibGU7XG4gICAgICAgIGlmIChjb25uZWN0YWJsZSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0YWJsZSA9IG51bGw7XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IGNvbm5lY3RhYmxlLl9jb25uZWN0aW9uO1xuICAgICAgICAgICAgY29ubmVjdGFibGUuX3JlZkNvdW50ID0gMDtcbiAgICAgICAgICAgIGNvbm5lY3RhYmxlLl9zdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIGNvbm5lY3RhYmxlLl9jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ29ubmVjdGFibGVTdWJzY3JpYmVyO1xufShTdWJqZWN0U3Vic2NyaWJlcikpO1xudmFyIFJlZkNvdW50T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVmQ291bnRPcGVyYXRvcihjb25uZWN0YWJsZSkge1xuICAgICAgICB0aGlzLmNvbm5lY3RhYmxlID0gY29ubmVjdGFibGU7XG4gICAgfVxuICAgIFJlZkNvdW50T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHZhciBjb25uZWN0YWJsZSA9IHRoaXMuY29ubmVjdGFibGU7XG4gICAgICAgIGNvbm5lY3RhYmxlLl9yZWZDb3VudCsrO1xuICAgICAgICB2YXIgcmVmQ291bnRlciA9IG5ldyBSZWZDb3VudFN1YnNjcmliZXIoc3Vic2NyaWJlciwgY29ubmVjdGFibGUpO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gc291cmNlLnN1YnNjcmliZShyZWZDb3VudGVyKTtcbiAgICAgICAgaWYgKCFyZWZDb3VudGVyLmNsb3NlZCkge1xuICAgICAgICAgICAgcmVmQ291bnRlci5jb25uZWN0aW9uID0gY29ubmVjdGFibGUuY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICByZXR1cm4gUmVmQ291bnRPcGVyYXRvcjtcbn0oKSk7XG52YXIgUmVmQ291bnRTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFJlZkNvdW50U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZWZDb3VudFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNvbm5lY3RhYmxlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb25uZWN0YWJsZSA9IGNvbm5lY3RhYmxlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJlZkNvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29ubmVjdGFibGUgPSB0aGlzLmNvbm5lY3RhYmxlO1xuICAgICAgICBpZiAoIWNvbm5lY3RhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29ubmVjdGFibGUgPSBudWxsO1xuICAgICAgICB2YXIgcmVmQ291bnQgPSBjb25uZWN0YWJsZS5fcmVmQ291bnQ7XG4gICAgICAgIGlmIChyZWZDb3VudCA8PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3RhYmxlLl9yZWZDb3VudCA9IHJlZkNvdW50IC0gMTtcbiAgICAgICAgaWYgKHJlZkNvdW50ID4gMSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbjtcbiAgICAgICAgdmFyIHNoYXJlZENvbm5lY3Rpb24gPSBjb25uZWN0YWJsZS5fY29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgaWYgKHNoYXJlZENvbm5lY3Rpb24gJiYgKCFjb25uZWN0aW9uIHx8IHNoYXJlZENvbm5lY3Rpb24gPT09IGNvbm5lY3Rpb24pKSB7XG4gICAgICAgICAgICBzaGFyZWRDb25uZWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBSZWZDb3VudFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbm5lY3RhYmxlT2JzZXJ2YWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YmplY3QsX3V0aWxfT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuL1N1YmplY3QnO1xuaW1wb3J0IHsgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgfSBmcm9tICcuL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xudmFyIEJlaGF2aW9yU3ViamVjdCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhCZWhhdmlvclN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQmVoYXZpb3JTdWJqZWN0KF92YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fdmFsdWUgPSBfdmFsdWU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBfc3VwZXIucHJvdG90eXBlLl9zdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbiAmJiAhc3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IHRoaXMudGhyb3duRXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgdGhpcy5fdmFsdWUgPSB2YWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gQmVoYXZpb3JTdWJqZWN0O1xufShTdWJqZWN0KSk7XG5leHBvcnQgeyBCZWhhdmlvclN1YmplY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJlaGF2aW9yU3ViamVjdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX05vdGlmaWNhdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vTm90aWZpY2F0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGRlbGF5ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9ic2VydmVPbk9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgT2JzZXJ2ZU9uT3BlcmF0b3Ioc2NoZWR1bGVyLCBkZWxheSkpO1xuICAgIH07XG59XG52YXIgT2JzZXJ2ZU9uT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2ZU9uT3BlcmF0b3Ioc2NoZWR1bGVyLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgfVxuICAgIE9ic2VydmVPbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgT2JzZXJ2ZU9uU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnNjaGVkdWxlciwgdGhpcy5kZWxheSkpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmVPbk9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmVPbk9wZXJhdG9yIH07XG52YXIgT2JzZXJ2ZU9uU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhPYnNlcnZlT25TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE9ic2VydmVPblN1YnNjcmliZXIoZGVzdGluYXRpb24sIHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9ic2VydmVPblN1YnNjcmliZXIuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHZhciBub3RpZmljYXRpb24gPSBhcmcubm90aWZpY2F0aW9uLCBkZXN0aW5hdGlvbiA9IGFyZy5kZXN0aW5hdGlvbjtcbiAgICAgICAgbm90aWZpY2F0aW9uLm9ic2VydmUoZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBPYnNlcnZlT25TdWJzY3JpYmVyLnByb3RvdHlwZS5zY2hlZHVsZU1lc3NhZ2UgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZCh0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShPYnNlcnZlT25TdWJzY3JpYmVyLmRpc3BhdGNoLCB0aGlzLmRlbGF5LCBuZXcgT2JzZXJ2ZU9uTWVzc2FnZShub3RpZmljYXRpb24sIHRoaXMuZGVzdGluYXRpb24pKSk7XG4gICAgfTtcbiAgICBPYnNlcnZlT25TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlTWVzc2FnZShOb3RpZmljYXRpb24uY3JlYXRlTmV4dCh2YWx1ZSkpO1xuICAgIH07XG4gICAgT2JzZXJ2ZU9uU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLnNjaGVkdWxlTWVzc2FnZShOb3RpZmljYXRpb24uY3JlYXRlRXJyb3IoZXJyKSk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIE9ic2VydmVPblN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZU1lc3NhZ2UoTm90aWZpY2F0aW9uLmNyZWF0ZUNvbXBsZXRlKCkpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2ZU9uU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgT2JzZXJ2ZU9uU3Vic2NyaWJlciB9O1xudmFyIE9ic2VydmVPbk1lc3NhZ2UgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2ZU9uTWVzc2FnZShub3RpZmljYXRpb24sIGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uID0gbm90aWZpY2F0aW9uO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgfVxuICAgIHJldHVybiBPYnNlcnZlT25NZXNzYWdlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmVPbk1lc3NhZ2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmVPbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmZ1bmN0aW9uIFRpbWVvdXRFcnJvckltcGwoKSB7XG4gICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSAnVGltZW91dCBoYXMgb2NjdXJyZWQnO1xuICAgIHRoaXMubmFtZSA9ICdUaW1lb3V0RXJyb3InO1xuICAgIHJldHVybiB0aGlzO1xufVxuVGltZW91dEVycm9ySW1wbC5wcm90b3R5cGUgPSAvKkBfX1BVUkVfXyovIE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbmV4cG9ydCB2YXIgVGltZW91dEVycm9yID0gVGltZW91dEVycm9ySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRpbWVvdXRFcnJvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX21lcmdlQWxsIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG1lcmdlQWxsIH0gZnJvbSAnLi9tZXJnZUFsbCc7XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0QWxsKCkge1xuICAgIHJldHVybiBtZXJnZUFsbCgxKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdEFsbC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfaXNTY2hlZHVsZXIsX29wZXJhdG9yc19tZXJnZUFsbCxfZnJvbUFycmF5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XG5pbXBvcnQgeyBtZXJnZUFsbCB9IGZyb20gJy4uL29wZXJhdG9ycy9tZXJnZUFsbCc7XG5pbXBvcnQgeyBmcm9tQXJyYXkgfSBmcm9tICcuL2Zyb21BcnJheSc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2UoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgdmFyIHNjaGVkdWxlciA9IG51bGw7XG4gICAgdmFyIGxhc3QgPSBvYnNlcnZhYmxlc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXTtcbiAgICBpZiAoaXNTY2hlZHVsZXIobGFzdCkpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gb2JzZXJ2YWJsZXMucG9wKCk7XG4gICAgICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPiAxICYmIHR5cGVvZiBvYnNlcnZhYmxlc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNvbmN1cnJlbnQgPSBvYnNlcnZhYmxlcy5wb3AoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgbGFzdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uY3VycmVudCA9IG9ic2VydmFibGVzLnBvcCgpO1xuICAgIH1cbiAgICBpZiAoc2NoZWR1bGVyID09PSBudWxsICYmIG9ic2VydmFibGVzLmxlbmd0aCA9PT0gMSAmJiBvYnNlcnZhYmxlc1swXSBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGVzWzBdO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VBbGwoY29uY3VycmVudCkoZnJvbUFycmF5KG9ic2VydmFibGVzLCBzY2hlZHVsZXIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfdXRpbF9pc0FycmF5LF9mcm9tQXJyYXksX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheSc7XG5pbXBvcnQgeyBmcm9tQXJyYXkgfSBmcm9tICcuL2Zyb21BcnJheSc7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiByYWNlKCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkob2JzZXJ2YWJsZXNbMF0pKSB7XG4gICAgICAgICAgICBvYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGVzWzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmcm9tQXJyYXkob2JzZXJ2YWJsZXMsIHVuZGVmaW5lZCkubGlmdChuZXcgUmFjZU9wZXJhdG9yKCkpO1xufVxudmFyIFJhY2VPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSYWNlT3BlcmF0b3IoKSB7XG4gICAgfVxuICAgIFJhY2VPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFJhY2VTdWJzY3JpYmVyKHN1YnNjcmliZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBSYWNlT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0IHsgUmFjZU9wZXJhdG9yIH07XG52YXIgUmFjZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoUmFjZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmFjZVN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmhhc0ZpcnN0ID0gZmFsc2U7XG4gICAgICAgIF90aGlzLm9ic2VydmFibGVzID0gW107XG4gICAgICAgIF90aGlzLnN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSYWNlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAob2JzZXJ2YWJsZSkge1xuICAgICAgICB0aGlzLm9ic2VydmFibGVzLnB1c2gob2JzZXJ2YWJsZSk7XG4gICAgfTtcbiAgICBSYWNlU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZXMgPSB0aGlzLm9ic2VydmFibGVzO1xuICAgICAgICB2YXIgbGVuID0gb2JzZXJ2YWJsZXMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbiAmJiAhdGhpcy5oYXNGaXJzdDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBvYnNlcnZhYmxlc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgb2JzZXJ2YWJsZSwgb2JzZXJ2YWJsZSwgaSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmFkZChzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vYnNlcnZhYmxlcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJhY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNGaXJzdCkge1xuICAgICAgICAgICAgdGhpcy5oYXNGaXJzdCA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpICE9PSBvdXRlckluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLnN1YnNjcmlwdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGlubmVyVmFsdWUpO1xuICAgIH07XG4gICAgcmV0dXJuIFJhY2VTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IFJhY2VTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYWNlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfc2NoZWR1bGVyX2FzeW5jLF91dGlsX2lzTnVtZXJpYyxfdXRpbF9pc1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBhc3luYyB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBpc051bWVyaWMgfSBmcm9tICcuLi91dGlsL2lzTnVtZXJpYyc7XG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvaXNTY2hlZHVsZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGR1ZVRpbWUsIHBlcmlvZE9yU2NoZWR1bGVyLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoZHVlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGR1ZVRpbWUgPSAwO1xuICAgIH1cbiAgICB2YXIgcGVyaW9kID0gLTE7XG4gICAgaWYgKGlzTnVtZXJpYyhwZXJpb2RPclNjaGVkdWxlcikpIHtcbiAgICAgICAgcGVyaW9kID0gTnVtYmVyKHBlcmlvZE9yU2NoZWR1bGVyKSA8IDEgJiYgMSB8fCBOdW1iZXIocGVyaW9kT3JTY2hlZHVsZXIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1NjaGVkdWxlcihwZXJpb2RPclNjaGVkdWxlcikpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gcGVyaW9kT3JTY2hlZHVsZXI7XG4gICAgfVxuICAgIGlmICghaXNTY2hlZHVsZXIoc2NoZWR1bGVyKSkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhc3luYztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBkdWUgPSBpc051bWVyaWMoZHVlVGltZSlcbiAgICAgICAgICAgID8gZHVlVGltZVxuICAgICAgICAgICAgOiAoK2R1ZVRpbWUgLSBzY2hlZHVsZXIubm93KCkpO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCBkdWUsIHtcbiAgICAgICAgICAgIGluZGV4OiAwLCBwZXJpb2Q6IHBlcmlvZCwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgsIHBlcmlvZCA9IHN0YXRlLnBlcmlvZCwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXI7XG4gICAgc3Vic2NyaWJlci5uZXh0KGluZGV4KTtcbiAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIGlmIChwZXJpb2QgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfVxuICAgIHN0YXRlLmluZGV4ID0gaW5kZXggKyAxO1xuICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUsIHBlcmlvZCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3NjaGVkdWxlT2JzZXJ2YWJsZSxfc2NoZWR1bGVQcm9taXNlLF9zY2hlZHVsZUFycmF5LF9zY2hlZHVsZUl0ZXJhYmxlLF91dGlsX2lzSW50ZXJvcE9ic2VydmFibGUsX3V0aWxfaXNQcm9taXNlLF91dGlsX2lzQXJyYXlMaWtlLF91dGlsX2lzSXRlcmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgc2NoZWR1bGVPYnNlcnZhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZU9ic2VydmFibGUnO1xuaW1wb3J0IHsgc2NoZWR1bGVQcm9taXNlIH0gZnJvbSAnLi9zY2hlZHVsZVByb21pc2UnO1xuaW1wb3J0IHsgc2NoZWR1bGVBcnJheSB9IGZyb20gJy4vc2NoZWR1bGVBcnJheSc7XG5pbXBvcnQgeyBzY2hlZHVsZUl0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUl0ZXJhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzSXRlcmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0l0ZXJhYmxlKGlucHV0KSB8fCB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKChpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgfHwgaW5wdXQpICsgJyBpcyBub3Qgb2JzZXJ2YWJsZScpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVkLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc3ltYm9sX29ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0ICYmIHR5cGVvZiBpbnB1dFtTeW1ib2xfb2JzZXJ2YWJsZV0gPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0ludGVyb3BPYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfU3Vic2NyaXB0aW9uLF9zeW1ib2xfb2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IGlucHV0W1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xuICAgICAgICAgICAgc3ViLmFkZChvYnNlcnZhYmxlLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7IHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0pKTsgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycikgeyBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pKTsgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkgeyBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pKTsgfSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gc3ViO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVPYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfU3Vic2NyaXB0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gc3ViO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVQcm9taXNlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc3ltYm9sX2l0ZXJhdG9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCAmJiB0eXBlb2YgaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSXRlcmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF9TdWJzY3JpcHRpb24sX3N5bWJvbF9pdGVyYXRvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSXRlcmFibGUgY2Fubm90IGJlIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHZhciBpdGVyYXRvcjtcbiAgICAgICAgc3ViLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaXRlcmF0b3IgJiYgdHlwZW9mIGl0ZXJhdG9yLnJldHVybiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBkb25lO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBkb25lID0gcmVzdWx0LmRvbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHN1YjtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlSXRlcmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9Bc3luY0FjdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQXN5bmNBY3Rpb24gfSBmcm9tICcuL0FzeW5jQWN0aW9uJztcbnZhciBRdWV1ZUFjdGlvbiA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhRdWV1ZUFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBRdWV1ZUFjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyLCB3b3JrKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFF1ZXVlQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVsYXkgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5zY2hlZHVsZS5jYWxsKHRoaXMsIHN0YXRlLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyLmZsdXNoKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFF1ZXVlQWN0aW9uLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICByZXR1cm4gKGRlbGF5ID4gMCB8fCB0aGlzLmNsb3NlZCkgP1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5leGVjdXRlLmNhbGwodGhpcywgc3RhdGUsIGRlbGF5KSA6XG4gICAgICAgICAgICB0aGlzLl9leGVjdXRlKHN0YXRlLCBkZWxheSk7XG4gICAgfTtcbiAgICBRdWV1ZUFjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGRlbGF5ICE9PSBudWxsICYmIGRlbGF5ID4gMCkgfHwgKGRlbGF5ID09PSBudWxsICYmIHRoaXMuZGVsYXkgPiAwKSkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5mbHVzaCh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBRdWV1ZUFjdGlvbjtcbn0oQXN5bmNBY3Rpb24pKTtcbmV4cG9ydCB7IFF1ZXVlQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1RdWV1ZUFjdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX0FzeW5jU2NoZWR1bGVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBc3luY1NjaGVkdWxlciB9IGZyb20gJy4vQXN5bmNTY2hlZHVsZXInO1xudmFyIFF1ZXVlU2NoZWR1bGVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFF1ZXVlU2NoZWR1bGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFF1ZXVlU2NoZWR1bGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBRdWV1ZVNjaGVkdWxlcjtcbn0oQXN5bmNTY2hlZHVsZXIpKTtcbmV4cG9ydCB7IFF1ZXVlU2NoZWR1bGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1RdWV1ZVNjaGVkdWxlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX1F1ZXVlQWN0aW9uLF9RdWV1ZVNjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBRdWV1ZUFjdGlvbiB9IGZyb20gJy4vUXVldWVBY3Rpb24nO1xuaW1wb3J0IHsgUXVldWVTY2hlZHVsZXIgfSBmcm9tICcuL1F1ZXVlU2NoZWR1bGVyJztcbmV4cG9ydCB2YXIgcXVldWUgPSAvKkBfX1BVUkVfXyovIG5ldyBRdWV1ZVNjaGVkdWxlcihRdWV1ZUFjdGlvbik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWV1ZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmlwdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xudmFyIFN1YmplY3RTdWJzY3JpcHRpb24gPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3ViamVjdFN1YnNjcmlwdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0U3Vic2NyaXB0aW9uKHN1YmplY3QsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gICAgICAgIF90aGlzLnN1YnNjcmliZXIgPSBzdWJzY3JpYmVyO1xuICAgICAgICBfdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJqZWN0U3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB2YXIgc3ViamVjdCA9IHRoaXMuc3ViamVjdDtcbiAgICAgICAgdmFyIG9ic2VydmVycyA9IHN1YmplY3Qub2JzZXJ2ZXJzO1xuICAgICAgICB0aGlzLnN1YmplY3QgPSBudWxsO1xuICAgICAgICBpZiAoIW9ic2VydmVycyB8fCBvYnNlcnZlcnMubGVuZ3RoID09PSAwIHx8IHN1YmplY3QuaXNTdG9wcGVkIHx8IHN1YmplY3QuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YnNjcmliZXJJbmRleCA9IG9ic2VydmVycy5pbmRleE9mKHRoaXMuc3Vic2NyaWJlcik7XG4gICAgICAgIGlmIChzdWJzY3JpYmVySW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBvYnNlcnZlcnMuc3BsaWNlKHN1YnNjcmliZXJJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0U3Vic2NyaXB0aW9uO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IFN1YmplY3RTdWJzY3JpcHRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3RTdWJzY3JpcHRpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgdmFyIHN1YnNjcmliZVRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbiAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVUb0FycmF5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IHZhciBpc0FycmF5TGlrZSA9IChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAmJiB0eXBlb2YgeC5sZW5ndGggPT09ICdudW1iZXInICYmIHR5cGVvZiB4ICE9PSAnZnVuY3Rpb24nOyB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXJyYXlMaWtlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZS5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gbm90KHByZWQsIHRoaXNBcmcpIHtcbiAgICBmdW5jdGlvbiBub3RQcmVkKCkge1xuICAgICAgICByZXR1cm4gIShub3RQcmVkLnByZWQuYXBwbHkobm90UHJlZC50aGlzQXJnLCBhcmd1bWVudHMpKTtcbiAgICB9XG4gICAgbm90UHJlZC5wcmVkID0gcHJlZDtcbiAgICBub3RQcmVkLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgIHJldHVybiBub3RQcmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm90LmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfID0gcmVxdWlyZShcIi4vbG9kYXNoXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdyYXBoO1xuXG52YXIgREVGQVVMVF9FREdFX05BTUUgPSBcIlxceDAwXCIsXG4gICAgR1JBUEhfTk9ERSA9IFwiXFx4MDBcIixcbiAgICBFREdFX0tFWV9ERUxJTSA9IFwiXFx4MDFcIjtcblxuLy8gSW1wbGVtZW50YXRpb24gbm90ZXM6XG4vL1xuLy8gICogTm9kZSBpZCBxdWVyeSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBzdHJpbmcgaWRzIGZvciB0aGUgbm9kZXNcbi8vICAqIEVkZ2UgaWQgcXVlcnkgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gYW4gXCJlZGdlT2JqXCIsIGVkZ2Ugb2JqZWN0LCB0aGF0IGlzXG4vLyAgICBjb21wb3NlZCBvZiBlbm91Z2ggaW5mb3JtYXRpb24gdG8gdW5pcXVlbHkgaWRlbnRpZnkgYW4gZWRnZToge3YsIHcsIG5hbWV9LlxuLy8gICogSW50ZXJuYWxseSB3ZSB1c2UgYW4gXCJlZGdlSWRcIiwgYSBzdHJpbmdpZmllZCBmb3JtIG9mIHRoZSBlZGdlT2JqLCB0b1xuLy8gICAgcmVmZXJlbmNlIGVkZ2VzLiBUaGlzIGlzIGJlY2F1c2Ugd2UgbmVlZCBhIHBlcmZvcm1hbnQgd2F5IHRvIGxvb2sgdGhlc2Vcbi8vICAgIGVkZ2VzIHVwIGFuZCwgb2JqZWN0IHByb3BlcnRpZXMsIHdoaWNoIGhhdmUgc3RyaW5nIGtleXMsIGFyZSB0aGUgY2xvc2VzdFxuLy8gICAgd2UncmUgZ29pbmcgdG8gZ2V0IHRvIGEgcGVyZm9ybWFudCBoYXNodGFibGUgaW4gSmF2YVNjcmlwdC5cblxuZnVuY3Rpb24gR3JhcGgob3B0cykge1xuICB0aGlzLl9pc0RpcmVjdGVkID0gXy5oYXMob3B0cywgXCJkaXJlY3RlZFwiKSA/IG9wdHMuZGlyZWN0ZWQgOiB0cnVlO1xuICB0aGlzLl9pc011bHRpZ3JhcGggPSBfLmhhcyhvcHRzLCBcIm11bHRpZ3JhcGhcIikgPyBvcHRzLm11bHRpZ3JhcGggOiBmYWxzZTtcbiAgdGhpcy5faXNDb21wb3VuZCA9IF8uaGFzKG9wdHMsIFwiY29tcG91bmRcIikgPyBvcHRzLmNvbXBvdW5kIDogZmFsc2U7XG5cbiAgLy8gTGFiZWwgZm9yIHRoZSBncmFwaCBpdHNlbGZcbiAgdGhpcy5fbGFiZWwgPSB1bmRlZmluZWQ7XG5cbiAgLy8gRGVmYXVsdHMgdG8gYmUgc2V0IHdoZW4gY3JlYXRpbmcgYSBuZXcgbm9kZVxuICB0aGlzLl9kZWZhdWx0Tm9kZUxhYmVsRm4gPSBfLmNvbnN0YW50KHVuZGVmaW5lZCk7XG5cbiAgLy8gRGVmYXVsdHMgdG8gYmUgc2V0IHdoZW4gY3JlYXRpbmcgYSBuZXcgZWRnZVxuICB0aGlzLl9kZWZhdWx0RWRnZUxhYmVsRm4gPSBfLmNvbnN0YW50KHVuZGVmaW5lZCk7XG5cbiAgLy8gdiAtPiBsYWJlbFxuICB0aGlzLl9ub2RlcyA9IHt9O1xuXG4gIGlmICh0aGlzLl9pc0NvbXBvdW5kKSB7XG4gICAgLy8gdiAtPiBwYXJlbnRcbiAgICB0aGlzLl9wYXJlbnQgPSB7fTtcblxuICAgIC8vIHYgLT4gY2hpbGRyZW5cbiAgICB0aGlzLl9jaGlsZHJlbiA9IHt9O1xuICAgIHRoaXMuX2NoaWxkcmVuW0dSQVBIX05PREVdID0ge307XG4gIH1cblxuICAvLyB2IC0+IGVkZ2VPYmpcbiAgdGhpcy5faW4gPSB7fTtcblxuICAvLyB1IC0+IHYgLT4gTnVtYmVyXG4gIHRoaXMuX3ByZWRzID0ge307XG5cbiAgLy8gdiAtPiBlZGdlT2JqXG4gIHRoaXMuX291dCA9IHt9O1xuXG4gIC8vIHYgLT4gdyAtPiBOdW1iZXJcbiAgdGhpcy5fc3VjcyA9IHt9O1xuXG4gIC8vIGUgLT4gZWRnZU9ialxuICB0aGlzLl9lZGdlT2JqcyA9IHt9O1xuXG4gIC8vIGUgLT4gbGFiZWxcbiAgdGhpcy5fZWRnZUxhYmVscyA9IHt9O1xufVxuXG4vKiBOdW1iZXIgb2Ygbm9kZXMgaW4gdGhlIGdyYXBoLiBTaG91bGQgb25seSBiZSBjaGFuZ2VkIGJ5IHRoZSBpbXBsZW1lbnRhdGlvbi4gKi9cbkdyYXBoLnByb3RvdHlwZS5fbm9kZUNvdW50ID0gMDtcblxuLyogTnVtYmVyIG9mIGVkZ2VzIGluIHRoZSBncmFwaC4gU2hvdWxkIG9ubHkgYmUgY2hhbmdlZCBieSB0aGUgaW1wbGVtZW50YXRpb24uICovXG5HcmFwaC5wcm90b3R5cGUuX2VkZ2VDb3VudCA9IDA7XG5cblxuLyogPT09IEdyYXBoIGZ1bmN0aW9ucyA9PT09PT09PT0gKi9cblxuR3JhcGgucHJvdG90eXBlLmlzRGlyZWN0ZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2lzRGlyZWN0ZWQ7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuaXNNdWx0aWdyYXBoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9pc011bHRpZ3JhcGg7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuaXNDb21wb3VuZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5faXNDb21wb3VuZDtcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5zZXRHcmFwaCA9IGZ1bmN0aW9uKGxhYmVsKSB7XG4gIHRoaXMuX2xhYmVsID0gbGFiZWw7XG4gIHJldHVybiB0aGlzO1xufTtcblxuR3JhcGgucHJvdG90eXBlLmdyYXBoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9sYWJlbDtcbn07XG5cblxuLyogPT09IE5vZGUgZnVuY3Rpb25zID09PT09PT09PT0gKi9cblxuR3JhcGgucHJvdG90eXBlLnNldERlZmF1bHROb2RlTGFiZWwgPSBmdW5jdGlvbihuZXdEZWZhdWx0KSB7XG4gIGlmICghXy5pc0Z1bmN0aW9uKG5ld0RlZmF1bHQpKSB7XG4gICAgbmV3RGVmYXVsdCA9IF8uY29uc3RhbnQobmV3RGVmYXVsdCk7XG4gIH1cbiAgdGhpcy5fZGVmYXVsdE5vZGVMYWJlbEZuID0gbmV3RGVmYXVsdDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUubm9kZUNvdW50ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9ub2RlQ291bnQ7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUubm9kZXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIF8ua2V5cyh0aGlzLl9ub2Rlcyk7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuc291cmNlcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJldHVybiBfLmZpbHRlcih0aGlzLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gXy5pc0VtcHR5KHNlbGYuX2luW3ZdKTtcbiAgfSk7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuc2lua3MgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXR1cm4gXy5maWx0ZXIodGhpcy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgcmV0dXJuIF8uaXNFbXB0eShzZWxmLl9vdXRbdl0pO1xuICB9KTtcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5zZXROb2RlcyA9IGZ1bmN0aW9uKHZzLCB2YWx1ZSkge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBfLmVhY2godnMsIGZ1bmN0aW9uKHYpIHtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAxKSB7XG4gICAgICBzZWxmLnNldE5vZGUodiwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnNldE5vZGUodik7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuc2V0Tm9kZSA9IGZ1bmN0aW9uKHYsIHZhbHVlKSB7XG4gIGlmIChfLmhhcyh0aGlzLl9ub2RlcywgdikpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRoaXMuX25vZGVzW3ZdID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdGhpcy5fbm9kZXNbdl0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHZhbHVlIDogdGhpcy5fZGVmYXVsdE5vZGVMYWJlbEZuKHYpO1xuICBpZiAodGhpcy5faXNDb21wb3VuZCkge1xuICAgIHRoaXMuX3BhcmVudFt2XSA9IEdSQVBIX05PREU7XG4gICAgdGhpcy5fY2hpbGRyZW5bdl0gPSB7fTtcbiAgICB0aGlzLl9jaGlsZHJlbltHUkFQSF9OT0RFXVt2XSA9IHRydWU7XG4gIH1cbiAgdGhpcy5faW5bdl0gPSB7fTtcbiAgdGhpcy5fcHJlZHNbdl0gPSB7fTtcbiAgdGhpcy5fb3V0W3ZdID0ge307XG4gIHRoaXMuX3N1Y3Nbdl0gPSB7fTtcbiAgKyt0aGlzLl9ub2RlQ291bnQ7XG4gIHJldHVybiB0aGlzO1xufTtcblxuR3JhcGgucHJvdG90eXBlLm5vZGUgPSBmdW5jdGlvbih2KSB7XG4gIHJldHVybiB0aGlzLl9ub2Rlc1t2XTtcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5oYXNOb2RlID0gZnVuY3Rpb24odikge1xuICByZXR1cm4gXy5oYXModGhpcy5fbm9kZXMsIHYpO1xufTtcblxuR3JhcGgucHJvdG90eXBlLnJlbW92ZU5vZGUgPSAgZnVuY3Rpb24odikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmIChfLmhhcyh0aGlzLl9ub2RlcywgdikpIHtcbiAgICB2YXIgcmVtb3ZlRWRnZSA9IGZ1bmN0aW9uKGUpIHsgc2VsZi5yZW1vdmVFZGdlKHNlbGYuX2VkZ2VPYmpzW2VdKTsgfTtcbiAgICBkZWxldGUgdGhpcy5fbm9kZXNbdl07XG4gICAgaWYgKHRoaXMuX2lzQ29tcG91bmQpIHtcbiAgICAgIHRoaXMuX3JlbW92ZUZyb21QYXJlbnRzQ2hpbGRMaXN0KHYpO1xuICAgICAgZGVsZXRlIHRoaXMuX3BhcmVudFt2XTtcbiAgICAgIF8uZWFjaCh0aGlzLmNoaWxkcmVuKHYpLCBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICBzZWxmLnNldFBhcmVudChjaGlsZCk7XG4gICAgICB9KTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9jaGlsZHJlblt2XTtcbiAgICB9XG4gICAgXy5lYWNoKF8ua2V5cyh0aGlzLl9pblt2XSksIHJlbW92ZUVkZ2UpO1xuICAgIGRlbGV0ZSB0aGlzLl9pblt2XTtcbiAgICBkZWxldGUgdGhpcy5fcHJlZHNbdl07XG4gICAgXy5lYWNoKF8ua2V5cyh0aGlzLl9vdXRbdl0pLCByZW1vdmVFZGdlKTtcbiAgICBkZWxldGUgdGhpcy5fb3V0W3ZdO1xuICAgIGRlbGV0ZSB0aGlzLl9zdWNzW3ZdO1xuICAgIC0tdGhpcy5fbm9kZUNvdW50O1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuR3JhcGgucHJvdG90eXBlLnNldFBhcmVudCA9IGZ1bmN0aW9uKHYsIHBhcmVudCkge1xuICBpZiAoIXRoaXMuX2lzQ29tcG91bmQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc2V0IHBhcmVudCBpbiBhIG5vbi1jb21wb3VuZCBncmFwaFwiKTtcbiAgfVxuXG4gIGlmIChfLmlzVW5kZWZpbmVkKHBhcmVudCkpIHtcbiAgICBwYXJlbnQgPSBHUkFQSF9OT0RFO1xuICB9IGVsc2Uge1xuICAgIC8vIENvZXJjZSBwYXJlbnQgdG8gc3RyaW5nXG4gICAgcGFyZW50ICs9IFwiXCI7XG4gICAgZm9yICh2YXIgYW5jZXN0b3IgPSBwYXJlbnQ7XG4gICAgICAgICAhXy5pc1VuZGVmaW5lZChhbmNlc3Rvcik7XG4gICAgICAgICBhbmNlc3RvciA9IHRoaXMucGFyZW50KGFuY2VzdG9yKSkge1xuICAgICAgaWYgKGFuY2VzdG9yID09PSB2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNldHRpbmcgXCIgKyBwYXJlbnQrIFwiIGFzIHBhcmVudCBvZiBcIiArIHYgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIgd291bGQgY3JlYXRlIGEgY3ljbGVcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXROb2RlKHBhcmVudCk7XG4gIH1cblxuICB0aGlzLnNldE5vZGUodik7XG4gIHRoaXMuX3JlbW92ZUZyb21QYXJlbnRzQ2hpbGRMaXN0KHYpO1xuICB0aGlzLl9wYXJlbnRbdl0gPSBwYXJlbnQ7XG4gIHRoaXMuX2NoaWxkcmVuW3BhcmVudF1bdl0gPSB0cnVlO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5fcmVtb3ZlRnJvbVBhcmVudHNDaGlsZExpc3QgPSBmdW5jdGlvbih2KSB7XG4gIGRlbGV0ZSB0aGlzLl9jaGlsZHJlblt0aGlzLl9wYXJlbnRbdl1dW3ZdO1xufTtcblxuR3JhcGgucHJvdG90eXBlLnBhcmVudCA9IGZ1bmN0aW9uKHYpIHtcbiAgaWYgKHRoaXMuX2lzQ29tcG91bmQpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5fcGFyZW50W3ZdO1xuICAgIGlmIChwYXJlbnQgIT09IEdSQVBIX05PREUpIHtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuICB9XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuY2hpbGRyZW4gPSBmdW5jdGlvbih2KSB7XG4gIGlmIChfLmlzVW5kZWZpbmVkKHYpKSB7XG4gICAgdiA9IEdSQVBIX05PREU7XG4gIH1cblxuICBpZiAodGhpcy5faXNDb21wb3VuZCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuX2NoaWxkcmVuW3ZdO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgcmV0dXJuIF8ua2V5cyhjaGlsZHJlbik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHYgPT09IEdSQVBIX05PREUpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlcygpO1xuICB9IGVsc2UgaWYgKHRoaXMuaGFzTm9kZSh2KSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxufTtcblxuR3JhcGgucHJvdG90eXBlLnByZWRlY2Vzc29ycyA9IGZ1bmN0aW9uKHYpIHtcbiAgdmFyIHByZWRzViA9IHRoaXMuX3ByZWRzW3ZdO1xuICBpZiAocHJlZHNWKSB7XG4gICAgcmV0dXJuIF8ua2V5cyhwcmVkc1YpO1xuICB9XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuc3VjY2Vzc29ycyA9IGZ1bmN0aW9uKHYpIHtcbiAgdmFyIHN1Y3NWID0gdGhpcy5fc3Vjc1t2XTtcbiAgaWYgKHN1Y3NWKSB7XG4gICAgcmV0dXJuIF8ua2V5cyhzdWNzVik7XG4gIH1cbn07XG5cbkdyYXBoLnByb3RvdHlwZS5uZWlnaGJvcnMgPSBmdW5jdGlvbih2KSB7XG4gIHZhciBwcmVkcyA9IHRoaXMucHJlZGVjZXNzb3JzKHYpO1xuICBpZiAocHJlZHMpIHtcbiAgICByZXR1cm4gXy51bmlvbihwcmVkcywgdGhpcy5zdWNjZXNzb3JzKHYpKTtcbiAgfVxufTtcblxuR3JhcGgucHJvdG90eXBlLmlzTGVhZiA9IGZ1bmN0aW9uICh2KSB7XG4gIHZhciBuZWlnaGJvcnM7XG4gIGlmICh0aGlzLmlzRGlyZWN0ZWQoKSkge1xuICAgIG5laWdoYm9ycyA9IHRoaXMuc3VjY2Vzc29ycyh2KTtcbiAgfSBlbHNlIHtcbiAgICBuZWlnaGJvcnMgPSB0aGlzLm5laWdoYm9ycyh2KTtcbiAgfVxuICByZXR1cm4gbmVpZ2hib3JzLmxlbmd0aCA9PT0gMDtcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5maWx0ZXJOb2RlcyA9IGZ1bmN0aW9uKGZpbHRlcikge1xuICB2YXIgY29weSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHtcbiAgICBkaXJlY3RlZDogdGhpcy5faXNEaXJlY3RlZCxcbiAgICBtdWx0aWdyYXBoOiB0aGlzLl9pc011bHRpZ3JhcGgsXG4gICAgY29tcG91bmQ6IHRoaXMuX2lzQ29tcG91bmRcbiAgfSk7XG5cbiAgY29weS5zZXRHcmFwaCh0aGlzLmdyYXBoKCkpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgXy5lYWNoKHRoaXMuX25vZGVzLCBmdW5jdGlvbih2YWx1ZSwgdikge1xuICAgIGlmIChmaWx0ZXIodikpIHtcbiAgICAgIGNvcHkuc2V0Tm9kZSh2LCB2YWx1ZSk7XG4gICAgfVxuICB9KTtcblxuICBfLmVhY2godGhpcy5fZWRnZU9ianMsIGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoY29weS5oYXNOb2RlKGUudikgJiYgY29weS5oYXNOb2RlKGUudykpIHtcbiAgICAgIGNvcHkuc2V0RWRnZShlLCBzZWxmLmVkZ2UoZSkpO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIHBhcmVudHMgPSB7fTtcbiAgZnVuY3Rpb24gZmluZFBhcmVudCh2KSB7XG4gICAgdmFyIHBhcmVudCA9IHNlbGYucGFyZW50KHYpO1xuICAgIGlmIChwYXJlbnQgPT09IHVuZGVmaW5lZCB8fCBjb3B5Lmhhc05vZGUocGFyZW50KSkge1xuICAgICAgcGFyZW50c1t2XSA9IHBhcmVudDtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfSBlbHNlIGlmIChwYXJlbnQgaW4gcGFyZW50cykge1xuICAgICAgcmV0dXJuIHBhcmVudHNbcGFyZW50XTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpbmRQYXJlbnQocGFyZW50KTtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5faXNDb21wb3VuZCkge1xuICAgIF8uZWFjaChjb3B5Lm5vZGVzKCksIGZ1bmN0aW9uKHYpIHtcbiAgICAgIGNvcHkuc2V0UGFyZW50KHYsIGZpbmRQYXJlbnQodikpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59O1xuXG4vKiA9PT0gRWRnZSBmdW5jdGlvbnMgPT09PT09PT09PSAqL1xuXG5HcmFwaC5wcm90b3R5cGUuc2V0RGVmYXVsdEVkZ2VMYWJlbCA9IGZ1bmN0aW9uKG5ld0RlZmF1bHQpIHtcbiAgaWYgKCFfLmlzRnVuY3Rpb24obmV3RGVmYXVsdCkpIHtcbiAgICBuZXdEZWZhdWx0ID0gXy5jb25zdGFudChuZXdEZWZhdWx0KTtcbiAgfVxuICB0aGlzLl9kZWZhdWx0RWRnZUxhYmVsRm4gPSBuZXdEZWZhdWx0O1xuICByZXR1cm4gdGhpcztcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5lZGdlQ291bnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2VkZ2VDb3VudDtcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5lZGdlcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gXy52YWx1ZXModGhpcy5fZWRnZU9ianMpO1xufTtcblxuR3JhcGgucHJvdG90eXBlLnNldFBhdGggPSBmdW5jdGlvbih2cywgdmFsdWUpIHtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgXy5yZWR1Y2UodnMsIGZ1bmN0aW9uKHYsIHcpIHtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAxKSB7XG4gICAgICBzZWxmLnNldEVkZ2UodiwgdywgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnNldEVkZ2Uodiwgdyk7XG4gICAgfVxuICAgIHJldHVybiB3O1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKlxuICogc2V0RWRnZSh2LCB3LCBbdmFsdWUsIFtuYW1lXV0pXG4gKiBzZXRFZGdlKHsgdiwgdywgW25hbWVdIH0sIFt2YWx1ZV0pXG4gKi9cbkdyYXBoLnByb3RvdHlwZS5zZXRFZGdlID0gZnVuY3Rpb24oKSB7XG4gIHZhciB2LCB3LCBuYW1lLCB2YWx1ZSxcbiAgICAgIHZhbHVlU3BlY2lmaWVkID0gZmFsc2UsXG4gICAgICBhcmcwID0gYXJndW1lbnRzWzBdO1xuXG4gIGlmICh0eXBlb2YgYXJnMCA9PT0gXCJvYmplY3RcIiAmJiBhcmcwICE9PSBudWxsICYmIFwidlwiIGluIGFyZzApIHtcbiAgICB2ID0gYXJnMC52O1xuICAgIHcgPSBhcmcwLnc7XG4gICAgbmFtZSA9IGFyZzAubmFtZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgdmFsdWUgPSBhcmd1bWVudHNbMV07XG4gICAgICB2YWx1ZVNwZWNpZmllZCA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHYgPSBhcmcwO1xuICAgIHcgPSBhcmd1bWVudHNbMV07XG4gICAgbmFtZSA9IGFyZ3VtZW50c1szXTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgIHZhbHVlID0gYXJndW1lbnRzWzJdO1xuICAgICAgdmFsdWVTcGVjaWZpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHYgPSBcIlwiICsgdjtcbiAgdyA9IFwiXCIgKyB3O1xuICBpZiAoIV8uaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBuYW1lID0gXCJcIiArIG5hbWU7XG4gIH1cblxuICB2YXIgZSA9IGVkZ2VBcmdzVG9JZCh0aGlzLl9pc0RpcmVjdGVkLCB2LCB3LCBuYW1lKTtcbiAgaWYgKF8uaGFzKHRoaXMuX2VkZ2VMYWJlbHMsIGUpKSB7XG4gICAgaWYgKHZhbHVlU3BlY2lmaWVkKSB7XG4gICAgICB0aGlzLl9lZGdlTGFiZWxzW2VdID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaWYgKCFfLmlzVW5kZWZpbmVkKG5hbWUpICYmICF0aGlzLl9pc011bHRpZ3JhcGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc2V0IGEgbmFtZWQgZWRnZSB3aGVuIGlzTXVsdGlncmFwaCA9IGZhbHNlXCIpO1xuICB9XG5cbiAgLy8gSXQgZGlkbid0IGV4aXN0LCBzbyB3ZSBuZWVkIHRvIGNyZWF0ZSBpdC5cbiAgLy8gRmlyc3QgZW5zdXJlIHRoZSBub2RlcyBleGlzdC5cbiAgdGhpcy5zZXROb2RlKHYpO1xuICB0aGlzLnNldE5vZGUodyk7XG5cbiAgdGhpcy5fZWRnZUxhYmVsc1tlXSA9IHZhbHVlU3BlY2lmaWVkID8gdmFsdWUgOiB0aGlzLl9kZWZhdWx0RWRnZUxhYmVsRm4odiwgdywgbmFtZSk7XG5cbiAgdmFyIGVkZ2VPYmogPSBlZGdlQXJnc1RvT2JqKHRoaXMuX2lzRGlyZWN0ZWQsIHYsIHcsIG5hbWUpO1xuICAvLyBFbnN1cmUgd2UgYWRkIHVuZGlyZWN0ZWQgZWRnZXMgaW4gYSBjb25zaXN0ZW50IHdheS5cbiAgdiA9IGVkZ2VPYmoudjtcbiAgdyA9IGVkZ2VPYmoudztcblxuICBPYmplY3QuZnJlZXplKGVkZ2VPYmopO1xuICB0aGlzLl9lZGdlT2Jqc1tlXSA9IGVkZ2VPYmo7XG4gIGluY3JlbWVudE9ySW5pdEVudHJ5KHRoaXMuX3ByZWRzW3ddLCB2KTtcbiAgaW5jcmVtZW50T3JJbml0RW50cnkodGhpcy5fc3Vjc1t2XSwgdyk7XG4gIHRoaXMuX2luW3ddW2VdID0gZWRnZU9iajtcbiAgdGhpcy5fb3V0W3ZdW2VdID0gZWRnZU9iajtcbiAgdGhpcy5fZWRnZUNvdW50Kys7XG4gIHJldHVybiB0aGlzO1xufTtcblxuR3JhcGgucHJvdG90eXBlLmVkZ2UgPSBmdW5jdGlvbih2LCB3LCBuYW1lKSB7XG4gIHZhciBlID0gKGFyZ3VtZW50cy5sZW5ndGggPT09IDFcbiAgICAgICAgICAgID8gZWRnZU9ialRvSWQodGhpcy5faXNEaXJlY3RlZCwgYXJndW1lbnRzWzBdKVxuICAgICAgICAgICAgOiBlZGdlQXJnc1RvSWQodGhpcy5faXNEaXJlY3RlZCwgdiwgdywgbmFtZSkpO1xuICByZXR1cm4gdGhpcy5fZWRnZUxhYmVsc1tlXTtcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5oYXNFZGdlID0gZnVuY3Rpb24odiwgdywgbmFtZSkge1xuICB2YXIgZSA9IChhcmd1bWVudHMubGVuZ3RoID09PSAxXG4gICAgICAgICAgICA/IGVkZ2VPYmpUb0lkKHRoaXMuX2lzRGlyZWN0ZWQsIGFyZ3VtZW50c1swXSlcbiAgICAgICAgICAgIDogZWRnZUFyZ3NUb0lkKHRoaXMuX2lzRGlyZWN0ZWQsIHYsIHcsIG5hbWUpKTtcbiAgcmV0dXJuIF8uaGFzKHRoaXMuX2VkZ2VMYWJlbHMsIGUpO1xufTtcblxuR3JhcGgucHJvdG90eXBlLnJlbW92ZUVkZ2UgPSBmdW5jdGlvbih2LCB3LCBuYW1lKSB7XG4gIHZhciBlID0gKGFyZ3VtZW50cy5sZW5ndGggPT09IDFcbiAgICAgICAgICAgID8gZWRnZU9ialRvSWQodGhpcy5faXNEaXJlY3RlZCwgYXJndW1lbnRzWzBdKVxuICAgICAgICAgICAgOiBlZGdlQXJnc1RvSWQodGhpcy5faXNEaXJlY3RlZCwgdiwgdywgbmFtZSkpLFxuICAgICAgZWRnZSA9IHRoaXMuX2VkZ2VPYmpzW2VdO1xuICBpZiAoZWRnZSkge1xuICAgIHYgPSBlZGdlLnY7XG4gICAgdyA9IGVkZ2UudztcbiAgICBkZWxldGUgdGhpcy5fZWRnZUxhYmVsc1tlXTtcbiAgICBkZWxldGUgdGhpcy5fZWRnZU9ianNbZV07XG4gICAgZGVjcmVtZW50T3JSZW1vdmVFbnRyeSh0aGlzLl9wcmVkc1t3XSwgdik7XG4gICAgZGVjcmVtZW50T3JSZW1vdmVFbnRyeSh0aGlzLl9zdWNzW3ZdLCB3KTtcbiAgICBkZWxldGUgdGhpcy5faW5bd11bZV07XG4gICAgZGVsZXRlIHRoaXMuX291dFt2XVtlXTtcbiAgICB0aGlzLl9lZGdlQ291bnQtLTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5pbkVkZ2VzID0gZnVuY3Rpb24odiwgdSkge1xuICB2YXIgaW5WID0gdGhpcy5faW5bdl07XG4gIGlmIChpblYpIHtcbiAgICB2YXIgZWRnZXMgPSBfLnZhbHVlcyhpblYpO1xuICAgIGlmICghdSkge1xuICAgICAgcmV0dXJuIGVkZ2VzO1xuICAgIH1cbiAgICByZXR1cm4gXy5maWx0ZXIoZWRnZXMsIGZ1bmN0aW9uKGVkZ2UpIHsgcmV0dXJuIGVkZ2UudiA9PT0gdTsgfSk7XG4gIH1cbn07XG5cbkdyYXBoLnByb3RvdHlwZS5vdXRFZGdlcyA9IGZ1bmN0aW9uKHYsIHcpIHtcbiAgdmFyIG91dFYgPSB0aGlzLl9vdXRbdl07XG4gIGlmIChvdXRWKSB7XG4gICAgdmFyIGVkZ2VzID0gXy52YWx1ZXMob3V0Vik7XG4gICAgaWYgKCF3KSB7XG4gICAgICByZXR1cm4gZWRnZXM7XG4gICAgfVxuICAgIHJldHVybiBfLmZpbHRlcihlZGdlcywgZnVuY3Rpb24oZWRnZSkgeyByZXR1cm4gZWRnZS53ID09PSB3OyB9KTtcbiAgfVxufTtcblxuR3JhcGgucHJvdG90eXBlLm5vZGVFZGdlcyA9IGZ1bmN0aW9uKHYsIHcpIHtcbiAgdmFyIGluRWRnZXMgPSB0aGlzLmluRWRnZXModiwgdyk7XG4gIGlmIChpbkVkZ2VzKSB7XG4gICAgcmV0dXJuIGluRWRnZXMuY29uY2F0KHRoaXMub3V0RWRnZXModiwgdykpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBpbmNyZW1lbnRPckluaXRFbnRyeShtYXAsIGspIHtcbiAgaWYgKG1hcFtrXSkge1xuICAgIG1hcFtrXSsrO1xuICB9IGVsc2Uge1xuICAgIG1hcFtrXSA9IDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVjcmVtZW50T3JSZW1vdmVFbnRyeShtYXAsIGspIHtcbiAgaWYgKCEtLW1hcFtrXSkgeyBkZWxldGUgbWFwW2tdOyB9XG59XG5cbmZ1bmN0aW9uIGVkZ2VBcmdzVG9JZChpc0RpcmVjdGVkLCB2Xywgd18sIG5hbWUpIHtcbiAgdmFyIHYgPSBcIlwiICsgdl87XG4gIHZhciB3ID0gXCJcIiArIHdfO1xuICBpZiAoIWlzRGlyZWN0ZWQgJiYgdiA+IHcpIHtcbiAgICB2YXIgdG1wID0gdjtcbiAgICB2ID0gdztcbiAgICB3ID0gdG1wO1xuICB9XG4gIHJldHVybiB2ICsgRURHRV9LRVlfREVMSU0gKyB3ICsgRURHRV9LRVlfREVMSU0gK1xuICAgICAgICAgICAgIChfLmlzVW5kZWZpbmVkKG5hbWUpID8gREVGQVVMVF9FREdFX05BTUUgOiBuYW1lKTtcbn1cblxuZnVuY3Rpb24gZWRnZUFyZ3NUb09iaihpc0RpcmVjdGVkLCB2Xywgd18sIG5hbWUpIHtcbiAgdmFyIHYgPSBcIlwiICsgdl87XG4gIHZhciB3ID0gXCJcIiArIHdfO1xuICBpZiAoIWlzRGlyZWN0ZWQgJiYgdiA+IHcpIHtcbiAgICB2YXIgdG1wID0gdjtcbiAgICB2ID0gdztcbiAgICB3ID0gdG1wO1xuICB9XG4gIHZhciBlZGdlT2JqID0gIHsgdjogdiwgdzogdyB9O1xuICBpZiAobmFtZSkge1xuICAgIGVkZ2VPYmoubmFtZSA9IG5hbWU7XG4gIH1cbiAgcmV0dXJuIGVkZ2VPYmo7XG59XG5cbmZ1bmN0aW9uIGVkZ2VPYmpUb0lkKGlzRGlyZWN0ZWQsIGVkZ2VPYmopIHtcbiAgcmV0dXJuIGVkZ2VBcmdzVG9JZChpc0RpcmVjdGVkLCBlZGdlT2JqLnYsIGVkZ2VPYmoudywgZWRnZU9iai5uYW1lKTtcbn1cbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXA7XG4iLCJ2YXIgbWFwQ2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX21hcENhY2hlQ2xlYXInKSxcbiAgICBtYXBDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX21hcENhY2hlRGVsZXRlJyksXG4gICAgbWFwQ2FjaGVHZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZUdldCcpLFxuICAgIG1hcENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVIYXMnKSxcbiAgICBtYXBDYWNoZVNldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RWFjaDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0xlbmd0aDtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vZGVVdGlsO1xuIiwidmFyIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5cycpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXM7XG4iLCJ2YXIgYXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheUZpbHRlcicpLFxuICAgIHN0dWJBcnJheSA9IHJlcXVpcmUoJy4vc3R1YkFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTeW1ib2xzO1xuIiwiLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5UHVzaDtcbiIsInZhciBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVBcnJheUJ1ZmZlcjtcbiIsIi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gZnJvbSB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnN0YW50O1xuIiwidmFyIGJhc2VGb3IgPSByZXF1aXJlKCcuL19iYXNlRm9yJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZvck93bjtcbiIsInZhciBjcmVhdGVCYXNlRm9yID0gcmVxdWlyZSgnLi9fY3JlYXRlQmFzZUZvcicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xudmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZvcjtcbiIsIi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VG9BcnJheTtcbiIsInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gIH1cbiAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXQ7XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXk7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNGbGF0dGVuYWJsZSA9IHJlcXVpcmUoJy4vX2lzRmxhdHRlbmFibGUnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZsYXR0ZW47XG4iLCJ2YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLm1heGAgYW5kIGBfLm1pbmAgd2hpY2ggYWNjZXB0cyBhXG4gKiBgY29tcGFyYXRvcmAgdG8gZGV0ZXJtaW5lIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIGN1cnJlbnQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAoY3VycmVudCA9PT0gY3VycmVudCAmJiAhaXNTeW1ib2woY3VycmVudCkpXG4gICAgICAgICAgOiBjb21wYXJhdG9yKGN1cnJlbnQsIGNvbXB1dGVkKVxuICAgICAgICApKSB7XG4gICAgICB2YXIgY29tcHV0ZWQgPSBjdXJyZW50LFxuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VFeHRyZW11bTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCJpbnZhcmlhbnRcIik7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHNwbGljZSA9IEFycmF5LnByb3RvdHlwZS5zcGxpY2U7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuZnVuY3Rpb24gdHlwZShvYmopIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopLnNsaWNlKDgsIC0xKTtcbn1cbnZhciBhc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIChmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBnZXRBbGxLZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0YXJnZXQ7XG59KTtcbnZhciBnZXRBbGxLZXlzID0gdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbidcbiAgICA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKSk7IH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gT2JqZWN0LmtleXMob2JqKTsgfTtcbmZ1bmN0aW9uIGNvcHkob2JqZWN0KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkob2JqZWN0KVxuICAgICAgICA/IGFzc2lnbihvYmplY3QuY29uc3RydWN0b3Iob2JqZWN0Lmxlbmd0aCksIG9iamVjdClcbiAgICAgICAgOiAodHlwZShvYmplY3QpID09PSAnTWFwJylcbiAgICAgICAgICAgID8gbmV3IE1hcChvYmplY3QpXG4gICAgICAgICAgICA6ICh0eXBlKG9iamVjdCkgPT09ICdTZXQnKVxuICAgICAgICAgICAgICAgID8gbmV3IFNldChvYmplY3QpXG4gICAgICAgICAgICAgICAgOiAob2JqZWN0ICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnKVxuICAgICAgICAgICAgICAgICAgICA/IGFzc2lnbihPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpKSwgb2JqZWN0KVxuICAgICAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgICAgICAgICA6IG9iamVjdDtcbn1cbnZhciBDb250ZXh0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnRleHQoKSB7XG4gICAgICAgIHRoaXMuY29tbWFuZHMgPSBhc3NpZ24oe30sIGRlZmF1bHRDb21tYW5kcyk7XG4gICAgICAgIHRoaXMudXBkYXRlID0gdGhpcy51cGRhdGUuYmluZCh0aGlzKTtcbiAgICAgICAgLy8gRGVwcmVjYXRlZDogdXBkYXRlLmV4dGVuZCwgdXBkYXRlLmlzRXF1YWxzIGFuZCB1cGRhdGUubmV3Q29udGV4dFxuICAgICAgICB0aGlzLnVwZGF0ZS5leHRlbmQgPSB0aGlzLmV4dGVuZCA9IHRoaXMuZXh0ZW5kLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlLmlzRXF1YWxzID0gZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuIHggPT09IHk7IH07XG4gICAgICAgIHRoaXMudXBkYXRlLm5ld0NvbnRleHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgQ29udGV4dCgpLnVwZGF0ZTsgfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnRleHQucHJvdG90eXBlLCBcImlzRXF1YWxzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy51cGRhdGUuaXNFcXVhbHM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZS5pc0VxdWFscyA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBDb250ZXh0LnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbiAoZGlyZWN0aXZlLCBmbikge1xuICAgICAgICB0aGlzLmNvbW1hbmRzW2RpcmVjdGl2ZV0gPSBmbjtcbiAgICB9O1xuICAgIENvbnRleHQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChvYmplY3QsICRzcGVjKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBzcGVjID0gKHR5cGVvZiAkc3BlYyA9PT0gJ2Z1bmN0aW9uJykgPyB7ICRhcHBseTogJHNwZWMgfSA6ICRzcGVjO1xuICAgICAgICBpZiAoIShBcnJheS5pc0FycmF5KG9iamVjdCkgJiYgQXJyYXkuaXNBcnJheShzcGVjKSkpIHtcbiAgICAgICAgICAgIGludmFyaWFudCghQXJyYXkuaXNBcnJheShzcGVjKSwgJ3VwZGF0ZSgpOiBZb3UgcHJvdmlkZWQgYW4gaW52YWxpZCBzcGVjIHRvIHVwZGF0ZSgpLiBUaGUgc3BlYyBtYXkgJyArXG4gICAgICAgICAgICAgICAgJ25vdCBjb250YWluIGFuIGFycmF5IGV4Y2VwdCBhcyB0aGUgdmFsdWUgb2YgJHNldCwgJHB1c2gsICR1bnNoaWZ0LCAnICtcbiAgICAgICAgICAgICAgICAnJHNwbGljZSBvciBhbnkgY3VzdG9tIGNvbW1hbmQgYWxsb3dpbmcgYW4gYXJyYXkgdmFsdWUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiBzcGVjID09PSAnb2JqZWN0JyAmJiBzcGVjICE9PSBudWxsLCAndXBkYXRlKCk6IFlvdSBwcm92aWRlZCBhbiBpbnZhbGlkIHNwZWMgdG8gdXBkYXRlKCkuIFRoZSBzcGVjIGFuZCAnICtcbiAgICAgICAgICAgICdldmVyeSBpbmNsdWRlZCBrZXkgcGF0aCBtdXN0IGJlIHBsYWluIG9iamVjdHMgY29udGFpbmluZyBvbmUgb2YgdGhlICcgK1xuICAgICAgICAgICAgJ2ZvbGxvd2luZyBjb21tYW5kczogJXMuJywgT2JqZWN0LmtleXModGhpcy5jb21tYW5kcykuam9pbignLCAnKSk7XG4gICAgICAgIHZhciBuZXh0T2JqZWN0ID0gb2JqZWN0O1xuICAgICAgICBnZXRBbGxLZXlzKHNwZWMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoX3RoaXMuY29tbWFuZHMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqZWN0V2FzTmV4dE9iamVjdCA9IG9iamVjdCA9PT0gbmV4dE9iamVjdDtcbiAgICAgICAgICAgICAgICBuZXh0T2JqZWN0ID0gX3RoaXMuY29tbWFuZHNba2V5XShzcGVjW2tleV0sIG5leHRPYmplY3QsIHNwZWMsIG9iamVjdCk7XG4gICAgICAgICAgICAgICAgaWYgKG9iamVjdFdhc05leHRPYmplY3QgJiYgX3RoaXMuaXNFcXVhbHMobmV4dE9iamVjdCwgb2JqZWN0KSkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0T2JqZWN0ID0gb2JqZWN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBuZXh0VmFsdWVGb3JLZXkgPSB0eXBlKG9iamVjdCkgPT09ICdNYXAnXG4gICAgICAgICAgICAgICAgICAgID8gX3RoaXMudXBkYXRlKG9iamVjdC5nZXQoa2V5KSwgc3BlY1trZXldKVxuICAgICAgICAgICAgICAgICAgICA6IF90aGlzLnVwZGF0ZShvYmplY3Rba2V5XSwgc3BlY1trZXldKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dE9iamVjdFZhbHVlID0gdHlwZShuZXh0T2JqZWN0KSA9PT0gJ01hcCdcbiAgICAgICAgICAgICAgICAgICAgPyBuZXh0T2JqZWN0LmdldChrZXkpXG4gICAgICAgICAgICAgICAgICAgIDogbmV4dE9iamVjdFtrZXldO1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuaXNFcXVhbHMobmV4dFZhbHVlRm9yS2V5LCBuZXh0T2JqZWN0VmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIHx8IHR5cGVvZiBuZXh0VmFsdWVGb3JLZXkgPT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRPYmplY3QgPT09IG9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE9iamVjdCA9IGNvcHkob2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZShuZXh0T2JqZWN0KSA9PT0gJ01hcCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRPYmplY3Quc2V0KGtleSwgbmV4dFZhbHVlRm9yS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRPYmplY3Rba2V5XSA9IG5leHRWYWx1ZUZvcktleTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXh0T2JqZWN0O1xuICAgIH07XG4gICAgcmV0dXJuIENvbnRleHQ7XG59KCkpO1xuZXhwb3J0cy5Db250ZXh0ID0gQ29udGV4dDtcbnZhciBkZWZhdWx0Q29tbWFuZHMgPSB7XG4gICAgJHB1c2g6IGZ1bmN0aW9uICh2YWx1ZSwgbmV4dE9iamVjdCwgc3BlYykge1xuICAgICAgICBpbnZhcmlhbnRQdXNoQW5kVW5zaGlmdChuZXh0T2JqZWN0LCBzcGVjLCAnJHB1c2gnKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA/IG5leHRPYmplY3QuY29uY2F0KHZhbHVlKSA6IG5leHRPYmplY3Q7XG4gICAgfSxcbiAgICAkdW5zaGlmdDogZnVuY3Rpb24gKHZhbHVlLCBuZXh0T2JqZWN0LCBzcGVjKSB7XG4gICAgICAgIGludmFyaWFudFB1c2hBbmRVbnNoaWZ0KG5leHRPYmplY3QsIHNwZWMsICckdW5zaGlmdCcpO1xuICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID8gdmFsdWUuY29uY2F0KG5leHRPYmplY3QpIDogbmV4dE9iamVjdDtcbiAgICB9LFxuICAgICRzcGxpY2U6IGZ1bmN0aW9uICh2YWx1ZSwgbmV4dE9iamVjdCwgc3BlYywgb3JpZ2luYWxPYmplY3QpIHtcbiAgICAgICAgaW52YXJpYW50U3BsaWNlcyhuZXh0T2JqZWN0LCBzcGVjKTtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgaW52YXJpYW50U3BsaWNlKGFyZ3MpO1xuICAgICAgICAgICAgaWYgKG5leHRPYmplY3QgPT09IG9yaWdpbmFsT2JqZWN0ICYmIGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbmV4dE9iamVjdCA9IGNvcHkob3JpZ2luYWxPYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3BsaWNlLmFwcGx5KG5leHRPYmplY3QsIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5leHRPYmplY3Q7XG4gICAgfSxcbiAgICAkc2V0OiBmdW5jdGlvbiAodmFsdWUsIF9uZXh0T2JqZWN0LCBzcGVjKSB7XG4gICAgICAgIGludmFyaWFudFNldChzcGVjKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgJHRvZ2dsZTogZnVuY3Rpb24gKHRhcmdldHMsIG5leHRPYmplY3QpIHtcbiAgICAgICAgaW52YXJpYW50U3BlY0FycmF5KHRhcmdldHMsICckdG9nZ2xlJyk7XG4gICAgICAgIHZhciBuZXh0T2JqZWN0Q29weSA9IHRhcmdldHMubGVuZ3RoID8gY29weShuZXh0T2JqZWN0KSA6IG5leHRPYmplY3Q7XG4gICAgICAgIHRhcmdldHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgICBuZXh0T2JqZWN0Q29weVt0YXJnZXRdID0gIW5leHRPYmplY3RbdGFyZ2V0XTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXh0T2JqZWN0Q29weTtcbiAgICB9LFxuICAgICR1bnNldDogZnVuY3Rpb24gKHZhbHVlLCBuZXh0T2JqZWN0LCBfc3BlYywgb3JpZ2luYWxPYmplY3QpIHtcbiAgICAgICAgaW52YXJpYW50U3BlY0FycmF5KHZhbHVlLCAnJHVuc2V0Jyk7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5leHRPYmplY3QsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV4dE9iamVjdCA9PT0gb3JpZ2luYWxPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dE9iamVjdCA9IGNvcHkob3JpZ2luYWxPYmplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWxldGUgbmV4dE9iamVjdFtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5leHRPYmplY3Q7XG4gICAgfSxcbiAgICAkYWRkOiBmdW5jdGlvbiAodmFsdWVzLCBuZXh0T2JqZWN0LCBfc3BlYywgb3JpZ2luYWxPYmplY3QpIHtcbiAgICAgICAgaW52YXJpYW50TWFwT3JTZXQobmV4dE9iamVjdCwgJyRhZGQnKTtcbiAgICAgICAgaW52YXJpYW50U3BlY0FycmF5KHZhbHVlcywgJyRhZGQnKTtcbiAgICAgICAgaWYgKHR5cGUobmV4dE9iamVjdCkgPT09ICdNYXAnKSB7XG4gICAgICAgICAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gX2FbMF0sIHZhbHVlID0gX2FbMV07XG4gICAgICAgICAgICAgICAgaWYgKG5leHRPYmplY3QgPT09IG9yaWdpbmFsT2JqZWN0ICYmIG5leHRPYmplY3QuZ2V0KGtleSkgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRPYmplY3QgPSBjb3B5KG9yaWdpbmFsT2JqZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dE9iamVjdC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXh0T2JqZWN0ID09PSBvcmlnaW5hbE9iamVjdCAmJiAhbmV4dE9iamVjdC5oYXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRPYmplY3QgPSBjb3B5KG9yaWdpbmFsT2JqZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dE9iamVjdC5hZGQodmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHRPYmplY3Q7XG4gICAgfSxcbiAgICAkcmVtb3ZlOiBmdW5jdGlvbiAodmFsdWUsIG5leHRPYmplY3QsIF9zcGVjLCBvcmlnaW5hbE9iamVjdCkge1xuICAgICAgICBpbnZhcmlhbnRNYXBPclNldChuZXh0T2JqZWN0LCAnJHJlbW92ZScpO1xuICAgICAgICBpbnZhcmlhbnRTcGVjQXJyYXkodmFsdWUsICckcmVtb3ZlJyk7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKG5leHRPYmplY3QgPT09IG9yaWdpbmFsT2JqZWN0ICYmIG5leHRPYmplY3QuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBuZXh0T2JqZWN0ID0gY29weShvcmlnaW5hbE9iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0T2JqZWN0LmRlbGV0ZShrZXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5leHRPYmplY3Q7XG4gICAgfSxcbiAgICAkbWVyZ2U6IGZ1bmN0aW9uICh2YWx1ZSwgbmV4dE9iamVjdCwgX3NwZWMsIG9yaWdpbmFsT2JqZWN0KSB7XG4gICAgICAgIGludmFyaWFudE1lcmdlKG5leHRPYmplY3QsIHZhbHVlKTtcbiAgICAgICAgZ2V0QWxsS2V5cyh2YWx1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAodmFsdWVba2V5XSAhPT0gbmV4dE9iamVjdFtrZXldKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5leHRPYmplY3QgPT09IG9yaWdpbmFsT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRPYmplY3QgPSBjb3B5KG9yaWdpbmFsT2JqZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dE9iamVjdFtrZXldID0gdmFsdWVba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXh0T2JqZWN0O1xuICAgIH0sXG4gICAgJGFwcGx5OiBmdW5jdGlvbiAodmFsdWUsIG9yaWdpbmFsKSB7XG4gICAgICAgIGludmFyaWFudEFwcGx5KHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlKG9yaWdpbmFsKTtcbiAgICB9LFxufTtcbnZhciBkZWZhdWx0Q29udGV4dCA9IG5ldyBDb250ZXh0KCk7XG5leHBvcnRzLmlzRXF1YWxzID0gZGVmYXVsdENvbnRleHQudXBkYXRlLmlzRXF1YWxzO1xuZXhwb3J0cy5leHRlbmQgPSBkZWZhdWx0Q29udGV4dC5leHRlbmQ7XG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0Q29udGV4dC51cGRhdGU7XG4vLyBAdHMtaWdub3JlXG5leHBvcnRzLmRlZmF1bHQuZGVmYXVsdCA9IG1vZHVsZS5leHBvcnRzID0gYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4vLyBpbnZhcmlhbnRzXG5mdW5jdGlvbiBpbnZhcmlhbnRQdXNoQW5kVW5zaGlmdCh2YWx1ZSwgc3BlYywgY29tbWFuZCkge1xuICAgIGludmFyaWFudChBcnJheS5pc0FycmF5KHZhbHVlKSwgJ3VwZGF0ZSgpOiBleHBlY3RlZCB0YXJnZXQgb2YgJXMgdG8gYmUgYW4gYXJyYXk7IGdvdCAlcy4nLCBjb21tYW5kLCB2YWx1ZSk7XG4gICAgaW52YXJpYW50U3BlY0FycmF5KHNwZWNbY29tbWFuZF0sIGNvbW1hbmQpO1xufVxuZnVuY3Rpb24gaW52YXJpYW50U3BlY0FycmF5KHNwZWMsIGNvbW1hbmQpIHtcbiAgICBpbnZhcmlhbnQoQXJyYXkuaXNBcnJheShzcGVjKSwgJ3VwZGF0ZSgpOiBleHBlY3RlZCBzcGVjIG9mICVzIHRvIGJlIGFuIGFycmF5OyBnb3QgJXMuICcgK1xuICAgICAgICAnRGlkIHlvdSBmb3JnZXQgdG8gd3JhcCB5b3VyIHBhcmFtZXRlciBpbiBhbiBhcnJheT8nLCBjb21tYW5kLCBzcGVjKTtcbn1cbmZ1bmN0aW9uIGludmFyaWFudFNwbGljZXModmFsdWUsIHNwZWMpIHtcbiAgICBpbnZhcmlhbnQoQXJyYXkuaXNBcnJheSh2YWx1ZSksICdFeHBlY3RlZCAkc3BsaWNlIHRhcmdldCB0byBiZSBhbiBhcnJheTsgZ290ICVzJywgdmFsdWUpO1xuICAgIGludmFyaWFudFNwbGljZShzcGVjLiRzcGxpY2UpO1xufVxuZnVuY3Rpb24gaW52YXJpYW50U3BsaWNlKHZhbHVlKSB7XG4gICAgaW52YXJpYW50KEFycmF5LmlzQXJyYXkodmFsdWUpLCAndXBkYXRlKCk6IGV4cGVjdGVkIHNwZWMgb2YgJHNwbGljZSB0byBiZSBhbiBhcnJheSBvZiBhcnJheXM7IGdvdCAlcy4gJyArXG4gICAgICAgICdEaWQgeW91IGZvcmdldCB0byB3cmFwIHlvdXIgcGFyYW1ldGVycyBpbiBhbiBhcnJheT8nLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBpbnZhcmlhbnRBcHBseShmbikge1xuICAgIGludmFyaWFudCh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicsICd1cGRhdGUoKTogZXhwZWN0ZWQgc3BlYyBvZiAkYXBwbHkgdG8gYmUgYSBmdW5jdGlvbjsgZ290ICVzLicsIGZuKTtcbn1cbmZ1bmN0aW9uIGludmFyaWFudFNldChzcGVjKSB7XG4gICAgaW52YXJpYW50KE9iamVjdC5rZXlzKHNwZWMpLmxlbmd0aCA9PT0gMSwgJ0Nhbm5vdCBoYXZlIG1vcmUgdGhhbiBvbmUga2V5IGluIGFuIG9iamVjdCB3aXRoICRzZXQnKTtcbn1cbmZ1bmN0aW9uIGludmFyaWFudE1lcmdlKHRhcmdldCwgc3BlY1ZhbHVlKSB7XG4gICAgaW52YXJpYW50KHNwZWNWYWx1ZSAmJiB0eXBlb2Ygc3BlY1ZhbHVlID09PSAnb2JqZWN0JywgJ3VwZGF0ZSgpOiAkbWVyZ2UgZXhwZWN0cyBhIHNwZWMgb2YgdHlwZSBcXCdvYmplY3RcXCc7IGdvdCAlcycsIHNwZWNWYWx1ZSk7XG4gICAgaW52YXJpYW50KHRhcmdldCAmJiB0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0JywgJ3VwZGF0ZSgpOiAkbWVyZ2UgZXhwZWN0cyBhIHRhcmdldCBvZiB0eXBlIFxcJ29iamVjdFxcJzsgZ290ICVzJywgdGFyZ2V0KTtcbn1cbmZ1bmN0aW9uIGludmFyaWFudE1hcE9yU2V0KHRhcmdldCwgY29tbWFuZCkge1xuICAgIHZhciB0eXBlT2ZUYXJnZXQgPSB0eXBlKHRhcmdldCk7XG4gICAgaW52YXJpYW50KHR5cGVPZlRhcmdldCA9PT0gJ01hcCcgfHwgdHlwZU9mVGFyZ2V0ID09PSAnU2V0JywgJ3VwZGF0ZSgpOiAlcyBleHBlY3RzIGEgdGFyZ2V0IG9mIHR5cGUgU2V0IG9yIE1hcDsgZ290ICVzJywgY29tbWFuZCwgdHlwZU9mVGFyZ2V0KTtcbn1cbiIsImltcG9ydCB7IE9ic2VydmFibGUsIGNvbWJpbmVMYXRlc3QsIG9mIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IE5vZGUsIE5vZGVMYXlvdXQsIElucHV0SW5mbywgT3V0cHV0SW5mbywgSU8gfSBmcm9tICcuL05vZGUnO1xuaW1wb3J0IHsgRWRnZSwgRWRnZUxheW91dCB9IGZyb20gJy4vRWRnZSc7XG5pbXBvcnQgZGFncmUgPSByZXF1aXJlKCdkYWdyZScpO1xuaW1wb3J0IHsgc3dpdGNoTWFwLCBtYXAgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBMYXlvdXQge1xuICAgIG5vZGVzOiB7XG4gICAgICAgIFtpZDogc3RyaW5nXTogTm9kZUxheW91dFxuICAgIH0sXG4gICAgZWRnZXM6IHtcbiAgICAgICAgW2lkOiBzdHJpbmddOiBFZGdlTGF5b3V0XG4gICAgfVxufVxuXG5jb25zdCBzdWJub2RlV2lkdGggPSAgNTA7XG5jb25zdCBzdWJub2RlSGVpZ2h0ID0gIDUwO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvcElEKHBhcmVudElEOiBzdHJpbmcsIGNoaWxkTmFtZTogc3RyaW5nLCBpbzogSU8pOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHtwYXJlbnRJRH0uJHtpbyA9PT0gSU8uSW5wdXQgPyAnaW4nIDogJ291dCcgfS4ke2NoaWxkTmFtZX1gXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMYXlvdXRTdHJlYW0obm9kZXNTdHJlYW06IE9ic2VydmFibGU8Tm9kZVtdPiwgZWRnZXNTdHJlYW06IE9ic2VydmFibGU8RWRnZVtdPik6IE9ic2VydmFibGU8TGF5b3V0PiB7XG4gICAgY29uc3Qgbm9kZUdyYXBoOiBkYWdyZS5ncmFwaGxpYi5HcmFwaCA9IG5ldyBkYWdyZS5ncmFwaGxpYi5HcmFwaCh7IG11bHRpZ3JhcGg6IHRydWUsIGNvbXBvdW5kOiB0cnVlIH0pO1xuXG4gICAgbm9kZUdyYXBoLnNldEdyYXBoKHsgcmFua2RpcjogJ0xSJyB9KTtcbiAgICBub2RlR3JhcGguc2V0RGVmYXVsdEVkZ2VMYWJlbCgoKSA9PiAoe30pKTtcbiAgICBjb25zdCBub2Rlc0FuZElPU3Vibm9kZXMgPSBub2Rlc1N0cmVhbS5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAoKG5vZGVzOiBOb2RlW10pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KC4uLm5vZGVzLm1hcCgobm9kZTogTm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KG9mKG5vZGUpLCBub2RlLmdldElucHV0SW5mb1N0cmVhbSgpLCBub2RlLmdldE91dHB1dEluZm9TdHJlYW0oKSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pLFxuICAgIClcblxuICAgIG5vZGVzQW5kSU9TdWJub2Rlcy5zdWJzY3JpYmUoKGluZm9zOiBbTm9kZSwgSW5wdXRJbmZvW10sIE91dHB1dEluZm9bXV1bXSkgPT4ge1xuICAgICAgICBjb25zdCBkZXNpcmVkTmFtZXMgPSBbXTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdOYW1lcyA9IG5vZGVHcmFwaC5ub2RlcygpLm1hcCgobmlkOiBzdHJpbmcpID0+IG5vZGVHcmFwaC5ub2RlKG5pZCkuaWQgKTtcblxuICAgICAgICBpbmZvcy5mb3JFYWNoKChbbm9kZSwgaW5wdXRzLCBvdXRwdXRzXTogW05vZGUsIElucHV0SW5mb1tdLCBPdXRwdXRJbmZvW11dKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub2RlSUQgPSBub2RlLmdldElEKCk7XG4gICAgICAgICAgICBkZXNpcmVkTmFtZXMucHVzaChub2RlSUQpO1xuXG4gICAgICAgICAgICBpZighbm9kZUdyYXBoLmhhc05vZGUobm9kZUlEKSkge1xuICAgICAgICAgICAgICAgIG5vZGVHcmFwaC5zZXROb2RlKG5vZGVJRCwgeyBpZDogbm9kZUlEIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaW5wdXRzX291dHB1dHMgPSBbLi4uaW5wdXRzLm1hcCgoaSkgPT4gKHsgaW86IGksIGlzSW5wdXQ6IElPLklucHV0fSkpLCAuLi5vdXRwdXRzLm1hcCgobykgPT4gKHsgaW86IG8sIGlzSW5wdXQ6IElPLk91dHB1dCB9KSkgXTtcblxuICAgICAgICAgICAgaW5wdXRzX291dHB1dHMuZm9yRWFjaCgoe2lvLCBpc0lucHV0fSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BJRCA9IGdldFByb3BJRChub2RlSUQsIGlvLm5hbWUsIGlzSW5wdXQpXG4gICAgICAgICAgICAgICAgZGVzaXJlZE5hbWVzLnB1c2gocHJvcElEKTtcbiAgICAgICAgICAgICAgICBpZighbm9kZUdyYXBoLmhhc05vZGUocHJvcElEKSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlR3JhcGguc2V0Tm9kZShwcm9wSUQsIHsgaWQ6IHByb3BJRCwgcHJvcE5hbWU6IGlvLm5hbWUsIHBhcmVudElEOiBub2RlSUQsIGlzSW5wdXQsIHdpZHRoOiBzdWJub2RlV2lkdGgsIGhlaWdodDogc3Vibm9kZUhlaWdodCB9KTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZUdyYXBoLnNldFBhcmVudChwcm9wSUQsIG5vZGVJRCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IG5hbWVzVGhhdFNob3VsZG50QmVUaGVyZSA9IGRpZmZlcmVuY2UoZXhpc3RpbmdOYW1lcywgZGVzaXJlZE5hbWVzKTtcbiAgICAgICAgbmFtZXNUaGF0U2hvdWxkbnRCZVRoZXJlLmZvckVhY2goKHByb3ApID0+IHtcbiAgICAgICAgICAgIG5vZGVHcmFwaC5yZW1vdmVOb2RlKHByb3ApO1xuICAgICAgICB9KVxuICAgIH0pO1xuXG4gICAgZWRnZXNTdHJlYW0uc3Vic2NyaWJlKChlZGdlczogRWRnZVtdKSA9PiB7XG4gICAgICAgIGNvbnN0IGdyYXBoRWRnZXMgPSBub2RlR3JhcGguZWRnZXMoKTtcbiAgICAgICAgY29uc3QgZGVzaXJlZEVkZ2VJRHMgPSBbXTtcbiAgICAgICAgZWRnZXMuZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWlkID0gZS5nZXRJRCgpO1xuICAgICAgICAgICAgZGVzaXJlZEVkZ2VJRHMucHVzaChlaWQpO1xuXG4gICAgICAgICAgICBpZihncmFwaEVkZ2VzLmZpbmRJbmRleCgoZ2UpID0+IGdlLm5hbWUgPT09IGVpZCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZnJvbSA9IGUuZ2V0RnJvbSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvID0gZS5nZXRUbygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHYgPSBnZXRQcm9wSUQoZnJvbS5ub2RlLmdldElEKCksIGZyb20ucHJvcCwgSU8uT3V0cHV0KTtcbiAgICAgICAgICAgICAgICBjb25zdCB3ID0gZ2V0UHJvcElEKHRvLm5vZGUuZ2V0SUQoKSwgdG8ucHJvcCwgSU8uSW5wdXQpO1xuICAgICAgICAgICAgICAgIG5vZGVHcmFwaC5zZXRFZGdlKHsgdiwgdywgbmFtZTogZWlkfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBncmFwaEVkZ2VzLmZvckVhY2goKGVkZ2UsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZihkZXNpcmVkRWRnZUlEcy5pbmRleE9mKGVkZ2UubmFtZSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWRnZSA9IGdyYXBoRWRnZXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIChub2RlR3JhcGgucmVtb3ZlRWRnZSBhcyBhbnkpKGVkZ2UudiwgZWRnZS53LCBlZGdlLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBcbiAgICBjb25zdCBsYXlvdXRTdHJlYW0gPSBjb21iaW5lTGF0ZXN0KG5vZGVzU3RyZWFtLCBlZGdlc1N0cmVhbSkucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKChbbm9kZXNdOiBbTm9kZVtdLCBFZGdlW11dKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY29tYmluZUxhdGVzdCguLi5ub2Rlcy5tYXAoKG5vZGU6IE5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpb0luZm9TdHJlYW0gPSBjb21iaW5lTGF0ZXN0KG9mKG5vZGUpLCBub2RlLmdldElucHV0SW5mb1N0cmVhbSgpLCBub2RlLmdldE91dHB1dEluZm9TdHJlYW0oKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlvSW5mb1N0cmVhbTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSksXG4gICAgICAgIG1hcCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsYXlvdXQ6IExheW91dCA9IHtcbiAgICAgICAgICAgICAgICBub2Rlczoge30sXG4gICAgICAgICAgICAgICAgZWRnZXM6IHt9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGFncmUubGF5b3V0KG5vZGVHcmFwaCk7XG5cbiAgICAgICAgICAgIG5vZGVHcmFwaC5ub2RlcygpLmZvckVhY2goKG5vZGVJRCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IG5vZGVHcmFwaC5wYXJlbnQobm9kZUlEKTtcbiAgICAgICAgICAgICAgICBpZihwYXJlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gbm9kZUdyYXBoLm5vZGUobm9kZUlEKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBpZCB9ID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0Lm5vZGVzW2lkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IG5vZGUueCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IG5vZGUueSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBub2RlLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBub2RlLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0czoge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRzOiB7fVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbm9kZUdyYXBoLm5vZGVzKCkuZm9yRWFjaCgobm9kZUlEKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gbm9kZUdyYXBoLnBhcmVudChub2RlSUQpO1xuICAgICAgICAgICAgICAgIGlmKHBhcmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBub2RlR3JhcGgubm9kZShub2RlSUQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHBhcmVudElELCBpc0lucHV0LCBwcm9wTmFtZSB9ID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5vdXRuYW1lID0gaXNJbnB1dD09PUlPLklucHV0ID8gJ2lucHV0cycgOiAnb3V0cHV0cyc7XG4gICAgICAgICAgICAgICAgICAgIGxheW91dC5ub2Rlc1twYXJlbnRJRF1baW5vdXRuYW1lXVtwcm9wTmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBub2RlLngsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBub2RlLnksXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogbm9kZS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogbm9kZS5oZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbm9kZUdyYXBoLmVkZ2VzKCkuZm9yRWFjaCgoZWRnZUlEKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWRnZSA9IG5vZGVHcmFwaC5lZGdlKGVkZ2VJRCk7XG4gICAgICAgICAgICAgICAgbGF5b3V0LmVkZ2VzW2VkZ2VJRC5uYW1lXSA9IHsgcG9pbnRzOiBlZGdlLnBvaW50cyB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbGF5b3V0O1xuICAgICAgICB9KSxcbiAgICAgICAgLy8gZGVib3VuY2VUaW1lKDEwMClcbiAgICApO1xuICAgIHJldHVybiAgbGF5b3V0U3RyZWFtO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlmZmVyZW5jZShhcnIxOiBhbnlbXSwgYXJyMjogYW55W10pOiBhbnlbXSB7XG4gICAgY29uc3QgZGlmZiA9IG5ldyBTZXQoYXJyMSk7XG4gICAgYXJyMi5mb3JFYWNoKChpKSA9PiB7IGRpZmYuZGVsZXRlKGkpIH0pO1xuICAgIHJldHVybiBBcnJheS5mcm9tKGRpZmYpO1xufSIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYXJyYXlFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXlFYWNoJyksXG4gICAgYXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25WYWx1ZScpLFxuICAgIGJhc2VBc3NpZ24gPSByZXF1aXJlKCcuL19iYXNlQXNzaWduJyksXG4gICAgYmFzZUFzc2lnbkluID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnbkluJyksXG4gICAgY2xvbmVCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUJ1ZmZlcicpLFxuICAgIGNvcHlBcnJheSA9IHJlcXVpcmUoJy4vX2NvcHlBcnJheScpLFxuICAgIGNvcHlTeW1ib2xzID0gcmVxdWlyZSgnLi9fY29weVN5bWJvbHMnKSxcbiAgICBjb3B5U3ltYm9sc0luID0gcmVxdWlyZSgnLi9fY29weVN5bWJvbHNJbicpLFxuICAgIGdldEFsbEtleXMgPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzJyksXG4gICAgZ2V0QWxsS2V5c0luID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5c0luJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaW5pdENsb25lQXJyYXkgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVBcnJheScpLFxuICAgIGluaXRDbG9uZUJ5VGFnID0gcmVxdWlyZSgnLi9faW5pdENsb25lQnlUYWcnKSxcbiAgICBpbml0Q2xvbmVPYmplY3QgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVPYmplY3QnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNNYXAgPSByZXF1aXJlKCcuL2lzTWFwJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTZXQgPSByZXF1aXJlKCcuL2lzU2V0JyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG52YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbmNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbmNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG5jbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gRGVlcCBjbG9uZVxuICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gKiAgNCAtIENsb25lIHN5bWJvbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gIHZhciByZXN1bHQsXG4gICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gIH1cbiAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgaWYgKGlzQXJyKSB7XG4gICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgIGlmICghaXNEZWVwKSB7XG4gICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICB9XG4gICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgaWYgKHN0YWNrZWQpIHtcbiAgICByZXR1cm4gc3RhY2tlZDtcbiAgfVxuICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQ2xvbmU7XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Tb3VyY2U7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnR5O1xuIiwidmFyIGJhc2VUaW1lcyA9IHJlcXVpcmUoJy4vX2Jhc2VUaW1lcycpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICApKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUxpa2VLZXlzO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlckFyZztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgaWYgKGlzRGVlcCkge1xuICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lQnVmZmVyO1xuIiwiLyoqXG4gKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weUFycmF5O1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RmlsdGVyO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViQXJyYXk7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKSxcbiAgICBzdHViQXJyYXkgPSByZXF1aXJlKCcuL3N0dWJBcnJheScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHdoaWxlIChvYmplY3QpIHtcbiAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHNJbjtcbiIsInZhciBiYXNlR2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRBbGxLZXlzJyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWxsS2V5cztcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0QWxsS2V5cztcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgU2V0ID0gZ2V0TmF0aXZlKHJvb3QsICdTZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZXQ7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBVaW50OEFycmF5O1xuIiwidmFyIGNsb25lQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUFycmF5QnVmZmVyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVUeXBlZEFycmF5O1xuIiwidmFyIGJhc2VDcmVhdGUgPSByZXF1aXJlKCcuL19iYXNlQ3JlYXRlJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgIDoge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdENsb25lT2JqZWN0O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG52YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgfVxuICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VDcmVhdGU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZm9yRWFjaCcpO1xuIiwidmFyIGFycmF5RWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5RWFjaCcpLFxuICAgIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKSxcbiAgICBjYXN0RnVuY3Rpb24gPSByZXF1aXJlKCcuL19jYXN0RnVuY3Rpb24nKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIlxuICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGFsaWFzIGVhY2hcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICogQHNlZSBfLmZvckVhY2hSaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmZvckVhY2goWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgYDFgIHRoZW4gYDJgLlxuICpcbiAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAqICAgY29uc29sZS5sb2coa2V5KTtcbiAqIH0pO1xuICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGNhc3RGdW5jdGlvbihpdGVyYXRlZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvckVhY2g7XG4iLCJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdEZ1bmN0aW9uO1xuIiwidmFyIGFycmF5RmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXlGaWx0ZXInKSxcbiAgICBiYXNlRmlsdGVyID0gcmVxdWlyZSgnLi9fYmFzZUZpbHRlcicpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50c1xuICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKlxuICogKipOb3RlOioqIFVubGlrZSBgXy5yZW1vdmVgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqIEBzZWUgXy5yZWplY3RcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gKiBdO1xuICpcbiAqIF8uZmlsdGVyKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maWx0ZXIodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmlsdGVyKHVzZXJzLCAnYWN0aXZlJyk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gKi9cbmZ1bmN0aW9uIGZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBiYXNlSXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmlsdGVyO1xuIiwidmFyIGJhc2VJc0VxdWFsRGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsRGVlcCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsO1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheVNvbWUgPSByZXF1aXJlKCcuL19hcnJheVNvbWUnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmIChzZWVuKSB7XG4gICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxBcnJheXM7XG4iLCJ2YXIgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpLFxuICAgIHNldENhY2hlQWRkID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVBZGQnKSxcbiAgICBzZXRDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX3NldENhY2hlSGFzJyk7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG5TZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcblNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxubW9kdWxlLmV4cG9ydHMgPSBTZXRDYWNoZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhY2hlSGFzO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpY3RDb21wYXJhYmxlO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlO1xuIiwidmFyIGJhc2VUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VUb1N0cmluZycpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9TdHJpbmc7XG4iLCJ2YXIgYmFzZUhhc0luID0gcmVxdWlyZSgnLi9fYmFzZUhhc0luJyksXG4gICAgaGFzUGF0aCA9IHJlcXVpcmUoJy4vX2hhc1BhdGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0luO1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBmYWxzZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gIH1cbiAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1BhdGg7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eTtcbiIsInZhciBiYXNlSGFzID0gcmVxdWlyZSgnLi9fYmFzZUhhcycpLFxuICAgIGhhc1BhdGggPSByZXF1aXJlKCcuL19oYXNQYXRoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IDIgfSB9O1xuICogdmFyIG90aGVyID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICpcbiAqIF8uaGFzKG9iamVjdCwgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhcyhvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJ10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzKG90aGVyLCAnYScpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhcztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1VuZGVmaW5lZCh2b2lkIDApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNVbmRlZmluZWQobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1VuZGVmaW5lZDtcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZU1hcCA9IHJlcXVpcmUoJy4vX2Jhc2VNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gKlxuICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gKiBgc2FtcGxlU2l6ZWAsIGBzbGljZWAsIGBzb21lYCwgYHNvcnRCeWAsIGBzcGxpdGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICogICByZXR1cm4gbiAqIG47XG4gKiB9XG4gKlxuICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICogLy8gPT4gWzE2LCA2NF1cbiAqXG4gKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICogXTtcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gKi9cbmZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcDtcbiIsInZhciBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hcDtcbiIsInZhciBhcnJheVJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5UmVkdWNlJyksXG4gICAgYmFzZUVhY2ggPSByZXF1aXJlKCcuL19iYXNlRWFjaCcpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VSZWR1Y2UgPSByZXF1aXJlKCcuL19iYXNlUmVkdWNlJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gKiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYCwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gKiB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czpcbiAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKlxuICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICpcbiAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgb3JkZXJCeWAsXG4gKiBhbmQgYHNvcnRCeWBcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gKiBAc2VlIF8ucmVkdWNlUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogXy5yZWR1Y2UoWzEsIDJdLCBmdW5jdGlvbihzdW0sIG4pIHtcbiAqICAgcmV0dXJuIHN1bSArIG47XG4gKiB9LCAwKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gKiAgIHJldHVybiByZXN1bHQ7XG4gKiB9LCB7fSk7XG4gKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2UgOiBiYXNlUmVkdWNlLFxuICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgYmFzZUl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2gpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlZHVjZTtcbiIsInZhciBhcHBseSA9IHJlcXVpcmUoJy4vX2FwcGx5Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgIH1cbiAgICBpbmRleCA9IC0xO1xuICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICB9XG4gICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlclJlc3Q7XG4iLCJ2YXIgYmFzZVNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVNldFRvU3RyaW5nJyksXG4gICAgc2hvcnRPdXQgPSByZXF1aXJlKCcuL19zaG9ydE91dCcpO1xuXG4vKipcbiAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZpbmRJbmRleDtcbiIsInZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAqIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2VPYmplY3Q7XG4iLCJ2YXIgYmFzZVZhbHVlcyA9IHJlcXVpcmUoJy4vX2Jhc2VWYWx1ZXMnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy52YWx1ZXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLnZhbHVlcygnaGknKTtcbiAqIC8vID0+IFsnaCcsICdpJ11cbiAqL1xuZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZhbHVlcztcbiIsInZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKSxcbiAgICBQcmlvcml0eVF1ZXVlID0gcmVxdWlyZShcIi4uL2RhdGEvcHJpb3JpdHktcXVldWVcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZGlqa3N0cmE7XG5cbnZhciBERUZBVUxUX1dFSUdIVF9GVU5DID0gXy5jb25zdGFudCgxKTtcblxuZnVuY3Rpb24gZGlqa3N0cmEoZywgc291cmNlLCB3ZWlnaHRGbiwgZWRnZUZuKSB7XG4gIHJldHVybiBydW5EaWprc3RyYShnLCBTdHJpbmcoc291cmNlKSxcbiAgICAgICAgICAgICAgICAgICAgIHdlaWdodEZuIHx8IERFRkFVTFRfV0VJR0hUX0ZVTkMsXG4gICAgICAgICAgICAgICAgICAgICBlZGdlRm4gfHwgZnVuY3Rpb24odikgeyByZXR1cm4gZy5vdXRFZGdlcyh2KTsgfSk7XG59XG5cbmZ1bmN0aW9uIHJ1bkRpamtzdHJhKGcsIHNvdXJjZSwgd2VpZ2h0Rm4sIGVkZ2VGbikge1xuICB2YXIgcmVzdWx0cyA9IHt9LFxuICAgICAgcHEgPSBuZXcgUHJpb3JpdHlRdWV1ZSgpLFxuICAgICAgdiwgdkVudHJ5O1xuXG4gIHZhciB1cGRhdGVOZWlnaGJvcnMgPSBmdW5jdGlvbihlZGdlKSB7XG4gICAgdmFyIHcgPSBlZGdlLnYgIT09IHYgPyBlZGdlLnYgOiBlZGdlLncsXG4gICAgICAgIHdFbnRyeSA9IHJlc3VsdHNbd10sXG4gICAgICAgIHdlaWdodCA9IHdlaWdodEZuKGVkZ2UpLFxuICAgICAgICBkaXN0YW5jZSA9IHZFbnRyeS5kaXN0YW5jZSArIHdlaWdodDtcblxuICAgIGlmICh3ZWlnaHQgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkaWprc3RyYSBkb2VzIG5vdCBhbGxvdyBuZWdhdGl2ZSBlZGdlIHdlaWdodHMuIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICBcIkJhZCBlZGdlOiBcIiArIGVkZ2UgKyBcIiBXZWlnaHQ6IFwiICsgd2VpZ2h0KTtcbiAgICB9XG5cbiAgICBpZiAoZGlzdGFuY2UgPCB3RW50cnkuZGlzdGFuY2UpIHtcbiAgICAgIHdFbnRyeS5kaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgd0VudHJ5LnByZWRlY2Vzc29yID0gdjtcbiAgICAgIHBxLmRlY3JlYXNlKHcsIGRpc3RhbmNlKTtcbiAgICB9XG4gIH07XG5cbiAgZy5ub2RlcygpLmZvckVhY2goZnVuY3Rpb24odikge1xuICAgIHZhciBkaXN0YW5jZSA9IHYgPT09IHNvdXJjZSA/IDAgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgcmVzdWx0c1t2XSA9IHsgZGlzdGFuY2U6IGRpc3RhbmNlIH07XG4gICAgcHEuYWRkKHYsIGRpc3RhbmNlKTtcbiAgfSk7XG5cbiAgd2hpbGUgKHBxLnNpemUoKSA+IDApIHtcbiAgICB2ID0gcHEucmVtb3ZlTWluKCk7XG4gICAgdkVudHJ5ID0gcmVzdWx0c1t2XTtcbiAgICBpZiAodkVudHJ5LmRpc3RhbmNlID09PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGVkZ2VGbih2KS5mb3JFYWNoKHVwZGF0ZU5laWdoYm9ycyk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0cztcbn1cbiIsInZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcmlvcml0eVF1ZXVlO1xuXG4vKipcbiAqIEEgbWluLXByaW9yaXR5IHF1ZXVlIGRhdGEgc3RydWN0dXJlLiBUaGlzIGFsZ29yaXRobSBpcyBkZXJpdmVkIGZyb20gQ29ybWVuLFxuICogZXQgYWwuLCBcIkludHJvZHVjdGlvbiB0byBBbGdvcml0aG1zXCIuIFRoZSBiYXNpYyBpZGVhIG9mIGEgbWluLXByaW9yaXR5XG4gKiBxdWV1ZSBpcyB0aGF0IHlvdSBjYW4gZWZmaWNpZW50bHkgKGluIE8oMSkgdGltZSkgZ2V0IHRoZSBzbWFsbGVzdCBrZXkgaW5cbiAqIHRoZSBxdWV1ZS4gQWRkaW5nIGFuZCByZW1vdmluZyBlbGVtZW50cyB0YWtlcyBPKGxvZyBuKSB0aW1lLiBBIGtleSBjYW5cbiAqIGhhdmUgaXRzIHByaW9yaXR5IGRlY3JlYXNlZCBpbiBPKGxvZyBuKSB0aW1lLlxuICovXG5mdW5jdGlvbiBQcmlvcml0eVF1ZXVlKCkge1xuICB0aGlzLl9hcnIgPSBbXTtcbiAgdGhpcy5fa2V5SW5kaWNlcyA9IHt9O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgcXVldWUuIFRha2VzIGBPKDEpYCB0aW1lLlxuICovXG5Qcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9hcnIubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBrZXlzIHRoYXQgYXJlIGluIHRoZSBxdWV1ZS4gVGFrZXMgYE8obilgIHRpbWUuXG4gKi9cblByaW9yaXR5UXVldWUucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2Fyci5tYXAoZnVuY3Rpb24oeCkgeyByZXR1cm4geC5rZXk7IH0pO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiAqKmtleSoqIGlzIGluIHRoZSBxdWV1ZSBhbmQgYGZhbHNlYCBpZiBub3QuXG4gKi9cblByaW9yaXR5UXVldWUucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGtleSkge1xuICByZXR1cm4gXy5oYXModGhpcy5fa2V5SW5kaWNlcywga2V5KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcHJpb3JpdHkgZm9yICoqa2V5KiouIElmICoqa2V5KiogaXMgbm90IHByZXNlbnQgaW4gdGhlIHF1ZXVlXG4gKiB0aGVuIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBgdW5kZWZpbmVkYC4gVGFrZXMgYE8oMSlgIHRpbWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGtleVxuICovXG5Qcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5wcmlvcml0eSA9IGZ1bmN0aW9uKGtleSkge1xuICB2YXIgaW5kZXggPSB0aGlzLl9rZXlJbmRpY2VzW2tleV07XG4gIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FycltpbmRleF0ucHJpb3JpdHk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUga2V5IGZvciB0aGUgbWluaW11bSBlbGVtZW50IGluIHRoaXMgcXVldWUuIElmIHRoZSBxdWV1ZSBpc1xuICogZW1wdHkgdGhpcyBmdW5jdGlvbiB0aHJvd3MgYW4gRXJyb3IuIFRha2VzIGBPKDEpYCB0aW1lLlxuICovXG5Qcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuc2l6ZSgpID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUXVldWUgdW5kZXJmbG93XCIpO1xuICB9XG4gIHJldHVybiB0aGlzLl9hcnJbMF0ua2V5O1xufTtcblxuLyoqXG4gKiBJbnNlcnRzIGEgbmV3IGtleSBpbnRvIHRoZSBwcmlvcml0eSBxdWV1ZS4gSWYgdGhlIGtleSBhbHJlYWR5IGV4aXN0cyBpblxuICogdGhlIHF1ZXVlIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBgZmFsc2VgOyBvdGhlcndpc2UgaXQgd2lsbCByZXR1cm4gYHRydWVgLlxuICogVGFrZXMgYE8obilgIHRpbWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGtleSB0aGUga2V5IHRvIGFkZFxuICogQHBhcmFtIHtOdW1iZXJ9IHByaW9yaXR5IHRoZSBpbml0aWFsIHByaW9yaXR5IGZvciB0aGUga2V5XG4gKi9cblByaW9yaXR5UXVldWUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKGtleSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleUluZGljZXMgPSB0aGlzLl9rZXlJbmRpY2VzO1xuICBrZXkgPSBTdHJpbmcoa2V5KTtcbiAgaWYgKCFfLmhhcyhrZXlJbmRpY2VzLCBrZXkpKSB7XG4gICAgdmFyIGFyciA9IHRoaXMuX2FycjtcbiAgICB2YXIgaW5kZXggPSBhcnIubGVuZ3RoO1xuICAgIGtleUluZGljZXNba2V5XSA9IGluZGV4O1xuICAgIGFyci5wdXNoKHtrZXk6IGtleSwgcHJpb3JpdHk6IHByaW9yaXR5fSk7XG4gICAgdGhpcy5fZGVjcmVhc2UoaW5kZXgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhbmQgcmV0dXJucyB0aGUgc21hbGxlc3Qga2V5IGluIHRoZSBxdWV1ZS4gVGFrZXMgYE8obG9nIG4pYCB0aW1lLlxuICovXG5Qcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5yZW1vdmVNaW4gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fc3dhcCgwLCB0aGlzLl9hcnIubGVuZ3RoIC0gMSk7XG4gIHZhciBtaW4gPSB0aGlzLl9hcnIucG9wKCk7XG4gIGRlbGV0ZSB0aGlzLl9rZXlJbmRpY2VzW21pbi5rZXldO1xuICB0aGlzLl9oZWFwaWZ5KDApO1xuICByZXR1cm4gbWluLmtleTtcbn07XG5cbi8qKlxuICogRGVjcmVhc2VzIHRoZSBwcmlvcml0eSBmb3IgKiprZXkqKiB0byAqKnByaW9yaXR5KiouIElmIHRoZSBuZXcgcHJpb3JpdHkgaXNcbiAqIGdyZWF0ZXIgdGhhbiB0aGUgcHJldmlvdXMgcHJpb3JpdHksIHRoaXMgZnVuY3Rpb24gd2lsbCB0aHJvdyBhbiBFcnJvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0ga2V5IHRoZSBrZXkgZm9yIHdoaWNoIHRvIHJhaXNlIHByaW9yaXR5XG4gKiBAcGFyYW0ge051bWJlcn0gcHJpb3JpdHkgdGhlIG5ldyBwcmlvcml0eSBmb3IgdGhlIGtleVxuICovXG5Qcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5kZWNyZWFzZSA9IGZ1bmN0aW9uKGtleSwgcHJpb3JpdHkpIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5fa2V5SW5kaWNlc1trZXldO1xuICBpZiAocHJpb3JpdHkgPiB0aGlzLl9hcnJbaW5kZXhdLnByaW9yaXR5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTmV3IHByaW9yaXR5IGlzIGdyZWF0ZXIgdGhhbiBjdXJyZW50IHByaW9yaXR5LiBcIiArXG4gICAgICAgIFwiS2V5OiBcIiArIGtleSArIFwiIE9sZDogXCIgKyB0aGlzLl9hcnJbaW5kZXhdLnByaW9yaXR5ICsgXCIgTmV3OiBcIiArIHByaW9yaXR5KTtcbiAgfVxuICB0aGlzLl9hcnJbaW5kZXhdLnByaW9yaXR5ID0gcHJpb3JpdHk7XG4gIHRoaXMuX2RlY3JlYXNlKGluZGV4KTtcbn07XG5cblByaW9yaXR5UXVldWUucHJvdG90eXBlLl9oZWFwaWZ5ID0gZnVuY3Rpb24oaSkge1xuICB2YXIgYXJyID0gdGhpcy5fYXJyO1xuICB2YXIgbCA9IDIgKiBpLFxuICAgICAgciA9IGwgKyAxLFxuICAgICAgbGFyZ2VzdCA9IGk7XG4gIGlmIChsIDwgYXJyLmxlbmd0aCkge1xuICAgIGxhcmdlc3QgPSBhcnJbbF0ucHJpb3JpdHkgPCBhcnJbbGFyZ2VzdF0ucHJpb3JpdHkgPyBsIDogbGFyZ2VzdDtcbiAgICBpZiAociA8IGFyci5sZW5ndGgpIHtcbiAgICAgIGxhcmdlc3QgPSBhcnJbcl0ucHJpb3JpdHkgPCBhcnJbbGFyZ2VzdF0ucHJpb3JpdHkgPyByIDogbGFyZ2VzdDtcbiAgICB9XG4gICAgaWYgKGxhcmdlc3QgIT09IGkpIHtcbiAgICAgIHRoaXMuX3N3YXAoaSwgbGFyZ2VzdCk7XG4gICAgICB0aGlzLl9oZWFwaWZ5KGxhcmdlc3QpO1xuICAgIH1cbiAgfVxufTtcblxuUHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUuX2RlY3JlYXNlID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgdmFyIGFyciA9IHRoaXMuX2FycjtcbiAgdmFyIHByaW9yaXR5ID0gYXJyW2luZGV4XS5wcmlvcml0eTtcbiAgdmFyIHBhcmVudDtcbiAgd2hpbGUgKGluZGV4ICE9PSAwKSB7XG4gICAgcGFyZW50ID0gaW5kZXggPj4gMTtcbiAgICBpZiAoYXJyW3BhcmVudF0ucHJpb3JpdHkgPCBwcmlvcml0eSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3N3YXAoaW5kZXgsIHBhcmVudCk7XG4gICAgaW5kZXggPSBwYXJlbnQ7XG4gIH1cbn07XG5cblByaW9yaXR5UXVldWUucHJvdG90eXBlLl9zd2FwID0gZnVuY3Rpb24oaSwgaikge1xuICB2YXIgYXJyID0gdGhpcy5fYXJyO1xuICB2YXIga2V5SW5kaWNlcyA9IHRoaXMuX2tleUluZGljZXM7XG4gIHZhciBvcmlnQXJySSA9IGFycltpXTtcbiAgdmFyIG9yaWdBcnJKID0gYXJyW2pdO1xuICBhcnJbaV0gPSBvcmlnQXJySjtcbiAgYXJyW2pdID0gb3JpZ0Fyckk7XG4gIGtleUluZGljZXNbb3JpZ0Fyckoua2V5XSA9IGk7XG4gIGtleUluZGljZXNbb3JpZ0Fyckkua2V5XSA9IGo7XG59O1xuIiwidmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRhcmphbjtcblxuZnVuY3Rpb24gdGFyamFuKGcpIHtcbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIHN0YWNrID0gW10sXG4gICAgICB2aXNpdGVkID0ge30sIC8vIG5vZGUgaWQgLT4geyBvblN0YWNrLCBsb3dsaW5rLCBpbmRleCB9XG4gICAgICByZXN1bHRzID0gW107XG5cbiAgZnVuY3Rpb24gZGZzKHYpIHtcbiAgICB2YXIgZW50cnkgPSB2aXNpdGVkW3ZdID0ge1xuICAgICAgb25TdGFjazogdHJ1ZSxcbiAgICAgIGxvd2xpbms6IGluZGV4LFxuICAgICAgaW5kZXg6IGluZGV4KytcbiAgICB9O1xuICAgIHN0YWNrLnB1c2godik7XG5cbiAgICBnLnN1Y2Nlc3NvcnModikuZm9yRWFjaChmdW5jdGlvbih3KSB7XG4gICAgICBpZiAoIV8uaGFzKHZpc2l0ZWQsIHcpKSB7XG4gICAgICAgIGRmcyh3KTtcbiAgICAgICAgZW50cnkubG93bGluayA9IE1hdGgubWluKGVudHJ5Lmxvd2xpbmssIHZpc2l0ZWRbd10ubG93bGluayk7XG4gICAgICB9IGVsc2UgaWYgKHZpc2l0ZWRbd10ub25TdGFjaykge1xuICAgICAgICBlbnRyeS5sb3dsaW5rID0gTWF0aC5taW4oZW50cnkubG93bGluaywgdmlzaXRlZFt3XS5pbmRleCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoZW50cnkubG93bGluayA9PT0gZW50cnkuaW5kZXgpIHtcbiAgICAgIHZhciBjbXB0ID0gW10sXG4gICAgICAgICAgdztcbiAgICAgIGRvIHtcbiAgICAgICAgdyA9IHN0YWNrLnBvcCgpO1xuICAgICAgICB2aXNpdGVkW3ddLm9uU3RhY2sgPSBmYWxzZTtcbiAgICAgICAgY21wdC5wdXNoKHcpO1xuICAgICAgfSB3aGlsZSAodiAhPT0gdyk7XG4gICAgICByZXN1bHRzLnB1c2goY21wdCk7XG4gICAgfVxuICB9XG5cbiAgZy5ub2RlcygpLmZvckVhY2goZnVuY3Rpb24odikge1xuICAgIGlmICghXy5oYXModmlzaXRlZCwgdikpIHtcbiAgICAgIGRmcyh2KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHRzO1xufVxuIiwidmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRvcHNvcnQ7XG50b3Bzb3J0LkN5Y2xlRXhjZXB0aW9uID0gQ3ljbGVFeGNlcHRpb247XG5cbmZ1bmN0aW9uIHRvcHNvcnQoZykge1xuICB2YXIgdmlzaXRlZCA9IHt9LFxuICAgICAgc3RhY2sgPSB7fSxcbiAgICAgIHJlc3VsdHMgPSBbXTtcblxuICBmdW5jdGlvbiB2aXNpdChub2RlKSB7XG4gICAgaWYgKF8uaGFzKHN0YWNrLCBub2RlKSkge1xuICAgICAgdGhyb3cgbmV3IEN5Y2xlRXhjZXB0aW9uKCk7XG4gICAgfVxuXG4gICAgaWYgKCFfLmhhcyh2aXNpdGVkLCBub2RlKSkge1xuICAgICAgc3RhY2tbbm9kZV0gPSB0cnVlO1xuICAgICAgdmlzaXRlZFtub2RlXSA9IHRydWU7XG4gICAgICBfLmVhY2goZy5wcmVkZWNlc3NvcnMobm9kZSksIHZpc2l0KTtcbiAgICAgIGRlbGV0ZSBzdGFja1tub2RlXTtcbiAgICAgIHJlc3VsdHMucHVzaChub2RlKTtcbiAgICB9XG4gIH1cblxuICBfLmVhY2goZy5zaW5rcygpLCB2aXNpdCk7XG5cbiAgaWYgKF8uc2l6ZSh2aXNpdGVkKSAhPT0gZy5ub2RlQ291bnQoKSkge1xuICAgIHRocm93IG5ldyBDeWNsZUV4Y2VwdGlvbigpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIEN5Y2xlRXhjZXB0aW9uKCkge31cbkN5Y2xlRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpOyAvLyBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIEVycm9yIHRvIHBhc3MgdGVzdGluZyIsInZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZnM7XG5cbi8qXG4gKiBBIGhlbHBlciB0aGF0IHByZWZvcm1zIGEgcHJlLSBvciBwb3N0LW9yZGVyIHRyYXZlcnNhbCBvbiB0aGUgaW5wdXQgZ3JhcGhcbiAqIGFuZCByZXR1cm5zIHRoZSBub2RlcyBpbiB0aGUgb3JkZXIgdGhleSB3ZXJlIHZpc2l0ZWQuIElmIHRoZSBncmFwaCBpc1xuICogdW5kaXJlY3RlZCB0aGVuIHRoaXMgYWxnb3JpdGhtIHdpbGwgbmF2aWdhdGUgdXNpbmcgbmVpZ2hib3JzLiBJZiB0aGUgZ3JhcGhcbiAqIGlzIGRpcmVjdGVkIHRoZW4gdGhpcyBhbGdvcml0aG0gd2lsbCBuYXZpZ2F0ZSB1c2luZyBzdWNjZXNzb3JzLlxuICpcbiAqIE9yZGVyIG11c3QgYmUgb25lIG9mIFwicHJlXCIgb3IgXCJwb3N0XCIuXG4gKi9cbmZ1bmN0aW9uIGRmcyhnLCB2cywgb3JkZXIpIHtcbiAgaWYgKCFfLmlzQXJyYXkodnMpKSB7XG4gICAgdnMgPSBbdnNdO1xuICB9XG5cbiAgdmFyIG5hdmlnYXRpb24gPSAoZy5pc0RpcmVjdGVkKCkgPyBnLnN1Y2Nlc3NvcnMgOiBnLm5laWdoYm9ycykuYmluZChnKTtcblxuICB2YXIgYWNjID0gW10sXG4gICAgICB2aXNpdGVkID0ge307XG4gIF8uZWFjaCh2cywgZnVuY3Rpb24odikge1xuICAgIGlmICghZy5oYXNOb2RlKHYpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHcmFwaCBkb2VzIG5vdCBoYXZlIG5vZGU6IFwiICsgdik7XG4gICAgfVxuXG4gICAgZG9EZnMoZywgdiwgb3JkZXIgPT09IFwicG9zdFwiLCB2aXNpdGVkLCBuYXZpZ2F0aW9uLCBhY2MpO1xuICB9KTtcbiAgcmV0dXJuIGFjYztcbn1cblxuZnVuY3Rpb24gZG9EZnMoZywgdiwgcG9zdG9yZGVyLCB2aXNpdGVkLCBuYXZpZ2F0aW9uLCBhY2MpIHtcbiAgaWYgKCFfLmhhcyh2aXNpdGVkLCB2KSkge1xuICAgIHZpc2l0ZWRbdl0gPSB0cnVlO1xuXG4gICAgaWYgKCFwb3N0b3JkZXIpIHsgYWNjLnB1c2godik7IH1cbiAgICBfLmVhY2gobmF2aWdhdGlvbih2KSwgZnVuY3Rpb24odykge1xuICAgICAgZG9EZnMoZywgdywgcG9zdG9yZGVyLCB2aXNpdGVkLCBuYXZpZ2F0aW9uLCBhY2MpO1xuICAgIH0pO1xuICAgIGlmIChwb3N0b3JkZXIpIHsgYWNjLnB1c2godik7IH1cbiAgfVxufVxuIiwidmFyIHRvTnVtYmVyID0gcmVxdWlyZSgnLi90b051bWJlcicpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDg7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEyLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b0Zpbml0ZSgzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAqXG4gKiBfLnRvRmluaXRlKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICB9XG4gIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7XG4gIH1cbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0Zpbml0ZTtcbiIsInZhciBiYXNlRmxhdHRlbiA9IHJlcXVpcmUoJy4vX2Jhc2VGbGF0dGVuJyk7XG5cbi8qKlxuICogRmxhdHRlbnMgYGFycmF5YCBhIHNpbmdsZSBsZXZlbCBkZWVwLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZmxhdHRlbihbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICovXG5mdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCAxKSA6IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW47XG4iLCJ2YXIgYmFzZUFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnblZhbHVlJyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzaWduTWVyZ2VWYWx1ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiIG9yIFwiY29uc3RydWN0b3JcIi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJyAmJiB0eXBlb2Ygb2JqZWN0W2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNhZmVHZXQ7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlTHQodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA8IG90aGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VMdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIiksXG4gICAgR3JhcGggPSByZXF1aXJlKFwiLi4vZ3JhcGhsaWJcIikuR3JhcGgsXG4gICAgc2xhY2sgPSByZXF1aXJlKFwiLi91dGlsXCIpLnNsYWNrO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZlYXNpYmxlVHJlZTtcblxuLypcbiAqIENvbnN0cnVjdHMgYSBzcGFubmluZyB0cmVlIHdpdGggdGlnaHQgZWRnZXMgYW5kIGFkanVzdGVkIHRoZSBpbnB1dCBub2RlJ3NcbiAqIHJhbmtzIHRvIGFjaGlldmUgdGhpcy4gQSB0aWdodCBlZGdlIGlzIG9uZSB0aGF0IGlzIGhhcyBhIGxlbmd0aCB0aGF0IG1hdGNoZXNcbiAqIGl0cyBcIm1pbmxlblwiIGF0dHJpYnV0ZS5cbiAqXG4gKiBUaGUgYmFzaWMgc3RydWN0dXJlIGZvciB0aGlzIGZ1bmN0aW9uIGlzIGRlcml2ZWQgZnJvbSBHYW5zbmVyLCBldCBhbC4sIFwiQVxuICogVGVjaG5pcXVlIGZvciBEcmF3aW5nIERpcmVjdGVkIEdyYXBocy5cIlxuICpcbiAqIFByZS1jb25kaXRpb25zOlxuICpcbiAqICAgIDEuIEdyYXBoIG11c3QgYmUgYSBEQUcuXG4gKiAgICAyLiBHcmFwaCBtdXN0IGJlIGNvbm5lY3RlZC5cbiAqICAgIDMuIEdyYXBoIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgbm9kZS5cbiAqICAgIDUuIEdyYXBoIG5vZGVzIG11c3QgaGF2ZSBiZWVuIHByZXZpb3VzbHkgYXNzaWduZWQgYSBcInJhbmtcIiBwcm9wZXJ0eSB0aGF0XG4gKiAgICAgICByZXNwZWN0cyB0aGUgXCJtaW5sZW5cIiBwcm9wZXJ0eSBvZiBpbmNpZGVudCBlZGdlcy5cbiAqICAgIDYuIEdyYXBoIGVkZ2VzIG11c3QgaGF2ZSBhIFwibWlubGVuXCIgcHJvcGVydHkuXG4gKlxuICogUG9zdC1jb25kaXRpb25zOlxuICpcbiAqICAgIC0gR3JhcGggbm9kZXMgd2lsbCBoYXZlIHRoZWlyIHJhbmsgYWRqdXN0ZWQgdG8gZW5zdXJlIHRoYXQgYWxsIGVkZ2VzIGFyZVxuICogICAgICB0aWdodC5cbiAqXG4gKiBSZXR1cm5zIGEgdHJlZSAodW5kaXJlY3RlZCBncmFwaCkgdGhhdCBpcyBjb25zdHJ1Y3RlZCB1c2luZyBvbmx5IFwidGlnaHRcIlxuICogZWRnZXMuXG4gKi9cbmZ1bmN0aW9uIGZlYXNpYmxlVHJlZShnKSB7XG4gIHZhciB0ID0gbmV3IEdyYXBoKHsgZGlyZWN0ZWQ6IGZhbHNlIH0pO1xuXG4gIC8vIENob29zZSBhcmJpdHJhcnkgbm9kZSBmcm9tIHdoaWNoIHRvIHN0YXJ0IG91ciB0cmVlXG4gIHZhciBzdGFydCA9IGcubm9kZXMoKVswXSxcbiAgICAgIHNpemUgPSBnLm5vZGVDb3VudCgpO1xuICB0LnNldE5vZGUoc3RhcnQsIHt9KTtcblxuICB2YXIgZWRnZSwgZGVsdGE7XG4gIHdoaWxlICh0aWdodFRyZWUodCwgZykgPCBzaXplKSB7XG4gICAgZWRnZSA9IGZpbmRNaW5TbGFja0VkZ2UodCwgZyk7XG4gICAgZGVsdGEgPSB0Lmhhc05vZGUoZWRnZS52KSA/IHNsYWNrKGcsIGVkZ2UpIDogLXNsYWNrKGcsIGVkZ2UpO1xuICAgIHNoaWZ0UmFua3ModCwgZywgZGVsdGEpO1xuICB9XG5cbiAgcmV0dXJuIHQ7XG59XG5cbi8qXG4gKiBGaW5kcyBhIG1heGltYWwgdHJlZSBvZiB0aWdodCBlZGdlcyBhbmQgcmV0dXJucyB0aGUgbnVtYmVyIG9mIG5vZGVzIGluIHRoZVxuICogdHJlZS5cbiAqL1xuZnVuY3Rpb24gdGlnaHRUcmVlKHQsIGcpIHtcbiAgZnVuY3Rpb24gZGZzKHYpIHtcbiAgICBfLmZvckVhY2goZy5ub2RlRWRnZXModiksIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBlZGdlViA9IGUudixcbiAgICAgICAgICB3ID0gKHYgPT09IGVkZ2VWKSA/IGUudyA6IGVkZ2VWO1xuICAgICAgaWYgKCF0Lmhhc05vZGUodykgJiYgIXNsYWNrKGcsIGUpKSB7XG4gICAgICAgIHQuc2V0Tm9kZSh3LCB7fSk7XG4gICAgICAgIHQuc2V0RWRnZSh2LCB3LCB7fSk7XG4gICAgICAgIGRmcyh3KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIF8uZm9yRWFjaCh0Lm5vZGVzKCksIGRmcyk7XG4gIHJldHVybiB0Lm5vZGVDb3VudCgpO1xufVxuXG4vKlxuICogRmluZHMgdGhlIGVkZ2Ugd2l0aCB0aGUgc21hbGxlc3Qgc2xhY2sgdGhhdCBpcyBpbmNpZGVudCBvbiB0cmVlIGFuZCByZXR1cm5zXG4gKiBpdC5cbiAqL1xuZnVuY3Rpb24gZmluZE1pblNsYWNrRWRnZSh0LCBnKSB7XG4gIHJldHVybiBfLm1pbkJ5KGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIGlmICh0Lmhhc05vZGUoZS52KSAhPT0gdC5oYXNOb2RlKGUudykpIHtcbiAgICAgIHJldHVybiBzbGFjayhnLCBlKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzaGlmdFJhbmtzKHQsIGcsIGRlbHRhKSB7XG4gIF8uZm9yRWFjaCh0Lm5vZGVzKCksIGZ1bmN0aW9uKHYpIHtcbiAgICBnLm5vZGUodikucmFuayArPSBkZWx0YTtcbiAgfSk7XG59XG4iLCIvLyBUaGlzIGZpbGUgaXMgdGhlIGVudHJ5LXBvaW50IGZvciB0aGUgIGNsaWVudC1zaWRlIGxpYnJhcnlcbmRlY2xhcmUgdmFyIHdpbmRvdzogV2luZG93O1xuXG5pbXBvcnQgeyBTY2VuZSB9IGZyb20gJy4vU2NlbmUnO1xuaW1wb3J0IHsgU2NlbmVEaXNwbGF5IH0gZnJvbSAnLi9EaXNwbGF5JztcblxuLy8gTWFrZSB0aGUgU2NlbmUgYW5kIFNjZW5lRGlzcGxheSBjbGFzc2VzIGdsb2JhbCB2YXJpYWJsZXNcbndpbmRvd1snU2NlbmUnXSA9ICBTY2VuZTtcbndpbmRvd1snU2NlbmVEaXNwbGF5J10gPSAgU2NlbmVEaXNwbGF5OyIsImltcG9ydCB7IEVkZ2UsIExvYyB9IGZyb20gJy4vRWRnZSc7XG5pbXBvcnQgeyBOb2RlLCBDb25zdGFudE5vZGUsIFBST1BfREVGQVVMVF9OQU1FIH0gZnJvbSAnLi9Ob2RlJztcbmltcG9ydCAgeyBvcHMgfSAgZnJvbSAnLi9PcHMnO1xuaW1wb3J0IHsgY29tYmluZUxhdGVzdCwgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgdXBkYXRlIGZyb20gJ2ltbXV0YWJpbGl0eS1oZWxwZXInO1xuaW1wb3J0IHsgZ2V0TGF5b3V0U3RyZWFtLCBMYXlvdXQgfSBmcm9tICcuL1NjZW5lTGF5b3V0JztcblxuLyoqXG4gKiBBIHNjZW5lIHJlcHJlc2VudHMgYSBjb21wbGV0ZSBwcm9ncmFtXG4gKi9cbmV4cG9ydCBjbGFzcyBTY2VuZSB7XG4gICAgcHJpdmF0ZSBub2Rlc1N0cmVhbTogQmVoYXZpb3JTdWJqZWN0PE5vZGVbXT4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KFtdKTsgLy8gQSBzdHJlYW0gb2YgbGlzdHMgb2Ygbm9kZXNcbiAgICBwcml2YXRlIGVkZ2VzU3RyZWFtOiBCZWhhdmlvclN1YmplY3Q8RWRnZVtdPiA9IG5ldyBCZWhhdmlvclN1YmplY3QoW10pOyAvLyBBIHN0cmVhbSBvZiBsaXN0cyBvZiBlZGdlc1xuXG4gICAgcHJpdmF0ZSBsYXlvdXRTdHJlYW06IE9ic2VydmFibGU8TGF5b3V0PiA9IGdldExheW91dFN0cmVhbSh0aGlzLmdldE5vZGVzU3RyZWFtKCksIHRoaXMuZ2V0RWRnZXNTdHJlYW0oKSk7IC8vIEEgc3RyZWFtIHdpdGggdGhlIGxheW91dCAod2hlcmUgdG8gcG9zaXRpb24gb2JqZWN0cylcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gQSBzdWJzY3JpcHRpb24gdG8gdXBkYXRlIGluZGl2aWR1YWwgbm9kZXMvZWRnZXMnIGxheW91dHMgZnJvbSBhIHNpbmdsZSBsYXlvdXQgb2JqZWN0XG4gICAgICAgIGNvbWJpbmVMYXRlc3QodGhpcy5sYXlvdXRTdHJlYW0sIHRoaXMuZ2V0Tm9kZXNTdHJlYW0oKSwgdGhpcy5nZXRFZGdlc1N0cmVhbSgpKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAoW2xheW91dCwgbm9kZXMsIGVkZ2VzXTogW0xheW91dCwgTm9kZVtdLCBFZGdlW11dKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gR28gdGhyb3VnaCBhbGwgb2YgdGhlIG5vZGVzIGFuZCB1cGRhdGUgdGhlaXIgbGF5b3V0c1xuICAgICAgICAgICAgICAgIG5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWQgPSBub2RlLmdldElEKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGxheW91dC5ub2Rlc1tpZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuX3NldExheW91dChsYXlvdXQubm9kZXNbaWRdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIEdvIHRocm91Z2ggYWxsIHRoZSBlZGdlcyBhbmQgdXBkYXRlIHRoZWlyIGxheW91dHNcbiAgICAgICAgICAgICAgICBlZGdlcy5mb3JFYWNoKChlZGdlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gZWRnZS5nZXRJRCgpO1xuICAgICAgICAgICAgICAgICAgICBpZihsYXlvdXQuZWRnZXNbaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlZGdlLnNldExheW91dChsYXlvdXQuZWRnZXNbaWRdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNvbnN0YW50IHZhbHVlIHRvIHRoZSBzY2VuZVxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgY29uc3RhbnQgdmFsdWUgdG8gYWRkXG4gICAgICovXG4gICAgcHVibGljIGFkZENvbnN0YW50KHZhbHVlOiBhbnkpOiBOb2RlIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBDb25zdGFudE5vZGUodmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5hZGROb2RlKG5vZGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhbiBvcGVyYXRpb24gdG8gdGhlIHNjZW5lXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIG9wIChhIGtleSBpbiBPcC50cylcbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkT3AobmFtZTogc3RyaW5nKTogTm9kZSB7XG4gICAgICAgIGNvbnN0IG9wRm4gPSBvcHNbbmFtZV07XG4gICAgICAgIGNvbnN0IG9wID0gb3BGbigpO1xuICAgICAgICByZXR1cm4gdGhpcy5hZGROb2RlKG9wKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgYW55IG5vZGUgdG8gdGhlIHNjZW5lXG4gICAgcHJpdmF0ZSBhZGROb2RlKG5vZGU6IE5vZGUpOiBOb2RlIHtcbiAgICAgICAgY29uc3Qgbm9kZXNWYWx1ZSA9IHRoaXMubm9kZXNTdHJlYW0uZ2V0VmFsdWUoKTtcbiAgICAgICAgY29uc3QgbmV3Tm9kZXMgPSB1cGRhdGUobm9kZXNWYWx1ZSwgeyRwdXNoOiBbbm9kZV19KTsgLy8gQWRkIHRoZSBub2RlIHRvIHRoZSBsaXN0IG9mIG5vZGVzICh3aXRob3V0IG11dGF0aW5nKVxuICAgICAgICB0aGlzLm5vZGVzU3RyZWFtLm5leHQobmV3Tm9kZXMpOyAvLyBVcGRhdGUgbXkgbGlzdCBvZiBuZG9lc1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBuZXcgZWRnZSBiZXR3ZWVuIG5vZGUgcHJvcGVydGllc1xuICAgICAqIFxuICAgICAqIEBwYXJhbSBmcm9tIHtub2RlOiBOb2RlLCBwcm9wOiBzdHJpbmd9OiBXaGVyZSB0aGlzIGVkZ2UgbGVhdmVzIGZyb21cbiAgICAgKiBAcGFyYW0gdG8ge25vZGU6IE5vZGUsIHByb3A6IHN0cmluZ306IFdoZXJlIHRoaXMgZWRnZSBnb2VzIHRvXG4gICAgICovXG4gICAgcHVibGljIGFkZEVkZ2UoZnJvbTogTG9jfE5vZGUsIHRvOiBMb2N8Tm9kZSk6IEVkZ2Uge1xuICAgICAgICAvLyBJZiBvbmx5IHRoZSBOb2RlIGlzIHN1cHBsaWVkLCB3ZSB1c2UgdGhlIGRlZmF1bHQgcHJvcCBuYW1lXG4gICAgICAgIGlmIChmcm9tIGluc3RhbmNlb2YgTm9kZSkgeyBmcm9tID0geyBub2RlOiBmcm9tLCBwcm9wOiBQUk9QX0RFRkFVTFRfTkFNRSB9OyB9XG4gICAgICAgIGlmICAgKHRvIGluc3RhbmNlb2YgTm9kZSkgeyB0byAgID0geyBub2RlOiB0bywgcHJvcDogUFJPUF9ERUZBVUxUX05BTUUgfTsgfVxuXG4gICAgICAgIGNvbnN0IGVkZ2UgPSBuZXcgRWRnZShmcm9tLCB0byk7XG4gICAgICAgIGZyb20ubm9kZS5hZGRPdXRnb2luZ0VkZ2UoZWRnZSk7XG4gICAgICAgIHRvLm5vZGUuYWRkSW5jb21pbmdFZGdlKGVkZ2UpO1xuXG4gICAgICAgIGNvbnN0IGVkZ2VzVmFsdWUgPSB0aGlzLmVkZ2VzU3RyZWFtLmdldFZhbHVlKCk7XG4gICAgICAgIGNvbnN0IG5ld0VkZ2VzID0gdXBkYXRlKGVkZ2VzVmFsdWUsIHskcHVzaDogW2VkZ2VdfSk7IC8vIEFkZCB0aGUgZWRnZSB0byB0aGUgbGlzdCAod2l0aCBubyBtdXRhdGlvbnMpXG4gICAgICAgIHRoaXMuZWRnZXNTdHJlYW0ubmV4dChuZXdFZGdlcyk7XG5cbiAgICAgICAgcmV0dXJuIGVkZ2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIFJlbW92ZSBhbiBlZGdlIGZyb20gdGhlIHNjZW5lXG4gICAgICogQHBhcmFtIGVkZ2UgVGhlIGVkZ2UgdG8gcmVtb3ZlXG4gICAgICovXG4gICAgcHVibGljIHJlbW92ZUVkZ2UoZWRnZTogRWRnZSk6IHZvaWQge1xuICAgICAgICBjb25zdCBmcm9tID0gZWRnZS5nZXRGcm9tKCk7XG4gICAgICAgIGNvbnN0IHRvID0gZWRnZS5nZXRUbygpO1xuICAgICAgICBmcm9tLm5vZGUucmVtb3ZlT3V0Z29pbmdFZGdlKGVkZ2UpO1xuICAgICAgICB0by5ub2RlLnJlbW92ZUluY29taW5nRWRnZShlZGdlKTtcblxuICAgICAgICBjb25zdCBlZGdlc1ZhbHVlID0gdGhpcy5lZGdlc1N0cmVhbS5nZXRWYWx1ZSgpO1xuICAgICAgICBjb25zdCBpbmRleCA9IGVkZ2VzVmFsdWUuaW5kZXhPZihlZGdlKTtcbiAgICAgICAgaWYoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgY29uc3QgbmV3RWRnZXMgPSB1cGRhdGUoZWRnZXNWYWx1ZSwgeyRzcGxpY2U6IFtbaW5kZXgsIDFdXX0pO1xuICAgICAgICAgICAgdGhpcy5lZGdlc1N0cmVhbS5uZXh0KG5ld0VkZ2VzKTtcblxuICAgICAgICAgICAgZWRnZS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIG5vZGUgZnJvbSB0aGUgc2NlbmVcbiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgTm9kZSB0byByZW1vdmVcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVtb3ZlTm9kZShub2RlOiBOb2RlKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG5vZGVzVmFsdWUgPSB0aGlzLm5vZGVzU3RyZWFtLmdldFZhbHVlKCk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gbm9kZXNWYWx1ZS5pbmRleE9mKG5vZGUpO1xuICAgICAgICBpZihpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAvL1dlIG5lZWQgdG8gcmVtb3ZlIGFueSBlZGdlcyB0aGF0IGludm9sdmUgdGhpcyBub2RlLCBzbyB3ZSdsbCBzZWUgd2hpY2ggb25lcyB3ZSBuZWVkIHRvIHJlbW92ZS4uLlxuICAgICAgICAgICAgY29uc3QgZWRnZXNWYWx1ZSA9IHRoaXMuZWRnZXNTdHJlYW0uZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGNvbnN0IHRvUmVtb3ZlRWRnZXMgPSBlZGdlc1ZhbHVlLmZpbHRlcigoZTogRWRnZSkgPT4gKChlLmdldEZyb20oKS5ub2RlID09PSBub2RlKSB8fCAoZS5nZXRUbygpLm5vZGUgPT09IG5vZGUpKSk7XG5cbiAgICAgICAgICAgIGlmKHRvUmVtb3ZlRWRnZXMubGVuZ3RoID4gMCkgeyAvLyBpZiB3ZSBoYXZlIGFueSBlZGdlcyB0byByZW1vdmUuLi5cbiAgICAgICAgICAgICAgICB0b1JlbW92ZUVkZ2VzLmZvckVhY2goKGVkZ2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJvbSA9IGVkZ2UuZ2V0RnJvbSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0byA9IGVkZ2UuZ2V0VG8oKTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbS5ub2RlLnJlbW92ZU91dGdvaW5nRWRnZShlZGdlKTtcbiAgICAgICAgICAgICAgICAgICAgdG8ubm9kZS5yZW1vdmVJbmNvbWluZ0VkZ2UoZWRnZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZWRnZS5yZW1vdmUoKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZWRnZXNTdHJlYW0ubmV4dChlZGdlc1ZhbHVlLmZpbHRlcigoZSkgPT4gdG9SZW1vdmVFZGdlcy5pbmRleE9mKGUpIDwgMCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGaW5hbGx5LCByZW1vdmUgdGhlIG5vZGVcbiAgICAgICAgICAgIGNvbnN0IG5ld05vZGVzID0gdXBkYXRlKG5vZGVzVmFsdWUsIHskc3BsaWNlOiBbW2luZGV4LCAxXV19KTtcbiAgICAgICAgICAgIHRoaXMubm9kZXNTdHJlYW0ubmV4dChuZXdOb2Rlcyk7XG4gICAgICAgICAgICBub2RlLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgc3RyZWFtIHdob3NlIHZhbHVlcyBhcmUgdGhlIGN1cnJlbnQgbm9kZXMgaW4gdGhlIHNjZW5lXG4gICAgICovXG4gICAgcHVibGljIGdldE5vZGVzU3RyZWFtKCk6IE9ic2VydmFibGU8Tm9kZVtdPiB7IHJldHVybiB0aGlzLm5vZGVzU3RyZWFtOyB9XG4gICAgLyoqXG4gICAgICogR2V0IGEgc3RyZWFtIHdob3NlIHZhbHVlcyBhcmUgdGhlIGN1cnJlbnQgZWRnZXMgaW4gdGhlIHNjZW5lXG4gICAgICovXG4gICAgcHVibGljIGdldEVkZ2VzU3RyZWFtKCk6IE9ic2VydmFibGU8RWRnZVtdPiB7IHJldHVybiB0aGlzLmVkZ2VzU3RyZWFtOyB9XG59IiwiaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4vTm9kZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0LCBTdWJqZWN0LCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vLyBXaGVyZSBhbiBlZGdlIHBvaW50cyB0byBvciBmcm9tICh0aGUgbm9kZSBhbmQgdGhlIHNwZWNpZmljIHByb3BlcnR5KVxuZXhwb3J0IGludGVyZmFjZSBMb2Mge1xuICAgIG5vZGU6IE5vZGUsXG4gICAgcHJvcDogc3RyaW5nLFxufVxuXG5leHBvcnQgdHlwZSBFZGdlTGF5b3V0ID0ge1xuICAgIC8vIHBvaW50cyBmb3IgdGhlIHBhdGggb2YgdGhlIGVkZ2UgdG8gZm9sbG93OyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYWdyZWpzL2RhZ3JlL3dpa2lcbiAgICBwb2ludHM6IHt4OiBudW1iZXIsIHk6IG51bWJlcn1bXTtcbn1cblxuLyoqXG4gKiBBbiBFZGdlIGluc3RhbmNlIHJlcHJlc2VudHMgZGlyZWN0ZWQgZGF0YSBmbG93IGJldHdlZW4gdHdvIG5vZGUgcHJvcGVydGllcy5cbiAqIEV2ZXJ5IEVkZ2UgaW5zdGFuY2Uga2VlcHMgdHJhY2sgb2YgaXRzIGN1cnJlbnQgdmFsdWUgKHRocm91Z2ggdmFsdWVTdHJlYW0pXG4gKi9cbmV4cG9ydCBjbGFzcyBFZGdlIHtcbiAgICBwcml2YXRlIHN0YXRpYyBlZGdlQ291bnQ6IG51bWJlciA9IDE7IC8vIFVzZWQgIHRvIGZvcm0gdW5pcXVlICBlZGdlICBJRHNcbiAgICBwcml2YXRlIGxheW91dDogU3ViamVjdDxFZGdlTGF5b3V0PiA9IG5ldyBCZWhhdmlvclN1YmplY3QoeyBwb2ludHM6IFtdIH0pOyAvLyBUcmFja3Mgd2hlcmUgdGhpcyBlZGdlIHNob3VsZCBiZSBkaXNwbGF5ZWRcblxuICAgIHByaXZhdGUgaWQ6IG51bWJlcjsgLy8gQSB1bmlxdWUgIGlkIGZvciBldmVyeSBlZGdlXG5cbiAgICAvLyBBIHN0cmVhbSB0aGF0IHRyYWNrcyB3aGljaCBsb2NhdGlvbiB0aGlzIGVkZ2Ugb3JpZ2luYXRlcyBmcm9tXG4gICAgLy8gZnJvbVN0cmVhbSBpcyBhIHN0cmVhbSB3aGVyZSBldmVyeSBpdGVtIGlzIGEgTG9jIGluc3RhbmNlLiBldmVyeSB0aW1lXG4gICAgLy8gdGhpcyBlZGdlJ3MgYGZyb21gIHByb3BlcnR5IGlzIGNoYW5nZWQsIGEgbmV3IExvYyBnZXRzIHB1c2hlZCBvbnRvIHRoZSBlbmRcbiAgICAvLyBvZiBmcm9tU3RyZWFtXG4gICAgcHJpdmF0ZSBmcm9tU3RyZWFtOiBTdWJqZWN0PExvYz4gPSBuZXcgUmVwbGF5U3ViamVjdDxMb2M+KCk7XG5cbiAgICAvLyBBIHN0cmVhbSB0aGF0IHRyYWNrcyB0aGUgKmN1cnJlbnQgdmFsdWUqIG9mIHRoaXMgZWRnZSAod2hpY2ggZGVwZW5kcyBvbiB3aGVyZSBpdCBvcmlnaW5hdGVzIGZyb20pXG4gICAgLy8gaXQgZG9lcyB0aGlzIGJ5OlxuICAgIC8vICAgICAxKSBjb252ZXJ0aW5nIGV2ZXJ5IGl0ZW0gaW4gZnJvbVN0cmVhbSBpbnRvIGEgc3RyZWFtIG9mIHRoYXQgbm9kZSdzIGN1cnJlbnQgdmFsdWVzICh0aGUgZmlyc3QgbWFwIGNhbGwpXG4gICAgLy8gICAgIDIpIFwiZmxhdHRlbmluZ1wiICh0aHJvdWdoIHN3aXRjaE1hcCkgZWFjaCBvZiB0aG9zZSBzdHJlYW1zIHRvIHByb2R1Y2Ugb25lIHN0cmVhbSBvZiBjdXJyZW50IHZhbHVlc1xuICAgIHByaXZhdGUgdmFsdWVTdHJlYW06IE9ic2VydmFibGU8YW55PiA9IHRoaXMuZnJvbVN0cmVhbS5waXBlKG1hcCgoZnJvbTogTG9jKTogT2JzZXJ2YWJsZTxhbnk+ID0+IHtcbiAgICAgICAgY29uc3QgeyBub2RlLCBwcm9wIH0gPSBmcm9tO1xuICAgICAgICByZXR1cm4gbm9kZS5wbHVja091dHB1dChwcm9wKTtcbiAgICB9KSwgc3dpdGNoTWFwKChzdHJlYW06IE9ic2VydmFibGU8YW55Pik6IE9ic2VydmFibGU8YW55PiA9PiB7XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgfSkpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBmOiBMb2MsIHByaXZhdGUgdDogTG9jKSB7XG4gICAgICAgIHRoaXMuc2V0RnJvbShmKTtcbiAgICAgICAgdGhpcy5zZXRUbyh0KTtcbiAgICAgICAgdGhpcy5pZCA9IEVkZ2UuZWRnZUNvdW50Kys7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoaXMgZWRnZSBmcm9tIHRoZSBzY2VuZSAoY2xlYW5zIHVwIHN0cmVhbXMpXG4gICAgICovXG4gICAgcHVibGljIHJlbW92ZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtLmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMubGF5b3V0LmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgc3RyZWFtIHRoYXQgdXBkYXRlcyB0aGUgbGF5b3V0IG9mIHRoaXMgZWRnZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRMYXlvdXRTdHJlYW0oKTogT2JzZXJ2YWJsZTxFZGdlTGF5b3V0PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxheW91dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNb2RpZnkgdGhlIGxheW91dCAgb2YgdGhpcyBlZGdlXG4gICAgICogXG4gICAgICogQHBhcmFtIGwgQW4gYXJyYXkgb2YgcG9pbnRzIHRoYXQgdGhpcyBlZGdlIHNob3VsZCBjcm9zc1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXRMYXlvdXQobDogRWRnZUxheW91dCk6IHZvaWQge1xuICAgICAgICB0aGlzLmxheW91dC5uZXh0KGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgbm9kZSBhbmQgcHJvcGVydHkgdGhhdCB0aGlzIGVkZ2Ugb3JpZ2luYXRlcyBmcm9tXG4gICAgICovXG4gICAgcHVibGljIGdldEZyb20oKTogTG9jIHsgcmV0dXJuIHRoaXMuZjsgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBub2RlIGFuZCBwcm9wZXJ0eSB0aGF0IHRoaXMgZWRnZSBnb2VzIHRvXG4gICAgICovXG4gICAgcHVibGljIGdldFRvKCk6IExvYyB7IHJldHVybiB0aGlzLnQ7IH1cblxuICAgIC8qKlxuICAgICAqIENoYW5nZSB3aGVyZSB0aGlzIGVkZ2Ugb3JpZ2luYXRlcyBmcm9tXG4gICAgICogQHBhcmFtIGYgLSBUaGUgbmV3IG9yaWdpbiBmb3IgdGhpcyBFZGdlXG4gICAgICovXG4gICAgcHVibGljIHNldEZyb20oZjogTG9jKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZiA9IGY7XG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbS5uZXh0KGYpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoYW5nZSB3aGVyZSB0aGlzIGVkZ2UgbGVhZHMgdG9cbiAgICAgKiBAcGFyYW0gdCBUaGUgbmV3IGRlc3RpbmF0aW9uXG4gICAgICovXG4gICAgcHVibGljIHNldFRvKHQ6IExvYyk6IHZvaWQge1xuICAgICAgICB0aGlzLnQgPSB0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhbiBPYnNlcnZhYmxlIHN0cmVhbSBvZiB0aGlzIGVkZ2UncyB2YWx1ZXNcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U3RyZWFtKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlU3RyZWFtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGlzICBlZGdlJ3MgdW5pcXVlIElEXG4gICAgICovXG4gICAgcHVibGljIGdldElEKCk6IHN0cmluZyB7IHJldHVybiBgZWRnZS0ke3RoaXMuaWR9YDsgfVxufSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsImltcG9ydCB7IE9wTm9kZSwgIFBST1BfREVGQVVMVF9OQU1FLCBHZW5Ob2RlIH0gZnJvbSAnLi9Ob2RlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGludGVydmFsIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlLCBkZWxheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLy8gdW5hcnkgb3BzIGFjY2VwdCAqb25lKiBhcmd1bWVudHNcbmZ1bmN0aW9uIGNyZWF0ZVVuYXJ5T3BOb2RlKG5hbWU6IHN0cmluZywgZm46IChhOiBhbnkpID0+IGFueSwgYXJnMU5hbWU6IHN0cmluZyA9ICdhJyk6ICgpPT5PcE5vZGUge1xuICAgIHJldHVybiAoKSA9PiBuZXcgT3BOb2RlKG5hbWUsIGZuLCBbeyBuYW1lOiBhcmcxTmFtZSB9XSxcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiBQUk9QX0RFRkFVTFRfTkFNRSB9KTtcbn1cblxuLy8gYmluYXJ5IG9wcyBhY2NlcHQgKnR3byogYXJndW1lbnRzXG5mdW5jdGlvbiBjcmVhdGVCaW5hcnlPcE5vZGUobmFtZTogc3RyaW5nLCBmbjogKGE6IGFueSwgYjogYW55KSA9PiBhbnksIGFyZzFOYW1lOiBzdHJpbmcgPSAnYScsIGFyZzJOYW1lOiBzdHJpbmcgPSAnYicpOiAoKT0+T3BOb2RlIHtcbiAgICByZXR1cm4gKCkgPT4gbmV3IE9wTm9kZShuYW1lLCBmbiwgW3sgbmFtZTogYXJnMU5hbWUgfSwgeyBuYW1lOiBhcmcyTmFtZSB9XSxcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiBQUk9QX0RFRkFVTFRfTkFNRSB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IG9wcyA9IHtcbiAgICAnKyc6ICgpID0+ICBuZXcgT3BOb2RlKCcrJywgKC4uLmFyZ3M6IG51bWJlcltdKTogbnVtYmVyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3MucmVkdWNlKChwdjogbnVtYmVyLCBjdjogbnVtYmVyKSA9PiBwdiArIGN2LCAwKTtcbiAgICAgICAgICAgICAgICB9LCBbeyBuYW1lOiBQUk9QX0RFRkFVTFRfTkFNRSwgcmVzdDogdHJ1ZSB9XSxcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiBQUk9QX0RFRkFVTFRfTkFNRSB9KSxcbiAgICAnLSc6ICgpID0+ICBjcmVhdGVCaW5hcnlPcE5vZGUoJy0nLCAoYSwgYikgPT4gYS1iKSxcbiAgICAnKic6ICgpID0+ICBjcmVhdGVCaW5hcnlPcE5vZGUoJyonLCAoYSwgYikgPT4gYSpiKSxcbiAgICAnLyc6ICgpID0+ICBjcmVhdGVCaW5hcnlPcE5vZGUoJy8nLCAoYSwgYikgPT4gYS9iKSxcbiAgICAnJSc6ICgpID0+ICBjcmVhdGVCaW5hcnlPcE5vZGUoJyUnLCAoYSwgYikgPT4gYSViKSxcbiAgICAncG93JzogKCkgPT4gIGNyZWF0ZUJpbmFyeU9wTm9kZSgncG93JywgKGEsIGIpID0+IE1hdGgucG93KGEsIGIpLCAnbnVtJywgJ2V4cCcpLFxuICAgICc9PSc6ICgpID0+ICBjcmVhdGVCaW5hcnlPcE5vZGUoJz09JywgKGEsIGIpID0+IGE9PWIpLFxuICAgICc+JzogKCkgPT4gIGNyZWF0ZUJpbmFyeU9wTm9kZSgnPicsIChhLCBiKSA9PiBhPmIpLFxuICAgICc8JzogKCkgPT4gIGNyZWF0ZUJpbmFyeU9wTm9kZSgnPCcsIChhLCBiKSA9PiBhPGIpLFxuICAgICc+PSc6ICgpID0+ICBjcmVhdGVCaW5hcnlPcE5vZGUoJz49JywgKGEsIGIpID0+IGE+PWIpLFxuICAgICc8PSc6ICgpID0+ICBjcmVhdGVCaW5hcnlPcE5vZGUoJzw9JywgKGEsIGIpID0+IGE8PWIpLFxuICAgICdhbmQnOiAoKSA9PiAgY3JlYXRlQmluYXJ5T3BOb2RlKCdhbmQnLCAoYSwgYikgPT4gYSYmYiksXG4gICAgJ29yJzogKCkgPT4gIGNyZWF0ZUJpbmFyeU9wTm9kZSgnb3InLCAoYSwgYikgPT4gYXx8YiksXG4gICAgJ25lZyc6ICgpID0+ICBjcmVhdGVVbmFyeU9wTm9kZSgnbmVnJywgKGEpID0+IC1hKSxcbiAgICAnbm90JzogKCkgPT4gIGNyZWF0ZVVuYXJ5T3BOb2RlKCdub3QnLCAoYSkgPT4gIWEpLFxuICAgICdhYnMnOiAoKSA9PiAgY3JlYXRlVW5hcnlPcE5vZGUoJ2FicycsIChhKSA9PiBNYXRoLmFicyhhKSksXG4gICAgJ3JvdW5kJzogKCkgPT4gIGNyZWF0ZVVuYXJ5T3BOb2RlKCdyb3VuZCcsIChhKSA9PiBNYXRoLnJvdW5kKGEpKSxcbiAgICAnZ2VuJzogKCkgPT4gbmV3IEdlbk5vZGUoKSxcbiAgICAndGFrZSc6ICgpID0+ICBuZXcgT3BOb2RlKCd0YWtlJywgKHN0cmVhbTogT2JzZXJ2YWJsZTxhbnk+LCBjb3VudDogbnVtYmVyKTogT2JzZXJ2YWJsZTxhbnk+ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVhbS5waXBlKHRha2UoY291bnQpKTtcbiAgICAgICAgICAgICAgICB9LCBbeyBuYW1lOiAnc3RyZWFtJywgcmF3OiB0cnVlIH0sIHsgbmFtZTogJ2NvdW50JyB9XSxcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiBQUk9QX0RFRkFVTFRfTkFNRSwgcmF3OiB0cnVlIH0pLFxuICAgICdpbnRlcnZhbCc6ICgpID0+ICBuZXcgT3BOb2RlKCdpbnRlcnZhbCcsIChwZXJpb2Q6IG51bWJlcik6IE9ic2VydmFibGU8YW55PiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcnZhbChwZXJpb2QpO1xuICAgICAgICAgICAgICAgIH0sIFt7IG5hbWU6ICdwZXJpb2QnIH1dLFxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6IFBST1BfREVGQVVMVF9OQU1FLCByYXc6IHRydWUgfSksXG4gICAgJ2RlbGF5JzogKCkgPT4gIG5ldyBPcE5vZGUoJ2RlbGF5JywgKHN0cmVhbTogT2JzZXJ2YWJsZTxhbnk+LCBkOiBudW1iZXIpOiBPYnNlcnZhYmxlPGFueT4gPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyZWFtLnBpcGUoZGVsYXkoZCkpO1xuICAgICAgICAgICAgICAgIH0sIFt7IG5hbWU6ICdzdHJlYW0nLCByYXc6IHRydWV9LCB7IG5hbWU6ICdkZWxheScgfV0sXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogUFJPUF9ERUZBVUxUX05BTUUsIHJhdzogdHJ1ZSB9KSxcblxufSIsIi8qXG5Db3B5cmlnaHQgKGMpIDIwMTItMjAxNCBDaHJpcyBQZXR0aXR0XG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cbiovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBncmFwaGxpYjogcmVxdWlyZShcIi4vbGliL2dyYXBobGliXCIpLFxuXG4gIGxheW91dDogcmVxdWlyZShcIi4vbGliL2xheW91dFwiKSxcbiAgZGVidWc6IHJlcXVpcmUoXCIuL2xpYi9kZWJ1Z1wiKSxcbiAgdXRpbDoge1xuICAgIHRpbWU6IHJlcXVpcmUoXCIuL2xpYi91dGlsXCIpLnRpbWUsXG4gICAgbm90aW1lOiByZXF1aXJlKFwiLi9saWIvdXRpbFwiKS5ub3RpbWVcbiAgfSxcbiAgdmVyc2lvbjogcmVxdWlyZShcIi4vbGliL3ZlcnNpb25cIilcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgQ2hyaXMgUGV0dGl0dFxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuICogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvblxuICogYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgY29weXJpZ2h0IGhvbGRlciBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiAqIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0XG4gKiBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EXG4gKiBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRVxuICogRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUxcbiAqIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SXG4gKiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUlxuICogQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSxcbiAqIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFXG4gKiBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbnZhciBsaWIgPSByZXF1aXJlKFwiLi9saWJcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBHcmFwaDogbGliLkdyYXBoLFxuICBqc29uOiByZXF1aXJlKFwiLi9saWIvanNvblwiKSxcbiAgYWxnOiByZXF1aXJlKFwiLi9saWIvYWxnXCIpLFxuICB2ZXJzaW9uOiBsaWIudmVyc2lvblxufTtcbiIsIi8vIEluY2x1ZGVzIG9ubHkgdGhlIFwiY29yZVwiIG9mIGdyYXBobGliXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgR3JhcGg6IHJlcXVpcmUoXCIuL2dyYXBoXCIpLFxuICB2ZXJzaW9uOiByZXF1aXJlKFwiLi92ZXJzaW9uXCIpXG59O1xuIiwidmFyIGJhc2VDbG9uZSA9IHJlcXVpcmUoJy4vX2Jhc2VDbG9uZScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNoYWxsb3cgY2xvbmUgb2YgYHZhbHVlYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAqIFtzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobV0oaHR0cHM6Ly9tZG4uaW8vU3RydWN0dXJlZF9jbG9uZV9hbGdvcml0aG0pXG4gKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAqIGFycmF5cy4gVGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhcmUgY2xvbmVkXG4gKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKiBAc2VlIF8uY2xvbmVEZWVwXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICpcbiAqIHZhciBzaGFsbG93ID0gXy5jbG9uZShvYmplY3RzKTtcbiAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUNsZWFyO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlRGVsZXRlO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUdldDtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlSGFzO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlU2V0O1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrSGFzO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tTZXQ7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTWFza2VkID0gcmVxdWlyZSgnLi9faXNNYXNrZWQnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRWYWx1ZTtcbiIsInZhciBIYXNoID0gcmVxdWlyZSgnLi9fSGFzaCcpLFxuICAgIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVDbGVhcjtcbiIsInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hEZWxldGU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoR2V0O1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleWFibGU7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnbjtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXM7XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnbkluO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzSW4gPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzSW4nKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICB9XG4gIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5c0luO1xuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5c0luO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKTtcblxuLyoqXG4gKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlTeW1ib2xzO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAgZ2V0U3ltYm9sc0luID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9sc0luJyk7XG5cbi8qKlxuICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5U3ltYm9sc0luO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzSW4gPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzSW4nKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFsbEtleXNJbjtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVZpZXc7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2Vha01hcDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdENsb25lQXJyYXk7XG4iLCJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKSxcbiAgICBjbG9uZURhdGFWaWV3ID0gcmVxdWlyZSgnLi9fY2xvbmVEYXRhVmlldycpLFxuICAgIGNsb25lUmVnRXhwID0gcmVxdWlyZSgnLi9fY2xvbmVSZWdFeHAnKSxcbiAgICBjbG9uZVN5bWJvbCA9IHJlcXVpcmUoJy4vX2Nsb25lU3ltYm9sJyksXG4gICAgY2xvbmVUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fY2xvbmVUeXBlZEFycmF5Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZUJ5VGFnO1xuIiwidmFyIGNsb25lQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUFycmF5QnVmZmVyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVEYXRhVmlldztcbiIsIi8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVSZWdFeHA7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVN5bWJvbDtcbiIsInZhciBiYXNlSXNNYXAgPSByZXF1aXJlKCcuL19iYXNlSXNNYXAnKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXA7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTWFwKG5ldyBNYXApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNNYXA7XG4iLCJ2YXIgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTWFwO1xuIiwidmFyIGJhc2VJc1NldCA9IHJlcXVpcmUoJy4vX2Jhc2VJc1NldCcpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNTZXQgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1NldDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTZXQobmV3IFNldCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1NldChuZXcgV2Vha1NldCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNTZXQgPSBub2RlSXNTZXQgPyBiYXNlVW5hcnkobm9kZUlzU2V0KSA6IGJhc2VJc1NldDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1NldDtcbiIsInZhciBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNTZXQ7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCYXNlRm9yO1xuIiwidmFyIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJhc2VFYWNoO1xuIiwidmFyIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZUZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGaWx0ZXI7XG4iLCJ2YXIgYmFzZUlzTWF0Y2ggPSByZXF1aXJlKCcuL19iYXNlSXNNYXRjaCcpLFxuICAgIGdldE1hdGNoRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hdGNoRGF0YScpLFxuICAgIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hdGNoZXM7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gIWxlbmd0aDtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTWF0Y2g7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBlcXVhbEJ5VGFnID0gcmVxdWlyZSgnLi9fZXF1YWxCeVRhZycpLFxuICAgIGVxdWFsT2JqZWN0cyA9IHJlcXVpcmUoJy4vX2VxdWFsT2JqZWN0cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbERlZXA7XG4iLCIvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUFkZDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUhhcztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlTb21lO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5JyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIG1hcFRvQXJyYXkgPSByZXF1aXJlKCcuL19tYXBUb0FycmF5JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEJ5VGFnO1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBUb0FycmF5O1xuIiwidmFyIGdldEFsbEtleXMgPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsT2JqZWN0cztcbiIsInZhciBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hdGNoRGF0YTtcbiIsInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyksXG4gICAgZ2V0ID0gcmVxdWlyZSgnLi9nZXQnKSxcbiAgICBoYXNJbiA9IHJlcXVpcmUoJy4vaGFzSW4nKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgaXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9faXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzUHJvcGVydHk7XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gKlxuICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gKiAvLyA9PiAnZGVmYXVsdCdcbiAqL1xuZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldDtcbiIsInZhciBtZW1vaXplQ2FwcGVkID0gcmVxdWlyZSgnLi9fbWVtb2l6ZUNhcHBlZCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9QYXRoO1xuIiwidmFyIG1lbW9pemUgPSByZXF1aXJlKCcuL21lbW9pemUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xudmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfSk7XG5cbiAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVDYXBwZWQ7XG4iLCJ2YXIgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAqXG4gKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogdmFsdWVzKG90aGVyKTtcbiAqIC8vID0+IFszLCA0XVxuICpcbiAqIG9iamVjdC5hID0gMjtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsnYScsICdiJ11cbiAqXG4gKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gIHJldHVybiBtZW1vaXplZDtcbn1cblxuLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG5tZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZTtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUb1N0cmluZztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VIYXNJbjtcbiIsInZhciBiYXNlUHJvcGVydHkgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHknKSxcbiAgICBiYXNlUHJvcGVydHlEZWVwID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5RGVlcCcpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW1xuICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gKiBdO1xuICpcbiAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAqIC8vID0+IFsyLCAxXVxuICpcbiAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqL1xuZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9wZXJ0eTtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHlEZWVwO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VIYXM7XG4iLCJ2YXIgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGVtcHR5IG9iamVjdCwgY29sbGVjdGlvbiwgbWFwLCBvciBzZXQuXG4gKlxuICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gKiBwcm9wZXJ0aWVzLlxuICpcbiAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICogalF1ZXJ5LWxpa2UgY29sbGVjdGlvbnMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYGxlbmd0aGAgb2YgYDBgLlxuICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0VtcHR5KG51bGwpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNFbXB0eSh0cnVlKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRW1wdHkoMSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmXG4gICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgcmV0dXJuICF2YWx1ZS5sZW5ndGg7XG4gIH1cbiAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gIH1cbiAgaWYgKGlzUHJvdG90eXBlKHZhbHVlKSkge1xuICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0VtcHR5O1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbKytpbmRleF07XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5UmVkdWNlO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZWR1Y2VgIGFuZCBgXy5yZWR1Y2VSaWdodGAsIHdpdGhvdXQgc3VwcG9ydFxuICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0geyp9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gKiAgYGNvbGxlY3Rpb25gIGFzIHRoZSBpbml0aWFsIHZhbHVlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VSZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGVhY2hGdW5jKSB7XG4gIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgIGFjY3VtdWxhdG9yID0gaW5pdEFjY3VtXG4gICAgICA/IChpbml0QWNjdW0gPSBmYWxzZSwgdmFsdWUpXG4gICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICB9KTtcbiAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VSZWR1Y2U7XG4iLCJ2YXIgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzU3RyaW5nID0gcmVxdWlyZSgnLi9pc1N0cmluZycpLFxuICAgIHN0cmluZ1NpemUgPSByZXF1aXJlKCcuL19zdHJpbmdTaXplJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJztcblxuLyoqXG4gKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29sbGVjdGlvbiBzaXplLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnNpemUoWzEsIDIsIDNdKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLnNpemUoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAqIC8vID0+IDJcbiAqXG4gKiBfLnNpemUoJ3BlYmJsZXMnKTtcbiAqIC8vID0+IDdcbiAqL1xuZnVuY3Rpb24gc2l6ZShjb2xsZWN0aW9uKSB7XG4gIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gIH1cbiAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgIHJldHVybiBjb2xsZWN0aW9uLnNpemU7XG4gIH1cbiAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaXplO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3RyaW5nKDEpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaW5nO1xuIiwidmFyIGFzY2lpU2l6ZSA9IHJlcXVpcmUoJy4vX2FzY2lpU2l6ZScpLFxuICAgIGhhc1VuaWNvZGUgPSByZXF1aXJlKCcuL19oYXNVbmljb2RlJyksXG4gICAgdW5pY29kZVNpemUgPSByZXF1aXJlKCcuL191bmljb2RlU2l6ZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG51bWJlciBvZiBzeW1ib2xzIGluIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICovXG5mdW5jdGlvbiBzdHJpbmdTaXplKHN0cmluZykge1xuICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgPyB1bmljb2RlU2l6ZShzdHJpbmcpXG4gICAgOiBhc2NpaVNpemUoc3RyaW5nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdTaXplO1xuIiwidmFyIGJhc2VQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eScpO1xuXG4vKipcbiAqIEdldHMgdGhlIHNpemUgb2YgYW4gQVNDSUkgYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gKi9cbnZhciBhc2NpaVNpemUgPSBiYXNlUHJvcGVydHkoJ2xlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzY2lpU2l6ZTtcbiIsIi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbnZhciByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLFxuICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZic7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbnZhciByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB3aXRoIFt6ZXJvLXdpZHRoIGpvaW5lcnMgb3IgY29kZSBwb2ludHMgZnJvbSB0aGUgYXN0cmFsIHBsYW5lc10oaHR0cDovL2Vldi5lZS9ibG9nLzIwMTUvMDkvMTIvZGFyay1jb3JuZXJzLW9mLXVuaWNvZGUvKS4gKi9cbnZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgc3ltYm9sIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gIHJldHVybiByZUhhc1VuaWNvZGUudGVzdChzdHJpbmcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1VuaWNvZGU7XG4iLCIvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNBc3RyYWwgPSAnWycgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXScsXG4gICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xudmFyIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtyc05vbkFzdHJhbCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsXG4gICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgIHJzU3ltYm9sID0gJyg/OicgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgJz8nLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpICsgJyknO1xuXG4vKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xudmFyIHJlVW5pY29kZSA9IFJlZ0V4cChyc0ZpdHogKyAnKD89JyArIHJzRml0eiArICcpfCcgKyByc1N5bWJvbCArIHJzU2VxLCAnZycpO1xuXG4vKipcbiAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICovXG5mdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IHJlVW5pY29kZS5sYXN0SW5kZXggPSAwO1xuICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICsrcmVzdWx0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pY29kZVNpemU7XG4iLCJ2YXIgYXJyYXlFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXlFYWNoJyksXG4gICAgYmFzZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX2Jhc2VDcmVhdGUnKSxcbiAgICBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGdldFByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2dldFByb3RvdHlwZScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqXG4gKiBBbiBhbHRlcm5hdGl2ZSB0byBgXy5yZWR1Y2VgOyB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gKiBgYWNjdW11bGF0b3JgIG9iamVjdCB3aGljaCBpcyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgZWFjaCBvZiBpdHMgb3duXG4gKiBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIHRocnUgYGl0ZXJhdGVlYCwgd2l0aCBlYWNoIGludm9jYXRpb25cbiAqIHBvdGVudGlhbGx5IG11dGF0aW5nIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gSWYgYGFjY3VtdWxhdG9yYCBpcyBub3RcbiAqIHByb3ZpZGVkLCBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBgW1tQcm90b3R5cGVdXWAgd2lsbCBiZSB1c2VkLiBUaGVcbiAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMS4zLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRyYW5zZm9ybShbMiwgMywgNF0sIGZ1bmN0aW9uKHJlc3VsdCwgbikge1xuICogICByZXN1bHQucHVzaChuICo9IG4pO1xuICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAqIH0sIFtdKTtcbiAqIC8vID0+IFs0LCA5XVxuICpcbiAqIF8udHJhbnNmb3JtKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAqIH0sIHt9KTtcbiAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtKG9iamVjdCwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIGlzQXJyTGlrZSA9IGlzQXJyIHx8IGlzQnVmZmVyKG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7XG5cbiAgaXRlcmF0ZWUgPSBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDQpO1xuICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgIHZhciBDdG9yID0gb2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICBpZiAoaXNBcnJMaWtlKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGlzQXJyID8gbmV3IEN0b3IgOiBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpc0Z1bmN0aW9uKEN0b3IpID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSkgOiB7fTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBhY2N1bXVsYXRvciA9IHt9O1xuICAgIH1cbiAgfVxuICAoaXNBcnJMaWtlID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgIHJldHVybiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBvYmplY3QpO1xuICB9KTtcbiAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyYW5zZm9ybTtcbiIsInZhciBiYXNlRmxhdHRlbiA9IHJlcXVpcmUoJy4vX2Jhc2VGbGF0dGVuJyksXG4gICAgYmFzZVJlc3QgPSByZXF1aXJlKCcuL19iYXNlUmVzdCcpLFxuICAgIGJhc2VVbmlxID0gcmVxdWlyZSgnLi9fYmFzZVVuaXEnKSxcbiAgICBpc0FycmF5TGlrZU9iamVjdCA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2VPYmplY3QnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICogLy8gPT4gWzIsIDFdXG4gKi9cbnZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pb247XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcHJlYWRhYmxlU3ltYm9sID0gU3ltYm9sID8gU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZSA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAhIShzcHJlYWRhYmxlU3ltYm9sICYmIHZhbHVlICYmIHZhbHVlW3NwcmVhZGFibGVTeW1ib2xdKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZsYXR0ZW5hYmxlO1xuIiwiLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFwcGx5O1xuIiwidmFyIGNvbnN0YW50ID0gcmVxdWlyZSgnLi9jb25zdGFudCcpLFxuICAgIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fZGVmaW5lUHJvcGVydHknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNldFRvU3RyaW5nO1xuIiwiLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xudmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICBIT1RfU1BBTiA9IDE2O1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAqIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgdmFyIGNvdW50ID0gMCxcbiAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3J0T3V0O1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXlJbmNsdWRlcycpLFxuICAgIGFycmF5SW5jbHVkZXNXaXRoID0gcmVxdWlyZSgnLi9fYXJyYXlJbmNsdWRlc1dpdGgnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyksXG4gICAgY3JlYXRlU2V0ID0gcmVxdWlyZSgnLi9fY3JlYXRlU2V0JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgcmVzdWx0ID0gW10sXG4gICAgICBzZWVuID0gcmVzdWx0O1xuXG4gIGlmIChjb21wYXJhdG9yKSB7XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICB9XG4gIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgaWYgKHNldCkge1xuICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICB9XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gIH1cbiAgZWxzZSB7XG4gICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gIH1cbiAgb3V0ZXI6XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5pcTtcbiIsInZhciBiYXNlSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Jhc2VJbmRleE9mJyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIHNwZWNpZnlpbmcgYW4gaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIDApID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlJbmNsdWRlcztcbiIsInZhciBiYXNlRmluZEluZGV4ID0gcmVxdWlyZSgnLi9fYmFzZUZpbmRJbmRleCcpLFxuICAgIGJhc2VJc05hTiA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hTicpLFxuICAgIHN0cmljdEluZGV4T2YgPSByZXF1aXJlKCcuL19zdHJpY3RJbmRleE9mJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBgZnJvbUluZGV4YCBib3VuZHMgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGZyb21JbmRleCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUluZGV4T2Y7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hTjtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpY3RJbmRleE9mO1xuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiIsInZhciBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBub29wID0gcmVxdWlyZSgnLi9ub29wJyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgc2V0LlxuICovXG52YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVTZXQ7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLm5vb3ApO1xuICogLy8gPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICovXG5mdW5jdGlvbiBub29wKCkge1xuICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5vb3A7XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAqIG9mIGBwcm9wc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVmFsdWVzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAnMi4xLjcnO1xuIiwidmFyIF8gPSByZXF1aXJlKFwiLi9sb2Rhc2hcIiksXG4gICAgR3JhcGggPSByZXF1aXJlKFwiLi9ncmFwaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHdyaXRlOiB3cml0ZSxcbiAgcmVhZDogcmVhZFxufTtcblxuZnVuY3Rpb24gd3JpdGUoZykge1xuICB2YXIganNvbiA9IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICBkaXJlY3RlZDogZy5pc0RpcmVjdGVkKCksXG4gICAgICBtdWx0aWdyYXBoOiBnLmlzTXVsdGlncmFwaCgpLFxuICAgICAgY29tcG91bmQ6IGcuaXNDb21wb3VuZCgpXG4gICAgfSxcbiAgICBub2Rlczogd3JpdGVOb2RlcyhnKSxcbiAgICBlZGdlczogd3JpdGVFZGdlcyhnKVxuICB9O1xuICBpZiAoIV8uaXNVbmRlZmluZWQoZy5ncmFwaCgpKSkge1xuICAgIGpzb24udmFsdWUgPSBfLmNsb25lKGcuZ3JhcGgoKSk7XG4gIH1cbiAgcmV0dXJuIGpzb247XG59XG5cbmZ1bmN0aW9uIHdyaXRlTm9kZXMoZykge1xuICByZXR1cm4gXy5tYXAoZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIG5vZGVWYWx1ZSA9IGcubm9kZSh2KSxcbiAgICAgICAgcGFyZW50ID0gZy5wYXJlbnQodiksXG4gICAgICAgIG5vZGUgPSB7IHY6IHYgfTtcbiAgICBpZiAoIV8uaXNVbmRlZmluZWQobm9kZVZhbHVlKSkge1xuICAgICAgbm9kZS52YWx1ZSA9IG5vZGVWYWx1ZTtcbiAgICB9XG4gICAgaWYgKCFfLmlzVW5kZWZpbmVkKHBhcmVudCkpIHtcbiAgICAgIG5vZGUucGFyZW50ID0gcGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlRWRnZXMoZykge1xuICByZXR1cm4gXy5tYXAoZy5lZGdlcygpLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGVkZ2VWYWx1ZSA9IGcuZWRnZShlKSxcbiAgICAgICAgZWRnZSA9IHsgdjogZS52LCB3OiBlLncgfTtcbiAgICBpZiAoIV8uaXNVbmRlZmluZWQoZS5uYW1lKSkge1xuICAgICAgZWRnZS5uYW1lID0gZS5uYW1lO1xuICAgIH1cbiAgICBpZiAoIV8uaXNVbmRlZmluZWQoZWRnZVZhbHVlKSkge1xuICAgICAgZWRnZS52YWx1ZSA9IGVkZ2VWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGVkZ2U7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZWFkKGpzb24pIHtcbiAgdmFyIGcgPSBuZXcgR3JhcGgoanNvbi5vcHRpb25zKS5zZXRHcmFwaChqc29uLnZhbHVlKTtcbiAgXy5lYWNoKGpzb24ubm9kZXMsIGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgZy5zZXROb2RlKGVudHJ5LnYsIGVudHJ5LnZhbHVlKTtcbiAgICBpZiAoZW50cnkucGFyZW50KSB7XG4gICAgICBnLnNldFBhcmVudChlbnRyeS52LCBlbnRyeS5wYXJlbnQpO1xuICAgIH1cbiAgfSk7XG4gIF8uZWFjaChqc29uLmVkZ2VzLCBmdW5jdGlvbihlbnRyeSkge1xuICAgIGcuc2V0RWRnZSh7IHY6IGVudHJ5LnYsIHc6IGVudHJ5LncsIG5hbWU6IGVudHJ5Lm5hbWUgfSwgZW50cnkudmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIGc7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29tcG9uZW50czogcmVxdWlyZShcIi4vY29tcG9uZW50c1wiKSxcbiAgZGlqa3N0cmE6IHJlcXVpcmUoXCIuL2RpamtzdHJhXCIpLFxuICBkaWprc3RyYUFsbDogcmVxdWlyZShcIi4vZGlqa3N0cmEtYWxsXCIpLFxuICBmaW5kQ3ljbGVzOiByZXF1aXJlKFwiLi9maW5kLWN5Y2xlc1wiKSxcbiAgZmxveWRXYXJzaGFsbDogcmVxdWlyZShcIi4vZmxveWQtd2Fyc2hhbGxcIiksXG4gIGlzQWN5Y2xpYzogcmVxdWlyZShcIi4vaXMtYWN5Y2xpY1wiKSxcbiAgcG9zdG9yZGVyOiByZXF1aXJlKFwiLi9wb3N0b3JkZXJcIiksXG4gIHByZW9yZGVyOiByZXF1aXJlKFwiLi9wcmVvcmRlclwiKSxcbiAgcHJpbTogcmVxdWlyZShcIi4vcHJpbVwiKSxcbiAgdGFyamFuOiByZXF1aXJlKFwiLi90YXJqYW5cIiksXG4gIHRvcHNvcnQ6IHJlcXVpcmUoXCIuL3RvcHNvcnRcIilcbn07XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gY29tcG9uZW50cztcblxuZnVuY3Rpb24gY29tcG9uZW50cyhnKSB7XG4gIHZhciB2aXNpdGVkID0ge30sXG4gICAgICBjbXB0cyA9IFtdLFxuICAgICAgY21wdDtcblxuICBmdW5jdGlvbiBkZnModikge1xuICAgIGlmIChfLmhhcyh2aXNpdGVkLCB2KSkgcmV0dXJuO1xuICAgIHZpc2l0ZWRbdl0gPSB0cnVlO1xuICAgIGNtcHQucHVzaCh2KTtcbiAgICBfLmVhY2goZy5zdWNjZXNzb3JzKHYpLCBkZnMpO1xuICAgIF8uZWFjaChnLnByZWRlY2Vzc29ycyh2KSwgZGZzKTtcbiAgfVxuXG4gIF8uZWFjaChnLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHtcbiAgICBjbXB0ID0gW107XG4gICAgZGZzKHYpO1xuICAgIGlmIChjbXB0Lmxlbmd0aCkge1xuICAgICAgY21wdHMucHVzaChjbXB0KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjbXB0cztcbn1cbiIsInZhciBkaWprc3RyYSA9IHJlcXVpcmUoXCIuL2RpamtzdHJhXCIpLFxuICAgIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRpamtzdHJhQWxsO1xuXG5mdW5jdGlvbiBkaWprc3RyYUFsbChnLCB3ZWlnaHRGdW5jLCBlZGdlRnVuYykge1xuICByZXR1cm4gXy50cmFuc2Zvcm0oZy5ub2RlcygpLCBmdW5jdGlvbihhY2MsIHYpIHtcbiAgICBhY2Nbdl0gPSBkaWprc3RyYShnLCB2LCB3ZWlnaHRGdW5jLCBlZGdlRnVuYyk7XG4gIH0sIHt9KTtcbn1cbiIsInZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKSxcbiAgICB0YXJqYW4gPSByZXF1aXJlKFwiLi90YXJqYW5cIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZmluZEN5Y2xlcztcblxuZnVuY3Rpb24gZmluZEN5Y2xlcyhnKSB7XG4gIHJldHVybiBfLmZpbHRlcih0YXJqYW4oZyksIGZ1bmN0aW9uKGNtcHQpIHtcbiAgICByZXR1cm4gY21wdC5sZW5ndGggPiAxIHx8IChjbXB0Lmxlbmd0aCA9PT0gMSAmJiBnLmhhc0VkZ2UoY21wdFswXSwgY21wdFswXSkpO1xuICB9KTtcbn1cbiIsInZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmbG95ZFdhcnNoYWxsO1xuXG52YXIgREVGQVVMVF9XRUlHSFRfRlVOQyA9IF8uY29uc3RhbnQoMSk7XG5cbmZ1bmN0aW9uIGZsb3lkV2Fyc2hhbGwoZywgd2VpZ2h0Rm4sIGVkZ2VGbikge1xuICByZXR1cm4gcnVuRmxveWRXYXJzaGFsbChnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRGbiB8fCBERUZBVUxUX1dFSUdIVF9GVU5DLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlZGdlRm4gfHwgZnVuY3Rpb24odikgeyByZXR1cm4gZy5vdXRFZGdlcyh2KTsgfSk7XG59XG5cbmZ1bmN0aW9uIHJ1bkZsb3lkV2Fyc2hhbGwoZywgd2VpZ2h0Rm4sIGVkZ2VGbikge1xuICB2YXIgcmVzdWx0cyA9IHt9LFxuICAgICAgbm9kZXMgPSBnLm5vZGVzKCk7XG5cbiAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbih2KSB7XG4gICAgcmVzdWx0c1t2XSA9IHt9O1xuICAgIHJlc3VsdHNbdl1bdl0gPSB7IGRpc3RhbmNlOiAwIH07XG4gICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbih3KSB7XG4gICAgICBpZiAodiAhPT0gdykge1xuICAgICAgICByZXN1bHRzW3ZdW3ddID0geyBkaXN0YW5jZTogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIH07XG4gICAgICB9XG4gICAgfSk7XG4gICAgZWRnZUZuKHYpLmZvckVhY2goZnVuY3Rpb24oZWRnZSkge1xuICAgICAgdmFyIHcgPSBlZGdlLnYgPT09IHYgPyBlZGdlLncgOiBlZGdlLnYsXG4gICAgICAgICAgZCA9IHdlaWdodEZuKGVkZ2UpO1xuICAgICAgcmVzdWx0c1t2XVt3XSA9IHsgZGlzdGFuY2U6IGQsIHByZWRlY2Vzc29yOiB2IH07XG4gICAgfSk7XG4gIH0pO1xuXG4gIG5vZGVzLmZvckVhY2goZnVuY3Rpb24oaykge1xuICAgIHZhciByb3dLID0gcmVzdWx0c1trXTtcbiAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgIHZhciByb3dJID0gcmVzdWx0c1tpXTtcbiAgICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24oaikge1xuICAgICAgICB2YXIgaWsgPSByb3dJW2tdO1xuICAgICAgICB2YXIga2ogPSByb3dLW2pdO1xuICAgICAgICB2YXIgaWogPSByb3dJW2pdO1xuICAgICAgICB2YXIgYWx0RGlzdGFuY2UgPSBpay5kaXN0YW5jZSArIGtqLmRpc3RhbmNlO1xuICAgICAgICBpZiAoYWx0RGlzdGFuY2UgPCBpai5kaXN0YW5jZSkge1xuICAgICAgICAgIGlqLmRpc3RhbmNlID0gYWx0RGlzdGFuY2U7XG4gICAgICAgICAgaWoucHJlZGVjZXNzb3IgPSBrai5wcmVkZWNlc3NvcjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHRzO1xufVxuIiwidmFyIHRvcHNvcnQgPSByZXF1aXJlKFwiLi90b3Bzb3J0XCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQWN5Y2xpYztcblxuZnVuY3Rpb24gaXNBY3ljbGljKGcpIHtcbiAgdHJ5IHtcbiAgICB0b3Bzb3J0KGcpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiB0b3Bzb3J0LkN5Y2xlRXhjZXB0aW9uKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG4iLCJ2YXIgZGZzID0gcmVxdWlyZShcIi4vZGZzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvc3RvcmRlcjtcblxuZnVuY3Rpb24gcG9zdG9yZGVyKGcsIHZzKSB7XG4gIHJldHVybiBkZnMoZywgdnMsIFwicG9zdFwiKTtcbn1cbiIsInZhciBkZnMgPSByZXF1aXJlKFwiLi9kZnNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gcHJlb3JkZXI7XG5cbmZ1bmN0aW9uIHByZW9yZGVyKGcsIHZzKSB7XG4gIHJldHVybiBkZnMoZywgdnMsIFwicHJlXCIpO1xufVxuIiwidmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpLFxuICAgIEdyYXBoID0gcmVxdWlyZShcIi4uL2dyYXBoXCIpLFxuICAgIFByaW9yaXR5UXVldWUgPSByZXF1aXJlKFwiLi4vZGF0YS9wcmlvcml0eS1xdWV1ZVwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwcmltO1xuXG5mdW5jdGlvbiBwcmltKGcsIHdlaWdodEZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBHcmFwaCgpLFxuICAgICAgcGFyZW50cyA9IHt9LFxuICAgICAgcHEgPSBuZXcgUHJpb3JpdHlRdWV1ZSgpLFxuICAgICAgdjtcblxuICBmdW5jdGlvbiB1cGRhdGVOZWlnaGJvcnMoZWRnZSkge1xuICAgIHZhciB3ID0gZWRnZS52ID09PSB2ID8gZWRnZS53IDogZWRnZS52LFxuICAgICAgICBwcmkgPSBwcS5wcmlvcml0eSh3KTtcbiAgICBpZiAocHJpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBlZGdlV2VpZ2h0ID0gd2VpZ2h0RnVuYyhlZGdlKTtcbiAgICAgIGlmIChlZGdlV2VpZ2h0IDwgcHJpKSB7XG4gICAgICAgIHBhcmVudHNbd10gPSB2O1xuICAgICAgICBwcS5kZWNyZWFzZSh3LCBlZGdlV2VpZ2h0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZy5ub2RlQ291bnQoKSA9PT0gMCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBfLmVhY2goZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgcHEuYWRkKHYsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgcmVzdWx0LnNldE5vZGUodik7XG4gIH0pO1xuXG4gIC8vIFN0YXJ0IGZyb20gYW4gYXJiaXRyYXJ5IG5vZGVcbiAgcHEuZGVjcmVhc2UoZy5ub2RlcygpWzBdLCAwKTtcblxuICB2YXIgaW5pdCA9IGZhbHNlO1xuICB3aGlsZSAocHEuc2l6ZSgpID4gMCkge1xuICAgIHYgPSBwcS5yZW1vdmVNaW4oKTtcbiAgICBpZiAoXy5oYXMocGFyZW50cywgdikpIHtcbiAgICAgIHJlc3VsdC5zZXRFZGdlKHYsIHBhcmVudHNbdl0pO1xuICAgIH0gZWxzZSBpZiAoaW5pdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW5wdXQgZ3JhcGggaXMgbm90IGNvbm5lY3RlZDogXCIgKyBnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdCA9IHRydWU7XG4gICAgfVxuXG4gICAgZy5ub2RlRWRnZXModikuZm9yRWFjaCh1cGRhdGVOZWlnaGJvcnMpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgXyA9IHJlcXVpcmUoXCIuL2xvZGFzaFwiKSxcbiAgICBhY3ljbGljID0gcmVxdWlyZShcIi4vYWN5Y2xpY1wiKSxcbiAgICBub3JtYWxpemUgPSByZXF1aXJlKFwiLi9ub3JtYWxpemVcIiksXG4gICAgcmFuayA9IHJlcXVpcmUoXCIuL3JhbmtcIiksXG4gICAgbm9ybWFsaXplUmFua3MgPSByZXF1aXJlKFwiLi91dGlsXCIpLm5vcm1hbGl6ZVJhbmtzLFxuICAgIHBhcmVudER1bW15Q2hhaW5zID0gcmVxdWlyZShcIi4vcGFyZW50LWR1bW15LWNoYWluc1wiKSxcbiAgICByZW1vdmVFbXB0eVJhbmtzID0gcmVxdWlyZShcIi4vdXRpbFwiKS5yZW1vdmVFbXB0eVJhbmtzLFxuICAgIG5lc3RpbmdHcmFwaCA9IHJlcXVpcmUoXCIuL25lc3RpbmctZ3JhcGhcIiksXG4gICAgYWRkQm9yZGVyU2VnbWVudHMgPSByZXF1aXJlKFwiLi9hZGQtYm9yZGVyLXNlZ21lbnRzXCIpLFxuICAgIGNvb3JkaW5hdGVTeXN0ZW0gPSByZXF1aXJlKFwiLi9jb29yZGluYXRlLXN5c3RlbVwiKSxcbiAgICBvcmRlciA9IHJlcXVpcmUoXCIuL29yZGVyXCIpLFxuICAgIHBvc2l0aW9uID0gcmVxdWlyZShcIi4vcG9zaXRpb25cIiksXG4gICAgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIiksXG4gICAgR3JhcGggPSByZXF1aXJlKFwiLi9ncmFwaGxpYlwiKS5HcmFwaDtcblxubW9kdWxlLmV4cG9ydHMgPSBsYXlvdXQ7XG5cbmZ1bmN0aW9uIGxheW91dChnLCBvcHRzKSB7XG4gIHZhciB0aW1lID0gb3B0cyAmJiBvcHRzLmRlYnVnVGltaW5nID8gdXRpbC50aW1lIDogdXRpbC5ub3RpbWU7XG4gIHRpbWUoXCJsYXlvdXRcIiwgZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxheW91dEdyYXBoID0gdGltZShcIiAgYnVpbGRMYXlvdXRHcmFwaFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gYnVpbGRMYXlvdXRHcmFwaChnKTsgfSk7XG4gICAgdGltZShcIiAgcnVuTGF5b3V0XCIsICAgICAgICBmdW5jdGlvbigpIHsgcnVuTGF5b3V0KGxheW91dEdyYXBoLCB0aW1lKTsgfSk7XG4gICAgdGltZShcIiAgdXBkYXRlSW5wdXRHcmFwaFwiLCBmdW5jdGlvbigpIHsgdXBkYXRlSW5wdXRHcmFwaChnLCBsYXlvdXRHcmFwaCk7IH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcnVuTGF5b3V0KGcsIHRpbWUpIHtcbiAgdGltZShcIiAgICBtYWtlU3BhY2VGb3JFZGdlTGFiZWxzXCIsIGZ1bmN0aW9uKCkgeyBtYWtlU3BhY2VGb3JFZGdlTGFiZWxzKGcpOyB9KTtcbiAgdGltZShcIiAgICByZW1vdmVTZWxmRWRnZXNcIiwgICAgICAgIGZ1bmN0aW9uKCkgeyByZW1vdmVTZWxmRWRnZXMoZyk7IH0pO1xuICB0aW1lKFwiICAgIGFjeWNsaWNcIiwgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7IGFjeWNsaWMucnVuKGcpOyB9KTtcbiAgdGltZShcIiAgICBuZXN0aW5nR3JhcGgucnVuXCIsICAgICAgIGZ1bmN0aW9uKCkgeyBuZXN0aW5nR3JhcGgucnVuKGcpOyB9KTtcbiAgdGltZShcIiAgICByYW5rXCIsICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByYW5rKHV0aWwuYXNOb25Db21wb3VuZEdyYXBoKGcpKTsgfSk7XG4gIHRpbWUoXCIgICAgaW5qZWN0RWRnZUxhYmVsUHJveGllc1wiLCBmdW5jdGlvbigpIHsgaW5qZWN0RWRnZUxhYmVsUHJveGllcyhnKTsgfSk7XG4gIHRpbWUoXCIgICAgcmVtb3ZlRW1wdHlSYW5rc1wiLCAgICAgICBmdW5jdGlvbigpIHsgcmVtb3ZlRW1wdHlSYW5rcyhnKTsgfSk7XG4gIHRpbWUoXCIgICAgbmVzdGluZ0dyYXBoLmNsZWFudXBcIiwgICBmdW5jdGlvbigpIHsgbmVzdGluZ0dyYXBoLmNsZWFudXAoZyk7IH0pO1xuICB0aW1lKFwiICAgIG5vcm1hbGl6ZVJhbmtzXCIsICAgICAgICAgZnVuY3Rpb24oKSB7IG5vcm1hbGl6ZVJhbmtzKGcpOyB9KTtcbiAgdGltZShcIiAgICBhc3NpZ25SYW5rTWluTWF4XCIsICAgICAgIGZ1bmN0aW9uKCkgeyBhc3NpZ25SYW5rTWluTWF4KGcpOyB9KTtcbiAgdGltZShcIiAgICByZW1vdmVFZGdlTGFiZWxQcm94aWVzXCIsIGZ1bmN0aW9uKCkgeyByZW1vdmVFZGdlTGFiZWxQcm94aWVzKGcpOyB9KTtcbiAgdGltZShcIiAgICBub3JtYWxpemUucnVuXCIsICAgICAgICAgIGZ1bmN0aW9uKCkgeyBub3JtYWxpemUucnVuKGcpOyB9KTtcbiAgdGltZShcIiAgICBwYXJlbnREdW1teUNoYWluc1wiLCAgICAgIGZ1bmN0aW9uKCkgeyBwYXJlbnREdW1teUNoYWlucyhnKTsgfSk7XG4gIHRpbWUoXCIgICAgYWRkQm9yZGVyU2VnbWVudHNcIiwgICAgICBmdW5jdGlvbigpIHsgYWRkQm9yZGVyU2VnbWVudHMoZyk7IH0pO1xuICB0aW1lKFwiICAgIG9yZGVyXCIsICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7IG9yZGVyKGcpOyB9KTtcbiAgdGltZShcIiAgICBpbnNlcnRTZWxmRWRnZXNcIiwgICAgICAgIGZ1bmN0aW9uKCkgeyBpbnNlcnRTZWxmRWRnZXMoZyk7IH0pO1xuICB0aW1lKFwiICAgIGFkanVzdENvb3JkaW5hdGVTeXN0ZW1cIiwgZnVuY3Rpb24oKSB7IGNvb3JkaW5hdGVTeXN0ZW0uYWRqdXN0KGcpOyB9KTtcbiAgdGltZShcIiAgICBwb3NpdGlvblwiLCAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyBwb3NpdGlvbihnKTsgfSk7XG4gIHRpbWUoXCIgICAgcG9zaXRpb25TZWxmRWRnZXNcIiwgICAgICBmdW5jdGlvbigpIHsgcG9zaXRpb25TZWxmRWRnZXMoZyk7IH0pO1xuICB0aW1lKFwiICAgIHJlbW92ZUJvcmRlck5vZGVzXCIsICAgICAgZnVuY3Rpb24oKSB7IHJlbW92ZUJvcmRlck5vZGVzKGcpOyB9KTtcbiAgdGltZShcIiAgICBub3JtYWxpemUudW5kb1wiLCAgICAgICAgIGZ1bmN0aW9uKCkgeyBub3JtYWxpemUudW5kbyhnKTsgfSk7XG4gIHRpbWUoXCIgICAgZml4dXBFZGdlTGFiZWxDb29yZHNcIiwgICBmdW5jdGlvbigpIHsgZml4dXBFZGdlTGFiZWxDb29yZHMoZyk7IH0pO1xuICB0aW1lKFwiICAgIHVuZG9Db29yZGluYXRlU3lzdGVtXCIsICAgZnVuY3Rpb24oKSB7IGNvb3JkaW5hdGVTeXN0ZW0udW5kbyhnKTsgfSk7XG4gIHRpbWUoXCIgICAgdHJhbnNsYXRlR3JhcGhcIiwgICAgICAgICBmdW5jdGlvbigpIHsgdHJhbnNsYXRlR3JhcGgoZyk7IH0pO1xuICB0aW1lKFwiICAgIGFzc2lnbk5vZGVJbnRlcnNlY3RzXCIsICAgZnVuY3Rpb24oKSB7IGFzc2lnbk5vZGVJbnRlcnNlY3RzKGcpOyB9KTtcbiAgdGltZShcIiAgICByZXZlcnNlUG9pbnRzXCIsICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXZlcnNlUG9pbnRzRm9yUmV2ZXJzZWRFZGdlcyhnKTsgfSk7XG4gIHRpbWUoXCIgICAgYWN5Y2xpYy51bmRvXCIsICAgICAgICAgICBmdW5jdGlvbigpIHsgYWN5Y2xpYy51bmRvKGcpOyB9KTtcbn1cblxuLypcbiAqIENvcGllcyBmaW5hbCBsYXlvdXQgaW5mb3JtYXRpb24gZnJvbSB0aGUgbGF5b3V0IGdyYXBoIGJhY2sgdG8gdGhlIGlucHV0XG4gKiBncmFwaC4gVGhpcyBwcm9jZXNzIG9ubHkgY29waWVzIHdoaXRlbGlzdGVkIGF0dHJpYnV0ZXMgZnJvbSB0aGUgbGF5b3V0IGdyYXBoXG4gKiB0byB0aGUgaW5wdXQgZ3JhcGgsIHNvIGl0IHNlcnZlcyBhcyBhIGdvb2QgcGxhY2UgdG8gZGV0ZXJtaW5lIHdoYXRcbiAqIGF0dHJpYnV0ZXMgY2FuIGluZmx1ZW5jZSBsYXlvdXQuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZUlucHV0R3JhcGgoaW5wdXRHcmFwaCwgbGF5b3V0R3JhcGgpIHtcbiAgXy5mb3JFYWNoKGlucHV0R3JhcGgubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIHZhciBpbnB1dExhYmVsID0gaW5wdXRHcmFwaC5ub2RlKHYpLFxuICAgICAgICBsYXlvdXRMYWJlbCA9IGxheW91dEdyYXBoLm5vZGUodik7XG5cbiAgICBpZiAoaW5wdXRMYWJlbCkge1xuICAgICAgaW5wdXRMYWJlbC54ID0gbGF5b3V0TGFiZWwueDtcbiAgICAgIGlucHV0TGFiZWwueSA9IGxheW91dExhYmVsLnk7XG5cbiAgICAgIGlmIChsYXlvdXRHcmFwaC5jaGlsZHJlbih2KS5sZW5ndGgpIHtcbiAgICAgICAgaW5wdXRMYWJlbC53aWR0aCA9IGxheW91dExhYmVsLndpZHRoO1xuICAgICAgICBpbnB1dExhYmVsLmhlaWdodCA9IGxheW91dExhYmVsLmhlaWdodDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIF8uZm9yRWFjaChpbnB1dEdyYXBoLmVkZ2VzKCksIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgaW5wdXRMYWJlbCA9IGlucHV0R3JhcGguZWRnZShlKSxcbiAgICAgICAgbGF5b3V0TGFiZWwgPSBsYXlvdXRHcmFwaC5lZGdlKGUpO1xuXG4gICAgaW5wdXRMYWJlbC5wb2ludHMgPSBsYXlvdXRMYWJlbC5wb2ludHM7XG4gICAgaWYgKF8uaGFzKGxheW91dExhYmVsLCBcInhcIikpIHtcbiAgICAgIGlucHV0TGFiZWwueCA9IGxheW91dExhYmVsLng7XG4gICAgICBpbnB1dExhYmVsLnkgPSBsYXlvdXRMYWJlbC55O1xuICAgIH1cbiAgfSk7XG5cbiAgaW5wdXRHcmFwaC5ncmFwaCgpLndpZHRoID0gbGF5b3V0R3JhcGguZ3JhcGgoKS53aWR0aDtcbiAgaW5wdXRHcmFwaC5ncmFwaCgpLmhlaWdodCA9IGxheW91dEdyYXBoLmdyYXBoKCkuaGVpZ2h0O1xufVxuXG52YXIgZ3JhcGhOdW1BdHRycyA9IFtcIm5vZGVzZXBcIiwgXCJlZGdlc2VwXCIsIFwicmFua3NlcFwiLCBcIm1hcmdpbnhcIiwgXCJtYXJnaW55XCJdLFxuICAgIGdyYXBoRGVmYXVsdHMgPSB7IHJhbmtzZXA6IDUwLCBlZGdlc2VwOiAyMCwgbm9kZXNlcDogNTAsIHJhbmtkaXI6IFwidGJcIiB9LFxuICAgIGdyYXBoQXR0cnMgPSBbXCJhY3ljbGljZXJcIiwgXCJyYW5rZXJcIiwgXCJyYW5rZGlyXCIsIFwiYWxpZ25cIl0sXG4gICAgbm9kZU51bUF0dHJzID0gW1wid2lkdGhcIiwgXCJoZWlnaHRcIl0sXG4gICAgbm9kZURlZmF1bHRzID0geyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0sXG4gICAgZWRnZU51bUF0dHJzID0gW1wibWlubGVuXCIsIFwid2VpZ2h0XCIsIFwid2lkdGhcIiwgXCJoZWlnaHRcIiwgXCJsYWJlbG9mZnNldFwiXSxcbiAgICBlZGdlRGVmYXVsdHMgPSB7XG4gICAgICBtaW5sZW46IDEsIHdlaWdodDogMSwgd2lkdGg6IDAsIGhlaWdodDogMCxcbiAgICAgIGxhYmVsb2Zmc2V0OiAxMCwgbGFiZWxwb3M6IFwiclwiXG4gICAgfSxcbiAgICBlZGdlQXR0cnMgPSBbXCJsYWJlbHBvc1wiXTtcblxuLypcbiAqIENvbnN0cnVjdHMgYSBuZXcgZ3JhcGggZnJvbSB0aGUgaW5wdXQgZ3JhcGgsIHdoaWNoIGNhbiBiZSB1c2VkIGZvciBsYXlvdXQuXG4gKiBUaGlzIHByb2Nlc3MgY29waWVzIG9ubHkgd2hpdGVsaXN0ZWQgYXR0cmlidXRlcyBmcm9tIHRoZSBpbnB1dCBncmFwaCB0byB0aGVcbiAqIGxheW91dCBncmFwaC4gVGh1cyB0aGlzIGZ1bmN0aW9uIHNlcnZlcyBhcyBhIGdvb2QgcGxhY2UgdG8gZGV0ZXJtaW5lIHdoYXRcbiAqIGF0dHJpYnV0ZXMgY2FuIGluZmx1ZW5jZSBsYXlvdXQuXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkTGF5b3V0R3JhcGgoaW5wdXRHcmFwaCkge1xuICB2YXIgZyA9IG5ldyBHcmFwaCh7IG11bHRpZ3JhcGg6IHRydWUsIGNvbXBvdW5kOiB0cnVlIH0pLFxuICAgICAgZ3JhcGggPSBjYW5vbmljYWxpemUoaW5wdXRHcmFwaC5ncmFwaCgpKTtcblxuICBnLnNldEdyYXBoKF8ubWVyZ2Uoe30sXG4gICAgZ3JhcGhEZWZhdWx0cyxcbiAgICBzZWxlY3ROdW1iZXJBdHRycyhncmFwaCwgZ3JhcGhOdW1BdHRycyksXG4gICAgXy5waWNrKGdyYXBoLCBncmFwaEF0dHJzKSkpO1xuXG4gIF8uZm9yRWFjaChpbnB1dEdyYXBoLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHtcbiAgICB2YXIgbm9kZSA9IGNhbm9uaWNhbGl6ZShpbnB1dEdyYXBoLm5vZGUodikpO1xuICAgIGcuc2V0Tm9kZSh2LCBfLmRlZmF1bHRzKHNlbGVjdE51bWJlckF0dHJzKG5vZGUsIG5vZGVOdW1BdHRycyksIG5vZGVEZWZhdWx0cykpO1xuICAgIGcuc2V0UGFyZW50KHYsIGlucHV0R3JhcGgucGFyZW50KHYpKTtcbiAgfSk7XG5cbiAgXy5mb3JFYWNoKGlucHV0R3JhcGguZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlZGdlID0gY2Fub25pY2FsaXplKGlucHV0R3JhcGguZWRnZShlKSk7XG4gICAgZy5zZXRFZGdlKGUsIF8ubWVyZ2Uoe30sXG4gICAgICBlZGdlRGVmYXVsdHMsXG4gICAgICBzZWxlY3ROdW1iZXJBdHRycyhlZGdlLCBlZGdlTnVtQXR0cnMpLFxuICAgICAgXy5waWNrKGVkZ2UsIGVkZ2VBdHRycykpKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGc7XG59XG5cbi8qXG4gKiBUaGlzIGlkZWEgY29tZXMgZnJvbSB0aGUgR2Fuc25lciBwYXBlcjogdG8gYWNjb3VudCBmb3IgZWRnZSBsYWJlbHMgaW4gb3VyXG4gKiBsYXlvdXQgd2Ugc3BsaXQgZWFjaCByYW5rIGluIGhhbGYgYnkgZG91YmxpbmcgbWlubGVuIGFuZCBoYWx2aW5nIHJhbmtzZXAuXG4gKiBUaGVuIHdlIGNhbiBwbGFjZSBsYWJlbHMgYXQgdGhlc2UgbWlkLXBvaW50cyBiZXR3ZWVuIG5vZGVzLlxuICpcbiAqIFdlIGFsc28gYWRkIHNvbWUgbWluaW1hbCBwYWRkaW5nIHRvIHRoZSB3aWR0aCB0byBwdXNoIHRoZSBsYWJlbCBmb3IgdGhlIGVkZ2VcbiAqIGF3YXkgZnJvbSB0aGUgZWRnZSBpdHNlbGYgYSBiaXQuXG4gKi9cbmZ1bmN0aW9uIG1ha2VTcGFjZUZvckVkZ2VMYWJlbHMoZykge1xuICB2YXIgZ3JhcGggPSBnLmdyYXBoKCk7XG4gIGdyYXBoLnJhbmtzZXAgLz0gMjtcbiAgXy5mb3JFYWNoKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlZGdlID0gZy5lZGdlKGUpO1xuICAgIGVkZ2UubWlubGVuICo9IDI7XG4gICAgaWYgKGVkZ2UubGFiZWxwb3MudG9Mb3dlckNhc2UoKSAhPT0gXCJjXCIpIHtcbiAgICAgIGlmIChncmFwaC5yYW5rZGlyID09PSBcIlRCXCIgfHwgZ3JhcGgucmFua2RpciA9PT0gXCJCVFwiKSB7XG4gICAgICAgIGVkZ2Uud2lkdGggKz0gZWRnZS5sYWJlbG9mZnNldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVkZ2UuaGVpZ2h0ICs9IGVkZ2UubGFiZWxvZmZzZXQ7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuLypcbiAqIENyZWF0ZXMgdGVtcG9yYXJ5IGR1bW15IG5vZGVzIHRoYXQgY2FwdHVyZSB0aGUgcmFuayBpbiB3aGljaCBlYWNoIGVkZ2Unc1xuICogbGFiZWwgaXMgZ29pbmcgdG8sIGlmIGl0IGhhcyBvbmUgb2Ygbm9uLXplcm8gd2lkdGggYW5kIGhlaWdodC4gV2UgZG8gdGhpc1xuICogc28gdGhhdCB3ZSBjYW4gc2FmZWx5IHJlbW92ZSBlbXB0eSByYW5rcyB3aGlsZSBwcmVzZXJ2aW5nIGJhbGFuY2UgZm9yIHRoZVxuICogbGFiZWwncyBwb3NpdGlvbi5cbiAqL1xuZnVuY3Rpb24gaW5qZWN0RWRnZUxhYmVsUHJveGllcyhnKSB7XG4gIF8uZm9yRWFjaChnLmVkZ2VzKCksIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZWRnZSA9IGcuZWRnZShlKTtcbiAgICBpZiAoZWRnZS53aWR0aCAmJiBlZGdlLmhlaWdodCkge1xuICAgICAgdmFyIHYgPSBnLm5vZGUoZS52KSxcbiAgICAgICAgICB3ID0gZy5ub2RlKGUudyksXG4gICAgICAgICAgbGFiZWwgPSB7IHJhbms6ICh3LnJhbmsgLSB2LnJhbmspIC8gMiArIHYucmFuaywgZTogZSB9O1xuICAgICAgdXRpbC5hZGREdW1teU5vZGUoZywgXCJlZGdlLXByb3h5XCIsIGxhYmVsLCBcIl9lcFwiKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhc3NpZ25SYW5rTWluTWF4KGcpIHtcbiAgdmFyIG1heFJhbmsgPSAwO1xuICBfLmZvckVhY2goZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIG5vZGUgPSBnLm5vZGUodik7XG4gICAgaWYgKG5vZGUuYm9yZGVyVG9wKSB7XG4gICAgICBub2RlLm1pblJhbmsgPSBnLm5vZGUobm9kZS5ib3JkZXJUb3ApLnJhbms7XG4gICAgICBub2RlLm1heFJhbmsgPSBnLm5vZGUobm9kZS5ib3JkZXJCb3R0b20pLnJhbms7XG4gICAgICBtYXhSYW5rID0gXy5tYXgobWF4UmFuaywgbm9kZS5tYXhSYW5rKTtcbiAgICB9XG4gIH0pO1xuICBnLmdyYXBoKCkubWF4UmFuayA9IG1heFJhbms7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUVkZ2VMYWJlbFByb3hpZXMoZykge1xuICBfLmZvckVhY2goZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIG5vZGUgPSBnLm5vZGUodik7XG4gICAgaWYgKG5vZGUuZHVtbXkgPT09IFwiZWRnZS1wcm94eVwiKSB7XG4gICAgICBnLmVkZ2Uobm9kZS5lKS5sYWJlbFJhbmsgPSBub2RlLnJhbms7XG4gICAgICBnLnJlbW92ZU5vZGUodik7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlR3JhcGgoZykge1xuICB2YXIgbWluWCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgIG1heFggPSAwLFxuICAgICAgbWluWSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgIG1heFkgPSAwLFxuICAgICAgZ3JhcGhMYWJlbCA9IGcuZ3JhcGgoKSxcbiAgICAgIG1hcmdpblggPSBncmFwaExhYmVsLm1hcmdpbnggfHwgMCxcbiAgICAgIG1hcmdpblkgPSBncmFwaExhYmVsLm1hcmdpbnkgfHwgMDtcblxuICBmdW5jdGlvbiBnZXRFeHRyZW1lcyhhdHRycykge1xuICAgIHZhciB4ID0gYXR0cnMueCxcbiAgICAgICAgeSA9IGF0dHJzLnksXG4gICAgICAgIHcgPSBhdHRycy53aWR0aCxcbiAgICAgICAgaCA9IGF0dHJzLmhlaWdodDtcbiAgICBtaW5YID0gTWF0aC5taW4obWluWCwgeCAtIHcgLyAyKTtcbiAgICBtYXhYID0gTWF0aC5tYXgobWF4WCwgeCArIHcgLyAyKTtcbiAgICBtaW5ZID0gTWF0aC5taW4obWluWSwgeSAtIGggLyAyKTtcbiAgICBtYXhZID0gTWF0aC5tYXgobWF4WSwgeSArIGggLyAyKTtcbiAgfVxuXG4gIF8uZm9yRWFjaChnLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHsgZ2V0RXh0cmVtZXMoZy5ub2RlKHYpKTsgfSk7XG4gIF8uZm9yRWFjaChnLmVkZ2VzKCksIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZWRnZSA9IGcuZWRnZShlKTtcbiAgICBpZiAoXy5oYXMoZWRnZSwgXCJ4XCIpKSB7XG4gICAgICBnZXRFeHRyZW1lcyhlZGdlKTtcbiAgICB9XG4gIH0pO1xuXG4gIG1pblggLT0gbWFyZ2luWDtcbiAgbWluWSAtPSBtYXJnaW5ZO1xuXG4gIF8uZm9yRWFjaChnLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHtcbiAgICB2YXIgbm9kZSA9IGcubm9kZSh2KTtcbiAgICBub2RlLnggLT0gbWluWDtcbiAgICBub2RlLnkgLT0gbWluWTtcbiAgfSk7XG5cbiAgXy5mb3JFYWNoKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlZGdlID0gZy5lZGdlKGUpO1xuICAgIF8uZm9yRWFjaChlZGdlLnBvaW50cywgZnVuY3Rpb24ocCkge1xuICAgICAgcC54IC09IG1pblg7XG4gICAgICBwLnkgLT0gbWluWTtcbiAgICB9KTtcbiAgICBpZiAoXy5oYXMoZWRnZSwgXCJ4XCIpKSB7IGVkZ2UueCAtPSBtaW5YOyB9XG4gICAgaWYgKF8uaGFzKGVkZ2UsIFwieVwiKSkgeyBlZGdlLnkgLT0gbWluWTsgfVxuICB9KTtcblxuICBncmFwaExhYmVsLndpZHRoID0gbWF4WCAtIG1pblggKyBtYXJnaW5YO1xuICBncmFwaExhYmVsLmhlaWdodCA9IG1heFkgLSBtaW5ZICsgbWFyZ2luWTtcbn1cblxuZnVuY3Rpb24gYXNzaWduTm9kZUludGVyc2VjdHMoZykge1xuICBfLmZvckVhY2goZy5lZGdlcygpLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGVkZ2UgPSBnLmVkZ2UoZSksXG4gICAgICAgIG5vZGVWID0gZy5ub2RlKGUudiksXG4gICAgICAgIG5vZGVXID0gZy5ub2RlKGUudyksXG4gICAgICAgIHAxLCBwMjtcbiAgICBpZiAoIWVkZ2UucG9pbnRzKSB7XG4gICAgICBlZGdlLnBvaW50cyA9IFtdO1xuICAgICAgcDEgPSBub2RlVztcbiAgICAgIHAyID0gbm9kZVY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHAxID0gZWRnZS5wb2ludHNbMF07XG4gICAgICBwMiA9IGVkZ2UucG9pbnRzW2VkZ2UucG9pbnRzLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICBlZGdlLnBvaW50cy51bnNoaWZ0KHV0aWwuaW50ZXJzZWN0UmVjdChub2RlViwgcDEpKTtcbiAgICBlZGdlLnBvaW50cy5wdXNoKHV0aWwuaW50ZXJzZWN0UmVjdChub2RlVywgcDIpKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpeHVwRWRnZUxhYmVsQ29vcmRzKGcpIHtcbiAgXy5mb3JFYWNoKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlZGdlID0gZy5lZGdlKGUpO1xuICAgIGlmIChfLmhhcyhlZGdlLCBcInhcIikpIHtcbiAgICAgIGlmIChlZGdlLmxhYmVscG9zID09PSBcImxcIiB8fCBlZGdlLmxhYmVscG9zID09PSBcInJcIikge1xuICAgICAgICBlZGdlLndpZHRoIC09IGVkZ2UubGFiZWxvZmZzZXQ7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGVkZ2UubGFiZWxwb3MpIHtcbiAgICAgICAgY2FzZSBcImxcIjogZWRnZS54IC09IGVkZ2Uud2lkdGggLyAyICsgZWRnZS5sYWJlbG9mZnNldDsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJyXCI6IGVkZ2UueCArPSBlZGdlLndpZHRoIC8gMiArIGVkZ2UubGFiZWxvZmZzZXQ7IGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJldmVyc2VQb2ludHNGb3JSZXZlcnNlZEVkZ2VzKGcpIHtcbiAgXy5mb3JFYWNoKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlZGdlID0gZy5lZGdlKGUpO1xuICAgIGlmIChlZGdlLnJldmVyc2VkKSB7XG4gICAgICBlZGdlLnBvaW50cy5yZXZlcnNlKCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQm9yZGVyTm9kZXMoZykge1xuICBfLmZvckVhY2goZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgaWYgKGcuY2hpbGRyZW4odikubGVuZ3RoKSB7XG4gICAgICB2YXIgbm9kZSA9IGcubm9kZSh2KSxcbiAgICAgICAgICB0ID0gZy5ub2RlKG5vZGUuYm9yZGVyVG9wKSxcbiAgICAgICAgICBiID0gZy5ub2RlKG5vZGUuYm9yZGVyQm90dG9tKSxcbiAgICAgICAgICBsID0gZy5ub2RlKF8ubGFzdChub2RlLmJvcmRlckxlZnQpKSxcbiAgICAgICAgICByID0gZy5ub2RlKF8ubGFzdChub2RlLmJvcmRlclJpZ2h0KSk7XG5cbiAgICAgIG5vZGUud2lkdGggPSBNYXRoLmFicyhyLnggLSBsLngpO1xuICAgICAgbm9kZS5oZWlnaHQgPSBNYXRoLmFicyhiLnkgLSB0LnkpO1xuICAgICAgbm9kZS54ID0gbC54ICsgbm9kZS53aWR0aCAvIDI7XG4gICAgICBub2RlLnkgPSB0LnkgKyBub2RlLmhlaWdodCAvIDI7XG4gICAgfVxuICB9KTtcblxuICBfLmZvckVhY2goZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgaWYgKGcubm9kZSh2KS5kdW1teSA9PT0gXCJib3JkZXJcIikge1xuICAgICAgZy5yZW1vdmVOb2RlKHYpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVNlbGZFZGdlcyhnKSB7XG4gIF8uZm9yRWFjaChnLmVkZ2VzKCksIGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoZS52ID09PSBlLncpIHtcbiAgICAgIHZhciBub2RlID0gZy5ub2RlKGUudik7XG4gICAgICBpZiAoIW5vZGUuc2VsZkVkZ2VzKSB7XG4gICAgICAgIG5vZGUuc2VsZkVkZ2VzID0gW107XG4gICAgICB9XG4gICAgICBub2RlLnNlbGZFZGdlcy5wdXNoKHsgZTogZSwgbGFiZWw6IGcuZWRnZShlKSB9KTtcbiAgICAgIGcucmVtb3ZlRWRnZShlKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTZWxmRWRnZXMoZykge1xuICB2YXIgbGF5ZXJzID0gdXRpbC5idWlsZExheWVyTWF0cml4KGcpO1xuICBfLmZvckVhY2gobGF5ZXJzLCBmdW5jdGlvbihsYXllcikge1xuICAgIHZhciBvcmRlclNoaWZ0ID0gMDtcbiAgICBfLmZvckVhY2gobGF5ZXIsIGZ1bmN0aW9uKHYsIGkpIHtcbiAgICAgIHZhciBub2RlID0gZy5ub2RlKHYpO1xuICAgICAgbm9kZS5vcmRlciA9IGkgKyBvcmRlclNoaWZ0O1xuICAgICAgXy5mb3JFYWNoKG5vZGUuc2VsZkVkZ2VzLCBmdW5jdGlvbihzZWxmRWRnZSkge1xuICAgICAgICB1dGlsLmFkZER1bW15Tm9kZShnLCBcInNlbGZlZGdlXCIsIHtcbiAgICAgICAgICB3aWR0aDogc2VsZkVkZ2UubGFiZWwud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBzZWxmRWRnZS5sYWJlbC5oZWlnaHQsXG4gICAgICAgICAgcmFuazogbm9kZS5yYW5rLFxuICAgICAgICAgIG9yZGVyOiBpICsgKCsrb3JkZXJTaGlmdCksXG4gICAgICAgICAgZTogc2VsZkVkZ2UuZSxcbiAgICAgICAgICBsYWJlbDogc2VsZkVkZ2UubGFiZWxcbiAgICAgICAgfSwgXCJfc2VcIik7XG4gICAgICB9KTtcbiAgICAgIGRlbGV0ZSBub2RlLnNlbGZFZGdlcztcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBvc2l0aW9uU2VsZkVkZ2VzKGcpIHtcbiAgXy5mb3JFYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIHZhciBub2RlID0gZy5ub2RlKHYpO1xuICAgIGlmIChub2RlLmR1bW15ID09PSBcInNlbGZlZGdlXCIpIHtcbiAgICAgIHZhciBzZWxmTm9kZSA9IGcubm9kZShub2RlLmUudiksXG4gICAgICAgICAgeCA9IHNlbGZOb2RlLnggKyBzZWxmTm9kZS53aWR0aCAvIDIsXG4gICAgICAgICAgeSA9IHNlbGZOb2RlLnksXG4gICAgICAgICAgZHggPSBub2RlLnggLSB4LFxuICAgICAgICAgIGR5ID0gc2VsZk5vZGUuaGVpZ2h0IC8gMjtcbiAgICAgIGcuc2V0RWRnZShub2RlLmUsIG5vZGUubGFiZWwpO1xuICAgICAgZy5yZW1vdmVOb2RlKHYpO1xuICAgICAgbm9kZS5sYWJlbC5wb2ludHMgPSBbXG4gICAgICAgIHsgeDogeCArIDIgKiBkeCAvIDMsIHk6IHkgLSBkeSB9LFxuICAgICAgICB7IHg6IHggKyA1ICogZHggLyA2LCB5OiB5IC0gZHkgfSxcbiAgICAgICAgeyB4OiB4ICsgICAgIGR4ICAgICwgeTogeSB9LFxuICAgICAgICB7IHg6IHggKyA1ICogZHggLyA2LCB5OiB5ICsgZHkgfSxcbiAgICAgICAgeyB4OiB4ICsgMiAqIGR4IC8gMywgeTogeSArIGR5IH1cbiAgICAgIF07XG4gICAgICBub2RlLmxhYmVsLnggPSBub2RlLng7XG4gICAgICBub2RlLmxhYmVsLnkgPSBub2RlLnk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0TnVtYmVyQXR0cnMob2JqLCBhdHRycykge1xuICByZXR1cm4gXy5tYXBWYWx1ZXMoXy5waWNrKG9iaiwgYXR0cnMpLCBOdW1iZXIpO1xufVxuXG5mdW5jdGlvbiBjYW5vbmljYWxpemUoYXR0cnMpIHtcbiAgdmFyIG5ld0F0dHJzID0ge307XG4gIF8uZm9yRWFjaChhdHRycywgZnVuY3Rpb24odiwgaykge1xuICAgIG5ld0F0dHJzW2sudG9Mb3dlckNhc2UoKV0gPSB2O1xuICB9KTtcbiAgcmV0dXJuIG5ld0F0dHJzO1xufVxuIiwidmFyIGJhc2VDbG9uZSA9IHJlcXVpcmUoJy4vX2Jhc2VDbG9uZScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDEuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gKiBAc2VlIF8uY2xvbmVcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gKlxuICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChvYmplY3RzKTtcbiAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVEZWVwO1xuIiwidmFyIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBpc0l0ZXJhdGVlQ2FsbCA9IHJlcXVpcmUoJy4vX2lzSXRlcmF0ZWVDYWxsJyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnLi9rZXlzSW4nKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlXG4gKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAqIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICovXG52YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgdmFyIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgIGxlbmd0aCA9IDE7XG4gIH1cblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICB2YXIgcHJvcHMgPSBrZXlzSW4oc291cmNlKTtcbiAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgIHZhciBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK3Byb3BzSW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iamVjdDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwidmFyIGNyZWF0ZUZpbmQgPSByZXF1aXJlKCcuL19jcmVhdGVGaW5kJyksXG4gICAgZmluZEluZGV4ID0gcmVxdWlyZSgnLi9maW5kSW5kZXgnKTtcblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAqIF07XG4gKlxuICogXy5maW5kKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAqIC8vID0+IG9iamVjdCBmb3IgJ3BlYmJsZXMnXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gKiAvLyA9PiBvYmplY3QgZm9yICdmcmVkJ1xuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kKHVzZXJzLCAnYWN0aXZlJyk7XG4gKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gKi9cbnZhciBmaW5kID0gY3JlYXRlRmluZChmaW5kSW5kZXgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbmQ7XG4iLCJ2YXIgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRJbmRleEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbGxlY3Rpb24gaW5kZXguXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVGaW5kKGZpbmRJbmRleEZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGJhc2VJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICBwcmVkaWNhdGUgPSBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpOyB9O1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICByZXR1cm4gaW5kZXggPiAtMSA/IGl0ZXJhYmxlW2l0ZXJhdGVlID8gY29sbGVjdGlvbltpbmRleF0gOiBpbmRleF0gOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlRmluZDtcbiIsInZhciBiYXNlRmluZEluZGV4ID0gcmVxdWlyZSgnLi9fYmFzZUZpbmRJbmRleCcpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vdG9JbnRlZ2VyJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdFxuICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAxLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gKiBdO1xuICpcbiAqIF8uZmluZEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ2Jhcm5leSc7IH0pO1xuICogLy8gPT4gMFxuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICogLy8gPT4gMVxuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gKiAvLyA9PiAwXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbmRJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICogLy8gPT4gMlxuICovXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gIH1cbiAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmluZEluZGV4O1xuIiwidmFyIHRvRmluaXRlID0gcmVxdWlyZSgnLi90b0Zpbml0ZScpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvSW50ZWdlcigzLjIpO1xuICogLy8gPT4gM1xuICpcbiAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gMFxuICpcbiAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0ludGVnZXIoJzMuMicpO1xuICogLy8gPT4gM1xuICovXG5mdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvSW50ZWdlcjtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvTnVtYmVyO1xuIiwidmFyIGJhc2VGb3IgPSByZXF1aXJlKCcuL19iYXNlRm9yJyksXG4gICAgY2FzdEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fY2FzdEZ1bmN0aW9uJyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnLi9rZXlzSW4nKTtcblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW5cbiAqIG9iamVjdCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXRcbiAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4zLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKiBAc2VlIF8uZm9ySW5SaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmZvckluKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAqICAgY29uc29sZS5sb2coa2V5KTtcbiAqIH0pO1xuICogLy8gPT4gTG9ncyAnYScsICdiJywgdGhlbiAnYycgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gKi9cbmZ1bmN0aW9uIGZvckluKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgPyBvYmplY3RcbiAgICA6IGJhc2VGb3Iob2JqZWN0LCBjYXN0RnVuY3Rpb24oaXRlcmF0ZWUpLCBrZXlzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvckluO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5sYXN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAzXG4gKi9cbmZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGFzdDtcbiIsInZhciBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKSxcbiAgICBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICogQHNlZSBfLm1hcEtleXNcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHVzZXJzID0ge1xuICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAqIH07XG4gKlxuICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaXRlcmF0ZWUgPSBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBWYWx1ZXM7XG4iLCJ2YXIgYmFzZUV4dHJlbXVtID0gcmVxdWlyZSgnLi9fYmFzZUV4dHJlbXVtJyksXG4gICAgYmFzZUd0ID0gcmVxdWlyZSgnLi9fYmFzZUd0JyksXG4gICAgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTWF0aFxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLm1heChbNCwgMiwgOCwgNl0pO1xuICogLy8gPT4gOFxuICpcbiAqIF8ubWF4KFtdKTtcbiAqIC8vID0+IHVuZGVmaW5lZFxuICovXG5mdW5jdGlvbiBtYXgoYXJyYXkpIHtcbiAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlR3QpXG4gICAgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWF4O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ndGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUd0KHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPiBvdGhlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR3Q7XG4iLCJ2YXIgYmFzZU1lcmdlID0gcmVxdWlyZSgnLi9fYmFzZU1lcmdlJyksXG4gICAgY3JlYXRlQXNzaWduZXIgPSByZXF1aXJlKCcuL19jcmVhdGVBc3NpZ25lcicpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC41LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHtcbiAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAqIH07XG4gKlxuICogdmFyIG90aGVyID0ge1xuICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICogfTtcbiAqXG4gKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICovXG52YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZTtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYXNzaWduTWVyZ2VWYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnbk1lcmdlVmFsdWUnKSxcbiAgICBiYXNlRm9yID0gcmVxdWlyZSgnLi9fYmFzZUZvcicpLFxuICAgIGJhc2VNZXJnZURlZXAgPSByZXF1aXJlKCcuL19iYXNlTWVyZ2VEZWVwJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnLi9rZXlzSW4nKSxcbiAgICBzYWZlR2V0ID0gcmVxdWlyZSgnLi9fc2FmZUdldCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gKiAgY291bnRlcnBhcnRzLlxuICovXG5mdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH0sIGtleXNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1lcmdlO1xuIiwidmFyIGFzc2lnbk1lcmdlVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25NZXJnZVZhbHVlJyksXG4gICAgY2xvbmVCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUJ1ZmZlcicpLFxuICAgIGNsb25lVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Nsb25lVHlwZWRBcnJheScpLFxuICAgIGNvcHlBcnJheSA9IHJlcXVpcmUoJy4vX2NvcHlBcnJheScpLFxuICAgIGluaXRDbG9uZU9iamVjdCA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZU9iamVjdCcpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0FycmF5TGlrZU9iamVjdCA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2VPYmplY3QnKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vaXNQbGFpbk9iamVjdCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5JyksXG4gICAgc2FmZUdldCA9IHJlcXVpcmUoJy4vX3NhZmVHZXQnKSxcbiAgICB0b1BsYWluT2JqZWN0ID0gcmVxdWlyZSgnLi90b1BsYWluT2JqZWN0Jyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICBpZiAoc3RhY2tlZCkge1xuICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgIDogdW5kZWZpbmVkO1xuXG4gIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgaWYgKGlzQ29tbW9uKSB7XG4gICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChpc0NvbW1vbikge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgfVxuICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1lcmdlRGVlcDtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGdldFByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2dldFByb3RvdHlwZScpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1BsYWluT2JqZWN0O1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnLi9rZXlzSW4nKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nXG4gKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gKlxuICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9XG4gKi9cbmZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3QodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvUGxhaW5PYmplY3Q7XG4iLCJ2YXIgYmFzZVJlc3QgPSByZXF1aXJlKCcuL19iYXNlUmVzdCcpLFxuICAgIGlzSXRlcmF0ZWVDYWxsID0gcmVxdWlyZSgnLi9faXNJdGVyYXRlZUNhbGwnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICBsZW5ndGggPSAxO1xuICAgIH1cbiAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBhc3NpZ25lcihvYmplY3QsIHNvdXJjZSwgaW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVBc3NpZ25lcjtcbiIsInZhciBiYXNlRXh0cmVtdW0gPSByZXF1aXJlKCcuL19iYXNlRXh0cmVtdW0nKSxcbiAgICBiYXNlTHQgPSByZXF1aXJlKCcuL19iYXNlTHQnKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgbWluaW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBNYXRoXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gKiAvLyA9PiAyXG4gKlxuICogXy5taW4oW10pO1xuICogLy8gPT4gdW5kZWZpbmVkXG4gKi9cbmZ1bmN0aW9uIG1pbihhcnJheSkge1xuICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VMdClcbiAgICA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtaW47XG4iLCJ2YXIgYmFzZUV4dHJlbXVtID0gcmVxdWlyZSgnLi9fYmFzZUV4dHJlbXVtJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZUx0ID0gcmVxdWlyZSgnLi9fYmFzZUx0Jyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5taW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IE1hdGhcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gKlxuICogXy5taW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICogLy8gPT4geyAnbic6IDEgfVxuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICogLy8gPT4geyAnbic6IDEgfVxuICovXG5mdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VMdClcbiAgICA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtaW5CeTtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vdztcbiIsInZhciBiYXNlUGljayA9IHJlcXVpcmUoJy4vX2Jhc2VQaWNrJyksXG4gICAgZmxhdFJlc3QgPSByZXF1aXJlKCcuL19mbGF0UmVzdCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICpcbiAqIF8ucGljayhvYmplY3QsIFsnYScsICdjJ10pO1xuICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gKi9cbnZhciBwaWNrID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB7fSA6IGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGljaztcbiIsInZhciBiYXNlUGlja0J5ID0gcmVxdWlyZSgnLi9fYmFzZVBpY2tCeScpLFxuICAgIGhhc0luID0gcmVxdWlyZSgnLi9oYXNJbicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnBpY2tgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICogcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpIHtcbiAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVBpY2s7XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKSxcbiAgICBiYXNlU2V0ID0gcmVxdWlyZSgnLi9fYmFzZVNldCcpLFxuICAgIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiAgYF8ucGlja0J5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IHt9O1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHBhdGggPSBwYXRoc1tpbmRleF0sXG4gICAgICAgIHZhbHVlID0gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuXG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgcGF0aCkpIHtcbiAgICAgIGJhc2VTZXQocmVzdWx0LCBjYXN0UGF0aChwYXRoLCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVBpY2tCeTtcbiIsInZhciBhc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnblZhbHVlJyksXG4gICAgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgbmVzdGVkID0gb2JqZWN0O1xuXG4gIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgbmV3VmFsdWUgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmpWYWx1ZSwga2V5LCBuZXN0ZWQpIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICA/IG9ialZhbHVlXG4gICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICB9XG4gICAgfVxuICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU2V0O1xuIiwidmFyIGZsYXR0ZW4gPSByZXF1aXJlKCcuL2ZsYXR0ZW4nKSxcbiAgICBvdmVyUmVzdCA9IHJlcXVpcmUoJy4vX292ZXJSZXN0JyksXG4gICAgc2V0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19zZXRUb1N0cmluZycpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIGZsYXR0ZW5zIHRoZSByZXN0IGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGZsYXRSZXN0KGZ1bmMpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHVuZGVmaW5lZCwgZmxhdHRlbiksIGZ1bmMgKyAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdFJlc3Q7XG4iLCJ2YXIgY3JlYXRlUmFuZ2UgPSByZXF1aXJlKCcuL19jcmVhdGVSYW5nZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICogYHN0YXJ0YCBpcyBzcGVjaWZpZWQgd2l0aG91dCBhbiBgZW5kYCBvciBgc3RlcGAuIElmIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsXG4gKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gKlxuICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogXy5yYW5nZSg0KTtcbiAqIC8vID0+IFswLCAxLCAyLCAzXVxuICpcbiAqIF8ucmFuZ2UoLTQpO1xuICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gKlxuICogXy5yYW5nZSgxLCA1KTtcbiAqIC8vID0+IFsxLCAyLCAzLCA0XVxuICpcbiAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICogLy8gPT4gWzAsIDUsIDEwLCAxNV1cbiAqXG4gKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAqXG4gKiBfLnJhbmdlKDEsIDQsIDApO1xuICogLy8gPT4gWzEsIDEsIDFdXG4gKlxuICogXy5yYW5nZSgwKTtcbiAqIC8vID0+IFtdXG4gKi9cbnZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmFuZ2U7XG4iLCJ2YXIgYmFzZVJhbmdlID0gcmVxdWlyZSgnLi9fYmFzZVJhbmdlJyksXG4gICAgaXNJdGVyYXRlZUNhbGwgPSByZXF1aXJlKCcuL19pc0l0ZXJhdGVlQ2FsbCcpLFxuICAgIHRvRmluaXRlID0gcmVxdWlyZSgnLi90b0Zpbml0ZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlbmQgPSBzdGFydDtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICB9XG4gICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUmFuZ2U7XG4iLCIvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5nZWAgYW5kIGBfLnJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAqIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgcmVzdWx0W2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdID0gc3RhcnQ7XG4gICAgc3RhcnQgKz0gc3RlcDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VSYW5nZTtcbiIsInZhciBiYXNlRmxhdHRlbiA9IHJlcXVpcmUoJy4vX2Jhc2VGbGF0dGVuJyksXG4gICAgYmFzZU9yZGVyQnkgPSByZXF1aXJlKCcuL19iYXNlT3JkZXJCeScpLFxuICAgIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBpc0l0ZXJhdGVlQ2FsbCA9IHJlcXVpcmUoJy4vX2lzSXRlcmF0ZWVDYWxsJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICogcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uIHRocnUgZWFjaCBpdGVyYXRlZS4gVGhpcyBtZXRob2RcbiAqIHBlcmZvcm1zIGEgc3RhYmxlIHNvcnQsIHRoYXQgaXMsIGl0IHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgc29ydCBvcmRlciBvZlxuICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfVxuICogXTtcbiAqXG4gKiBfLnNvcnRCeSh1c2VycywgW2Z1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlcjsgfV0pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gKlxuICogXy5zb3J0QnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNF0sIFsnYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCA0MF0sIFsnZnJlZCcsIDQ4XV1cbiAqL1xudmFyIHNvcnRCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlcykge1xuICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciBsZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoO1xuICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICBpdGVyYXRlZXMgPSBbXTtcbiAgfSBlbHNlIGlmIChsZW5ndGggPiAyICYmIGlzSXRlcmF0ZWVDYWxsKGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdLCBpdGVyYXRlZXNbMl0pKSB7XG4gICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gIH1cbiAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGJhc2VGbGF0dGVuKGl0ZXJhdGVlcywgMSksIFtdKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNvcnRCeTtcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZU1hcCA9IHJlcXVpcmUoJy4vX2Jhc2VNYXAnKSxcbiAgICBiYXNlU29ydEJ5ID0gcmVxdWlyZSgnLi9fYmFzZVNvcnRCeScpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIGNvbXBhcmVNdWx0aXBsZSA9IHJlcXVpcmUoJy4vX2NvbXBhcmVNdWx0aXBsZScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBvcmRlcnMgVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycykge1xuICB2YXIgaW5kZXggPSAtMTtcbiAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLmxlbmd0aCA/IGl0ZXJhdGVlcyA6IFtpZGVudGl0eV0sIGJhc2VVbmFyeShiYXNlSXRlcmF0ZWUpKTtcblxuICB2YXIgcmVzdWx0ID0gYmFzZU1hcChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGl0ZXJhdGVlKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgfSk7XG5cbiAgcmV0dXJuIGJhc2VTb3J0QnkocmVzdWx0LCBmdW5jdGlvbihvYmplY3QsIG90aGVyKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlT3JkZXJCeTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydEJ5YCB3aGljaCB1c2VzIGBjb21wYXJlcmAgdG8gZGVmaW5lIHRoZVxuICogc29ydCBvcmRlciBvZiBgYXJyYXlgIGFuZCByZXBsYWNlcyBjcml0ZXJpYSBvYmplY3RzIHdpdGggdGhlaXIgY29ycmVzcG9uZGluZ1xuICogdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmVyIFRoZSBmdW5jdGlvbiB0byBkZWZpbmUgc29ydCBvcmRlci5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlU29ydEJ5KGFycmF5LCBjb21wYXJlcikge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBhcnJheVtsZW5ndGhdID0gYXJyYXlbbGVuZ3RoXS52YWx1ZTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNvcnRCeTtcbiIsInZhciBjb21wYXJlQXNjZW5kaW5nID0gcmVxdWlyZSgnLi9fY29tcGFyZUFzY2VuZGluZycpO1xuXG4vKipcbiAqIFVzZWQgYnkgYF8ub3JkZXJCeWAgdG8gY29tcGFyZSBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIGEgdmFsdWUgdG8gYW5vdGhlclxuICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gKlxuICogSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXMgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSxcbiAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgb2JqQ3JpdGVyaWEgPSBvYmplY3QuY3JpdGVyaWEsXG4gICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgb3JkZXJzTGVuZ3RoID0gb3JkZXJzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgIH1cbiAgfVxuICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgZm9yXG4gIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAvL1xuICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVNdWx0aXBsZTtcbiIsInZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqXG4gKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYHZhbHVlYC5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsXG4gICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsLFxuICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICBpZiAoKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyKSB8fFxuICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgKCF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgIChvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVBc2NlbmRpbmc7XG4iLCJ2YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMuICovXG52YXIgaWRDb3VudGVyID0gMDtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSB1bmlxdWUgSUQuIElmIGBwcmVmaXhgIGlzIGdpdmVuLCB0aGUgSUQgaXMgYXBwZW5kZWQgdG8gaXQuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcHJlZml4PScnXSBUaGUgdmFsdWUgdG8gcHJlZml4IHRoZSBJRCB3aXRoLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICpcbiAqIF8udW5pcXVlSWQoKTtcbiAqIC8vID0+ICcxMDUnXG4gKi9cbmZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgcmV0dXJuIHRvU3RyaW5nKHByZWZpeCkgKyBpZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1bmlxdWVJZDtcbiIsInZhciBhc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnblZhbHVlJyksXG4gICAgYmFzZVppcE9iamVjdCA9IHJlcXVpcmUoJy4vX2Jhc2VaaXBPYmplY3QnKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICogb25lIG9mIHByb3BlcnR5IGlkZW50aWZpZXJzIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjQuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gKi9cbmZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGFzc2lnblZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB6aXBPYmplY3Q7XG4iLCIvKipcbiAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25GdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gYmFzZVppcE9iamVjdChwcm9wcywgdmFsdWVzLCBhc3NpZ25GdW5jKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgdmFsc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICByZXN1bHQgPSB7fTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGluZGV4IDwgdmFsc0xlbmd0aCA/IHZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVppcE9iamVjdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgXyA9IHJlcXVpcmUoXCIuL2xvZGFzaFwiKSxcbiAgICBncmVlZHlGQVMgPSByZXF1aXJlKFwiLi9ncmVlZHktZmFzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcnVuOiBydW4sXG4gIHVuZG86IHVuZG9cbn07XG5cbmZ1bmN0aW9uIHJ1bihnKSB7XG4gIHZhciBmYXMgPSAoZy5ncmFwaCgpLmFjeWNsaWNlciA9PT0gXCJncmVlZHlcIlxuICAgICAgICAgICAgICAgID8gZ3JlZWR5RkFTKGcsIHdlaWdodEZuKGcpKVxuICAgICAgICAgICAgICAgIDogZGZzRkFTKGcpKTtcbiAgXy5mb3JFYWNoKGZhcywgZnVuY3Rpb24oZSkge1xuICAgIHZhciBsYWJlbCA9IGcuZWRnZShlKTtcbiAgICBnLnJlbW92ZUVkZ2UoZSk7XG4gICAgbGFiZWwuZm9yd2FyZE5hbWUgPSBlLm5hbWU7XG4gICAgbGFiZWwucmV2ZXJzZWQgPSB0cnVlO1xuICAgIGcuc2V0RWRnZShlLncsIGUudiwgbGFiZWwsIF8udW5pcXVlSWQoXCJyZXZcIikpO1xuICB9KTtcblxuICBmdW5jdGlvbiB3ZWlnaHRGbihnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBnLmVkZ2UoZSkud2VpZ2h0O1xuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gZGZzRkFTKGcpIHtcbiAgdmFyIGZhcyA9IFtdLFxuICAgICAgc3RhY2sgPSB7fSxcbiAgICAgIHZpc2l0ZWQgPSB7fTtcblxuICBmdW5jdGlvbiBkZnModikge1xuICAgIGlmIChfLmhhcyh2aXNpdGVkLCB2KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2aXNpdGVkW3ZdID0gdHJ1ZTtcbiAgICBzdGFja1t2XSA9IHRydWU7XG4gICAgXy5mb3JFYWNoKGcub3V0RWRnZXModiksIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmIChfLmhhcyhzdGFjaywgZS53KSkge1xuICAgICAgICBmYXMucHVzaChlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRmcyhlLncpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGRlbGV0ZSBzdGFja1t2XTtcbiAgfVxuXG4gIF8uZm9yRWFjaChnLm5vZGVzKCksIGRmcyk7XG4gIHJldHVybiBmYXM7XG59XG5cbmZ1bmN0aW9uIHVuZG8oZykge1xuICBfLmZvckVhY2goZy5lZGdlcygpLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGxhYmVsID0gZy5lZGdlKGUpO1xuICAgIGlmIChsYWJlbC5yZXZlcnNlZCkge1xuICAgICAgZy5yZW1vdmVFZGdlKGUpO1xuXG4gICAgICB2YXIgZm9yd2FyZE5hbWUgPSBsYWJlbC5mb3J3YXJkTmFtZTtcbiAgICAgIGRlbGV0ZSBsYWJlbC5yZXZlcnNlZDtcbiAgICAgIGRlbGV0ZSBsYWJlbC5mb3J3YXJkTmFtZTtcbiAgICAgIGcuc2V0RWRnZShlLncsIGUudiwgbGFiZWwsIGZvcndhcmROYW1lKTtcbiAgICB9XG4gIH0pO1xufVxuIiwidmFyIF8gPSByZXF1aXJlKFwiLi9sb2Rhc2hcIiksXG4gICAgR3JhcGggPSByZXF1aXJlKFwiLi9ncmFwaGxpYlwiKS5HcmFwaCxcbiAgICBMaXN0ID0gcmVxdWlyZShcIi4vZGF0YS9saXN0XCIpO1xuXG4vKlxuICogQSBncmVlZHkgaGV1cmlzdGljIGZvciBmaW5kaW5nIGEgZmVlZGJhY2sgYXJjIHNldCBmb3IgYSBncmFwaC4gQSBmZWVkYmFja1xuICogYXJjIHNldCBpcyBhIHNldCBvZiBlZGdlcyB0aGF0IGNhbiBiZSByZW1vdmVkIHRvIG1ha2UgYSBncmFwaCBhY3ljbGljLlxuICogVGhlIGFsZ29yaXRobSBjb21lcyBmcm9tOiBQLiBFYWRlcywgWC4gTGluLCBhbmQgVy4gRi4gU215dGgsIFwiQSBmYXN0IGFuZFxuICogZWZmZWN0aXZlIGhldXJpc3RpYyBmb3IgdGhlIGZlZWRiYWNrIGFyYyBzZXQgcHJvYmxlbS5cIiBUaGlzIGltcGxlbWVudGF0aW9uXG4gKiBhZGp1c3RzIHRoYXQgZnJvbSB0aGUgcGFwZXIgdG8gYWxsb3cgZm9yIHdlaWdodGVkIGVkZ2VzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGdyZWVkeUZBUztcblxudmFyIERFRkFVTFRfV0VJR0hUX0ZOID0gXy5jb25zdGFudCgxKTtcblxuZnVuY3Rpb24gZ3JlZWR5RkFTKGcsIHdlaWdodEZuKSB7XG4gIGlmIChnLm5vZGVDb3VudCgpIDw9IDEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHN0YXRlID0gYnVpbGRTdGF0ZShnLCB3ZWlnaHRGbiB8fCBERUZBVUxUX1dFSUdIVF9GTik7XG4gIHZhciByZXN1bHRzID0gZG9HcmVlZHlGQVMoc3RhdGUuZ3JhcGgsIHN0YXRlLmJ1Y2tldHMsIHN0YXRlLnplcm9JZHgpO1xuXG4gIC8vIEV4cGFuZCBtdWx0aS1lZGdlc1xuICByZXR1cm4gXy5mbGF0dGVuKF8ubWFwKHJlc3VsdHMsIGZ1bmN0aW9uKGUpIHtcbiAgICByZXR1cm4gZy5vdXRFZGdlcyhlLnYsIGUudyk7XG4gIH0pLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gZG9HcmVlZHlGQVMoZywgYnVja2V0cywgemVyb0lkeCkge1xuICB2YXIgcmVzdWx0cyA9IFtdLFxuICAgICAgc291cmNlcyA9IGJ1Y2tldHNbYnVja2V0cy5sZW5ndGggLSAxXSxcbiAgICAgIHNpbmtzID0gYnVja2V0c1swXTtcblxuICB2YXIgZW50cnk7XG4gIHdoaWxlIChnLm5vZGVDb3VudCgpKSB7XG4gICAgd2hpbGUgKChlbnRyeSA9IHNpbmtzLmRlcXVldWUoKSkpICAgeyByZW1vdmVOb2RlKGcsIGJ1Y2tldHMsIHplcm9JZHgsIGVudHJ5KTsgfVxuICAgIHdoaWxlICgoZW50cnkgPSBzb3VyY2VzLmRlcXVldWUoKSkpIHsgcmVtb3ZlTm9kZShnLCBidWNrZXRzLCB6ZXJvSWR4LCBlbnRyeSk7IH1cbiAgICBpZiAoZy5ub2RlQ291bnQoKSkge1xuICAgICAgZm9yICh2YXIgaSA9IGJ1Y2tldHMubGVuZ3RoIC0gMjsgaSA+IDA7IC0taSkge1xuICAgICAgICBlbnRyeSA9IGJ1Y2tldHNbaV0uZGVxdWV1ZSgpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5jb25jYXQocmVtb3ZlTm9kZShnLCBidWNrZXRzLCB6ZXJvSWR4LCBlbnRyeSwgdHJ1ZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU5vZGUoZywgYnVja2V0cywgemVyb0lkeCwgZW50cnksIGNvbGxlY3RQcmVkZWNlc3NvcnMpIHtcbiAgdmFyIHJlc3VsdHMgPSBjb2xsZWN0UHJlZGVjZXNzb3JzID8gW10gOiB1bmRlZmluZWQ7XG5cbiAgXy5mb3JFYWNoKGcuaW5FZGdlcyhlbnRyeS52KSwgZnVuY3Rpb24oZWRnZSkge1xuICAgIHZhciB3ZWlnaHQgPSBnLmVkZ2UoZWRnZSksXG4gICAgICAgIHVFbnRyeSA9IGcubm9kZShlZGdlLnYpO1xuXG4gICAgaWYgKGNvbGxlY3RQcmVkZWNlc3NvcnMpIHtcbiAgICAgIHJlc3VsdHMucHVzaCh7IHY6IGVkZ2UudiwgdzogZWRnZS53IH0pO1xuICAgIH1cblxuICAgIHVFbnRyeS5vdXQgLT0gd2VpZ2h0O1xuICAgIGFzc2lnbkJ1Y2tldChidWNrZXRzLCB6ZXJvSWR4LCB1RW50cnkpO1xuICB9KTtcblxuICBfLmZvckVhY2goZy5vdXRFZGdlcyhlbnRyeS52KSwgZnVuY3Rpb24oZWRnZSkge1xuICAgIHZhciB3ZWlnaHQgPSBnLmVkZ2UoZWRnZSksXG4gICAgICAgIHcgPSBlZGdlLncsXG4gICAgICAgIHdFbnRyeSA9IGcubm9kZSh3KTtcbiAgICB3RW50cnlbXCJpblwiXSAtPSB3ZWlnaHQ7XG4gICAgYXNzaWduQnVja2V0KGJ1Y2tldHMsIHplcm9JZHgsIHdFbnRyeSk7XG4gIH0pO1xuXG4gIGcucmVtb3ZlTm9kZShlbnRyeS52KTtcblxuICByZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gYnVpbGRTdGF0ZShnLCB3ZWlnaHRGbikge1xuICB2YXIgZmFzR3JhcGggPSBuZXcgR3JhcGgoKSxcbiAgICAgIG1heEluID0gMCxcbiAgICAgIG1heE91dCA9IDA7XG5cbiAgXy5mb3JFYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIGZhc0dyYXBoLnNldE5vZGUodiwgeyB2OiB2LCBcImluXCI6IDAsIG91dDogMCB9KTtcbiAgfSk7XG5cbiAgLy8gQWdncmVnYXRlIHdlaWdodHMgb24gbm9kZXMsIGJ1dCBhbHNvIHN1bSB0aGUgd2VpZ2h0cyBhY3Jvc3MgbXVsdGktZWRnZXNcbiAgLy8gaW50byBhIHNpbmdsZSBlZGdlIGZvciB0aGUgZmFzR3JhcGguXG4gIF8uZm9yRWFjaChnLmVkZ2VzKCksIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgcHJldldlaWdodCA9IGZhc0dyYXBoLmVkZ2UoZS52LCBlLncpIHx8IDAsXG4gICAgICAgIHdlaWdodCA9IHdlaWdodEZuKGUpLFxuICAgICAgICBlZGdlV2VpZ2h0ID0gcHJldldlaWdodCArIHdlaWdodDtcbiAgICBmYXNHcmFwaC5zZXRFZGdlKGUudiwgZS53LCBlZGdlV2VpZ2h0KTtcbiAgICBtYXhPdXQgPSBNYXRoLm1heChtYXhPdXQsIGZhc0dyYXBoLm5vZGUoZS52KS5vdXQgKz0gd2VpZ2h0KTtcbiAgICBtYXhJbiAgPSBNYXRoLm1heChtYXhJbiwgIGZhc0dyYXBoLm5vZGUoZS53KVtcImluXCJdICArPSB3ZWlnaHQpO1xuICB9KTtcblxuICB2YXIgYnVja2V0cyA9IF8ucmFuZ2UobWF4T3V0ICsgbWF4SW4gKyAzKS5tYXAoZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgTGlzdCgpOyB9KTtcbiAgdmFyIHplcm9JZHggPSBtYXhJbiArIDE7XG5cbiAgXy5mb3JFYWNoKGZhc0dyYXBoLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHtcbiAgICBhc3NpZ25CdWNrZXQoYnVja2V0cywgemVyb0lkeCwgZmFzR3JhcGgubm9kZSh2KSk7XG4gIH0pO1xuXG4gIHJldHVybiB7IGdyYXBoOiBmYXNHcmFwaCwgYnVja2V0czogYnVja2V0cywgemVyb0lkeDogemVyb0lkeCB9O1xufVxuXG5mdW5jdGlvbiBhc3NpZ25CdWNrZXQoYnVja2V0cywgemVyb0lkeCwgZW50cnkpIHtcbiAgaWYgKCFlbnRyeS5vdXQpIHtcbiAgICBidWNrZXRzWzBdLmVucXVldWUoZW50cnkpO1xuICB9IGVsc2UgaWYgKCFlbnRyeVtcImluXCJdKSB7XG4gICAgYnVja2V0c1tidWNrZXRzLmxlbmd0aCAtIDFdLmVucXVldWUoZW50cnkpO1xuICB9IGVsc2Uge1xuICAgIGJ1Y2tldHNbZW50cnkub3V0IC0gZW50cnlbXCJpblwiXSArIHplcm9JZHhdLmVucXVldWUoZW50cnkpO1xuICB9XG59XG4iLCIvKlxuICogU2ltcGxlIGRvdWJseSBsaW5rZWQgbGlzdCBpbXBsZW1lbnRhdGlvbiBkZXJpdmVkIGZyb20gQ29ybWVuLCBldCBhbC4sXG4gKiBcIkludHJvZHVjdGlvbiB0byBBbGdvcml0aG1zXCIuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0O1xuXG5mdW5jdGlvbiBMaXN0KCkge1xuICB2YXIgc2VudGluZWwgPSB7fTtcbiAgc2VudGluZWwuX25leHQgPSBzZW50aW5lbC5fcHJldiA9IHNlbnRpbmVsO1xuICB0aGlzLl9zZW50aW5lbCA9IHNlbnRpbmVsO1xufVxuXG5MaXN0LnByb3RvdHlwZS5kZXF1ZXVlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZW50aW5lbCA9IHRoaXMuX3NlbnRpbmVsLFxuICAgICAgZW50cnkgPSBzZW50aW5lbC5fcHJldjtcbiAgaWYgKGVudHJ5ICE9PSBzZW50aW5lbCkge1xuICAgIHVubGluayhlbnRyeSk7XG4gICAgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5MaXN0LnByb3RvdHlwZS5lbnF1ZXVlID0gZnVuY3Rpb24oZW50cnkpIHtcbiAgdmFyIHNlbnRpbmVsID0gdGhpcy5fc2VudGluZWw7XG4gIGlmIChlbnRyeS5fcHJldiAmJiBlbnRyeS5fbmV4dCkge1xuICAgIHVubGluayhlbnRyeSk7XG4gIH1cbiAgZW50cnkuX25leHQgPSBzZW50aW5lbC5fbmV4dDtcbiAgc2VudGluZWwuX25leHQuX3ByZXYgPSBlbnRyeTtcbiAgc2VudGluZWwuX25leHQgPSBlbnRyeTtcbiAgZW50cnkuX3ByZXYgPSBzZW50aW5lbDtcbn07XG5cbkxpc3QucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdHJzID0gW10sXG4gICAgICBzZW50aW5lbCA9IHRoaXMuX3NlbnRpbmVsLFxuICAgICAgY3VyciA9IHNlbnRpbmVsLl9wcmV2O1xuICB3aGlsZSAoY3VyciAhPT0gc2VudGluZWwpIHtcbiAgICBzdHJzLnB1c2goSlNPTi5zdHJpbmdpZnkoY3VyciwgZmlsdGVyT3V0TGlua3MpKTtcbiAgICBjdXJyID0gY3Vyci5fcHJldjtcbiAgfVxuICByZXR1cm4gXCJbXCIgKyBzdHJzLmpvaW4oXCIsIFwiKSArIFwiXVwiO1xufTtcblxuZnVuY3Rpb24gdW5saW5rKGVudHJ5KSB7XG4gIGVudHJ5Ll9wcmV2Ll9uZXh0ID0gZW50cnkuX25leHQ7XG4gIGVudHJ5Ll9uZXh0Ll9wcmV2ID0gZW50cnkuX3ByZXY7XG4gIGRlbGV0ZSBlbnRyeS5fbmV4dDtcbiAgZGVsZXRlIGVudHJ5Ll9wcmV2O1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJPdXRMaW5rcyhrLCB2KSB7XG4gIGlmIChrICE9PSBcIl9uZXh0XCIgJiYgayAhPT0gXCJfcHJldlwiKSB7XG4gICAgcmV0dXJuIHY7XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgXyA9IHJlcXVpcmUoXCIuL2xvZGFzaFwiKSxcbiAgICB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJ1bjogcnVuLFxuICB1bmRvOiB1bmRvXG59O1xuXG4vKlxuICogQnJlYWtzIGFueSBsb25nIGVkZ2VzIGluIHRoZSBncmFwaCBpbnRvIHNob3J0IHNlZ21lbnRzIHRoYXQgc3BhbiAxIGxheWVyXG4gKiBlYWNoLiBUaGlzIG9wZXJhdGlvbiBpcyB1bmRvYWJsZSB3aXRoIHRoZSBkZW5vcm1hbGl6ZSBmdW5jdGlvbi5cbiAqXG4gKiBQcmUtY29uZGl0aW9uczpcbiAqXG4gKiAgICAxLiBUaGUgaW5wdXQgZ3JhcGggaXMgYSBEQUcuXG4gKiAgICAyLiBFYWNoIG5vZGUgaW4gdGhlIGdyYXBoIGhhcyBhIFwicmFua1wiIHByb3BlcnR5LlxuICpcbiAqIFBvc3QtY29uZGl0aW9uOlxuICpcbiAqICAgIDEuIEFsbCBlZGdlcyBpbiB0aGUgZ3JhcGggaGF2ZSBhIGxlbmd0aCBvZiAxLlxuICogICAgMi4gRHVtbXkgbm9kZXMgYXJlIGFkZGVkIHdoZXJlIGVkZ2VzIGhhdmUgYmVlbiBzcGxpdCBpbnRvIHNlZ21lbnRzLlxuICogICAgMy4gVGhlIGdyYXBoIGlzIGF1Z21lbnRlZCB3aXRoIGEgXCJkdW1teUNoYWluc1wiIGF0dHJpYnV0ZSB3aGljaCBjb250YWluc1xuICogICAgICAgdGhlIGZpcnN0IGR1bW15IGluIGVhY2ggY2hhaW4gb2YgZHVtbXkgbm9kZXMgcHJvZHVjZWQuXG4gKi9cbmZ1bmN0aW9uIHJ1bihnKSB7XG4gIGcuZ3JhcGgoKS5kdW1teUNoYWlucyA9IFtdO1xuICBfLmZvckVhY2goZy5lZGdlcygpLCBmdW5jdGlvbihlZGdlKSB7IG5vcm1hbGl6ZUVkZ2UoZywgZWRnZSk7IH0pO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVFZGdlKGcsIGUpIHtcbiAgdmFyIHYgPSBlLnYsXG4gICAgICB2UmFuayA9IGcubm9kZSh2KS5yYW5rLFxuICAgICAgdyA9IGUudyxcbiAgICAgIHdSYW5rID0gZy5ub2RlKHcpLnJhbmssXG4gICAgICBuYW1lID0gZS5uYW1lLFxuICAgICAgZWRnZUxhYmVsID0gZy5lZGdlKGUpLFxuICAgICAgbGFiZWxSYW5rID0gZWRnZUxhYmVsLmxhYmVsUmFuaztcblxuICBpZiAod1JhbmsgPT09IHZSYW5rICsgMSkgcmV0dXJuO1xuXG4gIGcucmVtb3ZlRWRnZShlKTtcblxuICB2YXIgZHVtbXksIGF0dHJzLCBpO1xuICBmb3IgKGkgPSAwLCArK3ZSYW5rOyB2UmFuayA8IHdSYW5rOyArK2ksICsrdlJhbmspIHtcbiAgICBlZGdlTGFiZWwucG9pbnRzID0gW107XG4gICAgYXR0cnMgPSB7XG4gICAgICB3aWR0aDogMCwgaGVpZ2h0OiAwLFxuICAgICAgZWRnZUxhYmVsOiBlZGdlTGFiZWwsIGVkZ2VPYmo6IGUsXG4gICAgICByYW5rOiB2UmFua1xuICAgIH07XG4gICAgZHVtbXkgPSB1dGlsLmFkZER1bW15Tm9kZShnLCBcImVkZ2VcIiwgYXR0cnMsIFwiX2RcIik7XG4gICAgaWYgKHZSYW5rID09PSBsYWJlbFJhbmspIHtcbiAgICAgIGF0dHJzLndpZHRoID0gZWRnZUxhYmVsLndpZHRoO1xuICAgICAgYXR0cnMuaGVpZ2h0ID0gZWRnZUxhYmVsLmhlaWdodDtcbiAgICAgIGF0dHJzLmR1bW15ID0gXCJlZGdlLWxhYmVsXCI7XG4gICAgICBhdHRycy5sYWJlbHBvcyA9IGVkZ2VMYWJlbC5sYWJlbHBvcztcbiAgICB9XG4gICAgZy5zZXRFZGdlKHYsIGR1bW15LCB7IHdlaWdodDogZWRnZUxhYmVsLndlaWdodCB9LCBuYW1lKTtcbiAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgZy5ncmFwaCgpLmR1bW15Q2hhaW5zLnB1c2goZHVtbXkpO1xuICAgIH1cbiAgICB2ID0gZHVtbXk7XG4gIH1cblxuICBnLnNldEVkZ2UodiwgdywgeyB3ZWlnaHQ6IGVkZ2VMYWJlbC53ZWlnaHQgfSwgbmFtZSk7XG59XG5cbmZ1bmN0aW9uIHVuZG8oZykge1xuICBfLmZvckVhY2goZy5ncmFwaCgpLmR1bW15Q2hhaW5zLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIG5vZGUgPSBnLm5vZGUodiksXG4gICAgICAgIG9yaWdMYWJlbCA9IG5vZGUuZWRnZUxhYmVsLFxuICAgICAgICB3O1xuICAgIGcuc2V0RWRnZShub2RlLmVkZ2VPYmosIG9yaWdMYWJlbCk7XG4gICAgd2hpbGUgKG5vZGUuZHVtbXkpIHtcbiAgICAgIHcgPSBnLnN1Y2Nlc3NvcnModilbMF07XG4gICAgICBnLnJlbW92ZU5vZGUodik7XG4gICAgICBvcmlnTGFiZWwucG9pbnRzLnB1c2goeyB4OiBub2RlLngsIHk6IG5vZGUueSB9KTtcbiAgICAgIGlmIChub2RlLmR1bW15ID09PSBcImVkZ2UtbGFiZWxcIikge1xuICAgICAgICBvcmlnTGFiZWwueCA9IG5vZGUueDtcbiAgICAgICAgb3JpZ0xhYmVsLnkgPSBub2RlLnk7XG4gICAgICAgIG9yaWdMYWJlbC53aWR0aCA9IG5vZGUud2lkdGg7XG4gICAgICAgIG9yaWdMYWJlbC5oZWlnaHQgPSBub2RlLmhlaWdodDtcbiAgICAgIH1cbiAgICAgIHYgPSB3O1xuICAgICAgbm9kZSA9IGcubm9kZSh2KTtcbiAgICB9XG4gIH0pO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciByYW5rVXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIiksXG4gICAgbG9uZ2VzdFBhdGggPSByYW5rVXRpbC5sb25nZXN0UGF0aCxcbiAgICBmZWFzaWJsZVRyZWUgPSByZXF1aXJlKFwiLi9mZWFzaWJsZS10cmVlXCIpLFxuICAgIG5ldHdvcmtTaW1wbGV4ID0gcmVxdWlyZShcIi4vbmV0d29yay1zaW1wbGV4XCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJhbms7XG5cbi8qXG4gKiBBc3NpZ25zIGEgcmFuayB0byBlYWNoIG5vZGUgaW4gdGhlIGlucHV0IGdyYXBoIHRoYXQgcmVzcGVjdHMgdGhlIFwibWlubGVuXCJcbiAqIGNvbnN0cmFpbnQgc3BlY2lmaWVkIG9uIGVkZ2VzIGJldHdlZW4gbm9kZXMuXG4gKlxuICogVGhpcyBiYXNpYyBzdHJ1Y3R1cmUgaXMgZGVyaXZlZCBmcm9tIEdhbnNuZXIsIGV0IGFsLiwgXCJBIFRlY2huaXF1ZSBmb3JcbiAqIERyYXdpbmcgRGlyZWN0ZWQgR3JhcGhzLlwiXG4gKlxuICogUHJlLWNvbmRpdGlvbnM6XG4gKlxuICogICAgMS4gR3JhcGggbXVzdCBiZSBhIGNvbm5lY3RlZCBEQUdcbiAqICAgIDIuIEdyYXBoIG5vZGVzIG11c3QgYmUgb2JqZWN0c1xuICogICAgMy4gR3JhcGggZWRnZXMgbXVzdCBoYXZlIFwid2VpZ2h0XCIgYW5kIFwibWlubGVuXCIgYXR0cmlidXRlc1xuICpcbiAqIFBvc3QtY29uZGl0aW9uczpcbiAqXG4gKiAgICAxLiBHcmFwaCBub2RlcyB3aWxsIGhhdmUgYSBcInJhbmtcIiBhdHRyaWJ1dGUgYmFzZWQgb24gdGhlIHJlc3VsdHMgb2YgdGhlXG4gKiAgICAgICBhbGdvcml0aG0uIFJhbmtzIGNhbiBzdGFydCBhdCBhbnkgaW5kZXggKGluY2x1ZGluZyBuZWdhdGl2ZSksIHdlJ2xsXG4gKiAgICAgICBmaXggdGhlbSB1cCBsYXRlci5cbiAqL1xuZnVuY3Rpb24gcmFuayhnKSB7XG4gIHN3aXRjaChnLmdyYXBoKCkucmFua2VyKSB7XG4gICAgY2FzZSBcIm5ldHdvcmstc2ltcGxleFwiOiBuZXR3b3JrU2ltcGxleFJhbmtlcihnKTsgYnJlYWs7XG4gICAgY2FzZSBcInRpZ2h0LXRyZWVcIjogdGlnaHRUcmVlUmFua2VyKGcpOyBicmVhaztcbiAgICBjYXNlIFwibG9uZ2VzdC1wYXRoXCI6IGxvbmdlc3RQYXRoUmFua2VyKGcpOyBicmVhaztcbiAgICBkZWZhdWx0OiBuZXR3b3JrU2ltcGxleFJhbmtlcihnKTtcbiAgfVxufVxuXG4vLyBBIGZhc3QgYW5kIHNpbXBsZSByYW5rZXIsIGJ1dCByZXN1bHRzIGFyZSBmYXIgZnJvbSBvcHRpbWFsLlxudmFyIGxvbmdlc3RQYXRoUmFua2VyID0gbG9uZ2VzdFBhdGg7XG5cbmZ1bmN0aW9uIHRpZ2h0VHJlZVJhbmtlcihnKSB7XG4gIGxvbmdlc3RQYXRoKGcpO1xuICBmZWFzaWJsZVRyZWUoZyk7XG59XG5cbmZ1bmN0aW9uIG5ldHdvcmtTaW1wbGV4UmFua2VyKGcpIHtcbiAgbmV0d29ya1NpbXBsZXgoZyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpLFxuICAgIGZlYXNpYmxlVHJlZSA9IHJlcXVpcmUoXCIuL2ZlYXNpYmxlLXRyZWVcIiksXG4gICAgc2xhY2sgPSByZXF1aXJlKFwiLi91dGlsXCIpLnNsYWNrLFxuICAgIGluaXRSYW5rID0gcmVxdWlyZShcIi4vdXRpbFwiKS5sb25nZXN0UGF0aCxcbiAgICBwcmVvcmRlciA9IHJlcXVpcmUoXCIuLi9ncmFwaGxpYlwiKS5hbGcucHJlb3JkZXIsXG4gICAgcG9zdG9yZGVyID0gcmVxdWlyZShcIi4uL2dyYXBobGliXCIpLmFsZy5wb3N0b3JkZXIsXG4gICAgc2ltcGxpZnkgPSByZXF1aXJlKFwiLi4vdXRpbFwiKS5zaW1wbGlmeTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXR3b3JrU2ltcGxleDtcblxuLy8gRXhwb3NlIHNvbWUgaW50ZXJuYWxzIGZvciB0ZXN0aW5nIHB1cnBvc2VzXG5uZXR3b3JrU2ltcGxleC5pbml0TG93TGltVmFsdWVzID0gaW5pdExvd0xpbVZhbHVlcztcbm5ldHdvcmtTaW1wbGV4LmluaXRDdXRWYWx1ZXMgPSBpbml0Q3V0VmFsdWVzO1xubmV0d29ya1NpbXBsZXguY2FsY0N1dFZhbHVlID0gY2FsY0N1dFZhbHVlO1xubmV0d29ya1NpbXBsZXgubGVhdmVFZGdlID0gbGVhdmVFZGdlO1xubmV0d29ya1NpbXBsZXguZW50ZXJFZGdlID0gZW50ZXJFZGdlO1xubmV0d29ya1NpbXBsZXguZXhjaGFuZ2VFZGdlcyA9IGV4Y2hhbmdlRWRnZXM7XG5cbi8qXG4gKiBUaGUgbmV0d29yayBzaW1wbGV4IGFsZ29yaXRobSBhc3NpZ25zIHJhbmtzIHRvIGVhY2ggbm9kZSBpbiB0aGUgaW5wdXQgZ3JhcGhcbiAqIGFuZCBpdGVyYXRpdmVseSBpbXByb3ZlcyB0aGUgcmFua2luZyB0byByZWR1Y2UgdGhlIGxlbmd0aCBvZiBlZGdlcy5cbiAqXG4gKiBQcmVjb25kaXRpb25zOlxuICpcbiAqICAgIDEuIFRoZSBpbnB1dCBncmFwaCBtdXN0IGJlIGEgREFHLlxuICogICAgMi4gQWxsIG5vZGVzIGluIHRoZSBncmFwaCBtdXN0IGhhdmUgYW4gb2JqZWN0IHZhbHVlLlxuICogICAgMy4gQWxsIGVkZ2VzIGluIHRoZSBncmFwaCBtdXN0IGhhdmUgXCJtaW5sZW5cIiBhbmQgXCJ3ZWlnaHRcIiBhdHRyaWJ1dGVzLlxuICpcbiAqIFBvc3Rjb25kaXRpb25zOlxuICpcbiAqICAgIDEuIEFsbCBub2RlcyBpbiB0aGUgZ3JhcGggd2lsbCBoYXZlIGFuIGFzc2lnbmVkIFwicmFua1wiIGF0dHJpYnV0ZSB0aGF0IGhhc1xuICogICAgICAgYmVlbiBvcHRpbWl6ZWQgYnkgdGhlIG5ldHdvcmsgc2ltcGxleCBhbGdvcml0aG0uIFJhbmtzIHN0YXJ0IGF0IDAuXG4gKlxuICpcbiAqIEEgcm91Z2ggc2tldGNoIG9mIHRoZSBhbGdvcml0aG0gaXMgYXMgZm9sbG93czpcbiAqXG4gKiAgICAxLiBBc3NpZ24gaW5pdGlhbCByYW5rcyB0byBlYWNoIG5vZGUuIFdlIHVzZSB0aGUgbG9uZ2VzdCBwYXRoIGFsZ29yaXRobSxcbiAqICAgICAgIHdoaWNoIGFzc2lnbnMgcmFua3MgdG8gdGhlIGxvd2VzdCBwb3NpdGlvbiBwb3NzaWJsZS4gSW4gZ2VuZXJhbCB0aGlzXG4gKiAgICAgICBsZWFkcyB0byB2ZXJ5IHdpZGUgYm90dG9tIHJhbmtzIGFuZCB1bm5lY2Vzc2FyaWx5IGxvbmcgZWRnZXMuXG4gKiAgICAyLiBDb25zdHJ1Y3QgYSBmZWFzaWJsZSB0aWdodCB0cmVlLiBBIHRpZ2h0IHRyZWUgaXMgb25lIHN1Y2ggdGhhdCBhbGxcbiAqICAgICAgIGVkZ2VzIGluIHRoZSB0cmVlIGhhdmUgbm8gc2xhY2sgKGRpZmZlcmVuY2UgYmV0d2VlbiBsZW5ndGggb2YgZWRnZVxuICogICAgICAgYW5kIG1pbmxlbiBmb3IgdGhlIGVkZ2UpLiBUaGlzIGJ5IGl0c2VsZiBncmVhdGx5IGltcHJvdmVzIHRoZSBhc3NpZ25lZFxuICogICAgICAgcmFua2luZ3MgYnkgc2hvcnRpbmcgZWRnZXMuXG4gKiAgICAzLiBJdGVyYXRpdmVseSBmaW5kIGVkZ2VzIHRoYXQgaGF2ZSBuZWdhdGl2ZSBjdXQgdmFsdWVzLiBHZW5lcmFsbHkgYVxuICogICAgICAgbmVnYXRpdmUgY3V0IHZhbHVlIGluZGljYXRlcyB0aGF0IHRoZSBlZGdlIGNvdWxkIGJlIHJlbW92ZWQgYW5kIGEgbmV3XG4gKiAgICAgICB0cmVlIGVkZ2UgY291bGQgYmUgYWRkZWQgdG8gcHJvZHVjZSBhIG1vcmUgY29tcGFjdCBncmFwaC5cbiAqXG4gKiBNdWNoIG9mIHRoZSBhbGdvcml0aG1zIGhlcmUgYXJlIGRlcml2ZWQgZnJvbSBHYW5zbmVyLCBldCBhbC4sIFwiQSBUZWNobmlxdWVcbiAqIGZvciBEcmF3aW5nIERpcmVjdGVkIEdyYXBocy5cIiBUaGUgc3RydWN0dXJlIG9mIHRoZSBmaWxlIHJvdWdobHkgZm9sbG93cyB0aGVcbiAqIHN0cnVjdHVyZSBvZiB0aGUgb3ZlcmFsbCBhbGdvcml0aG0uXG4gKi9cbmZ1bmN0aW9uIG5ldHdvcmtTaW1wbGV4KGcpIHtcbiAgZyA9IHNpbXBsaWZ5KGcpO1xuICBpbml0UmFuayhnKTtcbiAgdmFyIHQgPSBmZWFzaWJsZVRyZWUoZyk7XG4gIGluaXRMb3dMaW1WYWx1ZXModCk7XG4gIGluaXRDdXRWYWx1ZXModCwgZyk7XG5cbiAgdmFyIGUsIGY7XG4gIHdoaWxlICgoZSA9IGxlYXZlRWRnZSh0KSkpIHtcbiAgICBmID0gZW50ZXJFZGdlKHQsIGcsIGUpO1xuICAgIGV4Y2hhbmdlRWRnZXModCwgZywgZSwgZik7XG4gIH1cbn1cblxuLypcbiAqIEluaXRpYWxpemVzIGN1dCB2YWx1ZXMgZm9yIGFsbCBlZGdlcyBpbiB0aGUgdHJlZS5cbiAqL1xuZnVuY3Rpb24gaW5pdEN1dFZhbHVlcyh0LCBnKSB7XG4gIHZhciB2cyA9IHBvc3RvcmRlcih0LCB0Lm5vZGVzKCkpO1xuICB2cyA9IHZzLnNsaWNlKDAsIHZzLmxlbmd0aCAtIDEpO1xuICBfLmZvckVhY2godnMsIGZ1bmN0aW9uKHYpIHtcbiAgICBhc3NpZ25DdXRWYWx1ZSh0LCBnLCB2KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFzc2lnbkN1dFZhbHVlKHQsIGcsIGNoaWxkKSB7XG4gIHZhciBjaGlsZExhYiA9IHQubm9kZShjaGlsZCksXG4gICAgICBwYXJlbnQgPSBjaGlsZExhYi5wYXJlbnQ7XG4gIHQuZWRnZShjaGlsZCwgcGFyZW50KS5jdXR2YWx1ZSA9IGNhbGNDdXRWYWx1ZSh0LCBnLCBjaGlsZCk7XG59XG5cbi8qXG4gKiBHaXZlbiB0aGUgdGlnaHQgdHJlZSwgaXRzIGdyYXBoLCBhbmQgYSBjaGlsZCBpbiB0aGUgZ3JhcGggY2FsY3VsYXRlIGFuZFxuICogcmV0dXJuIHRoZSBjdXQgdmFsdWUgZm9yIHRoZSBlZGdlIGJldHdlZW4gdGhlIGNoaWxkIGFuZCBpdHMgcGFyZW50LlxuICovXG5mdW5jdGlvbiBjYWxjQ3V0VmFsdWUodCwgZywgY2hpbGQpIHtcbiAgdmFyIGNoaWxkTGFiID0gdC5ub2RlKGNoaWxkKSxcbiAgICAgIHBhcmVudCA9IGNoaWxkTGFiLnBhcmVudCxcbiAgICAgIC8vIFRydWUgaWYgdGhlIGNoaWxkIGlzIG9uIHRoZSB0YWlsIGVuZCBvZiB0aGUgZWRnZSBpbiB0aGUgZGlyZWN0ZWQgZ3JhcGhcbiAgICAgIGNoaWxkSXNUYWlsID0gdHJ1ZSxcbiAgICAgIC8vIFRoZSBncmFwaCdzIHZpZXcgb2YgdGhlIHRyZWUgZWRnZSB3ZSdyZSBpbnNwZWN0aW5nXG4gICAgICBncmFwaEVkZ2UgPSBnLmVkZ2UoY2hpbGQsIHBhcmVudCksXG4gICAgICAvLyBUaGUgYWNjdW11bGF0ZWQgY3V0IHZhbHVlIGZvciB0aGUgZWRnZSBiZXR3ZWVuIHRoaXMgbm9kZSBhbmQgaXRzIHBhcmVudFxuICAgICAgY3V0VmFsdWUgPSAwO1xuXG4gIGlmICghZ3JhcGhFZGdlKSB7XG4gICAgY2hpbGRJc1RhaWwgPSBmYWxzZTtcbiAgICBncmFwaEVkZ2UgPSBnLmVkZ2UocGFyZW50LCBjaGlsZCk7XG4gIH1cblxuICBjdXRWYWx1ZSA9IGdyYXBoRWRnZS53ZWlnaHQ7XG5cbiAgXy5mb3JFYWNoKGcubm9kZUVkZ2VzKGNoaWxkKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBpc091dEVkZ2UgPSBlLnYgPT09IGNoaWxkLFxuICAgICAgICBvdGhlciA9IGlzT3V0RWRnZSA/IGUudyA6IGUudjtcblxuICAgIGlmIChvdGhlciAhPT0gcGFyZW50KSB7XG4gICAgICB2YXIgcG9pbnRzVG9IZWFkID0gaXNPdXRFZGdlID09PSBjaGlsZElzVGFpbCxcbiAgICAgICAgICBvdGhlcldlaWdodCA9IGcuZWRnZShlKS53ZWlnaHQ7XG5cbiAgICAgIGN1dFZhbHVlICs9IHBvaW50c1RvSGVhZCA/IG90aGVyV2VpZ2h0IDogLW90aGVyV2VpZ2h0O1xuICAgICAgaWYgKGlzVHJlZUVkZ2UodCwgY2hpbGQsIG90aGVyKSkge1xuICAgICAgICB2YXIgb3RoZXJDdXRWYWx1ZSA9IHQuZWRnZShjaGlsZCwgb3RoZXIpLmN1dHZhbHVlO1xuICAgICAgICBjdXRWYWx1ZSArPSBwb2ludHNUb0hlYWQgPyAtb3RoZXJDdXRWYWx1ZSA6IG90aGVyQ3V0VmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY3V0VmFsdWU7XG59XG5cbmZ1bmN0aW9uIGluaXRMb3dMaW1WYWx1ZXModHJlZSwgcm9vdCkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICByb290ID0gdHJlZS5ub2RlcygpWzBdO1xuICB9XG4gIGRmc0Fzc2lnbkxvd0xpbSh0cmVlLCB7fSwgMSwgcm9vdCk7XG59XG5cbmZ1bmN0aW9uIGRmc0Fzc2lnbkxvd0xpbSh0cmVlLCB2aXNpdGVkLCBuZXh0TGltLCB2LCBwYXJlbnQpIHtcbiAgdmFyIGxvdyA9IG5leHRMaW0sXG4gICAgICBsYWJlbCA9IHRyZWUubm9kZSh2KTtcblxuICB2aXNpdGVkW3ZdID0gdHJ1ZTtcbiAgXy5mb3JFYWNoKHRyZWUubmVpZ2hib3JzKHYpLCBmdW5jdGlvbih3KSB7XG4gICAgaWYgKCFfLmhhcyh2aXNpdGVkLCB3KSkge1xuICAgICAgbmV4dExpbSA9IGRmc0Fzc2lnbkxvd0xpbSh0cmVlLCB2aXNpdGVkLCBuZXh0TGltLCB3LCB2KTtcbiAgICB9XG4gIH0pO1xuXG4gIGxhYmVsLmxvdyA9IGxvdztcbiAgbGFiZWwubGltID0gbmV4dExpbSsrO1xuICBpZiAocGFyZW50KSB7XG4gICAgbGFiZWwucGFyZW50ID0gcGFyZW50O1xuICB9IGVsc2Uge1xuICAgIC8vIFRPRE8gc2hvdWxkIGJlIGFibGUgdG8gcmVtb3ZlIHRoaXMgd2hlbiB3ZSBpbmNyZW1lbnRhbGx5IHVwZGF0ZSBsb3cgbGltXG4gICAgZGVsZXRlIGxhYmVsLnBhcmVudDtcbiAgfVxuXG4gIHJldHVybiBuZXh0TGltO1xufVxuXG5mdW5jdGlvbiBsZWF2ZUVkZ2UodHJlZSkge1xuICByZXR1cm4gXy5maW5kKHRyZWUuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHJldHVybiB0cmVlLmVkZ2UoZSkuY3V0dmFsdWUgPCAwO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZW50ZXJFZGdlKHQsIGcsIGVkZ2UpIHtcbiAgdmFyIHYgPSBlZGdlLnYsXG4gICAgICB3ID0gZWRnZS53O1xuXG4gIC8vIEZvciB0aGUgcmVzdCBvZiB0aGlzIGZ1bmN0aW9uIHdlIGFzc3VtZSB0aGF0IHYgaXMgdGhlIHRhaWwgYW5kIHcgaXMgdGhlXG4gIC8vIGhlYWQsIHNvIGlmIHdlIGRvbid0IGhhdmUgdGhpcyBlZGdlIGluIHRoZSBncmFwaCB3ZSBzaG91bGQgZmxpcCBpdCB0b1xuICAvLyBtYXRjaCB0aGUgY29ycmVjdCBvcmllbnRhdGlvbi5cbiAgaWYgKCFnLmhhc0VkZ2UodiwgdykpIHtcbiAgICB2ID0gZWRnZS53O1xuICAgIHcgPSBlZGdlLnY7XG4gIH1cblxuICB2YXIgdkxhYmVsID0gdC5ub2RlKHYpLFxuICAgICAgd0xhYmVsID0gdC5ub2RlKHcpLFxuICAgICAgdGFpbExhYmVsID0gdkxhYmVsLFxuICAgICAgZmxpcCA9IGZhbHNlO1xuXG4gIC8vIElmIHRoZSByb290IGlzIGluIHRoZSB0YWlsIG9mIHRoZSBlZGdlIHRoZW4gd2UgbmVlZCB0byBmbGlwIHRoZSBsb2dpYyB0aGF0XG4gIC8vIGNoZWNrcyBmb3IgdGhlIGhlYWQgYW5kIHRhaWwgbm9kZXMgaW4gdGhlIGNhbmRpZGF0ZXMgZnVuY3Rpb24gYmVsb3cuXG4gIGlmICh2TGFiZWwubGltID4gd0xhYmVsLmxpbSkge1xuICAgIHRhaWxMYWJlbCA9IHdMYWJlbDtcbiAgICBmbGlwID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBjYW5kaWRhdGVzID0gXy5maWx0ZXIoZy5lZGdlcygpLCBmdW5jdGlvbihlZGdlKSB7XG4gICAgcmV0dXJuIGZsaXAgPT09IGlzRGVzY2VuZGFudCh0LCB0Lm5vZGUoZWRnZS52KSwgdGFpbExhYmVsKSAmJlxuICAgICAgICAgICBmbGlwICE9PSBpc0Rlc2NlbmRhbnQodCwgdC5ub2RlKGVkZ2UudyksIHRhaWxMYWJlbCk7XG4gIH0pO1xuXG4gIHJldHVybiBfLm1pbkJ5KGNhbmRpZGF0ZXMsIGZ1bmN0aW9uKGVkZ2UpIHsgcmV0dXJuIHNsYWNrKGcsIGVkZ2UpOyB9KTtcbn1cblxuZnVuY3Rpb24gZXhjaGFuZ2VFZGdlcyh0LCBnLCBlLCBmKSB7XG4gIHZhciB2ID0gZS52LFxuICAgICAgdyA9IGUudztcbiAgdC5yZW1vdmVFZGdlKHYsIHcpO1xuICB0LnNldEVkZ2UoZi52LCBmLncsIHt9KTtcbiAgaW5pdExvd0xpbVZhbHVlcyh0KTtcbiAgaW5pdEN1dFZhbHVlcyh0LCBnKTtcbiAgdXBkYXRlUmFua3ModCwgZyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVJhbmtzKHQsIGcpIHtcbiAgdmFyIHJvb3QgPSBfLmZpbmQodC5ub2RlcygpLCBmdW5jdGlvbih2KSB7IHJldHVybiAhZy5ub2RlKHYpLnBhcmVudDsgfSksXG4gICAgICB2cyA9IHByZW9yZGVyKHQsIHJvb3QpO1xuICB2cyA9IHZzLnNsaWNlKDEpO1xuICBfLmZvckVhY2godnMsIGZ1bmN0aW9uKHYpIHtcbiAgICB2YXIgcGFyZW50ID0gdC5ub2RlKHYpLnBhcmVudCxcbiAgICAgICAgZWRnZSA9IGcuZWRnZSh2LCBwYXJlbnQpLFxuICAgICAgICBmbGlwcGVkID0gZmFsc2U7XG5cbiAgICBpZiAoIWVkZ2UpIHtcbiAgICAgIGVkZ2UgPSBnLmVkZ2UocGFyZW50LCB2KTtcbiAgICAgIGZsaXBwZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGcubm9kZSh2KS5yYW5rID0gZy5ub2RlKHBhcmVudCkucmFuayArIChmbGlwcGVkID8gZWRnZS5taW5sZW4gOiAtZWRnZS5taW5sZW4pO1xuICB9KTtcbn1cblxuLypcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZWRnZSBpcyBpbiB0aGUgdHJlZS5cbiAqL1xuZnVuY3Rpb24gaXNUcmVlRWRnZSh0cmVlLCB1LCB2KSB7XG4gIHJldHVybiB0cmVlLmhhc0VkZ2UodSwgdik7XG59XG5cbi8qXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCBub2RlIGlzIGRlc2NlbmRhbnQgb2YgdGhlIHJvb3Qgbm9kZSBwZXIgdGhlXG4gKiBhc3NpZ25lZCBsb3cgYW5kIGxpbSBhdHRyaWJ1dGVzIGluIHRoZSB0cmVlLlxuICovXG5mdW5jdGlvbiBpc0Rlc2NlbmRhbnQodHJlZSwgdkxhYmVsLCByb290TGFiZWwpIHtcbiAgcmV0dXJuIHJvb3RMYWJlbC5sb3cgPD0gdkxhYmVsLmxpbSAmJiB2TGFiZWwubGltIDw9IHJvb3RMYWJlbC5saW07XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnREdW1teUNoYWlucztcblxuZnVuY3Rpb24gcGFyZW50RHVtbXlDaGFpbnMoZykge1xuICB2YXIgcG9zdG9yZGVyTnVtcyA9IHBvc3RvcmRlcihnKTtcblxuICBfLmZvckVhY2goZy5ncmFwaCgpLmR1bW15Q2hhaW5zLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIG5vZGUgPSBnLm5vZGUodiksXG4gICAgICAgIGVkZ2VPYmogPSBub2RlLmVkZ2VPYmosXG4gICAgICAgIHBhdGhEYXRhID0gZmluZFBhdGgoZywgcG9zdG9yZGVyTnVtcywgZWRnZU9iai52LCBlZGdlT2JqLncpLFxuICAgICAgICBwYXRoID0gcGF0aERhdGEucGF0aCxcbiAgICAgICAgbGNhID0gcGF0aERhdGEubGNhLFxuICAgICAgICBwYXRoSWR4ID0gMCxcbiAgICAgICAgcGF0aFYgPSBwYXRoW3BhdGhJZHhdLFxuICAgICAgICBhc2NlbmRpbmcgPSB0cnVlO1xuXG4gICAgd2hpbGUgKHYgIT09IGVkZ2VPYmoudykge1xuICAgICAgbm9kZSA9IGcubm9kZSh2KTtcblxuICAgICAgaWYgKGFzY2VuZGluZykge1xuICAgICAgICB3aGlsZSAoKHBhdGhWID0gcGF0aFtwYXRoSWR4XSkgIT09IGxjYSAmJlxuICAgICAgICAgICAgICAgZy5ub2RlKHBhdGhWKS5tYXhSYW5rIDwgbm9kZS5yYW5rKSB7XG4gICAgICAgICAgcGF0aElkeCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhdGhWID09PSBsY2EpIHtcbiAgICAgICAgICBhc2NlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIWFzY2VuZGluZykge1xuICAgICAgICB3aGlsZSAocGF0aElkeCA8IHBhdGgubGVuZ3RoIC0gMSAmJlxuICAgICAgICAgICAgICAgZy5ub2RlKHBhdGhWID0gcGF0aFtwYXRoSWR4ICsgMV0pLm1pblJhbmsgPD0gbm9kZS5yYW5rKSB7XG4gICAgICAgICAgcGF0aElkeCsrO1xuICAgICAgICB9XG4gICAgICAgIHBhdGhWID0gcGF0aFtwYXRoSWR4XTtcbiAgICAgIH1cblxuICAgICAgZy5zZXRQYXJlbnQodiwgcGF0aFYpO1xuICAgICAgdiA9IGcuc3VjY2Vzc29ycyh2KVswXTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBGaW5kIGEgcGF0aCBmcm9tIHYgdG8gdyB0aHJvdWdoIHRoZSBsb3dlc3QgY29tbW9uIGFuY2VzdG9yIChMQ0EpLiBSZXR1cm4gdGhlXG4vLyBmdWxsIHBhdGggYW5kIHRoZSBMQ0EuXG5mdW5jdGlvbiBmaW5kUGF0aChnLCBwb3N0b3JkZXJOdW1zLCB2LCB3KSB7XG4gIHZhciB2UGF0aCA9IFtdLFxuICAgICAgd1BhdGggPSBbXSxcbiAgICAgIGxvdyA9IE1hdGgubWluKHBvc3RvcmRlck51bXNbdl0ubG93LCBwb3N0b3JkZXJOdW1zW3ddLmxvdyksXG4gICAgICBsaW0gPSBNYXRoLm1heChwb3N0b3JkZXJOdW1zW3ZdLmxpbSwgcG9zdG9yZGVyTnVtc1t3XS5saW0pLFxuICAgICAgcGFyZW50LFxuICAgICAgbGNhO1xuXG4gIC8vIFRyYXZlcnNlIHVwIGZyb20gdiB0byBmaW5kIHRoZSBMQ0FcbiAgcGFyZW50ID0gdjtcbiAgZG8ge1xuICAgIHBhcmVudCA9IGcucGFyZW50KHBhcmVudCk7XG4gICAgdlBhdGgucHVzaChwYXJlbnQpO1xuICB9IHdoaWxlIChwYXJlbnQgJiZcbiAgICAgICAgICAgKHBvc3RvcmRlck51bXNbcGFyZW50XS5sb3cgPiBsb3cgfHwgbGltID4gcG9zdG9yZGVyTnVtc1twYXJlbnRdLmxpbSkpO1xuICBsY2EgPSBwYXJlbnQ7XG5cbiAgLy8gVHJhdmVyc2UgZnJvbSB3IHRvIExDQVxuICBwYXJlbnQgPSB3O1xuICB3aGlsZSAoKHBhcmVudCA9IGcucGFyZW50KHBhcmVudCkpICE9PSBsY2EpIHtcbiAgICB3UGF0aC5wdXNoKHBhcmVudCk7XG4gIH1cblxuICByZXR1cm4geyBwYXRoOiB2UGF0aC5jb25jYXQod1BhdGgucmV2ZXJzZSgpKSwgbGNhOiBsY2EgfTtcbn1cblxuZnVuY3Rpb24gcG9zdG9yZGVyKGcpIHtcbiAgdmFyIHJlc3VsdCA9IHt9LFxuICAgICAgbGltID0gMDtcblxuICBmdW5jdGlvbiBkZnModikge1xuICAgIHZhciBsb3cgPSBsaW07XG4gICAgXy5mb3JFYWNoKGcuY2hpbGRyZW4odiksIGRmcyk7XG4gICAgcmVzdWx0W3ZdID0geyBsb3c6IGxvdywgbGltOiBsaW0rKyB9O1xuICB9XG4gIF8uZm9yRWFjaChnLmNoaWxkcmVuKCksIGRmcyk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsInZhciBfID0gcmVxdWlyZShcIi4vbG9kYXNoXCIpLFxuICAgIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcnVuOiBydW4sXG4gIGNsZWFudXA6IGNsZWFudXBcbn07XG5cbi8qXG4gKiBBIG5lc3RpbmcgZ3JhcGggY3JlYXRlcyBkdW1teSBub2RlcyBmb3IgdGhlIHRvcHMgYW5kIGJvdHRvbXMgb2Ygc3ViZ3JhcGhzLFxuICogYWRkcyBhcHByb3ByaWF0ZSBlZGdlcyB0byBlbnN1cmUgdGhhdCBhbGwgY2x1c3RlciBub2RlcyBhcmUgcGxhY2VkIGJldHdlZW5cbiAqIHRoZXNlIGJvdW5kcmllcywgYW5kIGVuc3VyZXMgdGhhdCB0aGUgZ3JhcGggaXMgY29ubmVjdGVkLlxuICpcbiAqIEluIGFkZGl0aW9uIHdlIGVuc3VyZSwgdGhyb3VnaCB0aGUgdXNlIG9mIHRoZSBtaW5sZW4gcHJvcGVydHksIHRoYXQgbm9kZXNcbiAqIGFuZCBzdWJncmFwaCBib3JkZXIgbm9kZXMgdG8gbm90IGVuZCB1cCBvbiB0aGUgc2FtZSByYW5rLlxuICpcbiAqIFByZWNvbmRpdGlvbnM6XG4gKlxuICogICAgMS4gSW5wdXQgZ3JhcGggaXMgYSBEQUdcbiAqICAgIDIuIE5vZGVzIGluIHRoZSBpbnB1dCBncmFwaCBoYXMgYSBtaW5sZW4gYXR0cmlidXRlXG4gKlxuICogUG9zdGNvbmRpdGlvbnM6XG4gKlxuICogICAgMS4gSW5wdXQgZ3JhcGggaXMgY29ubmVjdGVkLlxuICogICAgMi4gRHVtbXkgbm9kZXMgYXJlIGFkZGVkIGZvciB0aGUgdG9wcyBhbmQgYm90dG9tcyBvZiBzdWJncmFwaHMuXG4gKiAgICAzLiBUaGUgbWlubGVuIGF0dHJpYnV0ZSBmb3Igbm9kZXMgaXMgYWRqdXN0ZWQgdG8gZW5zdXJlIG5vZGVzIGRvIG5vdFxuICogICAgICAgZ2V0IHBsYWNlZCBvbiB0aGUgc2FtZSByYW5rIGFzIHN1YmdyYXBoIGJvcmRlciBub2Rlcy5cbiAqXG4gKiBUaGUgbmVzdGluZyBncmFwaCBpZGVhIGNvbWVzIGZyb20gU2FuZGVyLCBcIkxheW91dCBvZiBDb21wb3VuZCBEaXJlY3RlZFxuICogR3JhcGhzLlwiXG4gKi9cbmZ1bmN0aW9uIHJ1bihnKSB7XG4gIHZhciByb290ID0gdXRpbC5hZGREdW1teU5vZGUoZywgXCJyb290XCIsIHt9LCBcIl9yb290XCIpO1xuICB2YXIgZGVwdGhzID0gdHJlZURlcHRocyhnKTtcbiAgdmFyIGhlaWdodCA9IF8ubWF4KF8udmFsdWVzKGRlcHRocykpIC0gMTsgLy8gTm90ZTogZGVwdGhzIGlzIGFuIE9iamVjdCBub3QgYW4gYXJyYXlcbiAgdmFyIG5vZGVTZXAgPSAyICogaGVpZ2h0ICsgMTtcblxuICBnLmdyYXBoKCkubmVzdGluZ1Jvb3QgPSByb290O1xuXG4gIC8vIE11bHRpcGx5IG1pbmxlbiBieSBub2RlU2VwIHRvIGFsaWduIG5vZGVzIG9uIG5vbi1ib3JkZXIgcmFua3MuXG4gIF8uZm9yRWFjaChnLmVkZ2VzKCksIGZ1bmN0aW9uKGUpIHsgZy5lZGdlKGUpLm1pbmxlbiAqPSBub2RlU2VwOyB9KTtcblxuICAvLyBDYWxjdWxhdGUgYSB3ZWlnaHQgdGhhdCBpcyBzdWZmaWNpZW50IHRvIGtlZXAgc3ViZ3JhcGhzIHZlcnRpY2FsbHkgY29tcGFjdFxuICB2YXIgd2VpZ2h0ID0gc3VtV2VpZ2h0cyhnKSArIDE7XG5cbiAgLy8gQ3JlYXRlIGJvcmRlciBub2RlcyBhbmQgbGluayB0aGVtIHVwXG4gIF8uZm9yRWFjaChnLmNoaWxkcmVuKCksIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgZGZzKGcsIHJvb3QsIG5vZGVTZXAsIHdlaWdodCwgaGVpZ2h0LCBkZXB0aHMsIGNoaWxkKTtcbiAgfSk7XG5cbiAgLy8gU2F2ZSB0aGUgbXVsdGlwbGllciBmb3Igbm9kZSBsYXllcnMgZm9yIGxhdGVyIHJlbW92YWwgb2YgZW1wdHkgYm9yZGVyXG4gIC8vIGxheWVycy5cbiAgZy5ncmFwaCgpLm5vZGVSYW5rRmFjdG9yID0gbm9kZVNlcDtcbn1cblxuZnVuY3Rpb24gZGZzKGcsIHJvb3QsIG5vZGVTZXAsIHdlaWdodCwgaGVpZ2h0LCBkZXB0aHMsIHYpIHtcbiAgdmFyIGNoaWxkcmVuID0gZy5jaGlsZHJlbih2KTtcbiAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBpZiAodiAhPT0gcm9vdCkge1xuICAgICAgZy5zZXRFZGdlKHJvb3QsIHYsIHsgd2VpZ2h0OiAwLCBtaW5sZW46IG5vZGVTZXAgfSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB0b3AgPSB1dGlsLmFkZEJvcmRlck5vZGUoZywgXCJfYnRcIiksXG4gICAgICBib3R0b20gPSB1dGlsLmFkZEJvcmRlck5vZGUoZywgXCJfYmJcIiksXG4gICAgICBsYWJlbCA9IGcubm9kZSh2KTtcblxuICBnLnNldFBhcmVudCh0b3AsIHYpO1xuICBsYWJlbC5ib3JkZXJUb3AgPSB0b3A7XG4gIGcuc2V0UGFyZW50KGJvdHRvbSwgdik7XG4gIGxhYmVsLmJvcmRlckJvdHRvbSA9IGJvdHRvbTtcblxuICBfLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgZGZzKGcsIHJvb3QsIG5vZGVTZXAsIHdlaWdodCwgaGVpZ2h0LCBkZXB0aHMsIGNoaWxkKTtcblxuICAgIHZhciBjaGlsZE5vZGUgPSBnLm5vZGUoY2hpbGQpLFxuICAgICAgICBjaGlsZFRvcCA9IGNoaWxkTm9kZS5ib3JkZXJUb3AgPyBjaGlsZE5vZGUuYm9yZGVyVG9wIDogY2hpbGQsXG4gICAgICAgIGNoaWxkQm90dG9tID0gY2hpbGROb2RlLmJvcmRlckJvdHRvbSA/IGNoaWxkTm9kZS5ib3JkZXJCb3R0b20gOiBjaGlsZCxcbiAgICAgICAgdGhpc1dlaWdodCA9IGNoaWxkTm9kZS5ib3JkZXJUb3AgPyB3ZWlnaHQgOiAyICogd2VpZ2h0LFxuICAgICAgICBtaW5sZW4gPSBjaGlsZFRvcCAhPT0gY2hpbGRCb3R0b20gPyAxIDogaGVpZ2h0IC0gZGVwdGhzW3ZdICsgMTtcblxuICAgIGcuc2V0RWRnZSh0b3AsIGNoaWxkVG9wLCB7XG4gICAgICB3ZWlnaHQ6IHRoaXNXZWlnaHQsXG4gICAgICBtaW5sZW46IG1pbmxlbixcbiAgICAgIG5lc3RpbmdFZGdlOiB0cnVlXG4gICAgfSk7XG5cbiAgICBnLnNldEVkZ2UoY2hpbGRCb3R0b20sIGJvdHRvbSwge1xuICAgICAgd2VpZ2h0OiB0aGlzV2VpZ2h0LFxuICAgICAgbWlubGVuOiBtaW5sZW4sXG4gICAgICBuZXN0aW5nRWRnZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcblxuICBpZiAoIWcucGFyZW50KHYpKSB7XG4gICAgZy5zZXRFZGdlKHJvb3QsIHRvcCwgeyB3ZWlnaHQ6IDAsIG1pbmxlbjogaGVpZ2h0ICsgZGVwdGhzW3ZdIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyZWVEZXB0aHMoZykge1xuICB2YXIgZGVwdGhzID0ge307XG4gIGZ1bmN0aW9uIGRmcyh2LCBkZXB0aCkge1xuICAgIHZhciBjaGlsZHJlbiA9IGcuY2hpbGRyZW4odik7XG4gICAgaWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgXy5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICBkZnMoY2hpbGQsIGRlcHRoICsgMSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZGVwdGhzW3ZdID0gZGVwdGg7XG4gIH1cbiAgXy5mb3JFYWNoKGcuY2hpbGRyZW4oKSwgZnVuY3Rpb24odikgeyBkZnModiwgMSk7IH0pO1xuICByZXR1cm4gZGVwdGhzO1xufVxuXG5mdW5jdGlvbiBzdW1XZWlnaHRzKGcpIHtcbiAgcmV0dXJuIF8ucmVkdWNlKGcuZWRnZXMoKSwgZnVuY3Rpb24oYWNjLCBlKSB7XG4gICAgcmV0dXJuIGFjYyArIGcuZWRnZShlKS53ZWlnaHQ7XG4gIH0sIDApO1xufVxuXG5mdW5jdGlvbiBjbGVhbnVwKGcpIHtcbiAgdmFyIGdyYXBoTGFiZWwgPSBnLmdyYXBoKCk7XG4gIGcucmVtb3ZlTm9kZShncmFwaExhYmVsLm5lc3RpbmdSb290KTtcbiAgZGVsZXRlIGdyYXBoTGFiZWwubmVzdGluZ1Jvb3Q7XG4gIF8uZm9yRWFjaChnLmVkZ2VzKCksIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZWRnZSA9IGcuZWRnZShlKTtcbiAgICBpZiAoZWRnZS5uZXN0aW5nRWRnZSkge1xuICAgICAgZy5yZW1vdmVFZGdlKGUpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuL2xvZGFzaFwiKSxcbiAgICB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhZGRCb3JkZXJTZWdtZW50cztcblxuZnVuY3Rpb24gYWRkQm9yZGVyU2VnbWVudHMoZykge1xuICBmdW5jdGlvbiBkZnModikge1xuICAgIHZhciBjaGlsZHJlbiA9IGcuY2hpbGRyZW4odiksXG4gICAgICAgIG5vZGUgPSBnLm5vZGUodik7XG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgXy5mb3JFYWNoKGNoaWxkcmVuLCBkZnMpO1xuICAgIH1cblxuICAgIGlmIChfLmhhcyhub2RlLCBcIm1pblJhbmtcIikpIHtcbiAgICAgIG5vZGUuYm9yZGVyTGVmdCA9IFtdO1xuICAgICAgbm9kZS5ib3JkZXJSaWdodCA9IFtdO1xuICAgICAgZm9yICh2YXIgcmFuayA9IG5vZGUubWluUmFuaywgbWF4UmFuayA9IG5vZGUubWF4UmFuayArIDE7XG4gICAgICAgICAgIHJhbmsgPCBtYXhSYW5rO1xuICAgICAgICAgICArK3JhbmspIHtcbiAgICAgICAgYWRkQm9yZGVyTm9kZShnLCBcImJvcmRlckxlZnRcIiwgXCJfYmxcIiwgdiwgbm9kZSwgcmFuayk7XG4gICAgICAgIGFkZEJvcmRlck5vZGUoZywgXCJib3JkZXJSaWdodFwiLCBcIl9iclwiLCB2LCBub2RlLCByYW5rKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfLmZvckVhY2goZy5jaGlsZHJlbigpLCBkZnMpO1xufVxuXG5mdW5jdGlvbiBhZGRCb3JkZXJOb2RlKGcsIHByb3AsIHByZWZpeCwgc2csIHNnTm9kZSwgcmFuaykge1xuICB2YXIgbGFiZWwgPSB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAsIHJhbms6IHJhbmssIGJvcmRlclR5cGU6IHByb3AgfSxcbiAgICAgIHByZXYgPSBzZ05vZGVbcHJvcF1bcmFuayAtIDFdLFxuICAgICAgY3VyciA9IHV0aWwuYWRkRHVtbXlOb2RlKGcsIFwiYm9yZGVyXCIsIGxhYmVsLCBwcmVmaXgpO1xuICBzZ05vZGVbcHJvcF1bcmFua10gPSBjdXJyO1xuICBnLnNldFBhcmVudChjdXJyLCBzZyk7XG4gIGlmIChwcmV2KSB7XG4gICAgZy5zZXRFZGdlKHByZXYsIGN1cnIsIHsgd2VpZ2h0OiAxIH0pO1xuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF8gPSByZXF1aXJlKFwiLi9sb2Rhc2hcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhZGp1c3Q6IGFkanVzdCxcbiAgdW5kbzogdW5kb1xufTtcblxuZnVuY3Rpb24gYWRqdXN0KGcpIHtcbiAgdmFyIHJhbmtEaXIgPSBnLmdyYXBoKCkucmFua2Rpci50b0xvd2VyQ2FzZSgpO1xuICBpZiAocmFua0RpciA9PT0gXCJsclwiIHx8IHJhbmtEaXIgPT09IFwicmxcIikge1xuICAgIHN3YXBXaWR0aEhlaWdodChnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bmRvKGcpIHtcbiAgdmFyIHJhbmtEaXIgPSBnLmdyYXBoKCkucmFua2Rpci50b0xvd2VyQ2FzZSgpO1xuICBpZiAocmFua0RpciA9PT0gXCJidFwiIHx8IHJhbmtEaXIgPT09IFwicmxcIikge1xuICAgIHJldmVyc2VZKGcpO1xuICB9XG5cbiAgaWYgKHJhbmtEaXIgPT09IFwibHJcIiB8fCByYW5rRGlyID09PSBcInJsXCIpIHtcbiAgICBzd2FwWFkoZyk7XG4gICAgc3dhcFdpZHRoSGVpZ2h0KGcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN3YXBXaWR0aEhlaWdodChnKSB7XG4gIF8uZm9yRWFjaChnLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHsgc3dhcFdpZHRoSGVpZ2h0T25lKGcubm9kZSh2KSk7IH0pO1xuICBfLmZvckVhY2goZy5lZGdlcygpLCBmdW5jdGlvbihlKSB7IHN3YXBXaWR0aEhlaWdodE9uZShnLmVkZ2UoZSkpOyB9KTtcbn1cblxuZnVuY3Rpb24gc3dhcFdpZHRoSGVpZ2h0T25lKGF0dHJzKSB7XG4gIHZhciB3ID0gYXR0cnMud2lkdGg7XG4gIGF0dHJzLndpZHRoID0gYXR0cnMuaGVpZ2h0O1xuICBhdHRycy5oZWlnaHQgPSB3O1xufVxuXG5mdW5jdGlvbiByZXZlcnNlWShnKSB7XG4gIF8uZm9yRWFjaChnLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHsgcmV2ZXJzZVlPbmUoZy5ub2RlKHYpKTsgfSk7XG5cbiAgXy5mb3JFYWNoKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlZGdlID0gZy5lZGdlKGUpO1xuICAgIF8uZm9yRWFjaChlZGdlLnBvaW50cywgcmV2ZXJzZVlPbmUpO1xuICAgIGlmIChfLmhhcyhlZGdlLCBcInlcIikpIHtcbiAgICAgIHJldmVyc2VZT25lKGVkZ2UpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJldmVyc2VZT25lKGF0dHJzKSB7XG4gIGF0dHJzLnkgPSAtYXR0cnMueTtcbn1cblxuZnVuY3Rpb24gc3dhcFhZKGcpIHtcbiAgXy5mb3JFYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikgeyBzd2FwWFlPbmUoZy5ub2RlKHYpKTsgfSk7XG5cbiAgXy5mb3JFYWNoKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlZGdlID0gZy5lZGdlKGUpO1xuICAgIF8uZm9yRWFjaChlZGdlLnBvaW50cywgc3dhcFhZT25lKTtcbiAgICBpZiAoXy5oYXMoZWRnZSwgXCJ4XCIpKSB7XG4gICAgICBzd2FwWFlPbmUoZWRnZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3dhcFhZT25lKGF0dHJzKSB7XG4gIHZhciB4ID0gYXR0cnMueDtcbiAgYXR0cnMueCA9IGF0dHJzLnk7XG4gIGF0dHJzLnkgPSB4O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKSxcbiAgICBpbml0T3JkZXIgPSByZXF1aXJlKFwiLi9pbml0LW9yZGVyXCIpLFxuICAgIGNyb3NzQ291bnQgPSByZXF1aXJlKFwiLi9jcm9zcy1jb3VudFwiKSxcbiAgICBzb3J0U3ViZ3JhcGggPSByZXF1aXJlKFwiLi9zb3J0LXN1YmdyYXBoXCIpLFxuICAgIGJ1aWxkTGF5ZXJHcmFwaCA9IHJlcXVpcmUoXCIuL2J1aWxkLWxheWVyLWdyYXBoXCIpLFxuICAgIGFkZFN1YmdyYXBoQ29uc3RyYWludHMgPSByZXF1aXJlKFwiLi9hZGQtc3ViZ3JhcGgtY29uc3RyYWludHNcIiksXG4gICAgR3JhcGggPSByZXF1aXJlKFwiLi4vZ3JhcGhsaWJcIikuR3JhcGgsXG4gICAgdXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9yZGVyO1xuXG4vKlxuICogQXBwbGllcyBoZXVyaXN0aWNzIHRvIG1pbmltaXplIGVkZ2UgY3Jvc3NpbmdzIGluIHRoZSBncmFwaCBhbmQgc2V0cyB0aGUgYmVzdFxuICogb3JkZXIgc29sdXRpb24gYXMgYW4gb3JkZXIgYXR0cmlidXRlIG9uIGVhY2ggbm9kZS5cbiAqXG4gKiBQcmUtY29uZGl0aW9uczpcbiAqXG4gKiAgICAxLiBHcmFwaCBtdXN0IGJlIERBR1xuICogICAgMi4gR3JhcGggbm9kZXMgbXVzdCBiZSBvYmplY3RzIHdpdGggYSBcInJhbmtcIiBhdHRyaWJ1dGVcbiAqICAgIDMuIEdyYXBoIGVkZ2VzIG11c3QgaGF2ZSB0aGUgXCJ3ZWlnaHRcIiBhdHRyaWJ1dGVcbiAqXG4gKiBQb3N0LWNvbmRpdGlvbnM6XG4gKlxuICogICAgMS4gR3JhcGggbm9kZXMgd2lsbCBoYXZlIGFuIFwib3JkZXJcIiBhdHRyaWJ1dGUgYmFzZWQgb24gdGhlIHJlc3VsdHMgb2YgdGhlXG4gKiAgICAgICBhbGdvcml0aG0uXG4gKi9cbmZ1bmN0aW9uIG9yZGVyKGcpIHtcbiAgdmFyIG1heFJhbmsgPSB1dGlsLm1heFJhbmsoZyksXG4gICAgICBkb3duTGF5ZXJHcmFwaHMgPSBidWlsZExheWVyR3JhcGhzKGcsIF8ucmFuZ2UoMSwgbWF4UmFuayArIDEpLCBcImluRWRnZXNcIiksXG4gICAgICB1cExheWVyR3JhcGhzID0gYnVpbGRMYXllckdyYXBocyhnLCBfLnJhbmdlKG1heFJhbmsgLSAxLCAtMSwgLTEpLCBcIm91dEVkZ2VzXCIpO1xuXG4gIHZhciBsYXllcmluZyA9IGluaXRPcmRlcihnKTtcbiAgYXNzaWduT3JkZXIoZywgbGF5ZXJpbmcpO1xuXG4gIHZhciBiZXN0Q0MgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICBiZXN0O1xuXG4gIGZvciAodmFyIGkgPSAwLCBsYXN0QmVzdCA9IDA7IGxhc3RCZXN0IDwgNDsgKytpLCArK2xhc3RCZXN0KSB7XG4gICAgc3dlZXBMYXllckdyYXBocyhpICUgMiA/IGRvd25MYXllckdyYXBocyA6IHVwTGF5ZXJHcmFwaHMsIGkgJSA0ID49IDIpO1xuXG4gICAgbGF5ZXJpbmcgPSB1dGlsLmJ1aWxkTGF5ZXJNYXRyaXgoZyk7XG4gICAgdmFyIGNjID0gY3Jvc3NDb3VudChnLCBsYXllcmluZyk7XG4gICAgaWYgKGNjIDwgYmVzdENDKSB7XG4gICAgICBsYXN0QmVzdCA9IDA7XG4gICAgICBiZXN0ID0gXy5jbG9uZURlZXAobGF5ZXJpbmcpO1xuICAgICAgYmVzdENDID0gY2M7XG4gICAgfVxuICB9XG5cbiAgYXNzaWduT3JkZXIoZywgYmVzdCk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkTGF5ZXJHcmFwaHMoZywgcmFua3MsIHJlbGF0aW9uc2hpcCkge1xuICByZXR1cm4gXy5tYXAocmFua3MsIGZ1bmN0aW9uKHJhbmspIHtcbiAgICByZXR1cm4gYnVpbGRMYXllckdyYXBoKGcsIHJhbmssIHJlbGF0aW9uc2hpcCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzd2VlcExheWVyR3JhcGhzKGxheWVyR3JhcGhzLCBiaWFzUmlnaHQpIHtcbiAgdmFyIGNnID0gbmV3IEdyYXBoKCk7XG4gIF8uZm9yRWFjaChsYXllckdyYXBocywgZnVuY3Rpb24obGcpIHtcbiAgICB2YXIgcm9vdCA9IGxnLmdyYXBoKCkucm9vdDtcbiAgICB2YXIgc29ydGVkID0gc29ydFN1YmdyYXBoKGxnLCByb290LCBjZywgYmlhc1JpZ2h0KTtcbiAgICBfLmZvckVhY2goc29ydGVkLnZzLCBmdW5jdGlvbih2LCBpKSB7XG4gICAgICBsZy5ub2RlKHYpLm9yZGVyID0gaTtcbiAgICB9KTtcbiAgICBhZGRTdWJncmFwaENvbnN0cmFpbnRzKGxnLCBjZywgc29ydGVkLnZzKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFzc2lnbk9yZGVyKGcsIGxheWVyaW5nKSB7XG4gIF8uZm9yRWFjaChsYXllcmluZywgZnVuY3Rpb24obGF5ZXIpIHtcbiAgICBfLmZvckVhY2gobGF5ZXIsIGZ1bmN0aW9uKHYsIGkpIHtcbiAgICAgIGcubm9kZSh2KS5vcmRlciA9IGk7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbml0T3JkZXI7XG5cbi8qXG4gKiBBc3NpZ25zIGFuIGluaXRpYWwgb3JkZXIgdmFsdWUgZm9yIGVhY2ggbm9kZSBieSBwZXJmb3JtaW5nIGEgREZTIHNlYXJjaFxuICogc3RhcnRpbmcgZnJvbSBub2RlcyBpbiB0aGUgZmlyc3QgcmFuay4gTm9kZXMgYXJlIGFzc2lnbmVkIGFuIG9yZGVyIGluIHRoZWlyXG4gKiByYW5rIGFzIHRoZXkgYXJlIGZpcnN0IHZpc2l0ZWQuXG4gKlxuICogVGhpcyBhcHByb2FjaCBjb21lcyBmcm9tIEdhbnNuZXIsIGV0IGFsLiwgXCJBIFRlY2huaXF1ZSBmb3IgRHJhd2luZyBEaXJlY3RlZFxuICogR3JhcGhzLlwiXG4gKlxuICogUmV0dXJucyBhIGxheWVyaW5nIG1hdHJpeCB3aXRoIGFuIGFycmF5IHBlciBsYXllciBhbmQgZWFjaCBsYXllciBzb3J0ZWQgYnlcbiAqIHRoZSBvcmRlciBvZiBpdHMgbm9kZXMuXG4gKi9cbmZ1bmN0aW9uIGluaXRPcmRlcihnKSB7XG4gIHZhciB2aXNpdGVkID0ge30sXG4gICAgICBzaW1wbGVOb2RlcyA9IF8uZmlsdGVyKGcubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgICAgICByZXR1cm4gIWcuY2hpbGRyZW4odikubGVuZ3RoO1xuICAgICAgfSksXG4gICAgICBtYXhSYW5rID0gXy5tYXgoXy5tYXAoc2ltcGxlTm9kZXMsIGZ1bmN0aW9uKHYpIHsgcmV0dXJuIGcubm9kZSh2KS5yYW5rOyB9KSksXG4gICAgICBsYXllcnMgPSBfLm1hcChfLnJhbmdlKG1heFJhbmsgKyAxKSwgZnVuY3Rpb24oKSB7IHJldHVybiBbXTsgfSk7XG5cbiAgZnVuY3Rpb24gZGZzKHYpIHtcbiAgICBpZiAoXy5oYXModmlzaXRlZCwgdikpIHJldHVybjtcbiAgICB2aXNpdGVkW3ZdID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGcubm9kZSh2KTtcbiAgICBsYXllcnNbbm9kZS5yYW5rXS5wdXNoKHYpO1xuICAgIF8uZm9yRWFjaChnLnN1Y2Nlc3NvcnModiksIGRmcyk7XG4gIH1cblxuICB2YXIgb3JkZXJlZFZzID0gXy5zb3J0Qnkoc2ltcGxlTm9kZXMsIGZ1bmN0aW9uKHYpIHsgcmV0dXJuIGcubm9kZSh2KS5yYW5rOyB9KTtcbiAgXy5mb3JFYWNoKG9yZGVyZWRWcywgZGZzKTtcblxuICByZXR1cm4gbGF5ZXJzO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcm9zc0NvdW50O1xuXG4vKlxuICogQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgbGF5ZXJpbmcgKGFuIGFycmF5IG9mIGxheWVycywgZWFjaCB3aXRoIGFuIGFycmF5IG9mXG4gKiBvcmRlcmVyZCBub2RlcykgYW5kIGEgZ3JhcGggYW5kIHJldHVybnMgYSB3ZWlnaHRlZCBjcm9zc2luZyBjb3VudC5cbiAqXG4gKiBQcmUtY29uZGl0aW9uczpcbiAqXG4gKiAgICAxLiBJbnB1dCBncmFwaCBtdXN0IGJlIHNpbXBsZSAobm90IGEgbXVsdGlncmFwaCksIGRpcmVjdGVkLCBhbmQgaW5jbHVkZVxuICogICAgICAgb25seSBzaW1wbGUgZWRnZXMuXG4gKiAgICAyLiBFZGdlcyBpbiB0aGUgaW5wdXQgZ3JhcGggbXVzdCBoYXZlIGFzc2lnbmVkIHdlaWdodHMuXG4gKlxuICogUG9zdC1jb25kaXRpb25zOlxuICpcbiAqICAgIDEuIFRoZSBncmFwaCBhbmQgbGF5ZXJpbmcgbWF0cml4IGFyZSBsZWZ0IHVuY2hhbmdlZC5cbiAqXG4gKiBUaGlzIGFsZ29yaXRobSBpcyBkZXJpdmVkIGZyb20gQmFydGgsIGV0IGFsLiwgXCJCaWxheWVyIENyb3NzIENvdW50aW5nLlwiXG4gKi9cbmZ1bmN0aW9uIGNyb3NzQ291bnQoZywgbGF5ZXJpbmcpIHtcbiAgdmFyIGNjID0gMDtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBsYXllcmluZy5sZW5ndGg7ICsraSkge1xuICAgIGNjICs9IHR3b0xheWVyQ3Jvc3NDb3VudChnLCBsYXllcmluZ1tpLTFdLCBsYXllcmluZ1tpXSk7XG4gIH1cbiAgcmV0dXJuIGNjO1xufVxuXG5mdW5jdGlvbiB0d29MYXllckNyb3NzQ291bnQoZywgbm9ydGhMYXllciwgc291dGhMYXllcikge1xuICAvLyBTb3J0IGFsbCBvZiB0aGUgZWRnZXMgYmV0d2VlbiB0aGUgbm9ydGggYW5kIHNvdXRoIGxheWVycyBieSB0aGVpciBwb3NpdGlvblxuICAvLyBpbiB0aGUgbm9ydGggbGF5ZXIgYW5kIHRoZW4gdGhlIHNvdXRoLiBNYXAgdGhlc2UgZWRnZXMgdG8gdGhlIHBvc2l0aW9uIG9mXG4gIC8vIHRoZWlyIGhlYWQgaW4gdGhlIHNvdXRoIGxheWVyLlxuICB2YXIgc291dGhQb3MgPSBfLnppcE9iamVjdChzb3V0aExheWVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm1hcChzb3V0aExheWVyLCBmdW5jdGlvbiAodiwgaSkgeyByZXR1cm4gaTsgfSkpO1xuICB2YXIgc291dGhFbnRyaWVzID0gXy5mbGF0dGVuKF8ubWFwKG5vcnRoTGF5ZXIsIGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gXy5zb3J0QnkoXy5tYXAoZy5vdXRFZGdlcyh2KSwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICByZXR1cm4geyBwb3M6IHNvdXRoUG9zW2Uud10sIHdlaWdodDogZy5lZGdlKGUpLndlaWdodCB9O1xuICAgICAgICAgICAgfSksIFwicG9zXCIpO1xuICB9KSwgdHJ1ZSk7XG5cbiAgLy8gQnVpbGQgdGhlIGFjY3VtdWxhdG9yIHRyZWVcbiAgdmFyIGZpcnN0SW5kZXggPSAxO1xuICB3aGlsZSAoZmlyc3RJbmRleCA8IHNvdXRoTGF5ZXIubGVuZ3RoKSBmaXJzdEluZGV4IDw8PSAxO1xuICB2YXIgdHJlZVNpemUgPSAyICogZmlyc3RJbmRleCAtIDE7XG4gIGZpcnN0SW5kZXggLT0gMTtcbiAgdmFyIHRyZWUgPSBfLm1hcChuZXcgQXJyYXkodHJlZVNpemUpLCBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH0pO1xuXG4gIC8vIENhbGN1bGF0ZSB0aGUgd2VpZ2h0ZWQgY3Jvc3NpbmdzXG4gIHZhciBjYyA9IDA7XG4gIF8uZm9yRWFjaChzb3V0aEVudHJpZXMuZm9yRWFjaChmdW5jdGlvbihlbnRyeSkge1xuICAgIHZhciBpbmRleCA9IGVudHJ5LnBvcyArIGZpcnN0SW5kZXg7XG4gICAgdHJlZVtpbmRleF0gKz0gZW50cnkud2VpZ2h0O1xuICAgIHZhciB3ZWlnaHRTdW0gPSAwO1xuICAgIHdoaWxlIChpbmRleCA+IDApIHtcbiAgICAgIGlmIChpbmRleCAlIDIpIHtcbiAgICAgICAgd2VpZ2h0U3VtICs9IHRyZWVbaW5kZXggKyAxXTtcbiAgICAgIH1cbiAgICAgIGluZGV4ID0gKGluZGV4IC0gMSkgPj4gMTtcbiAgICAgIHRyZWVbaW5kZXhdICs9IGVudHJ5LndlaWdodDtcbiAgICB9XG4gICAgY2MgKz0gZW50cnkud2VpZ2h0ICogd2VpZ2h0U3VtO1xuICB9KSk7XG5cbiAgcmV0dXJuIGNjO1xufVxuIiwidmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpLFxuICAgIGJhcnljZW50ZXIgPSByZXF1aXJlKFwiLi9iYXJ5Y2VudGVyXCIpLFxuICAgIHJlc29sdmVDb25mbGljdHMgPSByZXF1aXJlKFwiLi9yZXNvbHZlLWNvbmZsaWN0c1wiKSxcbiAgICBzb3J0ID0gcmVxdWlyZShcIi4vc29ydFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzb3J0U3ViZ3JhcGg7XG5cbmZ1bmN0aW9uIHNvcnRTdWJncmFwaChnLCB2LCBjZywgYmlhc1JpZ2h0KSB7XG4gIHZhciBtb3ZhYmxlID0gZy5jaGlsZHJlbih2KSxcbiAgICAgIG5vZGUgPSBnLm5vZGUodiksXG4gICAgICBibCA9IG5vZGUgPyBub2RlLmJvcmRlckxlZnQgOiB1bmRlZmluZWQsXG4gICAgICBiciA9IG5vZGUgPyBub2RlLmJvcmRlclJpZ2h0OiB1bmRlZmluZWQsXG4gICAgICBzdWJncmFwaHMgPSB7fTtcblxuICBpZiAoYmwpIHtcbiAgICBtb3ZhYmxlID0gXy5maWx0ZXIobW92YWJsZSwgZnVuY3Rpb24odykge1xuICAgICAgcmV0dXJuIHcgIT09IGJsICYmIHcgIT09IGJyO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGJhcnljZW50ZXJzID0gYmFyeWNlbnRlcihnLCBtb3ZhYmxlKTtcbiAgXy5mb3JFYWNoKGJhcnljZW50ZXJzLCBmdW5jdGlvbihlbnRyeSkge1xuICAgIGlmIChnLmNoaWxkcmVuKGVudHJ5LnYpLmxlbmd0aCkge1xuICAgICAgdmFyIHN1YmdyYXBoUmVzdWx0ID0gc29ydFN1YmdyYXBoKGcsIGVudHJ5LnYsIGNnLCBiaWFzUmlnaHQpO1xuICAgICAgc3ViZ3JhcGhzW2VudHJ5LnZdID0gc3ViZ3JhcGhSZXN1bHQ7XG4gICAgICBpZiAoXy5oYXMoc3ViZ3JhcGhSZXN1bHQsIFwiYmFyeWNlbnRlclwiKSkge1xuICAgICAgICBtZXJnZUJhcnljZW50ZXJzKGVudHJ5LCBzdWJncmFwaFJlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB2YXIgZW50cmllcyA9IHJlc29sdmVDb25mbGljdHMoYmFyeWNlbnRlcnMsIGNnKTtcbiAgZXhwYW5kU3ViZ3JhcGhzKGVudHJpZXMsIHN1YmdyYXBocyk7XG5cbiAgdmFyIHJlc3VsdCA9IHNvcnQoZW50cmllcywgYmlhc1JpZ2h0KTtcblxuICBpZiAoYmwpIHtcbiAgICByZXN1bHQudnMgPSBfLmZsYXR0ZW4oW2JsLCByZXN1bHQudnMsIGJyXSwgdHJ1ZSk7XG4gICAgaWYgKGcucHJlZGVjZXNzb3JzKGJsKS5sZW5ndGgpIHtcbiAgICAgIHZhciBibFByZWQgPSBnLm5vZGUoZy5wcmVkZWNlc3NvcnMoYmwpWzBdKSxcbiAgICAgICAgICBiclByZWQgPSBnLm5vZGUoZy5wcmVkZWNlc3NvcnMoYnIpWzBdKTtcbiAgICAgIGlmICghXy5oYXMocmVzdWx0LCBcImJhcnljZW50ZXJcIikpIHtcbiAgICAgICAgcmVzdWx0LmJhcnljZW50ZXIgPSAwO1xuICAgICAgICByZXN1bHQud2VpZ2h0ID0gMDtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5iYXJ5Y2VudGVyID0gKHJlc3VsdC5iYXJ5Y2VudGVyICogcmVzdWx0LndlaWdodCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBibFByZWQub3JkZXIgKyBiclByZWQub3JkZXIpIC8gKHJlc3VsdC53ZWlnaHQgKyAyKTtcbiAgICAgIHJlc3VsdC53ZWlnaHQgKz0gMjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBleHBhbmRTdWJncmFwaHMoZW50cmllcywgc3ViZ3JhcGhzKSB7XG4gIF8uZm9yRWFjaChlbnRyaWVzLCBmdW5jdGlvbihlbnRyeSkge1xuICAgIGVudHJ5LnZzID0gXy5mbGF0dGVuKGVudHJ5LnZzLm1hcChmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoc3ViZ3JhcGhzW3ZdKSB7XG4gICAgICAgIHJldHVybiBzdWJncmFwaHNbdl0udnM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdjtcbiAgICB9KSwgdHJ1ZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtZXJnZUJhcnljZW50ZXJzKHRhcmdldCwgb3RoZXIpIHtcbiAgaWYgKCFfLmlzVW5kZWZpbmVkKHRhcmdldC5iYXJ5Y2VudGVyKSkge1xuICAgIHRhcmdldC5iYXJ5Y2VudGVyID0gKHRhcmdldC5iYXJ5Y2VudGVyICogdGFyZ2V0LndlaWdodCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXIuYmFyeWNlbnRlciAqIG90aGVyLndlaWdodCkgL1xuICAgICAgICAgICAgICAgICAgICAgICAgKHRhcmdldC53ZWlnaHQgKyBvdGhlci53ZWlnaHQpO1xuICAgIHRhcmdldC53ZWlnaHQgKz0gb3RoZXIud2VpZ2h0O1xuICB9IGVsc2Uge1xuICAgIHRhcmdldC5iYXJ5Y2VudGVyID0gb3RoZXIuYmFyeWNlbnRlcjtcbiAgICB0YXJnZXQud2VpZ2h0ID0gb3RoZXIud2VpZ2h0O1xuICB9XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFyeWNlbnRlcjtcblxuZnVuY3Rpb24gYmFyeWNlbnRlcihnLCBtb3ZhYmxlKSB7XG4gIHJldHVybiBfLm1hcChtb3ZhYmxlLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIGluViA9IGcuaW5FZGdlcyh2KTtcbiAgICBpZiAoIWluVi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB7IHY6IHYgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHJlc3VsdCA9IF8ucmVkdWNlKGluViwgZnVuY3Rpb24oYWNjLCBlKSB7XG4gICAgICAgIHZhciBlZGdlID0gZy5lZGdlKGUpLFxuICAgICAgICAgICAgbm9kZVUgPSBnLm5vZGUoZS52KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdW06IGFjYy5zdW0gKyAoZWRnZS53ZWlnaHQgKiBub2RlVS5vcmRlciksXG4gICAgICAgICAgd2VpZ2h0OiBhY2Mud2VpZ2h0ICsgZWRnZS53ZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH0sIHsgc3VtOiAwLCB3ZWlnaHQ6IDAgfSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHY6IHYsXG4gICAgICAgIGJhcnljZW50ZXI6IHJlc3VsdC5zdW0gLyByZXN1bHQud2VpZ2h0LFxuICAgICAgICB3ZWlnaHQ6IHJlc3VsdC53ZWlnaHRcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXNvbHZlQ29uZmxpY3RzO1xuXG4vKlxuICogR2l2ZW4gYSBsaXN0IG9mIGVudHJpZXMgb2YgdGhlIGZvcm0ge3YsIGJhcnljZW50ZXIsIHdlaWdodH0gYW5kIGFcbiAqIGNvbnN0cmFpbnQgZ3JhcGggdGhpcyBmdW5jdGlvbiB3aWxsIHJlc29sdmUgYW55IGNvbmZsaWN0cyBiZXR3ZWVuIHRoZVxuICogY29uc3RyYWludCBncmFwaCBhbmQgdGhlIGJhcnljZW50ZXJzIGZvciB0aGUgZW50cmllcy4gSWYgdGhlIGJhcnljZW50ZXJzIGZvclxuICogYW4gZW50cnkgd291bGQgdmlvbGF0ZSBhIGNvbnN0cmFpbnQgaW4gdGhlIGNvbnN0cmFpbnQgZ3JhcGggdGhlbiB3ZSBjb2FsZXNjZVxuICogdGhlIG5vZGVzIGluIHRoZSBjb25mbGljdCBpbnRvIGEgbmV3IG5vZGUgdGhhdCByZXNwZWN0cyB0aGUgY29udHJhaW50IGFuZFxuICogYWdncmVnYXRlcyBiYXJ5Y2VudGVyIGFuZCB3ZWlnaHQgaW5mb3JtYXRpb24uXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB0aGUgZGVzY3JpcHRpb24gaW4gRm9yc3RlciwgXCJBIEZhc3QgYW5kXG4gKiBTaW1wbGUgSHVlcmlzdGljIGZvciBDb25zdHJhaW5lZCBUd28tTGV2ZWwgQ3Jvc3NpbmcgUmVkdWN0aW9uLFwiIHRob3VnaHQgaXRcbiAqIGRpZmZlcnMgaW4gc29tZSBzcGVjaWZpYyBkZXRhaWxzLlxuICpcbiAqIFByZS1jb25kaXRpb25zOlxuICpcbiAqICAgIDEuIEVhY2ggZW50cnkgaGFzIHRoZSBmb3JtIHt2LCBiYXJ5Y2VudGVyLCB3ZWlnaHR9LCBvciBpZiB0aGUgbm9kZSBoYXNcbiAqICAgICAgIG5vIGJhcnljZW50ZXIsIHRoZW4ge3Z9LlxuICpcbiAqIFJldHVybnM6XG4gKlxuICogICAgQSBuZXcgbGlzdCBvZiBlbnRyaWVzIG9mIHRoZSBmb3JtIHt2cywgaSwgYmFyeWNlbnRlciwgd2VpZ2h0fS4gVGhlIGxpc3RcbiAqICAgIGB2c2AgbWF5IGVpdGhlciBiZSBhIHNpbmdsZXRvbiBvciBpdCBtYXkgYmUgYW4gYWdncmVnYXRpb24gb2Ygbm9kZXNcbiAqICAgIG9yZGVyZWQgc3VjaCB0aGF0IHRoZXkgZG8gbm90IHZpb2xhdGUgY29uc3RyYWludHMgZnJvbSB0aGUgY29uc3RyYWludFxuICogICAgZ3JhcGguIFRoZSBwcm9wZXJ0eSBgaWAgaXMgdGhlIGxvd2VzdCBvcmlnaW5hbCBpbmRleCBvZiBhbnkgb2YgdGhlXG4gKiAgICBlbGVtZW50cyBpbiBgdnNgLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQ29uZmxpY3RzKGVudHJpZXMsIGNnKSB7XG4gIHZhciBtYXBwZWRFbnRyaWVzID0ge307XG4gIF8uZm9yRWFjaChlbnRyaWVzLCBmdW5jdGlvbihlbnRyeSwgaSkge1xuICAgIHZhciB0bXAgPSBtYXBwZWRFbnRyaWVzW2VudHJ5LnZdID0ge1xuICAgICAgaW5kZWdyZWU6IDAsXG4gICAgICBcImluXCI6IFtdLFxuICAgICAgb3V0OiBbXSxcbiAgICAgIHZzOiBbZW50cnkudl0sXG4gICAgICBpOiBpXG4gICAgfTtcbiAgICBpZiAoIV8uaXNVbmRlZmluZWQoZW50cnkuYmFyeWNlbnRlcikpIHtcbiAgICAgIHRtcC5iYXJ5Y2VudGVyID0gZW50cnkuYmFyeWNlbnRlcjtcbiAgICAgIHRtcC53ZWlnaHQgPSBlbnRyeS53ZWlnaHQ7XG4gICAgfVxuICB9KTtcblxuICBfLmZvckVhY2goY2cuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlbnRyeVYgPSBtYXBwZWRFbnRyaWVzW2Uudl0sXG4gICAgICAgIGVudHJ5VyA9IG1hcHBlZEVudHJpZXNbZS53XTtcbiAgICBpZiAoIV8uaXNVbmRlZmluZWQoZW50cnlWKSAmJiAhXy5pc1VuZGVmaW5lZChlbnRyeVcpKSB7XG4gICAgICBlbnRyeVcuaW5kZWdyZWUrKztcbiAgICAgIGVudHJ5Vi5vdXQucHVzaChtYXBwZWRFbnRyaWVzW2Uud10pO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIHNvdXJjZVNldCA9IF8uZmlsdGVyKG1hcHBlZEVudHJpZXMsIGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgcmV0dXJuICFlbnRyeS5pbmRlZ3JlZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRvUmVzb2x2ZUNvbmZsaWN0cyhzb3VyY2VTZXQpO1xufVxuXG5mdW5jdGlvbiBkb1Jlc29sdmVDb25mbGljdHMoc291cmNlU2V0KSB7XG4gIHZhciBlbnRyaWVzID0gW107XG5cbiAgZnVuY3Rpb24gaGFuZGxlSW4odkVudHJ5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHVFbnRyeSkge1xuICAgICAgaWYgKHVFbnRyeS5tZXJnZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKF8uaXNVbmRlZmluZWQodUVudHJ5LmJhcnljZW50ZXIpIHx8XG4gICAgICAgICAgXy5pc1VuZGVmaW5lZCh2RW50cnkuYmFyeWNlbnRlcikgfHxcbiAgICAgICAgICB1RW50cnkuYmFyeWNlbnRlciA+PSB2RW50cnkuYmFyeWNlbnRlcikge1xuICAgICAgICBtZXJnZUVudHJpZXModkVudHJ5LCB1RW50cnkpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVPdXQodkVudHJ5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHdFbnRyeSkge1xuICAgICAgd0VudHJ5W1wiaW5cIl0ucHVzaCh2RW50cnkpO1xuICAgICAgaWYgKC0td0VudHJ5LmluZGVncmVlID09PSAwKSB7XG4gICAgICAgIHNvdXJjZVNldC5wdXNoKHdFbnRyeSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHdoaWxlIChzb3VyY2VTZXQubGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gc291cmNlU2V0LnBvcCgpO1xuICAgIGVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgXy5mb3JFYWNoKGVudHJ5W1wiaW5cIl0ucmV2ZXJzZSgpLCBoYW5kbGVJbihlbnRyeSkpO1xuICAgIF8uZm9yRWFjaChlbnRyeS5vdXQsIGhhbmRsZU91dChlbnRyeSkpO1xuICB9XG5cbiAgcmV0dXJuIF8ubWFwKF8uZmlsdGVyKGVudHJpZXMsIGZ1bmN0aW9uKGVudHJ5KSB7IHJldHVybiAhZW50cnkubWVyZ2VkOyB9KSxcbiAgICAgICAgICAgICAgIGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBfLnBpY2soZW50cnksIFtcInZzXCIsIFwiaVwiLCBcImJhcnljZW50ZXJcIiwgXCJ3ZWlnaHRcIl0pO1xuICAgICAgICAgICAgICAgfSk7XG5cbn1cblxuZnVuY3Rpb24gbWVyZ2VFbnRyaWVzKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBzdW0gPSAwLFxuICAgICAgd2VpZ2h0ID0gMDtcblxuICBpZiAodGFyZ2V0LndlaWdodCkge1xuICAgIHN1bSArPSB0YXJnZXQuYmFyeWNlbnRlciAqIHRhcmdldC53ZWlnaHQ7XG4gICAgd2VpZ2h0ICs9IHRhcmdldC53ZWlnaHQ7XG4gIH1cblxuICBpZiAoc291cmNlLndlaWdodCkge1xuICAgIHN1bSArPSBzb3VyY2UuYmFyeWNlbnRlciAqIHNvdXJjZS53ZWlnaHQ7XG4gICAgd2VpZ2h0ICs9IHNvdXJjZS53ZWlnaHQ7XG4gIH1cblxuICB0YXJnZXQudnMgPSBzb3VyY2UudnMuY29uY2F0KHRhcmdldC52cyk7XG4gIHRhcmdldC5iYXJ5Y2VudGVyID0gc3VtIC8gd2VpZ2h0O1xuICB0YXJnZXQud2VpZ2h0ID0gd2VpZ2h0O1xuICB0YXJnZXQuaSA9IE1hdGgubWluKHNvdXJjZS5pLCB0YXJnZXQuaSk7XG4gIHNvdXJjZS5tZXJnZWQgPSB0cnVlO1xufVxuIiwidmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpLFxuICAgIHV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzb3J0O1xuXG5mdW5jdGlvbiBzb3J0KGVudHJpZXMsIGJpYXNSaWdodCkge1xuICB2YXIgcGFydHMgPSB1dGlsLnBhcnRpdGlvbihlbnRyaWVzLCBmdW5jdGlvbihlbnRyeSkge1xuICAgIHJldHVybiBfLmhhcyhlbnRyeSwgXCJiYXJ5Y2VudGVyXCIpO1xuICB9KTtcbiAgdmFyIHNvcnRhYmxlID0gcGFydHMubGhzLFxuICAgICAgdW5zb3J0YWJsZSA9IF8uc29ydEJ5KHBhcnRzLnJocywgZnVuY3Rpb24oZW50cnkpIHsgcmV0dXJuIC1lbnRyeS5pOyB9KSxcbiAgICAgIHZzID0gW10sXG4gICAgICBzdW0gPSAwLFxuICAgICAgd2VpZ2h0ID0gMCxcbiAgICAgIHZzSW5kZXggPSAwO1xuXG4gIHNvcnRhYmxlLnNvcnQoY29tcGFyZVdpdGhCaWFzKCEhYmlhc1JpZ2h0KSk7XG5cbiAgdnNJbmRleCA9IGNvbnN1bWVVbnNvcnRhYmxlKHZzLCB1bnNvcnRhYmxlLCB2c0luZGV4KTtcblxuICBfLmZvckVhY2goc29ydGFibGUsIGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHZzSW5kZXggKz0gZW50cnkudnMubGVuZ3RoO1xuICAgIHZzLnB1c2goZW50cnkudnMpO1xuICAgIHN1bSArPSBlbnRyeS5iYXJ5Y2VudGVyICogZW50cnkud2VpZ2h0O1xuICAgIHdlaWdodCArPSBlbnRyeS53ZWlnaHQ7XG4gICAgdnNJbmRleCA9IGNvbnN1bWVVbnNvcnRhYmxlKHZzLCB1bnNvcnRhYmxlLCB2c0luZGV4KTtcbiAgfSk7XG5cbiAgdmFyIHJlc3VsdCA9IHsgdnM6IF8uZmxhdHRlbih2cywgdHJ1ZSkgfTtcbiAgaWYgKHdlaWdodCkge1xuICAgIHJlc3VsdC5iYXJ5Y2VudGVyID0gc3VtIC8gd2VpZ2h0O1xuICAgIHJlc3VsdC53ZWlnaHQgPSB3ZWlnaHQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY29uc3VtZVVuc29ydGFibGUodnMsIHVuc29ydGFibGUsIGluZGV4KSB7XG4gIHZhciBsYXN0O1xuICB3aGlsZSAodW5zb3J0YWJsZS5sZW5ndGggJiYgKGxhc3QgPSBfLmxhc3QodW5zb3J0YWJsZSkpLmkgPD0gaW5kZXgpIHtcbiAgICB1bnNvcnRhYmxlLnBvcCgpO1xuICAgIHZzLnB1c2gobGFzdC52cyk7XG4gICAgaW5kZXgrKztcbiAgfVxuICByZXR1cm4gaW5kZXg7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVXaXRoQmlhcyhiaWFzKSB7XG4gIHJldHVybiBmdW5jdGlvbihlbnRyeVYsIGVudHJ5Vykge1xuICAgIGlmIChlbnRyeVYuYmFyeWNlbnRlciA8IGVudHJ5Vy5iYXJ5Y2VudGVyKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlIGlmIChlbnRyeVYuYmFyeWNlbnRlciA+IGVudHJ5Vy5iYXJ5Y2VudGVyKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWJpYXMgPyBlbnRyeVYuaSAtIGVudHJ5Vy5pIDogZW50cnlXLmkgLSBlbnRyeVYuaTtcbiAgfTtcbn1cbiIsInZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKSxcbiAgICBHcmFwaCA9IHJlcXVpcmUoXCIuLi9ncmFwaGxpYlwiKS5HcmFwaDtcblxubW9kdWxlLmV4cG9ydHMgPSBidWlsZExheWVyR3JhcGg7XG5cbi8qXG4gKiBDb25zdHJ1Y3RzIGEgZ3JhcGggdGhhdCBjYW4gYmUgdXNlZCB0byBzb3J0IGEgbGF5ZXIgb2Ygbm9kZXMuIFRoZSBncmFwaCB3aWxsXG4gKiBjb250YWluIGFsbCBiYXNlIGFuZCBzdWJncmFwaCBub2RlcyBmcm9tIHRoZSByZXF1ZXN0IGxheWVyIGluIHRoZWlyIG9yaWdpbmFsXG4gKiBoaWVyYXJjaHkgYW5kIGFueSBlZGdlcyB0aGF0IGFyZSBpbmNpZGVudCBvbiB0aGVzZSBub2RlcyBhbmQgYXJlIG9mIHRoZSB0eXBlXG4gKiByZXF1ZXN0ZWQgYnkgdGhlIFwicmVsYXRpb25zaGlwXCIgcGFyYW1ldGVyLlxuICpcbiAqIE5vZGVzIGZyb20gdGhlIHJlcXVlc3RlZCByYW5rIHRoYXQgZG8gbm90IGhhdmUgcGFyZW50cyBhcmUgYXNzaWduZWQgYSByb290XG4gKiBub2RlIGluIHRoZSBvdXRwdXQgZ3JhcGgsIHdoaWNoIGlzIHNldCBpbiB0aGUgcm9vdCBncmFwaCBhdHRyaWJ1dGUuIFRoaXNcbiAqIG1ha2VzIGl0IGVhc3kgdG8gd2FsayB0aGUgaGllcmFyY2h5IG9mIG1vdmFibGUgbm9kZXMgZHVyaW5nIG9yZGVyaW5nLlxuICpcbiAqIFByZS1jb25kaXRpb25zOlxuICpcbiAqICAgIDEuIElucHV0IGdyYXBoIGlzIGEgREFHXG4gKiAgICAyLiBCYXNlIG5vZGVzIGluIHRoZSBpbnB1dCBncmFwaCBoYXZlIGEgcmFuayBhdHRyaWJ1dGVcbiAqICAgIDMuIFN1YmdyYXBoIG5vZGVzIGluIHRoZSBpbnB1dCBncmFwaCBoYXMgbWluUmFuayBhbmQgbWF4UmFuayBhdHRyaWJ1dGVzXG4gKiAgICA0LiBFZGdlcyBoYXZlIGFuIGFzc2lnbmVkIHdlaWdodFxuICpcbiAqIFBvc3QtY29uZGl0aW9uczpcbiAqXG4gKiAgICAxLiBPdXRwdXQgZ3JhcGggaGFzIGFsbCBub2RlcyBpbiB0aGUgbW92YWJsZSByYW5rIHdpdGggcHJlc2VydmVkXG4gKiAgICAgICBoaWVyYXJjaHkuXG4gKiAgICAyLiBSb290IG5vZGVzIGluIHRoZSBtb3ZhYmxlIGxheWVyIGFyZSBtYWRlIGNoaWxkcmVuIG9mIHRoZSBub2RlXG4gKiAgICAgICBpbmRpY2F0ZWQgYnkgdGhlIHJvb3QgYXR0cmlidXRlIG9mIHRoZSBncmFwaC5cbiAqICAgIDMuIE5vbi1tb3ZhYmxlIG5vZGVzIGluY2lkZW50IG9uIG1vdmFibGUgbm9kZXMsIHNlbGVjdGVkIGJ5IHRoZVxuICogICAgICAgcmVsYXRpb25zaGlwIHBhcmFtZXRlciwgYXJlIGluY2x1ZGVkIGluIHRoZSBncmFwaCAod2l0aG91dCBoaWVyYXJjaHkpLlxuICogICAgNC4gRWRnZXMgaW5jaWRlbnQgb24gbW92YWJsZSBub2Rlcywgc2VsZWN0ZWQgYnkgdGhlIHJlbGF0aW9uc2hpcFxuICogICAgICAgcGFyYW1ldGVyLCBhcmUgYWRkZWQgdG8gdGhlIG91dHB1dCBncmFwaC5cbiAqICAgIDUuIFRoZSB3ZWlnaHRzIGZvciBjb3BpZWQgZWRnZXMgYXJlIGFnZ3JlZ2F0ZWQgYXMgbmVlZCwgc2luY2UgdGhlIG91dHB1dFxuICogICAgICAgZ3JhcGggaXMgbm90IGEgbXVsdGktZ3JhcGguXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkTGF5ZXJHcmFwaChnLCByYW5rLCByZWxhdGlvbnNoaXApIHtcbiAgdmFyIHJvb3QgPSBjcmVhdGVSb290Tm9kZShnKSxcbiAgICAgIHJlc3VsdCA9IG5ldyBHcmFwaCh7IGNvbXBvdW5kOiB0cnVlIH0pLnNldEdyYXBoKHsgcm9vdDogcm9vdCB9KVxuICAgICAgICAgICAgICAgICAgLnNldERlZmF1bHROb2RlTGFiZWwoZnVuY3Rpb24odikgeyByZXR1cm4gZy5ub2RlKHYpOyB9KTtcblxuICBfLmZvckVhY2goZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIG5vZGUgPSBnLm5vZGUodiksXG4gICAgICAgIHBhcmVudCA9IGcucGFyZW50KHYpO1xuXG4gICAgaWYgKG5vZGUucmFuayA9PT0gcmFuayB8fCBub2RlLm1pblJhbmsgPD0gcmFuayAmJiByYW5rIDw9IG5vZGUubWF4UmFuaykge1xuICAgICAgcmVzdWx0LnNldE5vZGUodik7XG4gICAgICByZXN1bHQuc2V0UGFyZW50KHYsIHBhcmVudCB8fCByb290KTtcblxuICAgICAgLy8gVGhpcyBhc3N1bWVzIHdlIGhhdmUgb25seSBzaG9ydCBlZGdlcyFcbiAgICAgIF8uZm9yRWFjaChnW3JlbGF0aW9uc2hpcF0odiksIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHUgPSBlLnYgPT09IHYgPyBlLncgOiBlLnYsXG4gICAgICAgICAgICBlZGdlID0gcmVzdWx0LmVkZ2UodSwgdiksXG4gICAgICAgICAgICB3ZWlnaHQgPSAhXy5pc1VuZGVmaW5lZChlZGdlKSA/IGVkZ2Uud2VpZ2h0IDogMDtcbiAgICAgICAgcmVzdWx0LnNldEVkZ2UodSwgdiwgeyB3ZWlnaHQ6IGcuZWRnZShlKS53ZWlnaHQgKyB3ZWlnaHQgfSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKF8uaGFzKG5vZGUsIFwibWluUmFua1wiKSkge1xuICAgICAgICByZXN1bHQuc2V0Tm9kZSh2LCB7XG4gICAgICAgICAgYm9yZGVyTGVmdDogbm9kZS5ib3JkZXJMZWZ0W3JhbmtdLFxuICAgICAgICAgIGJvcmRlclJpZ2h0OiBub2RlLmJvcmRlclJpZ2h0W3JhbmtdXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUm9vdE5vZGUoZykge1xuICB2YXIgdjtcbiAgd2hpbGUgKGcuaGFzTm9kZSgodiA9IF8udW5pcXVlSWQoXCJfcm9vdFwiKSkpKTtcbiAgcmV0dXJuIHY7XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gYWRkU3ViZ3JhcGhDb25zdHJhaW50cztcblxuZnVuY3Rpb24gYWRkU3ViZ3JhcGhDb25zdHJhaW50cyhnLCBjZywgdnMpIHtcbiAgdmFyIHByZXYgPSB7fSxcbiAgICAgIHJvb3RQcmV2O1xuXG4gIF8uZm9yRWFjaCh2cywgZnVuY3Rpb24odikge1xuICAgIHZhciBjaGlsZCA9IGcucGFyZW50KHYpLFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIHByZXZDaGlsZDtcbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIHBhcmVudCA9IGcucGFyZW50KGNoaWxkKTtcbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcHJldkNoaWxkID0gcHJldltwYXJlbnRdO1xuICAgICAgICBwcmV2W3BhcmVudF0gPSBjaGlsZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByZXZDaGlsZCA9IHJvb3RQcmV2O1xuICAgICAgICByb290UHJldiA9IGNoaWxkO1xuICAgICAgfVxuICAgICAgaWYgKHByZXZDaGlsZCAmJiBwcmV2Q2hpbGQgIT09IGNoaWxkKSB7XG4gICAgICAgIGNnLnNldEVkZ2UocHJldkNoaWxkLCBjaGlsZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gcGFyZW50O1xuICAgIH1cbiAgfSk7XG5cbiAgLypcbiAgZnVuY3Rpb24gZGZzKHYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB2ID8gZy5jaGlsZHJlbih2KSA6IGcuY2hpbGRyZW4oKTtcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICB2YXIgbWluID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgICAgIHN1YmdyYXBocyA9IFtdO1xuICAgICAgXy5lYWNoKGNoaWxkcmVuLCBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICB2YXIgY2hpbGRNaW4gPSBkZnMoY2hpbGQpO1xuICAgICAgICBpZiAoZy5jaGlsZHJlbihjaGlsZCkubGVuZ3RoKSB7XG4gICAgICAgICAgc3ViZ3JhcGhzLnB1c2goeyB2OiBjaGlsZCwgb3JkZXI6IGNoaWxkTWluIH0pO1xuICAgICAgICB9XG4gICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgY2hpbGRNaW4pO1xuICAgICAgfSk7XG4gICAgICBfLnJlZHVjZShfLnNvcnRCeShzdWJncmFwaHMsIFwib3JkZXJcIiksIGZ1bmN0aW9uKHByZXYsIGN1cnIpIHtcbiAgICAgICAgY2cuc2V0RWRnZShwcmV2LnYsIGN1cnIudik7XG4gICAgICAgIHJldHVybiBjdXJyO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICByZXR1cm4gZy5ub2RlKHYpLm9yZGVyO1xuICB9XG4gIGRmcyh1bmRlZmluZWQpO1xuICAqL1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKSxcbiAgICB1dGlsID0gcmVxdWlyZShcIi4uL3V0aWxcIiksXG4gICAgcG9zaXRpb25YID0gcmVxdWlyZShcIi4vYmtcIikucG9zaXRpb25YO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvc2l0aW9uO1xuXG5mdW5jdGlvbiBwb3NpdGlvbihnKSB7XG4gIGcgPSB1dGlsLmFzTm9uQ29tcG91bmRHcmFwaChnKTtcblxuICBwb3NpdGlvblkoZyk7XG4gIF8uZm9yRWFjaChwb3NpdGlvblgoZyksIGZ1bmN0aW9uKHgsIHYpIHtcbiAgICBnLm5vZGUodikueCA9IHg7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwb3NpdGlvblkoZykge1xuICB2YXIgbGF5ZXJpbmcgPSB1dGlsLmJ1aWxkTGF5ZXJNYXRyaXgoZyksXG4gICAgICByYW5rU2VwID0gZy5ncmFwaCgpLnJhbmtzZXAsXG4gICAgICBwcmV2WSA9IDA7XG4gIF8uZm9yRWFjaChsYXllcmluZywgZnVuY3Rpb24obGF5ZXIpIHtcbiAgICB2YXIgbWF4SGVpZ2h0ID0gXy5tYXgoXy5tYXAobGF5ZXIsIGZ1bmN0aW9uKHYpIHsgcmV0dXJuIGcubm9kZSh2KS5oZWlnaHQ7IH0pKTtcbiAgICBfLmZvckVhY2gobGF5ZXIsIGZ1bmN0aW9uKHYpIHtcbiAgICAgIGcubm9kZSh2KS55ID0gcHJldlkgKyBtYXhIZWlnaHQgLyAyO1xuICAgIH0pO1xuICAgIHByZXZZICs9IG1heEhlaWdodCArIHJhbmtTZXA7XG4gIH0pO1xufVxuXG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpLFxuICAgIEdyYXBoID0gcmVxdWlyZShcIi4uL2dyYXBobGliXCIpLkdyYXBoLFxuICAgIHV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcblxuLypcbiAqIFRoaXMgbW9kdWxlIHByb3ZpZGVzIGNvb3JkaW5hdGUgYXNzaWdubWVudCBiYXNlZCBvbiBCcmFuZGVzIGFuZCBLw7ZwZiwgXCJGYXN0XG4gKiBhbmQgU2ltcGxlIEhvcml6b250YWwgQ29vcmRpbmF0ZSBBc3NpZ25tZW50LlwiXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBvc2l0aW9uWDogcG9zaXRpb25YLFxuICBmaW5kVHlwZTFDb25mbGljdHM6IGZpbmRUeXBlMUNvbmZsaWN0cyxcbiAgZmluZFR5cGUyQ29uZmxpY3RzOiBmaW5kVHlwZTJDb25mbGljdHMsXG4gIGFkZENvbmZsaWN0OiBhZGRDb25mbGljdCxcbiAgaGFzQ29uZmxpY3Q6IGhhc0NvbmZsaWN0LFxuICB2ZXJ0aWNhbEFsaWdubWVudDogdmVydGljYWxBbGlnbm1lbnQsXG4gIGhvcml6b250YWxDb21wYWN0aW9uOiBob3Jpem9udGFsQ29tcGFjdGlvbixcbiAgYWxpZ25Db29yZGluYXRlczogYWxpZ25Db29yZGluYXRlcyxcbiAgZmluZFNtYWxsZXN0V2lkdGhBbGlnbm1lbnQ6IGZpbmRTbWFsbGVzdFdpZHRoQWxpZ25tZW50LFxuICBiYWxhbmNlOiBiYWxhbmNlXG59O1xuXG4vKlxuICogTWFya3MgYWxsIGVkZ2VzIGluIHRoZSBncmFwaCB3aXRoIGEgdHlwZS0xIGNvbmZsaWN0IHdpdGggdGhlIFwidHlwZTFDb25mbGljdFwiXG4gKiBwcm9wZXJ0eS4gQSB0eXBlLTEgY29uZmxpY3QgaXMgb25lIHdoZXJlIGEgbm9uLWlubmVyIHNlZ21lbnQgY3Jvc3NlcyBhblxuICogaW5uZXIgc2VnbWVudC4gQW4gaW5uZXIgc2VnbWVudCBpcyBhbiBlZGdlIHdpdGggYm90aCBpbmNpZGVudCBub2RlcyBtYXJrZWRcbiAqIHdpdGggdGhlIFwiZHVtbXlcIiBwcm9wZXJ0eS5cbiAqXG4gKiBUaGlzIGFsZ29yaXRobSBzY2FucyBsYXllciBieSBsYXllciwgc3RhcnRpbmcgd2l0aCB0aGUgc2Vjb25kLCBmb3IgdHlwZS0xXG4gKiBjb25mbGljdHMgYmV0d2VlbiB0aGUgY3VycmVudCBsYXllciBhbmQgdGhlIHByZXZpb3VzIGxheWVyLiBGb3IgZWFjaCBsYXllclxuICogaXQgc2NhbnMgdGhlIG5vZGVzIGZyb20gbGVmdCB0byByaWdodCB1bnRpbCBpdCByZWFjaGVzIG9uZSB0aGF0IGlzIGluY2lkZW50XG4gKiBvbiBhbiBpbm5lciBzZWdtZW50LiBJdCB0aGVuIHNjYW5zIHByZWRlY2Vzc29ycyB0byBkZXRlcm1pbmUgaWYgdGhleSBoYXZlXG4gKiBlZGdlcyB0aGF0IGNyb3NzIHRoYXQgaW5uZXIgc2VnbWVudC4gQXQgdGhlIGVuZCBhIGZpbmFsIHNjYW4gaXMgZG9uZSBmb3IgYWxsXG4gKiBub2RlcyBvbiB0aGUgY3VycmVudCByYW5rIHRvIHNlZSBpZiB0aGV5IGNyb3NzIHRoZSBsYXN0IHZpc2l0ZWQgaW5uZXJcbiAqIHNlZ21lbnQuXG4gKlxuICogVGhpcyBhbGdvcml0aG0gKHNhZmVseSkgYXNzdW1lcyB0aGF0IGEgZHVtbXkgbm9kZSB3aWxsIG9ubHkgYmUgaW5jaWRlbnQgb24gYVxuICogc2luZ2xlIG5vZGUgaW4gdGhlIGxheWVycyBiZWluZyBzY2FubmVkLlxuICovXG5mdW5jdGlvbiBmaW5kVHlwZTFDb25mbGljdHMoZywgbGF5ZXJpbmcpIHtcbiAgdmFyIGNvbmZsaWN0cyA9IHt9O1xuXG4gIGZ1bmN0aW9uIHZpc2l0TGF5ZXIocHJldkxheWVyLCBsYXllcikge1xuICAgIHZhclxuICAgICAgLy8gbGFzdCB2aXNpdGVkIG5vZGUgaW4gdGhlIHByZXZpb3VzIGxheWVyIHRoYXQgaXMgaW5jaWRlbnQgb24gYW4gaW5uZXJcbiAgICAgIC8vIHNlZ21lbnQuXG4gICAgICBrMCA9IDAsXG4gICAgICAvLyBUcmFja3MgdGhlIGxhc3Qgbm9kZSBpbiB0aGlzIGxheWVyIHNjYW5uZWQgZm9yIGNyb3NzaW5ncyB3aXRoIGEgdHlwZS0xXG4gICAgICAvLyBzZWdtZW50LlxuICAgICAgc2NhblBvcyA9IDAsXG4gICAgICBwcmV2TGF5ZXJMZW5ndGggPSBwcmV2TGF5ZXIubGVuZ3RoLFxuICAgICAgbGFzdE5vZGUgPSBfLmxhc3QobGF5ZXIpO1xuXG4gICAgXy5mb3JFYWNoKGxheWVyLCBmdW5jdGlvbih2LCBpKSB7XG4gICAgICB2YXIgdyA9IGZpbmRPdGhlcklubmVyU2VnbWVudE5vZGUoZywgdiksXG4gICAgICAgICAgazEgPSB3ID8gZy5ub2RlKHcpLm9yZGVyIDogcHJldkxheWVyTGVuZ3RoO1xuXG4gICAgICBpZiAodyB8fCB2ID09PSBsYXN0Tm9kZSkge1xuICAgICAgICBfLmZvckVhY2gobGF5ZXIuc2xpY2Uoc2NhblBvcywgaSArMSksIGZ1bmN0aW9uKHNjYW5Ob2RlKSB7XG4gICAgICAgICAgXy5mb3JFYWNoKGcucHJlZGVjZXNzb3JzKHNjYW5Ob2RlKSwgZnVuY3Rpb24odSkge1xuICAgICAgICAgICAgdmFyIHVMYWJlbCA9IGcubm9kZSh1KSxcbiAgICAgICAgICAgICAgICB1UG9zID0gdUxhYmVsLm9yZGVyO1xuICAgICAgICAgICAgaWYgKCh1UG9zIDwgazAgfHwgazEgPCB1UG9zKSAmJlxuICAgICAgICAgICAgICAgICEodUxhYmVsLmR1bW15ICYmIGcubm9kZShzY2FuTm9kZSkuZHVtbXkpKSB7XG4gICAgICAgICAgICAgIGFkZENvbmZsaWN0KGNvbmZsaWN0cywgdSwgc2Nhbk5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgc2NhblBvcyA9IGkgKyAxO1xuICAgICAgICBrMCA9IGsxO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGxheWVyO1xuICB9XG5cbiAgXy5yZWR1Y2UobGF5ZXJpbmcsIHZpc2l0TGF5ZXIpO1xuICByZXR1cm4gY29uZmxpY3RzO1xufVxuXG5mdW5jdGlvbiBmaW5kVHlwZTJDb25mbGljdHMoZywgbGF5ZXJpbmcpIHtcbiAgdmFyIGNvbmZsaWN0cyA9IHt9O1xuXG4gIGZ1bmN0aW9uIHNjYW4oc291dGgsIHNvdXRoUG9zLCBzb3V0aEVuZCwgcHJldk5vcnRoQm9yZGVyLCBuZXh0Tm9ydGhCb3JkZXIpIHtcbiAgICB2YXIgdjtcbiAgICBfLmZvckVhY2goXy5yYW5nZShzb3V0aFBvcywgc291dGhFbmQpLCBmdW5jdGlvbihpKSB7XG4gICAgICB2ID0gc291dGhbaV07XG4gICAgICBpZiAoZy5ub2RlKHYpLmR1bW15KSB7XG4gICAgICAgIF8uZm9yRWFjaChnLnByZWRlY2Vzc29ycyh2KSwgZnVuY3Rpb24odSkge1xuICAgICAgICAgIHZhciB1Tm9kZSA9IGcubm9kZSh1KTtcbiAgICAgICAgICBpZiAodU5vZGUuZHVtbXkgJiZcbiAgICAgICAgICAgICAgKHVOb2RlLm9yZGVyIDwgcHJldk5vcnRoQm9yZGVyIHx8IHVOb2RlLm9yZGVyID4gbmV4dE5vcnRoQm9yZGVyKSkge1xuICAgICAgICAgICAgYWRkQ29uZmxpY3QoY29uZmxpY3RzLCB1LCB2KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cblxuICBmdW5jdGlvbiB2aXNpdExheWVyKG5vcnRoLCBzb3V0aCkge1xuICAgIHZhciBwcmV2Tm9ydGhQb3MgPSAtMSxcbiAgICAgICAgbmV4dE5vcnRoUG9zLFxuICAgICAgICBzb3V0aFBvcyA9IDA7XG5cbiAgICBfLmZvckVhY2goc291dGgsIGZ1bmN0aW9uKHYsIHNvdXRoTG9va2FoZWFkKSB7XG4gICAgICBpZiAoZy5ub2RlKHYpLmR1bW15ID09PSBcImJvcmRlclwiKSB7XG4gICAgICAgIHZhciBwcmVkZWNlc3NvcnMgPSBnLnByZWRlY2Vzc29ycyh2KTtcbiAgICAgICAgaWYgKHByZWRlY2Vzc29ycy5sZW5ndGgpIHtcbiAgICAgICAgICBuZXh0Tm9ydGhQb3MgPSBnLm5vZGUocHJlZGVjZXNzb3JzWzBdKS5vcmRlcjtcbiAgICAgICAgICBzY2FuKHNvdXRoLCBzb3V0aFBvcywgc291dGhMb29rYWhlYWQsIHByZXZOb3J0aFBvcywgbmV4dE5vcnRoUG9zKTtcbiAgICAgICAgICBzb3V0aFBvcyA9IHNvdXRoTG9va2FoZWFkO1xuICAgICAgICAgIHByZXZOb3J0aFBvcyA9IG5leHROb3J0aFBvcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2Nhbihzb3V0aCwgc291dGhQb3MsIHNvdXRoLmxlbmd0aCwgbmV4dE5vcnRoUG9zLCBub3J0aC5sZW5ndGgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNvdXRoO1xuICB9XG5cbiAgXy5yZWR1Y2UobGF5ZXJpbmcsIHZpc2l0TGF5ZXIpO1xuICByZXR1cm4gY29uZmxpY3RzO1xufVxuXG5mdW5jdGlvbiBmaW5kT3RoZXJJbm5lclNlZ21lbnROb2RlKGcsIHYpIHtcbiAgaWYgKGcubm9kZSh2KS5kdW1teSkge1xuICAgIHJldHVybiBfLmZpbmQoZy5wcmVkZWNlc3NvcnModiksIGZ1bmN0aW9uKHUpIHtcbiAgICAgIHJldHVybiBnLm5vZGUodSkuZHVtbXk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkQ29uZmxpY3QoY29uZmxpY3RzLCB2LCB3KSB7XG4gIGlmICh2ID4gdykge1xuICAgIHZhciB0bXAgPSB2O1xuICAgIHYgPSB3O1xuICAgIHcgPSB0bXA7XG4gIH1cblxuICB2YXIgY29uZmxpY3RzViA9IGNvbmZsaWN0c1t2XTtcbiAgaWYgKCFjb25mbGljdHNWKSB7XG4gICAgY29uZmxpY3RzW3ZdID0gY29uZmxpY3RzViA9IHt9O1xuICB9XG4gIGNvbmZsaWN0c1Zbd10gPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBoYXNDb25mbGljdChjb25mbGljdHMsIHYsIHcpIHtcbiAgaWYgKHYgPiB3KSB7XG4gICAgdmFyIHRtcCA9IHY7XG4gICAgdiA9IHc7XG4gICAgdyA9IHRtcDtcbiAgfVxuICByZXR1cm4gXy5oYXMoY29uZmxpY3RzW3ZdLCB3KTtcbn1cblxuLypcbiAqIFRyeSB0byBhbGlnbiBub2RlcyBpbnRvIHZlcnRpY2FsIFwiYmxvY2tzXCIgd2hlcmUgcG9zc2libGUuIFRoaXMgYWxnb3JpdGhtXG4gKiBhdHRlbXB0cyB0byBhbGlnbiBhIG5vZGUgd2l0aCBvbmUgb2YgaXRzIG1lZGlhbiBuZWlnaGJvcnMuIElmIHRoZSBlZGdlXG4gKiBjb25uZWN0aW5nIGEgbmVpZ2hib3IgaXMgYSB0eXBlLTEgY29uZmxpY3QgdGhlbiB3ZSBpZ25vcmUgdGhhdCBwb3NzaWJpbGl0eS5cbiAqIElmIGEgcHJldmlvdXMgbm9kZSBoYXMgYWxyZWFkeSBmb3JtZWQgYSBibG9jayB3aXRoIGEgbm9kZSBhZnRlciB0aGUgbm9kZVxuICogd2UncmUgdHJ5aW5nIHRvIGZvcm0gYSBibG9jayB3aXRoLCB3ZSBhbHNvIGlnbm9yZSB0aGF0IHBvc3NpYmlsaXR5IC0gb3VyXG4gKiBibG9ja3Mgd291bGQgYmUgc3BsaXQgaW4gdGhhdCBzY2VuYXJpby5cbiAqL1xuZnVuY3Rpb24gdmVydGljYWxBbGlnbm1lbnQoZywgbGF5ZXJpbmcsIGNvbmZsaWN0cywgbmVpZ2hib3JGbikge1xuICB2YXIgcm9vdCA9IHt9LFxuICAgICAgYWxpZ24gPSB7fSxcbiAgICAgIHBvcyA9IHt9O1xuXG4gIC8vIFdlIGNhY2hlIHRoZSBwb3NpdGlvbiBoZXJlIGJhc2VkIG9uIHRoZSBsYXllcmluZyBiZWNhdXNlIHRoZSBncmFwaCBhbmRcbiAgLy8gbGF5ZXJpbmcgbWF5IGJlIG91dCBvZiBzeW5jLiBUaGUgbGF5ZXJpbmcgbWF0cml4IGlzIG1hbmlwdWxhdGVkIHRvXG4gIC8vIGdlbmVyYXRlIGRpZmZlcmVudCBleHRyZW1lIGFsaWdubWVudHMuXG4gIF8uZm9yRWFjaChsYXllcmluZywgZnVuY3Rpb24obGF5ZXIpIHtcbiAgICBfLmZvckVhY2gobGF5ZXIsIGZ1bmN0aW9uKHYsIG9yZGVyKSB7XG4gICAgICByb290W3ZdID0gdjtcbiAgICAgIGFsaWduW3ZdID0gdjtcbiAgICAgIHBvc1t2XSA9IG9yZGVyO1xuICAgIH0pO1xuICB9KTtcblxuICBfLmZvckVhY2gobGF5ZXJpbmcsIGZ1bmN0aW9uKGxheWVyKSB7XG4gICAgdmFyIHByZXZJZHggPSAtMTtcbiAgICBfLmZvckVhY2gobGF5ZXIsIGZ1bmN0aW9uKHYpIHtcbiAgICAgIHZhciB3cyA9IG5laWdoYm9yRm4odik7XG4gICAgICBpZiAod3MubGVuZ3RoKSB7XG4gICAgICAgIHdzID0gXy5zb3J0Qnkod3MsIGZ1bmN0aW9uKHcpIHsgcmV0dXJuIHBvc1t3XTsgfSk7XG4gICAgICAgIHZhciBtcCA9ICh3cy5sZW5ndGggLSAxKSAvIDI7XG4gICAgICAgIGZvciAodmFyIGkgPSBNYXRoLmZsb29yKG1wKSwgaWwgPSBNYXRoLmNlaWwobXApOyBpIDw9IGlsOyArK2kpIHtcbiAgICAgICAgICB2YXIgdyA9IHdzW2ldO1xuICAgICAgICAgIGlmIChhbGlnblt2XSA9PT0gdiAmJlxuICAgICAgICAgICAgICBwcmV2SWR4IDwgcG9zW3ddICYmXG4gICAgICAgICAgICAgICFoYXNDb25mbGljdChjb25mbGljdHMsIHYsIHcpKSB7XG4gICAgICAgICAgICBhbGlnblt3XSA9IHY7XG4gICAgICAgICAgICBhbGlnblt2XSA9IHJvb3Rbdl0gPSByb290W3ddO1xuICAgICAgICAgICAgcHJldklkeCA9IHBvc1t3XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHsgcm9vdDogcm9vdCwgYWxpZ246IGFsaWduIH07XG59XG5cbmZ1bmN0aW9uIGhvcml6b250YWxDb21wYWN0aW9uKGcsIGxheWVyaW5nLCByb290LCBhbGlnbiwgcmV2ZXJzZVNlcCkge1xuICAvLyBUaGlzIHBvcnRpb24gb2YgdGhlIGFsZ29yaXRobSBkaWZmZXJzIGZyb20gQksgZHVlIHRvIGEgbnVtYmVyIG9mIHByb2JsZW1zLlxuICAvLyBJbnN0ZWFkIG9mIHRoZWlyIGFsZ29yaXRobSB3ZSBjb25zdHJ1Y3QgYSBuZXcgYmxvY2sgZ3JhcGggYW5kIGRvIHR3b1xuICAvLyBzd2VlcHMuIFRoZSBmaXJzdCBzd2VlcCBwbGFjZXMgYmxvY2tzIHdpdGggdGhlIHNtYWxsZXN0IHBvc3NpYmxlXG4gIC8vIGNvb3JkaW5hdGVzLiBUaGUgc2Vjb25kIHN3ZWVwIHJlbW92ZXMgdW51c2VkIHNwYWNlIGJ5IG1vdmluZyBibG9ja3MgdG8gdGhlXG4gIC8vIGdyZWF0ZXN0IGNvb3JkaW5hdGVzIHdpdGhvdXQgdmlvbGF0aW5nIHNlcGFyYXRpb24uXG4gIHZhciB4cyA9IHt9LFxuICAgICAgYmxvY2tHID0gYnVpbGRCbG9ja0dyYXBoKGcsIGxheWVyaW5nLCByb290LCByZXZlcnNlU2VwKSxcbiAgICAgIGJvcmRlclR5cGUgPSByZXZlcnNlU2VwID8gXCJib3JkZXJMZWZ0XCIgOiBcImJvcmRlclJpZ2h0XCI7XG5cbiAgZnVuY3Rpb24gaXRlcmF0ZShzZXRYc0Z1bmMsIG5leHROb2Rlc0Z1bmMpIHtcbiAgICB2YXIgc3RhY2sgPSBibG9ja0cubm9kZXMoKTtcbiAgICB2YXIgZWxlbSA9IHN0YWNrLnBvcCgpO1xuICAgIHZhciB2aXNpdGVkID0ge307XG4gICAgd2hpbGUgKGVsZW0pIHtcbiAgICAgIGlmICh2aXNpdGVkW2VsZW1dKSB7XG4gICAgICAgIHNldFhzRnVuYyhlbGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZpc2l0ZWRbZWxlbV0gPSB0cnVlO1xuICAgICAgICBzdGFjay5wdXNoKGVsZW0pO1xuICAgICAgICBzdGFjayA9IHN0YWNrLmNvbmNhdChuZXh0Tm9kZXNGdW5jKGVsZW0pKTtcbiAgICAgIH1cblxuICAgICAgZWxlbSA9IHN0YWNrLnBvcCgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZpcnN0IHBhc3MsIGFzc2lnbiBzbWFsbGVzdCBjb29yZGluYXRlc1xuICBmdW5jdGlvbiBwYXNzMShlbGVtKSB7XG4gICAgeHNbZWxlbV0gPSBibG9ja0cuaW5FZGdlcyhlbGVtKS5yZWR1Y2UoZnVuY3Rpb24oYWNjLCBlKSB7XG4gICAgICByZXR1cm4gTWF0aC5tYXgoYWNjLCB4c1tlLnZdICsgYmxvY2tHLmVkZ2UoZSkpO1xuICAgIH0sIDApO1xuICB9XG5cbiAgLy8gU2Vjb25kIHBhc3MsIGFzc2lnbiBncmVhdGVzdCBjb29yZGluYXRlc1xuICBmdW5jdGlvbiBwYXNzMihlbGVtKSB7XG4gICAgdmFyIG1pbiA9IGJsb2NrRy5vdXRFZGdlcyhlbGVtKS5yZWR1Y2UoZnVuY3Rpb24oYWNjLCBlKSB7XG4gICAgICByZXR1cm4gTWF0aC5taW4oYWNjLCB4c1tlLnddIC0gYmxvY2tHLmVkZ2UoZSkpO1xuICAgIH0sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG5cbiAgICB2YXIgbm9kZSA9IGcubm9kZShlbGVtKTtcbiAgICBpZiAobWluICE9PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgJiYgbm9kZS5ib3JkZXJUeXBlICE9PSBib3JkZXJUeXBlKSB7XG4gICAgICB4c1tlbGVtXSA9IE1hdGgubWF4KHhzW2VsZW1dLCBtaW4pO1xuICAgIH1cbiAgfVxuXG4gIGl0ZXJhdGUocGFzczEsIGJsb2NrRy5wcmVkZWNlc3NvcnMuYmluZChibG9ja0cpKTtcbiAgaXRlcmF0ZShwYXNzMiwgYmxvY2tHLnN1Y2Nlc3NvcnMuYmluZChibG9ja0cpKTtcblxuICAvLyBBc3NpZ24geCBjb29yZGluYXRlcyB0byBhbGwgbm9kZXNcbiAgXy5mb3JFYWNoKGFsaWduLCBmdW5jdGlvbih2KSB7XG4gICAgeHNbdl0gPSB4c1tyb290W3ZdXTtcbiAgfSk7XG5cbiAgcmV0dXJuIHhzO1xufVxuXG5cbmZ1bmN0aW9uIGJ1aWxkQmxvY2tHcmFwaChnLCBsYXllcmluZywgcm9vdCwgcmV2ZXJzZVNlcCkge1xuICB2YXIgYmxvY2tHcmFwaCA9IG5ldyBHcmFwaCgpLFxuICAgICAgZ3JhcGhMYWJlbCA9IGcuZ3JhcGgoKSxcbiAgICAgIHNlcEZuID0gc2VwKGdyYXBoTGFiZWwubm9kZXNlcCwgZ3JhcGhMYWJlbC5lZGdlc2VwLCByZXZlcnNlU2VwKTtcblxuICBfLmZvckVhY2gobGF5ZXJpbmcsIGZ1bmN0aW9uKGxheWVyKSB7XG4gICAgdmFyIHU7XG4gICAgXy5mb3JFYWNoKGxheWVyLCBmdW5jdGlvbih2KSB7XG4gICAgICB2YXIgdlJvb3QgPSByb290W3ZdO1xuICAgICAgYmxvY2tHcmFwaC5zZXROb2RlKHZSb290KTtcbiAgICAgIGlmICh1KSB7XG4gICAgICAgIHZhciB1Um9vdCA9IHJvb3RbdV0sXG4gICAgICAgICAgICBwcmV2TWF4ID0gYmxvY2tHcmFwaC5lZGdlKHVSb290LCB2Um9vdCk7XG4gICAgICAgIGJsb2NrR3JhcGguc2V0RWRnZSh1Um9vdCwgdlJvb3QsIE1hdGgubWF4KHNlcEZuKGcsIHYsIHUpLCBwcmV2TWF4IHx8IDApKTtcbiAgICAgIH1cbiAgICAgIHUgPSB2O1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gYmxvY2tHcmFwaDtcbn1cblxuLypcbiAqIFJldHVybnMgdGhlIGFsaWdubWVudCB0aGF0IGhhcyB0aGUgc21hbGxlc3Qgd2lkdGggb2YgdGhlIGdpdmVuIGFsaWdubWVudHMuXG4gKi9cbmZ1bmN0aW9uIGZpbmRTbWFsbGVzdFdpZHRoQWxpZ25tZW50KGcsIHhzcykge1xuICByZXR1cm4gXy5taW5CeShfLnZhbHVlcyh4c3MpLCBmdW5jdGlvbiAoeHMpIHtcbiAgICB2YXIgbWF4ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuICAgIHZhciBtaW4gPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cbiAgICBfLmZvckluKHhzLCBmdW5jdGlvbiAoeCwgdikge1xuICAgICAgdmFyIGhhbGZXaWR0aCA9IHdpZHRoKGcsIHYpIC8gMjtcblxuICAgICAgbWF4ID0gTWF0aC5tYXgoeCArIGhhbGZXaWR0aCwgbWF4KTtcbiAgICAgIG1pbiA9IE1hdGgubWluKHggLSBoYWxmV2lkdGgsIG1pbik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWF4IC0gbWluO1xuICB9KTtcbn1cblxuLypcbiAqIEFsaWduIHRoZSBjb29yZGluYXRlcyBvZiBlYWNoIG9mIHRoZSBsYXlvdXQgYWxpZ25tZW50cyBzdWNoIHRoYXRcbiAqIGxlZnQtYmlhc2VkIGFsaWdubWVudHMgaGF2ZSB0aGVpciBtaW5pbXVtIGNvb3JkaW5hdGUgYXQgdGhlIHNhbWUgcG9pbnQgYXNcbiAqIHRoZSBtaW5pbXVtIGNvb3JkaW5hdGUgb2YgdGhlIHNtYWxsZXN0IHdpZHRoIGFsaWdubWVudCBhbmQgcmlnaHQtYmlhc2VkXG4gKiBhbGlnbm1lbnRzIGhhdmUgdGhlaXIgbWF4aW11bSBjb29yZGluYXRlIGF0IHRoZSBzYW1lIHBvaW50IGFzIHRoZSBtYXhpbXVtXG4gKiBjb29yZGluYXRlIG9mIHRoZSBzbWFsbGVzdCB3aWR0aCBhbGlnbm1lbnQuXG4gKi9cbmZ1bmN0aW9uIGFsaWduQ29vcmRpbmF0ZXMoeHNzLCBhbGlnblRvKSB7XG4gIHZhciBhbGlnblRvVmFscyA9IF8udmFsdWVzKGFsaWduVG8pLFxuICAgICAgYWxpZ25Ub01pbiA9IF8ubWluKGFsaWduVG9WYWxzKSxcbiAgICAgIGFsaWduVG9NYXggPSBfLm1heChhbGlnblRvVmFscyk7XG5cbiAgXy5mb3JFYWNoKFtcInVcIiwgXCJkXCJdLCBmdW5jdGlvbih2ZXJ0KSB7XG4gICAgXy5mb3JFYWNoKFtcImxcIiwgXCJyXCJdLCBmdW5jdGlvbihob3Jpeikge1xuICAgICAgdmFyIGFsaWdubWVudCA9IHZlcnQgKyBob3JpeixcbiAgICAgICAgICB4cyA9IHhzc1thbGlnbm1lbnRdLFxuICAgICAgICAgIGRlbHRhO1xuICAgICAgaWYgKHhzID09PSBhbGlnblRvKSByZXR1cm47XG5cbiAgICAgIHZhciB4c1ZhbHMgPSBfLnZhbHVlcyh4cyk7XG4gICAgICBkZWx0YSA9IGhvcml6ID09PSBcImxcIiA/IGFsaWduVG9NaW4gLSBfLm1pbih4c1ZhbHMpIDogYWxpZ25Ub01heCAtIF8ubWF4KHhzVmFscyk7XG5cbiAgICAgIGlmIChkZWx0YSkge1xuICAgICAgICB4c3NbYWxpZ25tZW50XSA9IF8ubWFwVmFsdWVzKHhzLCBmdW5jdGlvbih4KSB7IHJldHVybiB4ICsgZGVsdGE7IH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYmFsYW5jZSh4c3MsIGFsaWduKSB7XG4gIHJldHVybiBfLm1hcFZhbHVlcyh4c3MudWwsIGZ1bmN0aW9uKGlnbm9yZSwgdikge1xuICAgIGlmIChhbGlnbikge1xuICAgICAgcmV0dXJuIHhzc1thbGlnbi50b0xvd2VyQ2FzZSgpXVt2XTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHhzID0gXy5zb3J0QnkoXy5tYXAoeHNzLCB2KSk7XG4gICAgICByZXR1cm4gKHhzWzFdICsgeHNbMl0pIC8gMjtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwb3NpdGlvblgoZykge1xuICB2YXIgbGF5ZXJpbmcgPSB1dGlsLmJ1aWxkTGF5ZXJNYXRyaXgoZyksXG4gICAgICBjb25mbGljdHMgPSBfLm1lcmdlKGZpbmRUeXBlMUNvbmZsaWN0cyhnLCBsYXllcmluZyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmRUeXBlMkNvbmZsaWN0cyhnLCBsYXllcmluZykpO1xuXG4gIHZhciB4c3MgPSB7fSxcbiAgICAgIGFkanVzdGVkTGF5ZXJpbmc7XG4gIF8uZm9yRWFjaChbXCJ1XCIsIFwiZFwiXSwgZnVuY3Rpb24odmVydCkge1xuICAgIGFkanVzdGVkTGF5ZXJpbmcgPSB2ZXJ0ID09PSBcInVcIiA/IGxheWVyaW5nIDogXy52YWx1ZXMobGF5ZXJpbmcpLnJldmVyc2UoKTtcbiAgICBfLmZvckVhY2goW1wibFwiLCBcInJcIl0sIGZ1bmN0aW9uKGhvcml6KSB7XG4gICAgICBpZiAoaG9yaXogPT09IFwiclwiKSB7XG4gICAgICAgIGFkanVzdGVkTGF5ZXJpbmcgPSBfLm1hcChhZGp1c3RlZExheWVyaW5nLCBmdW5jdGlvbihpbm5lcikge1xuICAgICAgICAgIHJldHVybiBfLnZhbHVlcyhpbm5lcikucmV2ZXJzZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5laWdoYm9yRm4gPSAodmVydCA9PT0gXCJ1XCIgPyBnLnByZWRlY2Vzc29ycyA6IGcuc3VjY2Vzc29ycykuYmluZChnKTtcbiAgICAgIHZhciBhbGlnbiA9IHZlcnRpY2FsQWxpZ25tZW50KGcsIGFkanVzdGVkTGF5ZXJpbmcsIGNvbmZsaWN0cywgbmVpZ2hib3JGbik7XG4gICAgICB2YXIgeHMgPSBob3Jpem9udGFsQ29tcGFjdGlvbihnLCBhZGp1c3RlZExheWVyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ24ucm9vdCwgYWxpZ24uYWxpZ24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3JpeiA9PT0gXCJyXCIpO1xuICAgICAgaWYgKGhvcml6ID09PSBcInJcIikge1xuICAgICAgICB4cyA9IF8ubWFwVmFsdWVzKHhzLCBmdW5jdGlvbih4KSB7IHJldHVybiAteDsgfSk7XG4gICAgICB9XG4gICAgICB4c3NbdmVydCArIGhvcml6XSA9IHhzO1xuICAgIH0pO1xuICB9KTtcblxuICB2YXIgc21hbGxlc3RXaWR0aCA9IGZpbmRTbWFsbGVzdFdpZHRoQWxpZ25tZW50KGcsIHhzcyk7XG4gIGFsaWduQ29vcmRpbmF0ZXMoeHNzLCBzbWFsbGVzdFdpZHRoKTtcbiAgcmV0dXJuIGJhbGFuY2UoeHNzLCBnLmdyYXBoKCkuYWxpZ24pO1xufVxuXG5mdW5jdGlvbiBzZXAobm9kZVNlcCwgZWRnZVNlcCwgcmV2ZXJzZVNlcCkge1xuICByZXR1cm4gZnVuY3Rpb24oZywgdiwgdykge1xuICAgIHZhciB2TGFiZWwgPSBnLm5vZGUodiksXG4gICAgICAgIHdMYWJlbCA9IGcubm9kZSh3KSxcbiAgICAgICAgc3VtID0gMCxcbiAgICAgICAgZGVsdGE7XG5cbiAgICBzdW0gKz0gdkxhYmVsLndpZHRoIC8gMjtcbiAgICBpZiAoXy5oYXModkxhYmVsLCBcImxhYmVscG9zXCIpKSB7XG4gICAgICBzd2l0Y2ggKHZMYWJlbC5sYWJlbHBvcy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIGNhc2UgXCJsXCI6IGRlbHRhID0gLXZMYWJlbC53aWR0aCAvIDI7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiclwiOiBkZWx0YSA9IHZMYWJlbC53aWR0aCAvIDI7IGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIHN1bSArPSByZXZlcnNlU2VwID8gZGVsdGEgOiAtZGVsdGE7XG4gICAgfVxuICAgIGRlbHRhID0gMDtcblxuICAgIHN1bSArPSAodkxhYmVsLmR1bW15ID8gZWRnZVNlcCA6IG5vZGVTZXApIC8gMjtcbiAgICBzdW0gKz0gKHdMYWJlbC5kdW1teSA/IGVkZ2VTZXAgOiBub2RlU2VwKSAvIDI7XG5cbiAgICBzdW0gKz0gd0xhYmVsLndpZHRoIC8gMjtcbiAgICBpZiAoXy5oYXMod0xhYmVsLCBcImxhYmVscG9zXCIpKSB7XG4gICAgICBzd2l0Y2ggKHdMYWJlbC5sYWJlbHBvcy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIGNhc2UgXCJsXCI6IGRlbHRhID0gd0xhYmVsLndpZHRoIC8gMjsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJyXCI6IGRlbHRhID0gLXdMYWJlbC53aWR0aCAvIDI7IGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIHN1bSArPSByZXZlcnNlU2VwID8gZGVsdGEgOiAtZGVsdGE7XG4gICAgfVxuICAgIGRlbHRhID0gMDtcblxuICAgIHJldHVybiBzdW07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHdpZHRoKGcsIHYpIHtcbiAgcmV0dXJuIGcubm9kZSh2KS53aWR0aDtcbn1cbiIsInZhciBfID0gcmVxdWlyZShcIi4vbG9kYXNoXCIpLFxuICAgIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpLFxuICAgIEdyYXBoID0gcmVxdWlyZShcIi4vZ3JhcGhsaWJcIikuR3JhcGg7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZWJ1Z09yZGVyaW5nOiBkZWJ1Z09yZGVyaW5nXG59O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gZGVidWdPcmRlcmluZyhnKSB7XG4gIHZhciBsYXllck1hdHJpeCA9IHV0aWwuYnVpbGRMYXllck1hdHJpeChnKTtcblxuICB2YXIgaCA9IG5ldyBHcmFwaCh7IGNvbXBvdW5kOiB0cnVlLCBtdWx0aWdyYXBoOiB0cnVlIH0pLnNldEdyYXBoKHt9KTtcblxuICBfLmZvckVhY2goZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgaC5zZXROb2RlKHYsIHsgbGFiZWw6IHYgfSk7XG4gICAgaC5zZXRQYXJlbnQodiwgXCJsYXllclwiICsgZy5ub2RlKHYpLnJhbmspO1xuICB9KTtcblxuICBfLmZvckVhY2goZy5lZGdlcygpLCBmdW5jdGlvbihlKSB7XG4gICAgaC5zZXRFZGdlKGUudiwgZS53LCB7fSwgZS5uYW1lKTtcbiAgfSk7XG5cbiAgXy5mb3JFYWNoKGxheWVyTWF0cml4LCBmdW5jdGlvbihsYXllciwgaSkge1xuICAgIHZhciBsYXllclYgPSBcImxheWVyXCIgKyBpO1xuICAgIGguc2V0Tm9kZShsYXllclYsIHsgcmFuazogXCJzYW1lXCIgfSk7XG4gICAgXy5yZWR1Y2UobGF5ZXIsIGZ1bmN0aW9uKHUsIHYpIHtcbiAgICAgIGguc2V0RWRnZSh1LCB2LCB7IHN0eWxlOiBcImludmlzXCIgfSk7XG4gICAgICByZXR1cm4gdjtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGg7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiMC44LjRcIjtcbiIsImltcG9ydCB7IE5vZGUsIElPLCBOb2RlTGF5b3V0LCBOb2RlUHJvcExheW91dCB9IGZyb20gJy4vTm9kZSc7XG5pbXBvcnQgeyBFZGdlLCBFZGdlTGF5b3V0IH0gZnJvbSAnLi9FZGdlJztcbmltcG9ydCB7IFNjZW5lIH0gZnJvbSAnLi9TY2VuZSc7XG5pbXBvcnQgKiBhcyBTVkcgZnJvbSAnc3ZnLmpzJztcbmltcG9ydCB7IGRpZmZlcmVuY2UsIGdldFByb3BJRCB9IGZyb20gJy4vU2NlbmVMYXlvdXQnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBjbGFzcyBTY2VuZURpc3BsYXkge1xuICAgIHByaXZhdGUgbm9kZURpc3BsYXlzOiBNYXA8c3RyaW5nLCBOb2RlRGlzcGxheT4gPSBuZXcgTWFwKCk7XG4gICAgcHJpdmF0ZSBlZGdlRGlzcGxheXM6IE1hcDxzdHJpbmcsIEVkZ2VEaXNwbGF5PiA9IG5ldyBNYXAoKTtcbiAgICBwcml2YXRlIHN2ZzogU1ZHLkRvYztcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGlkOiBzdHJpbmcsIHByaXZhdGUgc2NlbmU6IFNjZW5lKSB7XG4gICAgICAgIHRoaXMuc3ZnID0gU1ZHKGlkKTtcbiAgICAgICAgdGhpcy5zY2VuZS5nZXROb2Rlc1N0cmVhbSgpLnN1YnNjcmliZSgobm9kZXM6IE5vZGVbXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGVzaXJlZElEcyA9IG5vZGVzLm1hcCgobikgPT4gbi5nZXRJRCgpKTtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSURzID0gQXJyYXkuZnJvbSh0aGlzLm5vZGVEaXNwbGF5cy5rZXlzKCkpO1xuXG4gICAgICAgICAgICBjb25zdCB0b0FkZCA9IG5ldyBTZXQoZGlmZmVyZW5jZShkZXNpcmVkSURzLCBleGlzdGluZ0lEcykpO1xuICAgICAgICAgICAgY29uc3QgdG9SZW1vdmUgPSBuZXcgU2V0KGRpZmZlcmVuY2UoZXhpc3RpbmdJRHMsIGRlc2lyZWRJRHMpKTtcblxuICAgICAgICAgICAgdG9SZW1vdmUuZm9yRWFjaCgodHIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXNwbGF5ID0gdGhpcy5ub2RlRGlzcGxheXMuZ2V0KHRyKTtcbiAgICAgICAgICAgICAgICBkaXNwbGF5LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZURpc3BsYXlzLmRlbGV0ZSh0cik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5vZGVzLmZvckVhY2goKG4pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuaWQgPSBuLmdldElEKCk7XG4gICAgICAgICAgICAgICAgaWYodG9BZGQuaGFzKG5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlzcGxheSA9IG5ldyBOb2RlRGlzcGxheSh0aGlzLnN2Zywgbik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm9kZURpc3BsYXlzLnNldChuaWQsIGRpc3BsYXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zY2VuZS5nZXRFZGdlc1N0cmVhbSgpLnN1YnNjcmliZSgoZWRnZXM6IEVkZ2VbXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGVzaXJlZElEcyA9IGVkZ2VzLm1hcCgoZSkgPT4gZS5nZXRJRCgpKTtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSURzID0gQXJyYXkuZnJvbSh0aGlzLmVkZ2VEaXNwbGF5cy5rZXlzKCkpO1xuXG4gICAgICAgICAgICBjb25zdCB0b0FkZCA9IG5ldyBTZXQoZGlmZmVyZW5jZShkZXNpcmVkSURzLCBleGlzdGluZ0lEcykpO1xuICAgICAgICAgICAgY29uc3QgdG9SZW1vdmUgPSBuZXcgU2V0KGRpZmZlcmVuY2UoZXhpc3RpbmdJRHMsIGRlc2lyZWRJRHMpKTtcblxuICAgICAgICAgICAgdG9SZW1vdmUuZm9yRWFjaCgodHIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXNwbGF5ID0gdGhpcy5lZGdlRGlzcGxheXMuZ2V0KHRyKTtcbiAgICAgICAgICAgICAgICBkaXNwbGF5LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZWRnZURpc3BsYXlzLmRlbGV0ZSh0cik7XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBlZGdlcy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWlkID0gIGUuZ2V0SUQoKTtcbiAgICAgICAgICAgICAgICBpZih0b0FkZC5oYXMoZWlkKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXNwbGF5ID0gbmV3IEVkZ2VEaXNwbGF5KHRoaXMuc3ZnLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGdlRGlzcGxheXMuc2V0KGVpZCwgZGlzcGxheSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBOb2RlRGlzcGxheSB7XG4gICAgcHJpdmF0ZSBwcm9wRGlzcGxheXM6IE1hcDxzdHJpbmcsIFByb3BEaXNwbGF5PiA9IG5ldyBNYXAoKTtcbiAgICBwcml2YXRlIHJlY3Q6IFNWRy5SZWN0O1xuICAgIHByaXZhdGUgbGFiZWw6IFNWRy5UZXh0O1xuICAgIHByaXZhdGUgbGF5b3V0U3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdmc6IFNWRy5Eb2MsIHByaXZhdGUgbm9kZTogTm9kZSkge1xuICAgICAgICB0aGlzLnJlY3QgPSB0aGlzLnN2Zy5yZWN0KDAsIDApLmF0dHIoe1xuICAgICAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6IDAsXG4gICAgICAgICAgICAnc3Ryb2tlJzogJyMwMDAnLFxuICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDFcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGFiZWwgPSB0aGlzLnN2Zy50ZXh0KHRoaXMubm9kZS5nZXRMYWJlbCgpKTtcblxuICAgICAgICB0aGlzLmxheW91dFN1YnNjcmlwdGlvbiA9IHRoaXMubm9kZS5nZXRMYXlvdXRTdHJlYW0oKS5zdWJzY3JpYmUoKGxheW91dDogTm9kZUxheW91dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZWN0LmF0dHIoe1xuICAgICAgICAgICAgICAgIHdpZHRoOiBsYXlvdXQud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBsYXlvdXQuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHg6IGxheW91dC54IC0gbGF5b3V0LndpZHRoLzIsXG4gICAgICAgICAgICAgICAgeTogbGF5b3V0LnkgLSBsYXlvdXQuaGVpZ2h0LzJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5sYWJlbC5tb3ZlKGxheW91dC54LWxheW91dC53aWR0aC8yICsgNSwgbGF5b3V0LnkgLSBsYXlvdXQuaGVpZ2h0LzIgKyA1KTtcblxuICAgICAgICAgICAgY29uc3QgaW5wdXRzID0gT2JqZWN0LmtleXMobGF5b3V0LmlucHV0cykubWFwKChrKSA9PiBbaywgbGF5b3V0LmlucHV0c1trXSwgSU8uSW5wdXRdKTtcbiAgICAgICAgICAgIGNvbnN0IG91dHB1dHMgPSBPYmplY3Qua2V5cyhsYXlvdXQub3V0cHV0cykubWFwKChrKSA9PiBbaywgbGF5b3V0Lm91dHB1dHNba10sIElPLk91dHB1dF0pO1xuXG4gICAgICAgICAgICBjb25zdCBpb3MgPSAgIFsuLi5pbnB1dHMsIC4uLm91dHB1dHNdO1xuICAgICAgICAgICAgY29uc3QgZGVzaXJlZEtleXMgPSAgW107XG4gICAgICAgICAgICBpb3MuZm9yRWFjaCgoW2tleSwgbGF5b3V0LCBpb106IFtzdHJpbmcsIE5vZGVQcm9wTGF5b3V0LCBJT10pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wSUQgPSBnZXRQcm9wSUQodGhpcy5ub2RlLmdldElEKCksIGtleSwgaW8pO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHByb3BJRCwga2V5LCBuYW1lLCBpbyk7XG4gICAgICAgICAgICAgICAgZGVzaXJlZEtleXMucHVzaChwcm9wSUQpO1xuICAgICAgICAgICAgICAgIGlmKCF0aGlzLnByb3BEaXNwbGF5cy5oYXMocHJvcElEKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY3JlYXRlJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcERpc3BsYXlzLnNldChwcm9wSUQsIG5ldyBQcm9wRGlzcGxheSh0aGlzLnN2ZywgdGhpcy5ub2RlLCBrZXksIGlvKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BEaXNwbGF5ID0gdGhpcy5wcm9wRGlzcGxheXMuZ2V0KHByb3BJRCk7XG4gICAgICAgICAgICAgICAgcHJvcERpc3BsYXkuc2V0TGF5b3V0KGxheW91dCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgdG9SZW1vdmVLZXlzID0gW107XG4gICAgICAgICAgICB0aGlzLnByb3BEaXNwbGF5cy5mb3JFYWNoKChkaXNwbGF5OiBQcm9wRGlzcGxheSwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBpZihkZXNpcmVkS2V5cy5pbmRleE9mKGtleSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXkucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRvUmVtb3ZlS2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRvUmVtb3ZlS2V5cy5mb3JFYWNoKChrKSAgPT4gdGhpcy5wcm9wRGlzcGxheXMuZGVsZXRlKGspKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZWN0LnJlbW92ZSgpO1xuICAgICAgICB0aGlzLmxhYmVsLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLnByb3BEaXNwbGF5cy5mb3JFYWNoKChwcm9wRGlzcGxheTogUHJvcERpc3BsYXkpID0+IHtcbiAgICAgICAgICAgIHByb3BEaXNwbGF5LnJlbW92ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5sYXlvdXRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQcm9wRGlzcGxheSB7XG4gICAgcHJpdmF0ZSByZWN0OiBTVkcuUmVjdDtcbiAgICBwcml2YXRlIGxhYmVsOiBTVkcuVGV4dDtcbiAgICBwcml2YXRlIG91dHB1dFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3ZnOiBTVkcuRG9jLCBwcml2YXRlIG5vZGU6IE5vZGUsIHByaXZhdGUgcHJvcE5hbWU6IHN0cmluZywgcHJpdmF0ZSBpbzogSU8pIHtcbiAgICAgICAgdGhpcy5yZWN0ID0gdGhpcy5zdmcucmVjdCgwLCAwKS5hdHRyKHtcbiAgICAgICAgICAgICdmaWxsLW9wYWNpdHknOiAwLFxuICAgICAgICAgICAgJ3N0cm9rZSc6IGlvID09PSBJTy5JbnB1dCA/ICcjMDAwJyA6ICcjRjAwJyxcbiAgICAgICAgICAgICdzdHJva2Utd2lkdGgnOiAxXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxhYmVsID0gdGhpcy5zdmcudGV4dChgJyR7dGhpcy5wcm9wTmFtZX0nYCk7XG4gICAgICAgIGlmKHRoaXMuaW8gPT09IElPLk91dHB1dCkge1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRTdWJzY3JpcHRpb24gPSB0aGlzLm5vZGUucGx1Y2tPdXRwdXQodGhpcy5wcm9wTmFtZSkuc3Vic2NyaWJlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubGFiZWwudGV4dChgJyR7dGhpcy5wcm9wTmFtZX0nOiAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1gKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHNldExheW91dChsYXlvdXQ6IE5vZGVQcm9wTGF5b3V0KTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVjdC5hdHRyKHtcbiAgICAgICAgICAgIHdpZHRoOiBsYXlvdXQud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGxheW91dC5oZWlnaHQsXG4gICAgICAgICAgICB4OiBsYXlvdXQueCAtIGxheW91dC53aWR0aC8yLFxuICAgICAgICAgICAgeTogbGF5b3V0LnkgLSBsYXlvdXQuaGVpZ2h0LzJcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGFiZWwubW92ZShsYXlvdXQueC1sYXlvdXQud2lkdGgvMis1LCBsYXlvdXQueSAtIGxheW91dC5oZWlnaHQvMiArIDUpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmUoKTogdm9pZCB7XG4gICAgICAgIGlmKHRoaXMub3V0cHV0U3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLm91dHB1dFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVjdC5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5sYWJlbC5yZW1vdmUoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFZGdlRGlzcGxheSB7XG4gICAgcHJpdmF0ZSBsaW5lOiBTVkcuUGF0aDtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN2ZzogU1ZHLkRvYywgcHJpdmF0ZSBlZGdlOiBFZGdlKSB7XG4gICAgICAgIHRoaXMubGluZSA9IHRoaXMuc3ZnLnBhdGgoJycpLmF0dHIoe1xuICAgICAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6IDAsXG4gICAgICAgICAgICAnc3Ryb2tlJzogJyMwMDAnLFxuICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDFcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWRnZS5nZXRMYXlvdXRTdHJlYW0oKS5zdWJzY3JpYmUoKGxheW91dDogRWRnZUxheW91dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBwb2ludHMgfSA9IGxheW91dDtcbiAgICAgICAgICAgIGlmKHBvaW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9pbnRTdHJpbmdzID0gcG9pbnRzLm1hcChwbnQgPT4gYCR7cG50Lnh9ICR7cG50Lnl9YCk7XG4gICAgICAgICAgICAgICAgbGV0IHBhdGhTdHJpbmcgPSBgTSAke3BvaW50U3RyaW5nc1swXX1gO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDE7IGkgPCBwb2ludFN0cmluZ3MubGVuZ3RoIC0gMTsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGhTdHJpbmcgKz0gYCBRICR7cG9pbnRTdHJpbmdzW2ldfSAke3BvaW50U3RyaW5nc1tpICsgMV19YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgc25kTHN0UG50ID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAyXTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0UG50ID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgcGF0aFN0cmluZyArPSBFZGdlRGlzcGxheS5nZXRBcnJvd1BhdGgoc25kTHN0UG50LCBsYXN0UG50KTtcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmUucGxvdChwYXRoU3RyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHB1YmxpYyByZW1vdmUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMubGluZS5yZW1vdmUoKTtcbiAgICB9XG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0QXJyb3dQYXRoKHNuZExzdFBudDoge3g6IG51bWJlciwgeTogbnVtYmVyfSwgbGFzdFBudDoge3g6IG51bWJlciwgeTogbnVtYmVyfSk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHRoZXRhID0gTWF0aC5hdGFuMihzbmRMc3RQbnQueSAtIGxhc3RQbnQueSwgc25kTHN0UG50LnggLSBsYXN0UG50LngpO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSAyMCAqIE1hdGguUEkgLyAxODA7XG4gICAgICAgIGNvbnN0IHMgPSAxMDtcbiAgICAgICAgY29uc3QgcGF0aFN0cmluZyA9IGAgbSAke01hdGguY29zKHRoZXRhICsgb2Zmc2V0KSAqIHN9ICR7TWF0aC5zaW4odGhldGEgKyBvZmZzZXQpICogc31gICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGAgTCAke2xhc3RQbnQueH0gJHtsYXN0UG50Lnl9YCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBgIGwgJHtNYXRoLmNvcyh0aGV0YSAtIG9mZnNldCkgKiBzfSAke01hdGguc2luKHRoZXRhIC0gb2Zmc2V0KSAqIHN9YDtcbiAgICAgICAgcmV0dXJuIHBhdGhTdHJpbmc7XG4gICAgfVxufSIsIi8qIVxuKiBzdmcuanMgLSBBIGxpZ2h0d2VpZ2h0IGxpYnJhcnkgZm9yIG1hbmlwdWxhdGluZyBhbmQgYW5pbWF0aW5nIFNWRy5cbiogQHZlcnNpb24gMi43LjFcbiogaHR0cHM6Ly9zdmdkb3Rqcy5naXRodWIuaW8vXG4qXG4qIEBjb3B5cmlnaHQgV291dCBGaWVyZW5zIDx3b3V0QG1pY2std291dC5jb20+XG4qIEBsaWNlbnNlIE1JVFxuKlxuKiBCVUlMVDogRnJpIE5vdiAzMCAyMDE4IDEwOjAxOjU1IEdNVCswMTAwIChHTVQrMDE6MDApXG4qLztcbihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XHJcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICBkZWZpbmUoZnVuY3Rpb24oKXtcclxuICAgICAgcmV0dXJuIGZhY3Rvcnkocm9vdCwgcm9vdC5kb2N1bWVudClcclxuICAgIH0pXHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gcm9vdC5kb2N1bWVudCA/IGZhY3Rvcnkocm9vdCwgcm9vdC5kb2N1bWVudCkgOiBmdW5jdGlvbih3KXsgcmV0dXJuIGZhY3Rvcnkodywgdy5kb2N1bWVudCkgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICByb290LlNWRyA9IGZhY3Rvcnkocm9vdCwgcm9vdC5kb2N1bWVudClcclxuICB9XHJcbn0odHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQpIHtcclxuXHJcbi8vIEZpbmQgZ2xvYmFsIHJlZmVyZW5jZSAtIHVzZXMgJ3RoaXMnIGJ5IGRlZmF1bHQgd2hlbiBhdmFpbGFibGUsXHJcbi8vIGZhbGxzIGJhY2sgdG8gJ3dpbmRvdycgb3RoZXJ3aXNlIChmb3IgYnVuZGxlcnMgbGlrZSBXZWJwYWNrKVxyXG52YXIgZ2xvYmFsUmVmID0gKHR5cGVvZiB0aGlzICE9PSBcInVuZGVmaW5lZFwiKSA/IHRoaXMgOiB3aW5kb3c7XHJcblxyXG4vLyBUaGUgbWFpbiB3cmFwcGluZyBlbGVtZW50XHJcbnZhciBTVkcgPSBnbG9iYWxSZWYuU1ZHID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gIGlmIChTVkcuc3VwcG9ydGVkKSB7XHJcbiAgICBlbGVtZW50ID0gbmV3IFNWRy5Eb2MoZWxlbWVudClcclxuXHJcbiAgICBpZighU1ZHLnBhcnNlci5kcmF3KVxyXG4gICAgICBTVkcucHJlcGFyZSgpXHJcblxyXG4gICAgcmV0dXJuIGVsZW1lbnRcclxuICB9XHJcbn1cclxuXHJcbi8vIERlZmF1bHQgbmFtZXNwYWNlc1xyXG5TVkcubnMgICAgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnXHJcblNWRy54bWxucyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLydcclxuU1ZHLnhsaW5rID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnXHJcblNWRy5zdmdqcyA9ICdodHRwOi8vc3ZnanMuY29tL3N2Z2pzJ1xyXG5cclxuLy8gU3ZnIHN1cHBvcnQgdGVzdFxyXG5TVkcuc3VwcG9ydGVkID0gKGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAhISBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMgJiZcclxuICAgICAgICAgISEgZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWRy5ucywnc3ZnJykuY3JlYXRlU1ZHUmVjdFxyXG59KSgpXHJcblxyXG4vLyBEb24ndCBib3RoZXIgdG8gY29udGludWUgaWYgU1ZHIGlzIG5vdCBzdXBwb3J0ZWRcclxuaWYgKCFTVkcuc3VwcG9ydGVkKSByZXR1cm4gZmFsc2VcclxuXHJcbi8vIEVsZW1lbnQgaWQgc2VxdWVuY2VcclxuU1ZHLmRpZCAgPSAxMDAwXHJcblxyXG4vLyBHZXQgbmV4dCBuYW1lZCBlbGVtZW50IGlkXHJcblNWRy5laWQgPSBmdW5jdGlvbihuYW1lKSB7XHJcbiAgcmV0dXJuICdTdmdqcycgKyBjYXBpdGFsaXplKG5hbWUpICsgKFNWRy5kaWQrKylcclxufVxyXG5cclxuLy8gTWV0aG9kIGZvciBlbGVtZW50IGNyZWF0aW9uXHJcblNWRy5jcmVhdGUgPSBmdW5jdGlvbihuYW1lKSB7XHJcbiAgLy8gY3JlYXRlIGVsZW1lbnRcclxuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh0aGlzLm5zLCBuYW1lKVxyXG5cclxuICAvLyBhcHBseSB1bmlxdWUgaWRcclxuICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLmVpZChuYW1lKSlcclxuXHJcbiAgcmV0dXJuIGVsZW1lbnRcclxufVxyXG5cclxuLy8gTWV0aG9kIGZvciBleHRlbmRpbmcgb2JqZWN0c1xyXG5TVkcuZXh0ZW5kID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIG1vZHVsZXMsIG1ldGhvZHMsIGtleSwgaVxyXG5cclxuICAvLyBHZXQgbGlzdCBvZiBtb2R1bGVzXHJcbiAgbW9kdWxlcyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxyXG5cclxuICAvLyBHZXQgb2JqZWN0IHdpdGggZXh0ZW5zaW9uc1xyXG4gIG1ldGhvZHMgPSBtb2R1bGVzLnBvcCgpXHJcblxyXG4gIGZvciAoaSA9IG1vZHVsZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXHJcbiAgICBpZiAobW9kdWxlc1tpXSlcclxuICAgICAgZm9yIChrZXkgaW4gbWV0aG9kcylcclxuICAgICAgICBtb2R1bGVzW2ldLnByb3RvdHlwZVtrZXldID0gbWV0aG9kc1trZXldXHJcblxyXG4gIC8vIE1ha2Ugc3VyZSBTVkcuU2V0IGluaGVyaXRzIGFueSBuZXdseSBhZGRlZCBtZXRob2RzXHJcbiAgaWYgKFNWRy5TZXQgJiYgU1ZHLlNldC5pbmhlcml0KVxyXG4gICAgU1ZHLlNldC5pbmhlcml0KClcclxufVxyXG5cclxuLy8gSW52ZW50IG5ldyBlbGVtZW50XHJcblNWRy5pbnZlbnQgPSBmdW5jdGlvbihjb25maWcpIHtcclxuICAvLyBDcmVhdGUgZWxlbWVudCBpbml0aWFsaXplclxyXG4gIHZhciBpbml0aWFsaXplciA9IHR5cGVvZiBjb25maWcuY3JlYXRlID09ICdmdW5jdGlvbicgP1xyXG4gICAgY29uZmlnLmNyZWF0ZSA6XHJcbiAgICBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIFNWRy5jcmVhdGUoY29uZmlnLmNyZWF0ZSkpXHJcbiAgICB9XHJcblxyXG4gIC8vIEluaGVyaXQgcHJvdG90eXBlXHJcbiAgaWYgKGNvbmZpZy5pbmhlcml0KVxyXG4gICAgaW5pdGlhbGl6ZXIucHJvdG90eXBlID0gbmV3IGNvbmZpZy5pbmhlcml0XHJcblxyXG4gIC8vIEV4dGVuZCB3aXRoIG1ldGhvZHNcclxuICBpZiAoY29uZmlnLmV4dGVuZClcclxuICAgIFNWRy5leHRlbmQoaW5pdGlhbGl6ZXIsIGNvbmZpZy5leHRlbmQpXHJcblxyXG4gIC8vIEF0dGFjaCBjb25zdHJ1Y3QgbWV0aG9kIHRvIHBhcmVudFxyXG4gIGlmIChjb25maWcuY29uc3RydWN0KVxyXG4gICAgU1ZHLmV4dGVuZChjb25maWcucGFyZW50IHx8IFNWRy5Db250YWluZXIsIGNvbmZpZy5jb25zdHJ1Y3QpXHJcblxyXG4gIHJldHVybiBpbml0aWFsaXplclxyXG59XHJcblxyXG4vLyBBZG9wdCBleGlzdGluZyBzdmcgZWxlbWVudHNcclxuU1ZHLmFkb3B0ID0gZnVuY3Rpb24obm9kZSkge1xyXG4gIC8vIGNoZWNrIGZvciBwcmVzZW5jZSBvZiBub2RlXHJcbiAgaWYgKCFub2RlKSByZXR1cm4gbnVsbFxyXG5cclxuICAvLyBtYWtlIHN1cmUgYSBub2RlIGlzbid0IGFscmVhZHkgYWRvcHRlZFxyXG4gIGlmIChub2RlLmluc3RhbmNlKSByZXR1cm4gbm9kZS5pbnN0YW5jZVxyXG5cclxuICAvLyBpbml0aWFsaXplIHZhcmlhYmxlc1xyXG4gIHZhciBlbGVtZW50XHJcblxyXG4gIC8vIGFkb3B0IHdpdGggZWxlbWVudC1zcGVjaWZpYyBzZXR0aW5nc1xyXG4gIGlmIChub2RlLm5vZGVOYW1lID09ICdzdmcnKVxyXG4gICAgZWxlbWVudCA9IG5vZGUucGFyZW50Tm9kZSBpbnN0YW5jZW9mIHdpbmRvdy5TVkdFbGVtZW50ID8gbmV3IFNWRy5OZXN0ZWQgOiBuZXcgU1ZHLkRvY1xyXG4gIGVsc2UgaWYgKG5vZGUubm9kZU5hbWUgPT0gJ2xpbmVhckdyYWRpZW50JylcclxuICAgIGVsZW1lbnQgPSBuZXcgU1ZHLkdyYWRpZW50KCdsaW5lYXInKVxyXG4gIGVsc2UgaWYgKG5vZGUubm9kZU5hbWUgPT0gJ3JhZGlhbEdyYWRpZW50JylcclxuICAgIGVsZW1lbnQgPSBuZXcgU1ZHLkdyYWRpZW50KCdyYWRpYWwnKVxyXG4gIGVsc2UgaWYgKFNWR1tjYXBpdGFsaXplKG5vZGUubm9kZU5hbWUpXSlcclxuICAgIGVsZW1lbnQgPSBuZXcgU1ZHW2NhcGl0YWxpemUobm9kZS5ub2RlTmFtZSldXHJcbiAgZWxzZVxyXG4gICAgZWxlbWVudCA9IG5ldyBTVkcuRWxlbWVudChub2RlKVxyXG5cclxuICAvLyBlbnN1cmUgcmVmZXJlbmNlc1xyXG4gIGVsZW1lbnQudHlwZSAgPSBub2RlLm5vZGVOYW1lXHJcbiAgZWxlbWVudC5ub2RlICA9IG5vZGVcclxuICBub2RlLmluc3RhbmNlID0gZWxlbWVudFxyXG5cclxuICAvLyBTVkcuQ2xhc3Mgc3BlY2lmaWMgcHJlcGFyYXRpb25zXHJcbiAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBTVkcuRG9jKVxyXG4gICAgZWxlbWVudC5uYW1lc3BhY2UoKS5kZWZzKClcclxuXHJcbiAgLy8gcHVsbCBzdmdqcyBkYXRhIGZyb20gdGhlIGRvbSAoZ2V0QXR0cmlidXRlTlMgZG9lc24ndCB3b3JrIGluIGh0bWw1KVxyXG4gIGVsZW1lbnQuc2V0RGF0YShKU09OLnBhcnNlKG5vZGUuZ2V0QXR0cmlidXRlKCdzdmdqczpkYXRhJykpIHx8IHt9KVxyXG5cclxuICByZXR1cm4gZWxlbWVudFxyXG59XHJcblxyXG4vLyBJbml0aWFsaXplIHBhcnNpbmcgZWxlbWVudFxyXG5TVkcucHJlcGFyZSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIFNlbGVjdCBkb2N1bWVudCBib2R5IGFuZCBjcmVhdGUgaW52aXNpYmxlIHN2ZyBlbGVtZW50XHJcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdXHJcbiAgICAsIGRyYXcgPSAoYm9keSA/IG5ldyBTVkcuRG9jKGJvZHkpIDogU1ZHLmFkb3B0KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkubmVzdGVkKCkpLnNpemUoMiwgMClcclxuXHJcbiAgLy8gQ3JlYXRlIHBhcnNlciBvYmplY3RcclxuICBTVkcucGFyc2VyID0ge1xyXG4gICAgYm9keTogYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcclxuICAsIGRyYXc6IGRyYXcuc3R5bGUoJ29wYWNpdHk6MDtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMDAlO3RvcDotMTAwJTtvdmVyZmxvdzpoaWRkZW4nKS5hdHRyKCdmb2N1c2FibGUnLCAnZmFsc2UnKS5ub2RlXHJcbiAgLCBwb2x5OiBkcmF3LnBvbHlsaW5lKCkubm9kZVxyXG4gICwgcGF0aDogZHJhdy5wYXRoKCkubm9kZVxyXG4gICwgbmF0aXZlOiBTVkcuY3JlYXRlKCdzdmcnKVxyXG4gIH1cclxufVxyXG5cclxuU1ZHLnBhcnNlciA9IHtcclxuICBuYXRpdmU6IFNWRy5jcmVhdGUoJ3N2ZycpXHJcbn1cclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcclxuICBpZighU1ZHLnBhcnNlci5kcmF3KVxyXG4gICAgU1ZHLnByZXBhcmUoKVxyXG59LCBmYWxzZSlcclxuXG4vLyBTdG9yYWdlIGZvciByZWd1bGFyIGV4cHJlc3Npb25zXHJcblNWRy5yZWdleCA9IHtcclxuICAvLyBQYXJzZSB1bml0IHZhbHVlXHJcbiAgbnVtYmVyQW5kVW5pdDogICAgL14oWystXT8oXFxkKyhcXC5cXGQqKT98XFwuXFxkKykoZVsrLV0/XFxkKyk/KShbYS16JV0qKSQvaVxyXG5cclxuICAvLyBQYXJzZSBoZXggdmFsdWVcclxuLCBoZXg6ICAgICAgICAgICAgICAvXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pXHJcblxyXG4gIC8vIFBhcnNlIHJnYiB2YWx1ZVxyXG4sIHJnYjogICAgICAgICAgICAgIC9yZ2JcXCgoXFxkKyksKFxcZCspLChcXGQrKVxcKS9cclxuXHJcbiAgLy8gUGFyc2UgcmVmZXJlbmNlIGlkXHJcbiwgcmVmZXJlbmNlOiAgICAgICAgLyMoW2EtejAtOVxcLV9dKykvaVxyXG5cclxuICAvLyBzcGxpdHMgYSB0cmFuc2Zvcm1hdGlvbiBjaGFpblxyXG4sIHRyYW5zZm9ybXM6ICAgICAgIC9cXClcXHMqLD9cXHMqL1xyXG5cclxuICAvLyBXaGl0ZXNwYWNlXHJcbiwgd2hpdGVzcGFjZTogICAgICAgL1xccy9nXHJcblxyXG4gIC8vIFRlc3QgaGV4IHZhbHVlXHJcbiwgaXNIZXg6ICAgICAgICAgICAgL14jW2EtZjAtOV17Myw2fSQvaVxyXG5cclxuICAvLyBUZXN0IHJnYiB2YWx1ZVxyXG4sIGlzUmdiOiAgICAgICAgICAgIC9ecmdiXFwoL1xyXG5cclxuICAvLyBUZXN0IGNzcyBkZWNsYXJhdGlvblxyXG4sIGlzQ3NzOiAgICAgICAgICAgIC9bXjpdKzpbXjtdKzs/L1xyXG5cclxuICAvLyBUZXN0IGZvciBibGFuayBzdHJpbmdcclxuLCBpc0JsYW5rOiAgICAgICAgICAvXihcXHMrKT8kL1xyXG5cclxuICAvLyBUZXN0IGZvciBudW1lcmljIHN0cmluZ1xyXG4sIGlzTnVtYmVyOiAgICAgICAgIC9eWystXT8oXFxkKyhcXC5cXGQqKT98XFwuXFxkKykoZVsrLV0/XFxkKyk/JC9pXHJcblxyXG4gIC8vIFRlc3QgZm9yIHBlcmNlbnQgdmFsdWVcclxuLCBpc1BlcmNlbnQ6ICAgICAgICAvXi0/W1xcZFxcLl0rJSQvXHJcblxyXG4gIC8vIFRlc3QgZm9yIGltYWdlIHVybFxyXG4sIGlzSW1hZ2U6ICAgICAgICAgIC9cXC4oanBnfGpwZWd8cG5nfGdpZnxzdmcpKFxcP1tePV0rLiopPy9pXHJcblxyXG4gIC8vIHNwbGl0IGF0IHdoaXRlc3BhY2UgYW5kIGNvbW1hXHJcbiwgZGVsaW1pdGVyOiAgICAgICAgL1tcXHMsXSsvXHJcblxyXG4gIC8vIFRoZSBmb2xsb3dpbmcgcmVnZXggYXJlIHVzZWQgdG8gcGFyc2UgdGhlIGQgYXR0cmlidXRlIG9mIGEgcGF0aFxyXG5cclxuICAvLyBNYXRjaGVzIGFsbCBoeXBoZW5zIHdoaWNoIGFyZSBub3QgYWZ0ZXIgYW4gZXhwb25lbnRcclxuLCBoeXBoZW46ICAgICAgICAgICAvKFteZV0pXFwtL2dpXHJcblxyXG4gIC8vIFJlcGxhY2VzIGFuZCB0ZXN0cyBmb3IgYWxsIHBhdGggbGV0dGVyc1xyXG4sIHBhdGhMZXR0ZXJzOiAgICAgIC9bTUxIVkNTUVRBWl0vZ2lcclxuXHJcbiAgLy8geWVzIHdlIG5lZWQgdGhpcyBvbmUsIHRvb1xyXG4sIGlzUGF0aExldHRlcjogICAgIC9bTUxIVkNTUVRBWl0vaVxyXG5cclxuICAvLyBtYXRjaGVzIDAuMTU0LjIzLjQ1XHJcbiwgbnVtYmVyc1dpdGhEb3RzOiAgLygoXFxkP1xcLlxcZCsoPzplWystXT9cXGQrKT8pKCg/OlxcLlxcZCsoPzplWystXT9cXGQrKT8pKykpKy9naVxyXG5cclxuICAvLyBtYXRjaGVzIC5cclxuLCBkb3RzOiAgICAgICAgICAgICAvXFwuL2dcclxufVxyXG5cblNWRy51dGlscyA9IHtcclxuICAvLyBNYXAgZnVuY3Rpb25cclxuICBtYXA6IGZ1bmN0aW9uKGFycmF5LCBibG9jaykge1xyXG4gICAgdmFyIGlcclxuICAgICAgLCBpbCA9IGFycmF5Lmxlbmd0aFxyXG4gICAgICAsIHJlc3VsdCA9IFtdXHJcblxyXG4gICAgZm9yIChpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgIHJlc3VsdC5wdXNoKGJsb2NrKGFycmF5W2ldKSlcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0XHJcbiAgfVxyXG5cclxuICAvLyBGaWx0ZXIgZnVuY3Rpb25cclxuLCBmaWx0ZXI6IGZ1bmN0aW9uKGFycmF5LCBibG9jaykge1xyXG4gICAgdmFyIGlcclxuICAgICAgLCBpbCA9IGFycmF5Lmxlbmd0aFxyXG4gICAgICAsIHJlc3VsdCA9IFtdXHJcblxyXG4gICAgZm9yIChpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgIGlmIChibG9jayhhcnJheVtpXSkpXHJcbiAgICAgICAgcmVzdWx0LnB1c2goYXJyYXlbaV0pXHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdFxyXG4gIH1cclxuXHJcbiAgLy8gRGVncmVlcyB0byByYWRpYW5zXHJcbiwgcmFkaWFuczogZnVuY3Rpb24oZCkge1xyXG4gICAgcmV0dXJuIGQgJSAzNjAgKiBNYXRoLlBJIC8gMTgwXHJcbiAgfVxyXG5cclxuICAvLyBSYWRpYW5zIHRvIGRlZ3JlZXNcclxuLCBkZWdyZWVzOiBmdW5jdGlvbihyKSB7XHJcbiAgICByZXR1cm4gciAqIDE4MCAvIE1hdGguUEkgJSAzNjBcclxuICB9XHJcblxyXG4sIGZpbHRlclNWR0VsZW1lbnRzOiBmdW5jdGlvbihub2Rlcykge1xyXG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyKCBub2RlcywgZnVuY3Rpb24oZWwpIHsgcmV0dXJuIGVsIGluc3RhbmNlb2Ygd2luZG93LlNWR0VsZW1lbnQgfSlcclxuICB9XHJcblxyXG59XG5cclxuU1ZHLmRlZmF1bHRzID0ge1xyXG4gIC8vIERlZmF1bHQgYXR0cmlidXRlIHZhbHVlc1xyXG4gIGF0dHJzOiB7XHJcbiAgICAvLyBmaWxsIGFuZCBzdHJva2VcclxuICAgICdmaWxsLW9wYWNpdHknOiAgICAgMVxyXG4gICwgJ3N0cm9rZS1vcGFjaXR5JzogICAxXHJcbiAgLCAnc3Ryb2tlLXdpZHRoJzogICAgIDBcclxuICAsICdzdHJva2UtbGluZWpvaW4nOiAgJ21pdGVyJ1xyXG4gICwgJ3N0cm9rZS1saW5lY2FwJzogICAnYnV0dCdcclxuICAsIGZpbGw6ICAgICAgICAgICAgICAgJyMwMDAwMDAnXHJcbiAgLCBzdHJva2U6ICAgICAgICAgICAgICcjMDAwMDAwJ1xyXG4gICwgb3BhY2l0eTogICAgICAgICAgICAxXHJcbiAgICAvLyBwb3NpdGlvblxyXG4gICwgeDogICAgICAgICAgICAgICAgICAwXHJcbiAgLCB5OiAgICAgICAgICAgICAgICAgIDBcclxuICAsIGN4OiAgICAgICAgICAgICAgICAgMFxyXG4gICwgY3k6ICAgICAgICAgICAgICAgICAwXHJcbiAgICAvLyBzaXplXHJcbiAgLCB3aWR0aDogICAgICAgICAgICAgIDBcclxuICAsIGhlaWdodDogICAgICAgICAgICAgMFxyXG4gICAgLy8gcmFkaXVzXHJcbiAgLCByOiAgICAgICAgICAgICAgICAgIDBcclxuICAsIHJ4OiAgICAgICAgICAgICAgICAgMFxyXG4gICwgcnk6ICAgICAgICAgICAgICAgICAwXHJcbiAgICAvLyBncmFkaWVudFxyXG4gICwgb2Zmc2V0OiAgICAgICAgICAgICAwXHJcbiAgLCAnc3RvcC1vcGFjaXR5JzogICAgIDFcclxuICAsICdzdG9wLWNvbG9yJzogICAgICAgJyMwMDAwMDAnXHJcbiAgICAvLyB0ZXh0XHJcbiAgLCAnZm9udC1zaXplJzogICAgICAgIDE2XHJcbiAgLCAnZm9udC1mYW1pbHknOiAgICAgICdIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmJ1xyXG4gICwgJ3RleHQtYW5jaG9yJzogICAgICAnc3RhcnQnXHJcbiAgfVxyXG5cclxufVxuLy8gTW9kdWxlIGZvciBjb2xvciBjb252ZXJ0aW9uc1xyXG5TVkcuQ29sb3IgPSBmdW5jdGlvbihjb2xvcikge1xyXG4gIHZhciBtYXRjaFxyXG5cclxuICAvLyBpbml0aWFsaXplIGRlZmF1bHRzXHJcbiAgdGhpcy5yID0gMFxyXG4gIHRoaXMuZyA9IDBcclxuICB0aGlzLmIgPSAwXHJcblxyXG4gIGlmKCFjb2xvcikgcmV0dXJuXHJcblxyXG4gIC8vIHBhcnNlIGNvbG9yXHJcbiAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycpIHtcclxuICAgIGlmIChTVkcucmVnZXguaXNSZ2IudGVzdChjb2xvcikpIHtcclxuICAgICAgLy8gZ2V0IHJnYiB2YWx1ZXNcclxuICAgICAgbWF0Y2ggPSBTVkcucmVnZXgucmdiLmV4ZWMoY29sb3IucmVwbGFjZShTVkcucmVnZXgud2hpdGVzcGFjZSwnJykpXHJcblxyXG4gICAgICAvLyBwYXJzZSBudW1lcmljIHZhbHVlc1xyXG4gICAgICB0aGlzLnIgPSBwYXJzZUludChtYXRjaFsxXSlcclxuICAgICAgdGhpcy5nID0gcGFyc2VJbnQobWF0Y2hbMl0pXHJcbiAgICAgIHRoaXMuYiA9IHBhcnNlSW50KG1hdGNoWzNdKVxyXG5cclxuICAgIH0gZWxzZSBpZiAoU1ZHLnJlZ2V4LmlzSGV4LnRlc3QoY29sb3IpKSB7XHJcbiAgICAgIC8vIGdldCBoZXggdmFsdWVzXHJcbiAgICAgIG1hdGNoID0gU1ZHLnJlZ2V4LmhleC5leGVjKGZ1bGxIZXgoY29sb3IpKVxyXG5cclxuICAgICAgLy8gcGFyc2UgbnVtZXJpYyB2YWx1ZXNcclxuICAgICAgdGhpcy5yID0gcGFyc2VJbnQobWF0Y2hbMV0sIDE2KVxyXG4gICAgICB0aGlzLmcgPSBwYXJzZUludChtYXRjaFsyXSwgMTYpXHJcbiAgICAgIHRoaXMuYiA9IHBhcnNlSW50KG1hdGNoWzNdLCAxNilcclxuXHJcbiAgICB9XHJcblxyXG4gIH0gZWxzZSBpZiAodHlwZW9mIGNvbG9yID09PSAnb2JqZWN0Jykge1xyXG4gICAgdGhpcy5yID0gY29sb3IuclxyXG4gICAgdGhpcy5nID0gY29sb3IuZ1xyXG4gICAgdGhpcy5iID0gY29sb3IuYlxyXG5cclxuICB9XHJcblxyXG59XHJcblxyXG5TVkcuZXh0ZW5kKFNWRy5Db2xvciwge1xyXG4gIC8vIERlZmF1bHQgdG8gaGV4IGNvbnZlcnNpb25cclxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy50b0hleCgpXHJcbiAgfVxyXG4gIC8vIEJ1aWxkIGhleCB2YWx1ZVxyXG4sIHRvSGV4OiBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiAnIydcclxuICAgICAgKyBjb21wVG9IZXgodGhpcy5yKVxyXG4gICAgICArIGNvbXBUb0hleCh0aGlzLmcpXHJcbiAgICAgICsgY29tcFRvSGV4KHRoaXMuYilcclxuICB9XHJcbiAgLy8gQnVpbGQgcmdiIHZhbHVlXHJcbiwgdG9SZ2I6IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuICdyZ2IoJyArIFt0aGlzLnIsIHRoaXMuZywgdGhpcy5iXS5qb2luKCkgKyAnKSdcclxuICB9XHJcbiAgLy8gQ2FsY3VsYXRlIHRydWUgYnJpZ2h0bmVzc1xyXG4sIGJyaWdodG5lc3M6IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuICh0aGlzLnIgLyAyNTUgKiAwLjMwKVxyXG4gICAgICAgICArICh0aGlzLmcgLyAyNTUgKiAwLjU5KVxyXG4gICAgICAgICArICh0aGlzLmIgLyAyNTUgKiAwLjExKVxyXG4gIH1cclxuICAvLyBNYWtlIGNvbG9yIG1vcnBoYWJsZVxyXG4sIG1vcnBoOiBmdW5jdGlvbihjb2xvcikge1xyXG4gICAgdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBTVkcuQ29sb3IoY29sb3IpXHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcbiAgLy8gR2V0IG1vcnBoZWQgY29sb3IgYXQgZ2l2ZW4gcG9zaXRpb25cclxuLCBhdDogZnVuY3Rpb24ocG9zKSB7XHJcbiAgICAvLyBtYWtlIHN1cmUgYSBkZXN0aW5hdGlvbiBpcyBkZWZpbmVkXHJcbiAgICBpZiAoIXRoaXMuZGVzdGluYXRpb24pIHJldHVybiB0aGlzXHJcblxyXG4gICAgLy8gbm9ybWFsaXNlIHBvc1xyXG4gICAgcG9zID0gcG9zIDwgMCA/IDAgOiBwb3MgPiAxID8gMSA6IHBvc1xyXG5cclxuICAgIC8vIGdlbmVyYXRlIG1vcnBoZWQgY29sb3JcclxuICAgIHJldHVybiBuZXcgU1ZHLkNvbG9yKHtcclxuICAgICAgcjogfn4odGhpcy5yICsgKHRoaXMuZGVzdGluYXRpb24uciAtIHRoaXMucikgKiBwb3MpXHJcbiAgICAsIGc6IH5+KHRoaXMuZyArICh0aGlzLmRlc3RpbmF0aW9uLmcgLSB0aGlzLmcpICogcG9zKVxyXG4gICAgLCBiOiB+fih0aGlzLmIgKyAodGhpcy5kZXN0aW5hdGlvbi5iIC0gdGhpcy5iKSAqIHBvcylcclxuICAgIH0pXHJcbiAgfVxyXG5cclxufSlcclxuXHJcbi8vIFRlc3RlcnNcclxuXHJcbi8vIFRlc3QgaWYgZ2l2ZW4gdmFsdWUgaXMgYSBjb2xvciBzdHJpbmdcclxuU1ZHLkNvbG9yLnRlc3QgPSBmdW5jdGlvbihjb2xvcikge1xyXG4gIGNvbG9yICs9ICcnXHJcbiAgcmV0dXJuIFNWRy5yZWdleC5pc0hleC50ZXN0KGNvbG9yKVxyXG4gICAgICB8fCBTVkcucmVnZXguaXNSZ2IudGVzdChjb2xvcilcclxufVxyXG5cclxuLy8gVGVzdCBpZiBnaXZlbiB2YWx1ZSBpcyBhIHJnYiBvYmplY3RcclxuU1ZHLkNvbG9yLmlzUmdiID0gZnVuY3Rpb24oY29sb3IpIHtcclxuICByZXR1cm4gY29sb3IgJiYgdHlwZW9mIGNvbG9yLnIgPT0gJ251bWJlcidcclxuICAgICAgICAgICAgICAgJiYgdHlwZW9mIGNvbG9yLmcgPT0gJ251bWJlcidcclxuICAgICAgICAgICAgICAgJiYgdHlwZW9mIGNvbG9yLmIgPT0gJ251bWJlcidcclxufVxyXG5cclxuLy8gVGVzdCBpZiBnaXZlbiB2YWx1ZSBpcyBhIGNvbG9yXHJcblNWRy5Db2xvci5pc0NvbG9yID0gZnVuY3Rpb24oY29sb3IpIHtcclxuICByZXR1cm4gU1ZHLkNvbG9yLmlzUmdiKGNvbG9yKSB8fCBTVkcuQ29sb3IudGVzdChjb2xvcilcclxufVxuLy8gTW9kdWxlIGZvciBhcnJheSBjb252ZXJzaW9uXHJcblNWRy5BcnJheSA9IGZ1bmN0aW9uKGFycmF5LCBmYWxsYmFjaykge1xyXG4gIGFycmF5ID0gKGFycmF5IHx8IFtdKS52YWx1ZU9mKClcclxuXHJcbiAgLy8gaWYgYXJyYXkgaXMgZW1wdHkgYW5kIGZhbGxiYWNrIGlzIHByb3ZpZGVkLCB1c2UgZmFsbGJhY2tcclxuICBpZiAoYXJyYXkubGVuZ3RoID09IDAgJiYgZmFsbGJhY2spXHJcbiAgICBhcnJheSA9IGZhbGxiYWNrLnZhbHVlT2YoKVxyXG5cclxuICAvLyBwYXJzZSBhcnJheVxyXG4gIHRoaXMudmFsdWUgPSB0aGlzLnBhcnNlKGFycmF5KVxyXG59XHJcblxyXG5TVkcuZXh0ZW5kKFNWRy5BcnJheSwge1xyXG4gIC8vIE1ha2UgYXJyYXkgbW9ycGhhYmxlXHJcbiAgbW9ycGg6IGZ1bmN0aW9uKGFycmF5KSB7XHJcbiAgICB0aGlzLmRlc3RpbmF0aW9uID0gdGhpcy5wYXJzZShhcnJheSlcclxuXHJcbiAgICAvLyBub3JtYWxpemUgbGVuZ3RoIG9mIGFycmF5c1xyXG4gICAgaWYgKHRoaXMudmFsdWUubGVuZ3RoICE9IHRoaXMuZGVzdGluYXRpb24ubGVuZ3RoKSB7XHJcbiAgICAgIHZhciBsYXN0VmFsdWUgICAgICAgPSB0aGlzLnZhbHVlW3RoaXMudmFsdWUubGVuZ3RoIC0gMV1cclxuICAgICAgICAsIGxhc3REZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb25bdGhpcy5kZXN0aW5hdGlvbi5sZW5ndGggLSAxXVxyXG5cclxuICAgICAgd2hpbGUodGhpcy52YWx1ZS5sZW5ndGggPiB0aGlzLmRlc3RpbmF0aW9uLmxlbmd0aClcclxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLnB1c2gobGFzdERlc3RpbmF0aW9uKVxyXG4gICAgICB3aGlsZSh0aGlzLnZhbHVlLmxlbmd0aCA8IHRoaXMuZGVzdGluYXRpb24ubGVuZ3RoKVxyXG4gICAgICAgIHRoaXMudmFsdWUucHVzaChsYXN0VmFsdWUpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcbiAgLy8gQ2xlYW4gdXAgYW55IGR1cGxpY2F0ZSBwb2ludHNcclxuLCBzZXR0bGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gZmluZCBhbGwgdW5pcXVlIHZhbHVlc1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gdGhpcy52YWx1ZS5sZW5ndGgsIHNlZW4gPSBbXTsgaSA8IGlsOyBpKyspXHJcbiAgICAgIGlmIChzZWVuLmluZGV4T2YodGhpcy52YWx1ZVtpXSkgPT0gLTEpXHJcbiAgICAgICAgc2Vlbi5wdXNoKHRoaXMudmFsdWVbaV0pXHJcblxyXG4gICAgLy8gc2V0IG5ldyB2YWx1ZVxyXG4gICAgcmV0dXJuIHRoaXMudmFsdWUgPSBzZWVuXHJcbiAgfVxyXG4gIC8vIEdldCBtb3JwaGVkIGFycmF5IGF0IGdpdmVuIHBvc2l0aW9uXHJcbiwgYXQ6IGZ1bmN0aW9uKHBvcykge1xyXG4gICAgLy8gbWFrZSBzdXJlIGEgZGVzdGluYXRpb24gaXMgZGVmaW5lZFxyXG4gICAgaWYgKCF0aGlzLmRlc3RpbmF0aW9uKSByZXR1cm4gdGhpc1xyXG5cclxuICAgIC8vIGdlbmVyYXRlIG1vcnBoZWQgYXJyYXlcclxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHRoaXMudmFsdWUubGVuZ3RoLCBhcnJheSA9IFtdOyBpIDwgaWw7IGkrKylcclxuICAgICAgYXJyYXkucHVzaCh0aGlzLnZhbHVlW2ldICsgKHRoaXMuZGVzdGluYXRpb25baV0gLSB0aGlzLnZhbHVlW2ldKSAqIHBvcylcclxuXHJcbiAgICByZXR1cm4gbmV3IFNWRy5BcnJheShhcnJheSlcclxuICB9XHJcbiAgLy8gQ29udmVydCBhcnJheSB0byBzdHJpbmdcclxuLCB0b1N0cmluZzogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy52YWx1ZS5qb2luKCcgJylcclxuICB9XHJcbiAgLy8gUmVhbCB2YWx1ZVxyXG4sIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWVcclxuICB9XHJcbiAgLy8gUGFyc2Ugd2hpdGVzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nXHJcbiwgcGFyc2U6IGZ1bmN0aW9uKGFycmF5KSB7XHJcbiAgICBhcnJheSA9IGFycmF5LnZhbHVlT2YoKVxyXG5cclxuICAgIC8vIGlmIGFscmVhZHkgaXMgYW4gYXJyYXksIG5vIG5lZWQgdG8gcGFyc2UgaXRcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGFycmF5KSkgcmV0dXJuIGFycmF5XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuc3BsaXQoYXJyYXkpXHJcbiAgfVxyXG4gIC8vIFN0cmlwIHVubmVjZXNzYXJ5IHdoaXRlc3BhY2VcclxuLCBzcGxpdDogZnVuY3Rpb24oc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gc3RyaW5nLnRyaW0oKS5zcGxpdChTVkcucmVnZXguZGVsaW1pdGVyKS5tYXAocGFyc2VGbG9hdClcclxuICB9XHJcbiAgLy8gUmV2ZXJzZSBhcnJheVxyXG4sIHJldmVyc2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy52YWx1ZS5yZXZlcnNlKClcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuLCBjbG9uZTogZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgY2xvbmUgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpXHJcbiAgICBjbG9uZS52YWx1ZSA9IGFycmF5X2Nsb25lKHRoaXMudmFsdWUpXHJcbiAgICByZXR1cm4gY2xvbmVcclxuICB9XHJcbn0pXG4vLyBQb2x5IHBvaW50cyBhcnJheVxyXG5TVkcuUG9pbnRBcnJheSA9IGZ1bmN0aW9uKGFycmF5LCBmYWxsYmFjaykge1xyXG4gIFNWRy5BcnJheS5jYWxsKHRoaXMsIGFycmF5LCBmYWxsYmFjayB8fCBbWzAsMF1dKVxyXG59XHJcblxyXG4vLyBJbmhlcml0IGZyb20gU1ZHLkFycmF5XHJcblNWRy5Qb2ludEFycmF5LnByb3RvdHlwZSA9IG5ldyBTVkcuQXJyYXlcclxuU1ZHLlBvaW50QXJyYXkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU1ZHLlBvaW50QXJyYXlcclxuXHJcblNWRy5leHRlbmQoU1ZHLlBvaW50QXJyYXksIHtcclxuICAvLyBDb252ZXJ0IGFycmF5IHRvIHN0cmluZ1xyXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcclxuICAgIC8vIGNvbnZlcnQgdG8gYSBwb2x5IHBvaW50IHN0cmluZ1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gdGhpcy52YWx1ZS5sZW5ndGgsIGFycmF5ID0gW107IGkgPCBpbDsgaSsrKVxyXG4gICAgICBhcnJheS5wdXNoKHRoaXMudmFsdWVbaV0uam9pbignLCcpKVxyXG5cclxuICAgIHJldHVybiBhcnJheS5qb2luKCcgJylcclxuICB9XHJcbiAgLy8gQ29udmVydCBhcnJheSB0byBsaW5lIG9iamVjdFxyXG4sIHRvTGluZTogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB4MTogdGhpcy52YWx1ZVswXVswXVxyXG4gICAgLCB5MTogdGhpcy52YWx1ZVswXVsxXVxyXG4gICAgLCB4MjogdGhpcy52YWx1ZVsxXVswXVxyXG4gICAgLCB5MjogdGhpcy52YWx1ZVsxXVsxXVxyXG4gICAgfVxyXG4gIH1cclxuICAvLyBHZXQgbW9ycGhlZCBhcnJheSBhdCBnaXZlbiBwb3NpdGlvblxyXG4sIGF0OiBmdW5jdGlvbihwb3MpIHtcclxuICAgIC8vIG1ha2Ugc3VyZSBhIGRlc3RpbmF0aW9uIGlzIGRlZmluZWRcclxuICAgIGlmICghdGhpcy5kZXN0aW5hdGlvbikgcmV0dXJuIHRoaXNcclxuXHJcbiAgICAvLyBnZW5lcmF0ZSBtb3JwaGVkIHBvaW50IHN0cmluZ1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gdGhpcy52YWx1ZS5sZW5ndGgsIGFycmF5ID0gW107IGkgPCBpbDsgaSsrKVxyXG4gICAgICBhcnJheS5wdXNoKFtcclxuICAgICAgICB0aGlzLnZhbHVlW2ldWzBdICsgKHRoaXMuZGVzdGluYXRpb25baV1bMF0gLSB0aGlzLnZhbHVlW2ldWzBdKSAqIHBvc1xyXG4gICAgICAsIHRoaXMudmFsdWVbaV1bMV0gKyAodGhpcy5kZXN0aW5hdGlvbltpXVsxXSAtIHRoaXMudmFsdWVbaV1bMV0pICogcG9zXHJcbiAgICAgIF0pXHJcblxyXG4gICAgcmV0dXJuIG5ldyBTVkcuUG9pbnRBcnJheShhcnJheSlcclxuICB9XHJcbiAgLy8gUGFyc2UgcG9pbnQgc3RyaW5nIGFuZCBmbGF0IGFycmF5XHJcbiwgcGFyc2U6IGZ1bmN0aW9uKGFycmF5KSB7XHJcbiAgICB2YXIgcG9pbnRzID0gW11cclxuXHJcbiAgICBhcnJheSA9IGFycmF5LnZhbHVlT2YoKVxyXG5cclxuICAgIC8vIGlmIGl0IGlzIGFuIGFycmF5XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcnJheSkpIHtcclxuICAgICAgLy8gYW5kIGl0IGlzIG5vdCBmbGF0LCB0aGVyZSBpcyBubyBuZWVkIHRvIHBhcnNlIGl0XHJcbiAgICAgIGlmKEFycmF5LmlzQXJyYXkoYXJyYXlbMF0pKSB7XHJcbiAgICAgICAgLy8gbWFrZSBzdXJlIHRvIHVzZSBhIGNsb25lXHJcbiAgICAgICAgcmV0dXJuIGFycmF5Lm1hcChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGVsLnNsaWNlKCkgfSlcclxuICAgICAgfSBlbHNlIGlmIChhcnJheVswXS54ICE9IG51bGwpe1xyXG4gICAgICAgIC8vIGFsbG93IHBvaW50IG9iamVjdHMgdG8gYmUgcGFzc2VkXHJcbiAgICAgICAgcmV0dXJuIGFycmF5Lm1hcChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIFtlbC54LCBlbC55XSB9KVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgeyAvLyBFbHNlLCBpdCBpcyBjb25zaWRlcmVkIGFzIGEgc3RyaW5nXHJcbiAgICAgIC8vIHBhcnNlIHBvaW50c1xyXG4gICAgICBhcnJheSA9IGFycmF5LnRyaW0oKS5zcGxpdChTVkcucmVnZXguZGVsaW1pdGVyKS5tYXAocGFyc2VGbG9hdClcclxuICAgIH1cclxuXHJcbiAgICAvLyB2YWxpZGF0ZSBwb2ludHMgLSBodHRwczovL3N2Z3dnLm9yZy9zdmcyLWRyYWZ0L3NoYXBlcy5odG1sI0RhdGFUeXBlUG9pbnRzXHJcbiAgICAvLyBPZGQgbnVtYmVyIG9mIGNvb3JkaW5hdGVzIGlzIGFuIGVycm9yLiBJbiBzdWNoIGNhc2VzLCBkcm9wIHRoZSBsYXN0IG9kZCBjb29yZGluYXRlLlxyXG4gICAgaWYgKGFycmF5Lmxlbmd0aCAlIDIgIT09IDApIGFycmF5LnBvcCgpXHJcblxyXG4gICAgLy8gd3JhcCBwb2ludHMgaW4gdHdvLXR1cGxlcyBhbmQgcGFyc2UgcG9pbnRzIGFzIGZsb2F0c1xyXG4gICAgZm9yKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpID0gaSArIDIpXHJcbiAgICAgIHBvaW50cy5wdXNoKFsgYXJyYXlbaV0sIGFycmF5W2krMV0gXSlcclxuXHJcbiAgICByZXR1cm4gcG9pbnRzXHJcbiAgfVxyXG4gIC8vIE1vdmUgcG9pbnQgc3RyaW5nXHJcbiwgbW92ZTogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgdmFyIGJveCA9IHRoaXMuYmJveCgpXHJcblxyXG4gICAgLy8gZ2V0IHJlbGF0aXZlIG9mZnNldFxyXG4gICAgeCAtPSBib3gueFxyXG4gICAgeSAtPSBib3gueVxyXG5cclxuICAgIC8vIG1vdmUgZXZlcnkgcG9pbnRcclxuICAgIGlmICghaXNOYU4oeCkgJiYgIWlzTmFOKHkpKVxyXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy52YWx1ZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcclxuICAgICAgICB0aGlzLnZhbHVlW2ldID0gW3RoaXMudmFsdWVbaV1bMF0gKyB4LCB0aGlzLnZhbHVlW2ldWzFdICsgeV1cclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuICAvLyBSZXNpemUgcG9seSBzdHJpbmdcclxuLCBzaXplOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICB2YXIgaSwgYm94ID0gdGhpcy5iYm94KClcclxuXHJcbiAgICAvLyByZWNhbGN1bGF0ZSBwb3NpdGlvbiBvZiBhbGwgcG9pbnRzIGFjY29yZGluZyB0byBuZXcgc2l6ZVxyXG4gICAgZm9yIChpID0gdGhpcy52YWx1ZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICBpZihib3gud2lkdGgpIHRoaXMudmFsdWVbaV1bMF0gPSAoKHRoaXMudmFsdWVbaV1bMF0gLSBib3gueCkgKiB3aWR0aCkgIC8gYm94LndpZHRoICArIGJveC54XHJcbiAgICAgIGlmKGJveC5oZWlnaHQpIHRoaXMudmFsdWVbaV1bMV0gPSAoKHRoaXMudmFsdWVbaV1bMV0gLSBib3gueSkgKiBoZWlnaHQpIC8gYm94LmhlaWdodCArIGJveC55XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcbiAgLy8gR2V0IGJvdW5kaW5nIGJveCBvZiBwb2ludHNcclxuLCBiYm94OiBmdW5jdGlvbigpIHtcclxuICAgIFNWRy5wYXJzZXIucG9seS5zZXRBdHRyaWJ1dGUoJ3BvaW50cycsIHRoaXMudG9TdHJpbmcoKSlcclxuXHJcbiAgICByZXR1cm4gU1ZHLnBhcnNlci5wb2x5LmdldEJCb3goKVxyXG4gIH1cclxufSlcclxuXG52YXIgcGF0aEhhbmRsZXJzID0ge1xyXG4gIE06IGZ1bmN0aW9uKGMsIHAsIHAwKSB7XHJcbiAgICBwLnggPSBwMC54ID0gY1swXVxyXG4gICAgcC55ID0gcDAueSA9IGNbMV1cclxuXHJcbiAgICByZXR1cm4gWydNJywgcC54LCBwLnldXHJcbiAgfSxcclxuICBMOiBmdW5jdGlvbihjLCBwKSB7XHJcbiAgICBwLnggPSBjWzBdXHJcbiAgICBwLnkgPSBjWzFdXHJcbiAgICByZXR1cm4gWydMJywgY1swXSwgY1sxXV1cclxuICB9LFxyXG4gIEg6IGZ1bmN0aW9uKGMsIHApIHtcclxuICAgIHAueCA9IGNbMF1cclxuICAgIHJldHVybiBbJ0gnLCBjWzBdXVxyXG4gIH0sXHJcbiAgVjogZnVuY3Rpb24oYywgcCkge1xyXG4gICAgcC55ID0gY1swXVxyXG4gICAgcmV0dXJuIFsnVicsIGNbMF1dXHJcbiAgfSxcclxuICBDOiBmdW5jdGlvbihjLCBwKSB7XHJcbiAgICBwLnggPSBjWzRdXHJcbiAgICBwLnkgPSBjWzVdXHJcbiAgICByZXR1cm4gWydDJywgY1swXSwgY1sxXSwgY1syXSwgY1szXSwgY1s0XSwgY1s1XV1cclxuICB9LFxyXG4gIFM6IGZ1bmN0aW9uKGMsIHApIHtcclxuICAgIHAueCA9IGNbMl1cclxuICAgIHAueSA9IGNbM11cclxuICAgIHJldHVybiBbJ1MnLCBjWzBdLCBjWzFdLCBjWzJdLCBjWzNdXVxyXG4gIH0sXHJcbiAgUTogZnVuY3Rpb24oYywgcCkge1xyXG4gICAgcC54ID0gY1syXVxyXG4gICAgcC55ID0gY1szXVxyXG4gICAgcmV0dXJuIFsnUScsIGNbMF0sIGNbMV0sIGNbMl0sIGNbM11dXHJcbiAgfSxcclxuICBUOiBmdW5jdGlvbihjLCBwKSB7XHJcbiAgICBwLnggPSBjWzBdXHJcbiAgICBwLnkgPSBjWzFdXHJcbiAgICByZXR1cm4gWydUJywgY1swXSwgY1sxXV1cclxuICB9LFxyXG4gIFo6IGZ1bmN0aW9uKGMsIHAsIHAwKSB7XHJcbiAgICBwLnggPSBwMC54XHJcbiAgICBwLnkgPSBwMC55XHJcbiAgICByZXR1cm4gWydaJ11cclxuICB9LFxyXG4gIEE6IGZ1bmN0aW9uKGMsIHApIHtcclxuICAgIHAueCA9IGNbNV1cclxuICAgIHAueSA9IGNbNl1cclxuICAgIHJldHVybiBbJ0EnLCBjWzBdLCBjWzFdLCBjWzJdLCBjWzNdLCBjWzRdLCBjWzVdLCBjWzZdXVxyXG4gIH1cclxufVxyXG5cclxudmFyIG1saHZxdGNzYSA9ICdtbGh2cXRjc2F6Jy5zcGxpdCgnJylcclxuXHJcbmZvcih2YXIgaSA9IDAsIGlsID0gbWxodnF0Y3NhLmxlbmd0aDsgaSA8IGlsOyArK2kpe1xyXG4gIHBhdGhIYW5kbGVyc1ttbGh2cXRjc2FbaV1dID0gKGZ1bmN0aW9uKGkpe1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGMsIHAsIHAwKSB7XHJcbiAgICAgIGlmKGkgPT0gJ0gnKSBjWzBdID0gY1swXSArIHAueFxyXG4gICAgICBlbHNlIGlmKGkgPT0gJ1YnKSBjWzBdID0gY1swXSArIHAueVxyXG4gICAgICBlbHNlIGlmKGkgPT0gJ0EnKXtcclxuICAgICAgICBjWzVdID0gY1s1XSArIHAueCxcclxuICAgICAgICBjWzZdID0gY1s2XSArIHAueVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2VcclxuICAgICAgICBmb3IodmFyIGogPSAwLCBqbCA9IGMubGVuZ3RoOyBqIDwgamw7ICsraikge1xyXG4gICAgICAgICAgY1tqXSA9IGNbal0gKyAoaiUyID8gcC55IDogcC54KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBwYXRoSGFuZGxlcnNbaV0oYywgcCwgcDApXHJcbiAgICB9XHJcbiAgfSkobWxodnF0Y3NhW2ldLnRvVXBwZXJDYXNlKCkpXHJcbn1cclxuXHJcbi8vIFBhdGggcG9pbnRzIGFycmF5XHJcblNWRy5QYXRoQXJyYXkgPSBmdW5jdGlvbihhcnJheSwgZmFsbGJhY2spIHtcclxuICBTVkcuQXJyYXkuY2FsbCh0aGlzLCBhcnJheSwgZmFsbGJhY2sgfHwgW1snTScsIDAsIDBdXSlcclxufVxyXG5cclxuLy8gSW5oZXJpdCBmcm9tIFNWRy5BcnJheVxyXG5TVkcuUGF0aEFycmF5LnByb3RvdHlwZSA9IG5ldyBTVkcuQXJyYXlcclxuU1ZHLlBhdGhBcnJheS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTVkcuUGF0aEFycmF5XHJcblxyXG5TVkcuZXh0ZW5kKFNWRy5QYXRoQXJyYXksIHtcclxuICAvLyBDb252ZXJ0IGFycmF5IHRvIHN0cmluZ1xyXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBhcnJheVRvU3RyaW5nKHRoaXMudmFsdWUpXHJcbiAgfVxyXG4gIC8vIE1vdmUgcGF0aCBzdHJpbmdcclxuLCBtb3ZlOiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICAvLyBnZXQgYm91bmRpbmcgYm94IG9mIGN1cnJlbnQgc2l0dWF0aW9uXHJcbiAgICB2YXIgYm94ID0gdGhpcy5iYm94KClcclxuXHJcbiAgICAvLyBnZXQgcmVsYXRpdmUgb2Zmc2V0XHJcbiAgICB4IC09IGJveC54XHJcbiAgICB5IC09IGJveC55XHJcblxyXG4gICAgaWYgKCFpc05hTih4KSAmJiAhaXNOYU4oeSkpIHtcclxuICAgICAgLy8gbW92ZSBldmVyeSBwb2ludFxyXG4gICAgICBmb3IgKHZhciBsLCBpID0gdGhpcy52YWx1ZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgIGwgPSB0aGlzLnZhbHVlW2ldWzBdXHJcblxyXG4gICAgICAgIGlmIChsID09ICdNJyB8fCBsID09ICdMJyB8fCBsID09ICdUJykgIHtcclxuICAgICAgICAgIHRoaXMudmFsdWVbaV1bMV0gKz0geFxyXG4gICAgICAgICAgdGhpcy52YWx1ZVtpXVsyXSArPSB5XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAobCA9PSAnSCcpICB7XHJcbiAgICAgICAgICB0aGlzLnZhbHVlW2ldWzFdICs9IHhcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChsID09ICdWJykgIHtcclxuICAgICAgICAgIHRoaXMudmFsdWVbaV1bMV0gKz0geVxyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGwgPT0gJ0MnIHx8IGwgPT0gJ1MnIHx8IGwgPT0gJ1EnKSAge1xyXG4gICAgICAgICAgdGhpcy52YWx1ZVtpXVsxXSArPSB4XHJcbiAgICAgICAgICB0aGlzLnZhbHVlW2ldWzJdICs9IHlcclxuICAgICAgICAgIHRoaXMudmFsdWVbaV1bM10gKz0geFxyXG4gICAgICAgICAgdGhpcy52YWx1ZVtpXVs0XSArPSB5XHJcblxyXG4gICAgICAgICAgaWYgKGwgPT0gJ0MnKSAge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlW2ldWzVdICs9IHhcclxuICAgICAgICAgICAgdGhpcy52YWx1ZVtpXVs2XSArPSB5XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAobCA9PSAnQScpICB7XHJcbiAgICAgICAgICB0aGlzLnZhbHVlW2ldWzZdICs9IHhcclxuICAgICAgICAgIHRoaXMudmFsdWVbaV1bN10gKz0geVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuICAvLyBSZXNpemUgcGF0aCBzdHJpbmdcclxuLCBzaXplOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAvLyBnZXQgYm91bmRpbmcgYm94IG9mIGN1cnJlbnQgc2l0dWF0aW9uXHJcbiAgICB2YXIgaSwgbCwgYm94ID0gdGhpcy5iYm94KClcclxuXHJcbiAgICAvLyByZWNhbGN1bGF0ZSBwb3NpdGlvbiBvZiBhbGwgcG9pbnRzIGFjY29yZGluZyB0byBuZXcgc2l6ZVxyXG4gICAgZm9yIChpID0gdGhpcy52YWx1ZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICBsID0gdGhpcy52YWx1ZVtpXVswXVxyXG5cclxuICAgICAgaWYgKGwgPT0gJ00nIHx8IGwgPT0gJ0wnIHx8IGwgPT0gJ1QnKSAge1xyXG4gICAgICAgIHRoaXMudmFsdWVbaV1bMV0gPSAoKHRoaXMudmFsdWVbaV1bMV0gLSBib3gueCkgKiB3aWR0aCkgIC8gYm94LndpZHRoICArIGJveC54XHJcbiAgICAgICAgdGhpcy52YWx1ZVtpXVsyXSA9ICgodGhpcy52YWx1ZVtpXVsyXSAtIGJveC55KSAqIGhlaWdodCkgLyBib3guaGVpZ2h0ICsgYm94LnlcclxuXHJcbiAgICAgIH0gZWxzZSBpZiAobCA9PSAnSCcpICB7XHJcbiAgICAgICAgdGhpcy52YWx1ZVtpXVsxXSA9ICgodGhpcy52YWx1ZVtpXVsxXSAtIGJveC54KSAqIHdpZHRoKSAgLyBib3gud2lkdGggICsgYm94LnhcclxuXHJcbiAgICAgIH0gZWxzZSBpZiAobCA9PSAnVicpICB7XHJcbiAgICAgICAgdGhpcy52YWx1ZVtpXVsxXSA9ICgodGhpcy52YWx1ZVtpXVsxXSAtIGJveC55KSAqIGhlaWdodCkgLyBib3guaGVpZ2h0ICsgYm94LnlcclxuXHJcbiAgICAgIH0gZWxzZSBpZiAobCA9PSAnQycgfHwgbCA9PSAnUycgfHwgbCA9PSAnUScpICB7XHJcbiAgICAgICAgdGhpcy52YWx1ZVtpXVsxXSA9ICgodGhpcy52YWx1ZVtpXVsxXSAtIGJveC54KSAqIHdpZHRoKSAgLyBib3gud2lkdGggICsgYm94LnhcclxuICAgICAgICB0aGlzLnZhbHVlW2ldWzJdID0gKCh0aGlzLnZhbHVlW2ldWzJdIC0gYm94LnkpICogaGVpZ2h0KSAvIGJveC5oZWlnaHQgKyBib3gueVxyXG4gICAgICAgIHRoaXMudmFsdWVbaV1bM10gPSAoKHRoaXMudmFsdWVbaV1bM10gLSBib3gueCkgKiB3aWR0aCkgIC8gYm94LndpZHRoICArIGJveC54XHJcbiAgICAgICAgdGhpcy52YWx1ZVtpXVs0XSA9ICgodGhpcy52YWx1ZVtpXVs0XSAtIGJveC55KSAqIGhlaWdodCkgLyBib3guaGVpZ2h0ICsgYm94LnlcclxuXHJcbiAgICAgICAgaWYgKGwgPT0gJ0MnKSAge1xyXG4gICAgICAgICAgdGhpcy52YWx1ZVtpXVs1XSA9ICgodGhpcy52YWx1ZVtpXVs1XSAtIGJveC54KSAqIHdpZHRoKSAgLyBib3gud2lkdGggICsgYm94LnhcclxuICAgICAgICAgIHRoaXMudmFsdWVbaV1bNl0gPSAoKHRoaXMudmFsdWVbaV1bNl0gLSBib3gueSkgKiBoZWlnaHQpIC8gYm94LmhlaWdodCArIGJveC55XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfSBlbHNlIGlmIChsID09ICdBJykgIHtcclxuICAgICAgICAvLyByZXNpemUgcmFkaWlcclxuICAgICAgICB0aGlzLnZhbHVlW2ldWzFdID0gKHRoaXMudmFsdWVbaV1bMV0gKiB3aWR0aCkgIC8gYm94LndpZHRoXHJcbiAgICAgICAgdGhpcy52YWx1ZVtpXVsyXSA9ICh0aGlzLnZhbHVlW2ldWzJdICogaGVpZ2h0KSAvIGJveC5oZWlnaHRcclxuXHJcbiAgICAgICAgLy8gbW92ZSBwb3NpdGlvbiB2YWx1ZXNcclxuICAgICAgICB0aGlzLnZhbHVlW2ldWzZdID0gKCh0aGlzLnZhbHVlW2ldWzZdIC0gYm94LngpICogd2lkdGgpICAvIGJveC53aWR0aCAgKyBib3gueFxyXG4gICAgICAgIHRoaXMudmFsdWVbaV1bN10gPSAoKHRoaXMudmFsdWVbaV1bN10gLSBib3gueSkgKiBoZWlnaHQpIC8gYm94LmhlaWdodCArIGJveC55XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcbiAgLy8gVGVzdCBpZiB0aGUgcGFzc2VkIHBhdGggYXJyYXkgdXNlIHRoZSBzYW1lIHBhdGggZGF0YSBjb21tYW5kcyBhcyB0aGlzIHBhdGggYXJyYXlcclxuLCBlcXVhbENvbW1hbmRzOiBmdW5jdGlvbihwYXRoQXJyYXkpIHtcclxuICAgIHZhciBpLCBpbCwgZXF1YWxDb21tYW5kc1xyXG5cclxuICAgIHBhdGhBcnJheSA9IG5ldyBTVkcuUGF0aEFycmF5KHBhdGhBcnJheSlcclxuXHJcbiAgICBlcXVhbENvbW1hbmRzID0gdGhpcy52YWx1ZS5sZW5ndGggPT09IHBhdGhBcnJheS52YWx1ZS5sZW5ndGhcclxuICAgIGZvcihpID0gMCwgaWwgPSB0aGlzLnZhbHVlLmxlbmd0aDsgZXF1YWxDb21tYW5kcyAmJiBpIDwgaWw7IGkrKykge1xyXG4gICAgICBlcXVhbENvbW1hbmRzID0gdGhpcy52YWx1ZVtpXVswXSA9PT0gcGF0aEFycmF5LnZhbHVlW2ldWzBdXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGVxdWFsQ29tbWFuZHNcclxuICB9XHJcbiAgLy8gTWFrZSBwYXRoIGFycmF5IG1vcnBoYWJsZVxyXG4sIG1vcnBoOiBmdW5jdGlvbihwYXRoQXJyYXkpIHtcclxuICAgIHBhdGhBcnJheSA9IG5ldyBTVkcuUGF0aEFycmF5KHBhdGhBcnJheSlcclxuXHJcbiAgICBpZih0aGlzLmVxdWFsQ29tbWFuZHMocGF0aEFycmF5KSkge1xyXG4gICAgICB0aGlzLmRlc3RpbmF0aW9uID0gcGF0aEFycmF5XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbnVsbFxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG4gIC8vIEdldCBtb3JwaGVkIHBhdGggYXJyYXkgYXQgZ2l2ZW4gcG9zaXRpb25cclxuLCBhdDogZnVuY3Rpb24ocG9zKSB7XHJcbiAgICAvLyBtYWtlIHN1cmUgYSBkZXN0aW5hdGlvbiBpcyBkZWZpbmVkXHJcbiAgICBpZiAoIXRoaXMuZGVzdGluYXRpb24pIHJldHVybiB0aGlzXHJcblxyXG4gICAgdmFyIHNvdXJjZUFycmF5ID0gdGhpcy52YWx1ZVxyXG4gICAgICAsIGRlc3RpbmF0aW9uQXJyYXkgPSB0aGlzLmRlc3RpbmF0aW9uLnZhbHVlXHJcbiAgICAgICwgYXJyYXkgPSBbXSwgcGF0aEFycmF5ID0gbmV3IFNWRy5QYXRoQXJyYXkoKVxyXG4gICAgICAsIGksIGlsLCBqLCBqbFxyXG5cclxuICAgIC8vIEFuaW1hdGUgaGFzIHNwZWNpZmllZCBpbiB0aGUgU1ZHIHNwZWNcclxuICAgIC8vIFNlZTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1NWRzExL3BhdGhzLmh0bWwjUGF0aEVsZW1lbnRcclxuICAgIGZvciAoaSA9IDAsIGlsID0gc291cmNlQXJyYXkubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG4gICAgICBhcnJheVtpXSA9IFtzb3VyY2VBcnJheVtpXVswXV1cclxuICAgICAgZm9yKGogPSAxLCBqbCA9IHNvdXJjZUFycmF5W2ldLmxlbmd0aDsgaiA8IGpsOyBqKyspIHtcclxuICAgICAgICBhcnJheVtpXVtqXSA9IHNvdXJjZUFycmF5W2ldW2pdICsgKGRlc3RpbmF0aW9uQXJyYXlbaV1bal0gLSBzb3VyY2VBcnJheVtpXVtqXSkgKiBwb3NcclxuICAgICAgfVxyXG4gICAgICAvLyBGb3IgdGhlIHR3byBmbGFncyBvZiB0aGUgZWxsaXB0aWNhbCBhcmMgY29tbWFuZCwgdGhlIFNWRyBzcGVjIHNheTpcclxuICAgICAgLy8gRmxhZ3MgYW5kIGJvb2xlYW5zIGFyZSBpbnRlcnBvbGF0ZWQgYXMgZnJhY3Rpb25zIGJldHdlZW4gemVybyBhbmQgb25lLCB3aXRoIGFueSBub24temVybyB2YWx1ZSBjb25zaWRlcmVkIHRvIGJlIGEgdmFsdWUgb2Ygb25lL3RydWVcclxuICAgICAgLy8gRWxsaXB0aWNhbCBhcmMgY29tbWFuZCBhcyBhbiBhcnJheSBmb2xsb3dlZCBieSBjb3JyZXNwb25kaW5nIGluZGV4ZXM6XHJcbiAgICAgIC8vIFsnQScsIHJ4LCByeSwgeC1heGlzLXJvdGF0aW9uLCBsYXJnZS1hcmMtZmxhZywgc3dlZXAtZmxhZywgeCwgeV1cclxuICAgICAgLy8gICAwICAgIDEgICAyICAgICAgICAzICAgICAgICAgICAgICAgICA0ICAgICAgICAgICAgIDUgICAgICA2ICA3XHJcbiAgICAgIGlmKGFycmF5W2ldWzBdID09PSAnQScpIHtcclxuICAgICAgICBhcnJheVtpXVs0XSA9ICsoYXJyYXlbaV1bNF0gIT0gMClcclxuICAgICAgICBhcnJheVtpXVs1XSA9ICsoYXJyYXlbaV1bNV0gIT0gMClcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIERpcmVjdGx5IG1vZGlmeSB0aGUgdmFsdWUgb2YgYSBwYXRoIGFycmF5LCB0aGlzIGlzIGRvbmUgdGhpcyB3YXkgZm9yIHBlcmZvcm1hbmNlXHJcbiAgICBwYXRoQXJyYXkudmFsdWUgPSBhcnJheVxyXG4gICAgcmV0dXJuIHBhdGhBcnJheVxyXG4gIH1cclxuICAvLyBBYnNvbHV0aXplIGFuZCBwYXJzZSBwYXRoIHRvIGFycmF5XHJcbiwgcGFyc2U6IGZ1bmN0aW9uKGFycmF5KSB7XHJcbiAgICAvLyBpZiBpdCdzIGFscmVhZHkgYSBwYXRoYXJyYXksIG5vIG5lZWQgdG8gcGFyc2UgaXRcclxuICAgIGlmIChhcnJheSBpbnN0YW5jZW9mIFNWRy5QYXRoQXJyYXkpIHJldHVybiBhcnJheS52YWx1ZU9mKClcclxuXHJcbiAgICAvLyBwcmVwYXJlIGZvciBwYXJzaW5nXHJcbiAgICB2YXIgaSwgeDAsIHkwLCBzLCBzZWcsIGFyclxyXG4gICAgICAsIHggPSAwXHJcbiAgICAgICwgeSA9IDBcclxuICAgICAgLCBwYXJhbUNudCA9IHsgJ00nOjIsICdMJzoyLCAnSCc6MSwgJ1YnOjEsICdDJzo2LCAnUyc6NCwgJ1EnOjQsICdUJzoyLCAnQSc6NywgJ1onOjAgfVxyXG5cclxuICAgIGlmKHR5cGVvZiBhcnJheSA9PSAnc3RyaW5nJyl7XHJcblxyXG4gICAgICBhcnJheSA9IGFycmF5XHJcbiAgICAgICAgLnJlcGxhY2UoU1ZHLnJlZ2V4Lm51bWJlcnNXaXRoRG90cywgcGF0aFJlZ1JlcGxhY2UpIC8vIGNvbnZlcnQgNDUuMTIzLjEyMyB0byA0NS4xMjMgLjEyM1xyXG4gICAgICAgIC5yZXBsYWNlKFNWRy5yZWdleC5wYXRoTGV0dGVycywgJyAkJiAnKSAvLyBwdXQgc29tZSByb29tIGJldHdlZW4gbGV0dGVycyBhbmQgbnVtYmVyc1xyXG4gICAgICAgIC5yZXBsYWNlKFNWRy5yZWdleC5oeXBoZW4sICckMSAtJykgICAgICAvLyBhZGQgc3BhY2UgYmVmb3JlIGh5cGhlblxyXG4gICAgICAgIC50cmltKCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmltXHJcbiAgICAgICAgLnNwbGl0KFNWRy5yZWdleC5kZWxpbWl0ZXIpICAgLy8gc3BsaXQgaW50byBhcnJheVxyXG5cclxuICAgIH1lbHNle1xyXG4gICAgICBhcnJheSA9IGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXJyKXtcclxuICAgICAgICByZXR1cm4gW10uY29uY2F0LmNhbGwocHJldiwgY3VycilcclxuICAgICAgfSwgW10pXHJcbiAgICB9XHJcblxyXG4gICAgLy8gYXJyYXkgbm93IGlzIGFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIHBhcnRzIG9mIGEgcGF0aCBlLmcuIFsnTScsICcwJywgJzAnLCAnTCcsICczMCcsICczMCcgLi4uXVxyXG4gICAgdmFyIGFyciA9IFtdXHJcbiAgICAgICwgcCA9IG5ldyBTVkcuUG9pbnQoKVxyXG4gICAgICAsIHAwID0gbmV3IFNWRy5Qb2ludCgpXHJcbiAgICAgICwgaW5kZXggPSAwXHJcbiAgICAgICwgbGVuID0gYXJyYXkubGVuZ3RoXHJcblxyXG4gICAgZG97XHJcbiAgICAgIC8vIFRlc3QgaWYgd2UgaGF2ZSBhIHBhdGggbGV0dGVyXHJcbiAgICAgIGlmKFNWRy5yZWdleC5pc1BhdGhMZXR0ZXIudGVzdChhcnJheVtpbmRleF0pKXtcclxuICAgICAgICBzID0gYXJyYXlbaW5kZXhdXHJcbiAgICAgICAgKytpbmRleFxyXG4gICAgICAvLyBJZiBsYXN0IGxldHRlciB3YXMgYSBtb3ZlIGNvbW1hbmQgYW5kIHdlIGdvdCBubyBuZXcsIGl0IGRlZmF1bHRzIHRvIFtMXWluZVxyXG4gICAgICB9ZWxzZSBpZihzID09ICdNJyl7XHJcbiAgICAgICAgcyA9ICdMJ1xyXG4gICAgICB9ZWxzZSBpZihzID09ICdtJyl7XHJcbiAgICAgICAgcyA9ICdsJ1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhcnIucHVzaChwYXRoSGFuZGxlcnNbc10uY2FsbChudWxsLFxyXG4gICAgICAgICAgYXJyYXkuc2xpY2UoaW5kZXgsIChpbmRleCA9IGluZGV4ICsgcGFyYW1DbnRbcy50b1VwcGVyQ2FzZSgpXSkpLm1hcChwYXJzZUZsb2F0KSxcclxuICAgICAgICAgIHAsIHAwXHJcbiAgICAgICAgKVxyXG4gICAgICApXHJcblxyXG4gICAgfXdoaWxlKGxlbiA+IGluZGV4KVxyXG5cclxuICAgIHJldHVybiBhcnJcclxuXHJcbiAgfVxyXG4gIC8vIEdldCBib3VuZGluZyBib3ggb2YgcGF0aFxyXG4sIGJib3g6IGZ1bmN0aW9uKCkge1xyXG4gICAgU1ZHLnBhcnNlci5wYXRoLnNldEF0dHJpYnV0ZSgnZCcsIHRoaXMudG9TdHJpbmcoKSlcclxuXHJcbiAgICByZXR1cm4gU1ZHLnBhcnNlci5wYXRoLmdldEJCb3goKVxyXG4gIH1cclxuXHJcbn0pXHJcblxuLy8gTW9kdWxlIGZvciB1bml0IGNvbnZlcnRpb25zXHJcblNWRy5OdW1iZXIgPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplXHJcbiAgY3JlYXRlOiBmdW5jdGlvbih2YWx1ZSwgdW5pdCkge1xyXG4gICAgLy8gaW5pdGlhbGl6ZSBkZWZhdWx0c1xyXG4gICAgdGhpcy52YWx1ZSA9IDBcclxuICAgIHRoaXMudW5pdCAgPSB1bml0IHx8ICcnXHJcblxyXG4gICAgLy8gcGFyc2UgdmFsdWVcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgIC8vIGVuc3VyZSBhIHZhbGlkIG51bWVyaWMgdmFsdWVcclxuICAgICAgdGhpcy52YWx1ZSA9IGlzTmFOKHZhbHVlKSA/IDAgOiAhaXNGaW5pdGUodmFsdWUpID8gKHZhbHVlIDwgMCA/IC0zLjRlKzM4IDogKzMuNGUrMzgpIDogdmFsdWVcclxuXHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgdW5pdCA9IHZhbHVlLm1hdGNoKFNWRy5yZWdleC5udW1iZXJBbmRVbml0KVxyXG5cclxuICAgICAgaWYgKHVuaXQpIHtcclxuICAgICAgICAvLyBtYWtlIHZhbHVlIG51bWVyaWNcclxuICAgICAgICB0aGlzLnZhbHVlID0gcGFyc2VGbG9hdCh1bml0WzFdKVxyXG5cclxuICAgICAgICAvLyBub3JtYWxpemVcclxuICAgICAgICBpZiAodW5pdFs1XSA9PSAnJScpXHJcbiAgICAgICAgICB0aGlzLnZhbHVlIC89IDEwMFxyXG4gICAgICAgIGVsc2UgaWYgKHVuaXRbNV0gPT0gJ3MnKVxyXG4gICAgICAgICAgdGhpcy52YWx1ZSAqPSAxMDAwXHJcblxyXG4gICAgICAgIC8vIHN0b3JlIHVuaXRcclxuICAgICAgICB0aGlzLnVuaXQgPSB1bml0WzVdXHJcbiAgICAgIH1cclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBTVkcuTnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlLnZhbHVlT2YoKVxyXG4gICAgICAgIHRoaXMudW5pdCAgPSB2YWx1ZS51bml0XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgfVxyXG4gIC8vIEFkZCBtZXRob2RzXHJcbiwgZXh0ZW5kOiB7XHJcbiAgICAvLyBTdHJpbmdhbGl6ZVxyXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIHRoaXMudW5pdCA9PSAnJScgP1xyXG4gICAgICAgICAgfn4odGhpcy52YWx1ZSAqIDFlOCkgLyAxZTY6XHJcbiAgICAgICAgdGhpcy51bml0ID09ICdzJyA/XHJcbiAgICAgICAgICB0aGlzLnZhbHVlIC8gMWUzIDpcclxuICAgICAgICAgIHRoaXMudmFsdWVcclxuICAgICAgKSArIHRoaXMudW5pdFxyXG4gICAgfVxyXG4gICwgdG9KU09OOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKVxyXG4gICAgfVxyXG4gICwgLy8gQ29udmVydCB0byBwcmltaXRpdmVcclxuICAgIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy52YWx1ZVxyXG4gICAgfVxyXG4gICAgLy8gQWRkIG51bWJlclxyXG4gICwgcGx1czogZnVuY3Rpb24obnVtYmVyKSB7XHJcbiAgICAgIG51bWJlciA9IG5ldyBTVkcuTnVtYmVyKG51bWJlcilcclxuICAgICAgcmV0dXJuIG5ldyBTVkcuTnVtYmVyKHRoaXMgKyBudW1iZXIsIHRoaXMudW5pdCB8fCBudW1iZXIudW5pdClcclxuICAgIH1cclxuICAgIC8vIFN1YnRyYWN0IG51bWJlclxyXG4gICwgbWludXM6IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICBudW1iZXIgPSBuZXcgU1ZHLk51bWJlcihudW1iZXIpXHJcbiAgICAgIHJldHVybiBuZXcgU1ZHLk51bWJlcih0aGlzIC0gbnVtYmVyLCB0aGlzLnVuaXQgfHwgbnVtYmVyLnVuaXQpXHJcbiAgICB9XHJcbiAgICAvLyBNdWx0aXBseSBudW1iZXJcclxuICAsIHRpbWVzOiBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgbnVtYmVyID0gbmV3IFNWRy5OdW1iZXIobnVtYmVyKVxyXG4gICAgICByZXR1cm4gbmV3IFNWRy5OdW1iZXIodGhpcyAqIG51bWJlciwgdGhpcy51bml0IHx8IG51bWJlci51bml0KVxyXG4gICAgfVxyXG4gICAgLy8gRGl2aWRlIG51bWJlclxyXG4gICwgZGl2aWRlOiBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgbnVtYmVyID0gbmV3IFNWRy5OdW1iZXIobnVtYmVyKVxyXG4gICAgICByZXR1cm4gbmV3IFNWRy5OdW1iZXIodGhpcyAvIG51bWJlciwgdGhpcy51bml0IHx8IG51bWJlci51bml0KVxyXG4gICAgfVxyXG4gICAgLy8gQ29udmVydCB0byBkaWZmZXJlbnQgdW5pdFxyXG4gICwgdG86IGZ1bmN0aW9uKHVuaXQpIHtcclxuICAgICAgdmFyIG51bWJlciA9IG5ldyBTVkcuTnVtYmVyKHRoaXMpXHJcblxyXG4gICAgICBpZiAodHlwZW9mIHVuaXQgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgIG51bWJlci51bml0ID0gdW5pdFxyXG5cclxuICAgICAgcmV0dXJuIG51bWJlclxyXG4gICAgfVxyXG4gICAgLy8gTWFrZSBudW1iZXIgbW9ycGhhYmxlXHJcbiAgLCBtb3JwaDogZnVuY3Rpb24obnVtYmVyKSB7XHJcbiAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBuZXcgU1ZHLk51bWJlcihudW1iZXIpXHJcblxyXG4gICAgICBpZihudW1iZXIucmVsYXRpdmUpIHtcclxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLnZhbHVlICs9IHRoaXMudmFsdWVcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAgIC8vIEdldCBtb3JwaGVkIG51bWJlciBhdCBnaXZlbiBwb3NpdGlvblxyXG4gICwgYXQ6IGZ1bmN0aW9uKHBvcykge1xyXG4gICAgICAvLyBNYWtlIHN1cmUgYSBkZXN0aW5hdGlvbiBpcyBkZWZpbmVkXHJcbiAgICAgIGlmICghdGhpcy5kZXN0aW5hdGlvbikgcmV0dXJuIHRoaXNcclxuXHJcbiAgICAgIC8vIEdlbmVyYXRlIG5ldyBtb3JwaGVkIG51bWJlclxyXG4gICAgICByZXR1cm4gbmV3IFNWRy5OdW1iZXIodGhpcy5kZXN0aW5hdGlvbilcclxuICAgICAgICAgIC5taW51cyh0aGlzKVxyXG4gICAgICAgICAgLnRpbWVzKHBvcylcclxuICAgICAgICAgIC5wbHVzKHRoaXMpXHJcbiAgICB9XHJcblxyXG4gIH1cclxufSlcclxuXG5cclxuU1ZHLkVsZW1lbnQgPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplIG5vZGVcclxuICBjcmVhdGU6IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgIC8vIG1ha2Ugc3Ryb2tlIHZhbHVlIGFjY2Vzc2libGUgZHluYW1pY2FsbHlcclxuICAgIHRoaXMuX3N0cm9rZSA9IFNWRy5kZWZhdWx0cy5hdHRycy5zdHJva2VcclxuICAgIHRoaXMuX2V2ZW50ID0gbnVsbFxyXG4gICAgdGhpcy5fZXZlbnRzID0ge31cclxuXHJcbiAgICAvLyBpbml0aWFsaXplIGRhdGEgb2JqZWN0XHJcbiAgICB0aGlzLmRvbSA9IHt9XHJcblxyXG4gICAgLy8gY3JlYXRlIGNpcmN1bGFyIHJlZmVyZW5jZVxyXG4gICAgaWYgKHRoaXMubm9kZSA9IG5vZGUpIHtcclxuICAgICAgdGhpcy50eXBlID0gbm9kZS5ub2RlTmFtZVxyXG4gICAgICB0aGlzLm5vZGUuaW5zdGFuY2UgPSB0aGlzXHJcbiAgICAgIHRoaXMuX2V2ZW50cyA9IG5vZGUuX2V2ZW50cyB8fCB7fVxyXG5cclxuICAgICAgLy8gc3RvcmUgY3VycmVudCBhdHRyaWJ1dGUgdmFsdWVcclxuICAgICAgdGhpcy5fc3Ryb2tlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3N0cm9rZScpIHx8IHRoaXMuX3N0cm9rZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcclxuLCBleHRlbmQ6IHtcclxuICAgIC8vIE1vdmUgb3ZlciB4LWF4aXNcclxuICAgIHg6IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuYXR0cigneCcsIHgpXHJcbiAgICB9XHJcbiAgICAvLyBNb3ZlIG92ZXIgeS1heGlzXHJcbiAgLCB5OiBmdW5jdGlvbih5KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ3knLCB5KVxyXG4gICAgfVxyXG4gICAgLy8gTW92ZSBieSBjZW50ZXIgb3ZlciB4LWF4aXNcclxuICAsIGN4OiBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiB4ID09IG51bGwgPyB0aGlzLngoKSArIHRoaXMud2lkdGgoKSAvIDIgOiB0aGlzLngoeCAtIHRoaXMud2lkdGgoKSAvIDIpXHJcbiAgICB9XHJcbiAgICAvLyBNb3ZlIGJ5IGNlbnRlciBvdmVyIHktYXhpc1xyXG4gICwgY3k6IGZ1bmN0aW9uKHkpIHtcclxuICAgICAgcmV0dXJuIHkgPT0gbnVsbCA/IHRoaXMueSgpICsgdGhpcy5oZWlnaHQoKSAvIDIgOiB0aGlzLnkoeSAtIHRoaXMuaGVpZ2h0KCkgLyAyKVxyXG4gICAgfVxyXG4gICAgLy8gTW92ZSBlbGVtZW50IHRvIGdpdmVuIHggYW5kIHkgdmFsdWVzXHJcbiAgLCBtb3ZlOiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLngoeCkueSh5KVxyXG4gICAgfVxyXG4gICAgLy8gTW92ZSBlbGVtZW50IGJ5IGl0cyBjZW50ZXJcclxuICAsIGNlbnRlcjogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5jeCh4KS5jeSh5KVxyXG4gICAgfVxyXG4gICAgLy8gU2V0IHdpZHRoIG9mIGVsZW1lbnRcclxuICAsIHdpZHRoOiBmdW5jdGlvbih3aWR0aCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5hdHRyKCd3aWR0aCcsIHdpZHRoKVxyXG4gICAgfVxyXG4gICAgLy8gU2V0IGhlaWdodCBvZiBlbGVtZW50XHJcbiAgLCBoZWlnaHQ6IGZ1bmN0aW9uKGhlaWdodCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5hdHRyKCdoZWlnaHQnLCBoZWlnaHQpXHJcbiAgICB9XHJcbiAgICAvLyBTZXQgZWxlbWVudCBzaXplIHRvIGdpdmVuIHdpZHRoIGFuZCBoZWlnaHRcclxuICAsIHNpemU6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgdmFyIHAgPSBwcm9wb3J0aW9uYWxTaXplKHRoaXMsIHdpZHRoLCBoZWlnaHQpXHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgIC53aWR0aChuZXcgU1ZHLk51bWJlcihwLndpZHRoKSlcclxuICAgICAgICAuaGVpZ2h0KG5ldyBTVkcuTnVtYmVyKHAuaGVpZ2h0KSlcclxuICAgIH1cclxuICAgIC8vIENsb25lIGVsZW1lbnRcclxuICAsIGNsb25lOiBmdW5jdGlvbihwYXJlbnQpIHtcclxuICAgICAgLy8gd3JpdGUgZG9tIGRhdGEgdG8gdGhlIGRvbSBzbyB0aGUgY2xvbmUgY2FuIHBpY2t1cCB0aGUgZGF0YVxyXG4gICAgICB0aGlzLndyaXRlRGF0YVRvRG9tKClcclxuXHJcbiAgICAgIC8vIGNsb25lIGVsZW1lbnQgYW5kIGFzc2lnbiBuZXcgaWRcclxuICAgICAgdmFyIGNsb25lID0gYXNzaWduTmV3SWQodGhpcy5ub2RlLmNsb25lTm9kZSh0cnVlKSlcclxuXHJcbiAgICAgIC8vIGluc2VydCB0aGUgY2xvbmUgaW4gdGhlIGdpdmVuIHBhcmVudCBvciBhZnRlciBteXNlbGZcclxuICAgICAgaWYocGFyZW50KSBwYXJlbnQuYWRkKGNsb25lKVxyXG4gICAgICBlbHNlIHRoaXMuYWZ0ZXIoY2xvbmUpXHJcblxyXG4gICAgICByZXR1cm4gY2xvbmVcclxuICAgIH1cclxuICAgIC8vIFJlbW92ZSBlbGVtZW50XHJcbiAgLCByZW1vdmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAodGhpcy5wYXJlbnQoKSlcclxuICAgICAgICB0aGlzLnBhcmVudCgpLnJlbW92ZUVsZW1lbnQodGhpcylcclxuXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcbiAgICAvLyBSZXBsYWNlIGVsZW1lbnRcclxuICAsIHJlcGxhY2U6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgdGhpcy5hZnRlcihlbGVtZW50KS5yZW1vdmUoKVxyXG5cclxuICAgICAgcmV0dXJuIGVsZW1lbnRcclxuICAgIH1cclxuICAgIC8vIEFkZCBlbGVtZW50IHRvIGdpdmVuIGNvbnRhaW5lciBhbmQgcmV0dXJuIHNlbGZcclxuICAsIGFkZFRvOiBmdW5jdGlvbihwYXJlbnQpIHtcclxuICAgICAgcmV0dXJuIHBhcmVudC5wdXQodGhpcylcclxuICAgIH1cclxuICAgIC8vIEFkZCBlbGVtZW50IHRvIGdpdmVuIGNvbnRhaW5lciBhbmQgcmV0dXJuIGNvbnRhaW5lclxyXG4gICwgcHV0SW46IGZ1bmN0aW9uKHBhcmVudCkge1xyXG4gICAgICByZXR1cm4gcGFyZW50LmFkZCh0aGlzKVxyXG4gICAgfVxyXG4gICAgLy8gR2V0IC8gc2V0IGlkXHJcbiAgLCBpZDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuYXR0cignaWQnLCBpZClcclxuICAgIH1cclxuICAgIC8vIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBwb2ludCBpbnNpZGUgdGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgZWxlbWVudFxyXG4gICwgaW5zaWRlOiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICAgIHZhciBib3ggPSB0aGlzLmJib3goKVxyXG5cclxuICAgICAgcmV0dXJuIHggPiBib3gueFxyXG4gICAgICAgICAgJiYgeSA+IGJveC55XHJcbiAgICAgICAgICAmJiB4IDwgYm94LnggKyBib3gud2lkdGhcclxuICAgICAgICAgICYmIHkgPCBib3gueSArIGJveC5oZWlnaHRcclxuICAgIH1cclxuICAgIC8vIFNob3cgZWxlbWVudFxyXG4gICwgc2hvdzogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnN0eWxlKCdkaXNwbGF5JywgJycpXHJcbiAgICB9XHJcbiAgICAvLyBIaWRlIGVsZW1lbnRcclxuICAsIGhpZGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5zdHlsZSgnZGlzcGxheScsICdub25lJylcclxuICAgIH1cclxuICAgIC8vIElzIGVsZW1lbnQgdmlzaWJsZT9cclxuICAsIHZpc2libGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5zdHlsZSgnZGlzcGxheScpICE9ICdub25lJ1xyXG4gICAgfVxyXG4gICAgLy8gUmV0dXJuIGlkIG9uIHN0cmluZyBjb252ZXJzaW9uXHJcbiAgLCB0b1N0cmluZzogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2lkJylcclxuICAgIH1cclxuICAgIC8vIFJldHVybiBhcnJheSBvZiBjbGFzc2VzIG9uIHRoZSBub2RlXHJcbiAgLCBjbGFzc2VzOiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGF0dHIgPSB0aGlzLmF0dHIoJ2NsYXNzJylcclxuXHJcbiAgICAgIHJldHVybiBhdHRyID09IG51bGwgPyBbXSA6IGF0dHIudHJpbSgpLnNwbGl0KFNWRy5yZWdleC5kZWxpbWl0ZXIpXHJcbiAgICB9XHJcbiAgICAvLyBSZXR1cm4gdHJ1ZSBpZiBjbGFzcyBleGlzdHMgb24gdGhlIG5vZGUsIGZhbHNlIG90aGVyd2lzZVxyXG4gICwgaGFzQ2xhc3M6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY2xhc3NlcygpLmluZGV4T2YobmFtZSkgIT0gLTFcclxuICAgIH1cclxuICAgIC8vIEFkZCBjbGFzcyB0byB0aGUgbm9kZVxyXG4gICwgYWRkQ2xhc3M6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgaWYgKCF0aGlzLmhhc0NsYXNzKG5hbWUpKSB7XHJcbiAgICAgICAgdmFyIGFycmF5ID0gdGhpcy5jbGFzc2VzKClcclxuICAgICAgICBhcnJheS5wdXNoKG5hbWUpXHJcbiAgICAgICAgdGhpcy5hdHRyKCdjbGFzcycsIGFycmF5LmpvaW4oJyAnKSlcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAgIC8vIFJlbW92ZSBjbGFzcyBmcm9tIHRoZSBub2RlXHJcbiAgLCByZW1vdmVDbGFzczogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICBpZiAodGhpcy5oYXNDbGFzcyhuYW1lKSkge1xyXG4gICAgICAgIHRoaXMuYXR0cignY2xhc3MnLCB0aGlzLmNsYXNzZXMoKS5maWx0ZXIoZnVuY3Rpb24oYykge1xyXG4gICAgICAgICAgcmV0dXJuIGMgIT0gbmFtZVxyXG4gICAgICAgIH0pLmpvaW4oJyAnKSlcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAgIC8vIFRvZ2dsZSB0aGUgcHJlc2VuY2Ugb2YgYSBjbGFzcyBvbiB0aGUgbm9kZVxyXG4gICwgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuaGFzQ2xhc3MobmFtZSkgPyB0aGlzLnJlbW92ZUNsYXNzKG5hbWUpIDogdGhpcy5hZGRDbGFzcyhuYW1lKVxyXG4gICAgfVxyXG4gICAgLy8gR2V0IHJlZmVyZW5jZWQgZWxlbWVudCBmb3JtIGF0dHJpYnV0ZSB2YWx1ZVxyXG4gICwgcmVmZXJlbmNlOiBmdW5jdGlvbihhdHRyKSB7XHJcbiAgICAgIHJldHVybiBTVkcuZ2V0KHRoaXMuYXR0cihhdHRyKSlcclxuICAgIH1cclxuICAgIC8vIFJldHVybnMgdGhlIHBhcmVudCBlbGVtZW50IGluc3RhbmNlXHJcbiAgLCBwYXJlbnQ6IGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgICAgdmFyIHBhcmVudCA9IHRoaXNcclxuXHJcbiAgICAgIC8vIGNoZWNrIGZvciBwYXJlbnRcclxuICAgICAgaWYoIXBhcmVudC5ub2RlLnBhcmVudE5vZGUpIHJldHVybiBudWxsXHJcblxyXG4gICAgICAvLyBnZXQgcGFyZW50IGVsZW1lbnRcclxuICAgICAgcGFyZW50ID0gU1ZHLmFkb3B0KHBhcmVudC5ub2RlLnBhcmVudE5vZGUpXHJcblxyXG4gICAgICBpZighdHlwZSkgcmV0dXJuIHBhcmVudFxyXG5cclxuICAgICAgLy8gbG9vcCB0cm91Z2ggYW5jZXN0b3JzIGlmIHR5cGUgaXMgZ2l2ZW5cclxuICAgICAgd2hpbGUocGFyZW50ICYmIHBhcmVudC5ub2RlIGluc3RhbmNlb2Ygd2luZG93LlNWR0VsZW1lbnQpe1xyXG4gICAgICAgIGlmKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyA/IHBhcmVudC5tYXRjaGVzKHR5cGUpIDogcGFyZW50IGluc3RhbmNlb2YgdHlwZSkgcmV0dXJuIHBhcmVudFxyXG4gICAgICAgIGlmKCFwYXJlbnQubm9kZS5wYXJlbnROb2RlIHx8IHBhcmVudC5ub2RlLnBhcmVudE5vZGUubm9kZU5hbWUgPT0gJyNkb2N1bWVudCcgfHwgcGFyZW50Lm5vZGUucGFyZW50Tm9kZS5ub2RlTmFtZSA9PSAnI2RvY3VtZW50LWZyYWdtZW50JykgcmV0dXJuIG51bGwgLy8gIzc1OSwgIzcyMFxyXG4gICAgICAgIHBhcmVudCA9IFNWRy5hZG9wdChwYXJlbnQubm9kZS5wYXJlbnROb2RlKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBHZXQgcGFyZW50IGRvY3VtZW50XHJcbiAgLCBkb2M6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIFNWRy5Eb2MgPyB0aGlzIDogdGhpcy5wYXJlbnQoU1ZHLkRvYylcclxuICAgIH1cclxuICAgIC8vIHJldHVybiBhcnJheSBvZiBhbGwgYW5jZXN0b3JzIG9mIGdpdmVuIHR5cGUgdXAgdG8gdGhlIHJvb3Qgc3ZnXHJcbiAgLCBwYXJlbnRzOiBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgIHZhciBwYXJlbnRzID0gW10sIHBhcmVudCA9IHRoaXNcclxuXHJcbiAgICAgIGRve1xyXG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQodHlwZSlcclxuICAgICAgICBpZighcGFyZW50IHx8ICFwYXJlbnQubm9kZSkgYnJlYWtcclxuXHJcbiAgICAgICAgcGFyZW50cy5wdXNoKHBhcmVudClcclxuICAgICAgfSB3aGlsZShwYXJlbnQucGFyZW50KVxyXG5cclxuICAgICAgcmV0dXJuIHBhcmVudHNcclxuICAgIH1cclxuICAgIC8vIG1hdGNoZXMgdGhlIGVsZW1lbnQgdnMgYSBjc3Mgc2VsZWN0b3JcclxuICAsIG1hdGNoZXM6IGZ1bmN0aW9uKHNlbGVjdG9yKXtcclxuICAgICAgcmV0dXJuIG1hdGNoZXModGhpcy5ub2RlLCBzZWxlY3RvcilcclxuICAgIH1cclxuICAgIC8vIFJldHVybnMgdGhlIHN2ZyBub2RlIHRvIGNhbGwgbmF0aXZlIHN2ZyBtZXRob2RzIG9uIGl0XHJcbiAgLCBuYXRpdmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5ub2RlXHJcbiAgICB9XHJcbiAgICAvLyBJbXBvcnQgcmF3IHN2Z1xyXG4gICwgc3ZnOiBmdW5jdGlvbihzdmcpIHtcclxuICAgICAgLy8gY3JlYXRlIHRlbXBvcmFyeSBob2xkZXJcclxuICAgICAgdmFyIHdlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdmcnKVxyXG5cclxuICAgICAgLy8gYWN0IGFzIGEgc2V0dGVyIGlmIHN2ZyBpcyBnaXZlblxyXG4gICAgICBpZiAoc3ZnICYmIHRoaXMgaW5zdGFuY2VvZiBTVkcuUGFyZW50KSB7XHJcbiAgICAgICAgLy8gZHVtcCByYXcgc3ZnXHJcbiAgICAgICAgd2VsbC5pbm5lckhUTUwgPSAnPHN2Zz4nICsgc3ZnLnJlcGxhY2UoL1xcbi8sICcnKS5yZXBsYWNlKC88KFtcXHc6LV0rKShbXjxdKz8pXFwvPi9nLCAnPCQxJDI+PC8kMT4nKSArICc8L3N2Zz4nXHJcblxyXG4gICAgICAgIC8vIHRyYW5zcGxhbnQgbm9kZXNcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSB3ZWxsLmZpcnN0Q2hpbGQuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKHdlbGwuZmlyc3RDaGlsZC5maXJzdENoaWxkKVxyXG5cclxuICAgICAgLy8gb3RoZXJ3aXNlIGFjdCBhcyBhIGdldHRlclxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIGNyZWF0ZSBhIHdyYXBwaW5nIHN2ZyBlbGVtZW50IGluIGNhc2Ugb2YgcGFydGlhbCBjb250ZW50XHJcbiAgICAgICAgd2VsbC5hcHBlbmRDaGlsZChzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdmcnKSlcclxuXHJcbiAgICAgICAgLy8gd3JpdGUgc3ZnanMgZGF0YSB0byB0aGUgZG9tXHJcbiAgICAgICAgdGhpcy53cml0ZURhdGFUb0RvbSgpXHJcblxyXG4gICAgICAgIC8vIGluc2VydCBhIGNvcHkgb2YgdGhpcyBub2RlXHJcbiAgICAgICAgc3ZnLmFwcGVuZENoaWxkKHRoaXMubm9kZS5jbG9uZU5vZGUodHJ1ZSkpXHJcblxyXG4gICAgICAgIC8vIHJldHVybiB0YXJnZXQgZWxlbWVudFxyXG4gICAgICAgIHJldHVybiB3ZWxsLmlubmVySFRNTC5yZXBsYWNlKC9ePHN2Zz4vLCAnJykucmVwbGFjZSgvPFxcL3N2Zz4kLywgJycpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcbiAgLy8gd3JpdGUgc3ZnanMgZGF0YSB0byB0aGUgZG9tXHJcbiAgLCB3cml0ZURhdGFUb0RvbTogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAvLyBkdW1wIHZhcmlhYmxlcyByZWN1cnNpdmVseVxyXG4gICAgICBpZih0aGlzLmVhY2ggfHwgdGhpcy5saW5lcyl7XHJcbiAgICAgICAgdmFyIGZuID0gdGhpcy5lYWNoID8gdGhpcyA6IHRoaXMubGluZXMoKTtcclxuICAgICAgICBmbi5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICB0aGlzLndyaXRlRGF0YVRvRG9tKClcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyByZW1vdmUgcHJldmlvdXNseSBzZXQgZGF0YVxyXG4gICAgICB0aGlzLm5vZGUucmVtb3ZlQXR0cmlidXRlKCdzdmdqczpkYXRhJylcclxuXHJcbiAgICAgIGlmKE9iamVjdC5rZXlzKHRoaXMuZG9tKS5sZW5ndGgpXHJcbiAgICAgICAgdGhpcy5ub2RlLnNldEF0dHJpYnV0ZSgnc3ZnanM6ZGF0YScsIEpTT04uc3RyaW5naWZ5KHRoaXMuZG9tKSkgLy8gc2VlICM0MjhcclxuXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcbiAgLy8gc2V0IGdpdmVuIGRhdGEgdG8gdGhlIGVsZW1lbnRzIGRhdGEgcHJvcGVydHlcclxuICAsIHNldERhdGE6IGZ1bmN0aW9uKG8pe1xyXG4gICAgICB0aGlzLmRvbSA9IG9cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAsIGlzOiBmdW5jdGlvbihvYmope1xyXG4gICAgICByZXR1cm4gaXModGhpcywgb2JqKVxyXG4gICAgfVxyXG4gIH1cclxufSlcclxuXG5TVkcuZWFzaW5nID0ge1xyXG4gICctJzogZnVuY3Rpb24ocG9zKXtyZXR1cm4gcG9zfVxyXG4sICc8Pic6ZnVuY3Rpb24ocG9zKXtyZXR1cm4gLU1hdGguY29zKHBvcyAqIE1hdGguUEkpIC8gMiArIDAuNX1cclxuLCAnPic6IGZ1bmN0aW9uKHBvcyl7cmV0dXJuICBNYXRoLnNpbihwb3MgKiBNYXRoLlBJIC8gMil9XHJcbiwgJzwnOiBmdW5jdGlvbihwb3Mpe3JldHVybiAtTWF0aC5jb3MocG9zICogTWF0aC5QSSAvIDIpICsgMX1cclxufVxyXG5cclxuU1ZHLm1vcnBoID0gZnVuY3Rpb24ocG9zKXtcclxuICByZXR1cm4gZnVuY3Rpb24oZnJvbSwgdG8pIHtcclxuICAgIHJldHVybiBuZXcgU1ZHLk1vcnBoT2JqKGZyb20sIHRvKS5hdChwb3MpXHJcbiAgfVxyXG59XHJcblxyXG5TVkcuU2l0dWF0aW9uID0gU1ZHLmludmVudCh7XHJcblxyXG4gIGNyZWF0ZTogZnVuY3Rpb24obyl7XHJcbiAgICB0aGlzLmluaXQgPSBmYWxzZVxyXG4gICAgdGhpcy5yZXZlcnNlZCA9IGZhbHNlXHJcbiAgICB0aGlzLnJldmVyc2luZyA9IGZhbHNlXHJcblxyXG4gICAgdGhpcy5kdXJhdGlvbiA9IG5ldyBTVkcuTnVtYmVyKG8uZHVyYXRpb24pLnZhbHVlT2YoKVxyXG4gICAgdGhpcy5kZWxheSA9IG5ldyBTVkcuTnVtYmVyKG8uZGVsYXkpLnZhbHVlT2YoKVxyXG5cclxuICAgIHRoaXMuc3RhcnQgPSArbmV3IERhdGUoKSArIHRoaXMuZGVsYXlcclxuICAgIHRoaXMuZmluaXNoID0gdGhpcy5zdGFydCArIHRoaXMuZHVyYXRpb25cclxuICAgIHRoaXMuZWFzZSA9IG8uZWFzZVxyXG5cclxuICAgIC8vIHRoaXMubG9vcCBpcyBpbmNyZW1lbnRlZCBmcm9tIDAgdG8gdGhpcy5sb29wc1xyXG4gICAgLy8gaXQgaXMgYWxzbyBpbmNyZW1lbnRlZCB3aGVuIGluIGFuIGluZmluaXRlIGxvb3AgKHdoZW4gdGhpcy5sb29wcyBpcyB0cnVlKVxyXG4gICAgdGhpcy5sb29wID0gMFxyXG4gICAgdGhpcy5sb29wcyA9IGZhbHNlXHJcblxyXG4gICAgdGhpcy5hbmltYXRpb25zID0ge1xyXG4gICAgICAvLyBmdW5jdGlvblRvQ2FsbDogW2xpc3Qgb2YgbW9ycGhhYmxlIG9iamVjdHNdXHJcbiAgICAgIC8vIGUuZy4gbW92ZTogW1NWRy5OdW1iZXIsIFNWRy5OdW1iZXJdXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5hdHRycyA9IHtcclxuICAgICAgLy8gaG9sZHMgYWxsIGF0dHJpYnV0ZXMgd2hpY2ggYXJlIG5vdCByZXByZXNlbnRlZCBmcm9tIGEgZnVuY3Rpb24gc3ZnLmpzIHByb3ZpZGVzXHJcbiAgICAgIC8vIGUuZy4gc29tZUF0dHI6IFNWRy5OdW1iZXJcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnN0eWxlcyA9IHtcclxuICAgICAgLy8gaG9sZHMgYWxsIHN0eWxlcyB3aGljaCBzaG91bGQgYmUgYW5pbWF0ZWRcclxuICAgICAgLy8gZS5nLiBmaWxsLWNvbG9yOiBTVkcuQ29sb3JcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnRyYW5zZm9ybXMgPSBbXHJcbiAgICAgIC8vIGhvbGRzIGFsbCB0cmFuc2Zvcm1hdGlvbnMgYXMgdHJhbnNmb3JtYXRpb24gb2JqZWN0c1xyXG4gICAgICAvLyBlLmcuIFtTVkcuUm90YXRlLCBTVkcuVHJhbnNsYXRlLCBTVkcuTWF0cml4XVxyXG4gICAgXVxyXG5cclxuICAgIHRoaXMub25jZSA9IHtcclxuICAgICAgLy8gZnVuY3Rpb25zIHRvIGZpcmUgYXQgYSBzcGVjaWZpYyBwb3NpdGlvblxyXG4gICAgICAvLyBlLmcuIFwiMC41XCI6IGZ1bmN0aW9uIGZvbygpe31cclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxufSlcclxuXHJcblxyXG5TVkcuRlggPSBTVkcuaW52ZW50KHtcclxuXHJcbiAgY3JlYXRlOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICB0aGlzLl90YXJnZXQgPSBlbGVtZW50XHJcbiAgICB0aGlzLnNpdHVhdGlvbnMgPSBbXVxyXG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZVxyXG4gICAgdGhpcy5zaXR1YXRpb24gPSBudWxsXHJcbiAgICB0aGlzLnBhdXNlZCA9IGZhbHNlXHJcbiAgICB0aGlzLmxhc3RQb3MgPSAwXHJcbiAgICB0aGlzLnBvcyA9IDBcclxuICAgIC8vIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiBhbiBhbmltYXRpb24gaXMgaXRzIHBvc2l0aW9uIGluIHRoZSBjb250ZXh0IG9mIGl0cyBjb21wbGV0ZSBkdXJhdGlvbiAoaW5jbHVkaW5nIGRlbGF5IGFuZCBsb29wcylcclxuICAgIC8vIFdoZW4gcGVyZm9ybWluZyBhIGRlbGF5LCBhYnNQb3MgaXMgYmVsb3cgMCBhbmQgd2hlbiBwZXJmb3JtaW5nIGEgbG9vcCwgaXRzIHZhbHVlIGlzIGFib3ZlIDFcclxuICAgIHRoaXMuYWJzUG9zID0gMFxyXG4gICAgdGhpcy5fc3BlZWQgPSAxXHJcbiAgfVxyXG5cclxuLCBleHRlbmQ6IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHNldHMgb3IgcmV0dXJucyB0aGUgdGFyZ2V0IG9mIHRoaXMgYW5pbWF0aW9uXHJcbiAgICAgKiBAcGFyYW0gbyBvYmplY3QgfHwgbnVtYmVyIEluIGNhc2Ugb2YgT2JqZWN0IGl0IGhvbGRzIGFsbCBwYXJhbWV0ZXJzLiBJbiBjYXNlIG9mIG51bWJlciBpdHMgdGhlIGR1cmF0aW9uIG9mIHRoZSBhbmltYXRpb25cclxuICAgICAqIEBwYXJhbSBlYXNlIGZ1bmN0aW9uIHx8IHN0cmluZyBGdW5jdGlvbiB3aGljaCBzaG91bGQgYmUgdXNlZCBmb3IgZWFzaW5nIG9yIGVhc2luZyBrZXl3b3JkXHJcbiAgICAgKiBAcGFyYW0gZGVsYXkgTnVtYmVyIGluZGljYXRpbmcgdGhlIGRlbGF5IGJlZm9yZSB0aGUgYW5pbWF0aW9uIHN0YXJ0c1xyXG4gICAgICogQHJldHVybiB0YXJnZXQgfHwgdGhpc1xyXG4gICAgICovXHJcbiAgICBhbmltYXRlOiBmdW5jdGlvbihvLCBlYXNlLCBkZWxheSl7XHJcblxyXG4gICAgICBpZih0eXBlb2YgbyA9PSAnb2JqZWN0Jyl7XHJcbiAgICAgICAgZWFzZSA9IG8uZWFzZVxyXG4gICAgICAgIGRlbGF5ID0gby5kZWxheVxyXG4gICAgICAgIG8gPSBvLmR1cmF0aW9uXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBzaXR1YXRpb24gPSBuZXcgU1ZHLlNpdHVhdGlvbih7XHJcbiAgICAgICAgZHVyYXRpb246IG8gfHwgMTAwMCxcclxuICAgICAgICBkZWxheTogZGVsYXkgfHwgMCxcclxuICAgICAgICBlYXNlOiBTVkcuZWFzaW5nW2Vhc2UgfHwgJy0nXSB8fCBlYXNlXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICB0aGlzLnF1ZXVlKHNpdHVhdGlvbilcclxuXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBzZXRzIGEgZGVsYXkgYmVmb3JlIHRoZSBuZXh0IGVsZW1lbnQgb2YgdGhlIHF1ZXVlIGlzIGNhbGxlZFxyXG4gICAgICogQHBhcmFtIGRlbGF5IER1cmF0aW9uIG9mIGRlbGF5IGluIG1pbGxpc2Vjb25kc1xyXG4gICAgICogQHJldHVybiB0aGlzLnRhcmdldCgpXHJcbiAgICAgKi9cclxuICAsIGRlbGF5OiBmdW5jdGlvbihkZWxheSl7XHJcbiAgICAgIC8vIFRoZSBkZWxheSBpcyBwZXJmb3JtZWQgYnkgYW4gZW1wdHkgc2l0dWF0aW9uIHdpdGggaXRzIGR1cmF0aW9uXHJcbiAgICAgIC8vIGF0dHJpYnV0ZSBzZXQgdG8gdGhlIGR1cmF0aW9uIG9mIHRoZSBkZWxheVxyXG4gICAgICB2YXIgc2l0dWF0aW9uID0gbmV3IFNWRy5TaXR1YXRpb24oe1xyXG4gICAgICAgIGR1cmF0aW9uOiBkZWxheSxcclxuICAgICAgICBkZWxheTogMCxcclxuICAgICAgICBlYXNlOiBTVkcuZWFzaW5nWyctJ11cclxuICAgICAgfSlcclxuXHJcbiAgICAgIHJldHVybiB0aGlzLnF1ZXVlKHNpdHVhdGlvbilcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHNldHMgb3IgcmV0dXJucyB0aGUgdGFyZ2V0IG9mIHRoaXMgYW5pbWF0aW9uXHJcbiAgICAgKiBAcGFyYW0gbnVsbCB8fCB0YXJnZXQgU1ZHLkVsZW1lbnQgd2hpY2ggc2hvdWxkIGJlIHNldCBhcyBuZXcgdGFyZ2V0XHJcbiAgICAgKiBAcmV0dXJuIHRhcmdldCB8fCB0aGlzXHJcbiAgICAgKi9cclxuICAsIHRhcmdldDogZnVuY3Rpb24odGFyZ2V0KXtcclxuICAgICAgaWYodGFyZ2V0ICYmIHRhcmdldCBpbnN0YW5jZW9mIFNWRy5FbGVtZW50KXtcclxuICAgICAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXRcclxuICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV0dXJucyB0aGUgYWJzb2x1dGUgcG9zaXRpb24gYXQgYSBnaXZlbiB0aW1lXHJcbiAgLCB0aW1lVG9BYnNQb3M6IGZ1bmN0aW9uKHRpbWVzdGFtcCl7XHJcbiAgICAgIHJldHVybiAodGltZXN0YW1wIC0gdGhpcy5zaXR1YXRpb24uc3RhcnQpIC8gKHRoaXMuc2l0dWF0aW9uLmR1cmF0aW9uL3RoaXMuX3NwZWVkKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHJldHVybnMgdGhlIHRpbWVzdGFtcCBmcm9tIGEgZ2l2ZW4gYWJzb2x1dGUgcG9zaXRvblxyXG4gICwgYWJzUG9zVG9UaW1lOiBmdW5jdGlvbihhYnNQb3Mpe1xyXG4gICAgICByZXR1cm4gdGhpcy5zaXR1YXRpb24uZHVyYXRpb24vdGhpcy5fc3BlZWQgKiBhYnNQb3MgKyB0aGlzLnNpdHVhdGlvbi5zdGFydFxyXG4gICAgfVxyXG5cclxuICAgIC8vIHN0YXJ0cyB0aGUgYW5pbWF0aW9ubG9vcFxyXG4gICwgc3RhcnRBbmltRnJhbWU6IGZ1bmN0aW9uKCl7XHJcbiAgICAgIHRoaXMuc3RvcEFuaW1GcmFtZSgpXHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7IHRoaXMuc3RlcCgpIH0uYmluZCh0aGlzKSlcclxuICAgIH1cclxuXHJcbiAgICAvLyBjYW5jZWxzIHRoZSBhbmltYXRpb25mcmFtZVxyXG4gICwgc3RvcEFuaW1GcmFtZTogZnVuY3Rpb24oKXtcclxuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uRnJhbWUpXHJcbiAgICB9XHJcblxyXG4gICAgLy8ga2lja3Mgb2ZmIHRoZSBhbmltYXRpb24gLSBvbmx5IGRvZXMgc29tZXRoaW5nIHdoZW4gdGhlIHF1ZXVlIGlzIGN1cnJlbnRseSBub3QgYWN0aXZlIGFuZCBhdCBsZWFzdCBvbmUgc2l0dWF0aW9uIGlzIHNldFxyXG4gICwgc3RhcnQ6IGZ1bmN0aW9uKCl7XHJcbiAgICAgIC8vIGRvbnQgc3RhcnQgaWYgYWxyZWFkeSBzdGFydGVkXHJcbiAgICAgIGlmKCF0aGlzLmFjdGl2ZSAmJiB0aGlzLnNpdHVhdGlvbil7XHJcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlXHJcbiAgICAgICAgdGhpcy5zdGFydEN1cnJlbnQoKVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHN0YXJ0IHRoZSBjdXJyZW50IHNpdHVhdGlvblxyXG4gICwgc3RhcnRDdXJyZW50OiBmdW5jdGlvbigpe1xyXG4gICAgICB0aGlzLnNpdHVhdGlvbi5zdGFydCA9ICtuZXcgRGF0ZSArIHRoaXMuc2l0dWF0aW9uLmRlbGF5L3RoaXMuX3NwZWVkXHJcbiAgICAgIHRoaXMuc2l0dWF0aW9uLmZpbmlzaCA9IHRoaXMuc2l0dWF0aW9uLnN0YXJ0ICsgdGhpcy5zaXR1YXRpb24uZHVyYXRpb24vdGhpcy5fc3BlZWRcclxuICAgICAgcmV0dXJuIHRoaXMuaW5pdEFuaW1hdGlvbnMoKS5zdGVwKClcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZHMgYSBmdW5jdGlvbiAvIFNpdHVhdGlvbiB0byB0aGUgYW5pbWF0aW9uIHF1ZXVlXHJcbiAgICAgKiBAcGFyYW0gZm4gZnVuY3Rpb24gLyBzaXR1YXRpb24gdG8gYWRkXHJcbiAgICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICAqL1xyXG4gICwgcXVldWU6IGZ1bmN0aW9uKGZuKXtcclxuICAgICAgaWYodHlwZW9mIGZuID09ICdmdW5jdGlvbicgfHwgZm4gaW5zdGFuY2VvZiBTVkcuU2l0dWF0aW9uKVxyXG4gICAgICAgIHRoaXMuc2l0dWF0aW9ucy5wdXNoKGZuKVxyXG5cclxuICAgICAgaWYoIXRoaXMuc2l0dWF0aW9uKSB0aGlzLnNpdHVhdGlvbiA9IHRoaXMuc2l0dWF0aW9ucy5zaGlmdCgpXHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcHVsbHMgbmV4dCBlbGVtZW50IGZyb20gdGhlIHF1ZXVlIGFuZCBleGVjdXRlIGl0XHJcbiAgICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICAqL1xyXG4gICwgZGVxdWV1ZTogZnVuY3Rpb24oKXtcclxuICAgICAgLy8gc3RvcCBjdXJyZW50IGFuaW1hdGlvblxyXG4gICAgICB0aGlzLnN0b3AoKVxyXG5cclxuICAgICAgLy8gZ2V0IG5leHQgYW5pbWF0aW9uIGZyb20gcXVldWVcclxuICAgICAgdGhpcy5zaXR1YXRpb24gPSB0aGlzLnNpdHVhdGlvbnMuc2hpZnQoKVxyXG5cclxuICAgICAgaWYodGhpcy5zaXR1YXRpb24pe1xyXG4gICAgICAgIGlmKHRoaXMuc2l0dWF0aW9uIGluc3RhbmNlb2YgU1ZHLlNpdHVhdGlvbikge1xyXG4gICAgICAgICAgdGhpcy5zdGFydCgpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIElmIGl0IGlzIG5vdCBhIFNWRy5TaXR1YXRpb24sIHRoZW4gaXQgaXMgYSBmdW5jdGlvbiwgd2UgZXhlY3V0ZSBpdFxyXG4gICAgICAgICAgdGhpcy5zaXR1YXRpb24uY2FsbCh0aGlzKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuXHJcbiAgICAvLyB1cGRhdGVzIGFsbCBhbmltYXRpb25zIHRvIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBlbGVtZW50XHJcbiAgICAvLyB0aGlzIGlzIGltcG9ydGFudCB3aGVuIG9uZSBwcm9wZXJ0eSBjb3VsZCBiZSBjaGFuZ2VkIGZyb20gYW5vdGhlciBwcm9wZXJ0eVxyXG4gICwgaW5pdEFuaW1hdGlvbnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgaSwgaiwgc291cmNlXHJcbiAgICAgIHZhciBzID0gdGhpcy5zaXR1YXRpb25cclxuXHJcbiAgICAgIGlmKHMuaW5pdCkgcmV0dXJuIHRoaXNcclxuXHJcbiAgICAgIGZvcihpIGluIHMuYW5pbWF0aW9ucyl7XHJcbiAgICAgICAgc291cmNlID0gdGhpcy50YXJnZXQoKVtpXSgpXHJcblxyXG4gICAgICAgIGlmKCFBcnJheS5pc0FycmF5KHNvdXJjZSkpIHtcclxuICAgICAgICAgIHNvdXJjZSA9IFtzb3VyY2VdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZighQXJyYXkuaXNBcnJheShzLmFuaW1hdGlvbnNbaV0pKSB7XHJcbiAgICAgICAgICBzLmFuaW1hdGlvbnNbaV0gPSBbcy5hbmltYXRpb25zW2ldXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9pZihzLmFuaW1hdGlvbnNbaV0ubGVuZ3RoID4gc291cmNlLmxlbmd0aCkge1xyXG4gICAgICAgIC8vICBzb3VyY2UuY29uY2F0ID0gc291cmNlLmNvbmNhdChzLmFuaW1hdGlvbnNbaV0uc2xpY2Uoc291cmNlLmxlbmd0aCwgcy5hbmltYXRpb25zW2ldLmxlbmd0aCkpXHJcbiAgICAgICAgLy99XHJcblxyXG4gICAgICAgIGZvcihqID0gc291cmNlLmxlbmd0aDsgai0tOykge1xyXG4gICAgICAgICAgLy8gVGhlIGNvbmRpdGlvbiBpcyBiZWNhdXNlIHNvbWUgbWV0aG9kcyByZXR1cm4gYSBub3JtYWwgbnVtYmVyIGluc3RlYWRcclxuICAgICAgICAgIC8vIG9mIGEgU1ZHLk51bWJlclxyXG4gICAgICAgICAgaWYocy5hbmltYXRpb25zW2ldW2pdIGluc3RhbmNlb2YgU1ZHLk51bWJlcilcclxuICAgICAgICAgICAgc291cmNlW2pdID0gbmV3IFNWRy5OdW1iZXIoc291cmNlW2pdKVxyXG5cclxuICAgICAgICAgIHMuYW5pbWF0aW9uc1tpXVtqXSA9IHNvdXJjZVtqXS5tb3JwaChzLmFuaW1hdGlvbnNbaV1bal0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IoaSBpbiBzLmF0dHJzKXtcclxuICAgICAgICBzLmF0dHJzW2ldID0gbmV3IFNWRy5Nb3JwaE9iaih0aGlzLnRhcmdldCgpLmF0dHIoaSksIHMuYXR0cnNbaV0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvcihpIGluIHMuc3R5bGVzKXtcclxuICAgICAgICBzLnN0eWxlc1tpXSA9IG5ldyBTVkcuTW9ycGhPYmoodGhpcy50YXJnZXQoKS5zdHlsZShpKSwgcy5zdHlsZXNbaV0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHMuaW5pdGlhbFRyYW5zZm9ybWF0aW9uID0gdGhpcy50YXJnZXQoKS5tYXRyaXhpZnkoKVxyXG5cclxuICAgICAgcy5pbml0ID0gdHJ1ZVxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG4gICwgY2xlYXJRdWV1ZTogZnVuY3Rpb24oKXtcclxuICAgICAgdGhpcy5zaXR1YXRpb25zID0gW11cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAsIGNsZWFyQ3VycmVudDogZnVuY3Rpb24oKXtcclxuICAgICAgdGhpcy5zaXR1YXRpb24gPSBudWxsXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcbiAgICAvKiogc3RvcHMgdGhlIGFuaW1hdGlvbiBpbW1lZGlhdGVseVxyXG4gICAgICogQHBhcmFtIGp1bXBUb0VuZCBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRvIGNvbXBsZXRlIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBpbW1lZGlhdGVseS5cclxuICAgICAqIEBwYXJhbSBjbGVhclF1ZXVlIEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gcmVtb3ZlIHF1ZXVlZCBhbmltYXRpb24gYXMgd2VsbC5cclxuICAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgICovXHJcbiAgLCBzdG9wOiBmdW5jdGlvbihqdW1wVG9FbmQsIGNsZWFyUXVldWUpe1xyXG4gICAgICB2YXIgYWN0aXZlID0gdGhpcy5hY3RpdmVcclxuICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZVxyXG5cclxuICAgICAgaWYoY2xlYXJRdWV1ZSl7XHJcbiAgICAgICAgdGhpcy5jbGVhclF1ZXVlKClcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYoanVtcFRvRW5kICYmIHRoaXMuc2l0dWF0aW9uKXtcclxuICAgICAgICAvLyBpbml0aWFsaXplIHRoZSBzaXR1YXRpb24gaWYgaXQgd2FzIG5vdFxyXG4gICAgICAgICFhY3RpdmUgJiYgdGhpcy5zdGFydEN1cnJlbnQoKVxyXG4gICAgICAgIHRoaXMuYXRFbmQoKVxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnN0b3BBbmltRnJhbWUoKVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuY2xlYXJDdXJyZW50KClcclxuICAgIH1cclxuXHJcbiAgICAvKiogcmVzZXRzIHRoZSBlbGVtZW50IHRvIHRoZSBzdGF0ZSB3aGVyZSB0aGUgY3VycmVudCBlbGVtZW50IGhhcyBzdGFydGVkXHJcbiAgICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICAqL1xyXG4gICwgcmVzZXQ6IGZ1bmN0aW9uKCl7XHJcbiAgICAgIGlmKHRoaXMuc2l0dWF0aW9uKXtcclxuICAgICAgICB2YXIgdGVtcCA9IHRoaXMuc2l0dWF0aW9uXHJcbiAgICAgICAgdGhpcy5zdG9wKClcclxuICAgICAgICB0aGlzLnNpdHVhdGlvbiA9IHRlbXBcclxuICAgICAgICB0aGlzLmF0U3RhcnQoKVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RvcCB0aGUgY3VycmVudGx5LXJ1bm5pbmcgYW5pbWF0aW9uLCByZW1vdmUgYWxsIHF1ZXVlZCBhbmltYXRpb25zLCBhbmQgY29tcGxldGUgYWxsIGFuaW1hdGlvbnMgZm9yIHRoZSBlbGVtZW50LlxyXG4gICwgZmluaXNoOiBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgdGhpcy5zdG9wKHRydWUsIGZhbHNlKVxyXG5cclxuICAgICAgd2hpbGUodGhpcy5kZXF1ZXVlKCkuc2l0dWF0aW9uICYmIHRoaXMuc3RvcCh0cnVlLCBmYWxzZSkpO1xyXG5cclxuICAgICAgdGhpcy5jbGVhclF1ZXVlKCkuY2xlYXJDdXJyZW50KClcclxuXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcblxyXG4gICAgLy8gc2V0IHRoZSBpbnRlcm5hbCBhbmltYXRpb24gcG9pbnRlciBhdCB0aGUgc3RhcnQgcG9zaXRpb24sIGJlZm9yZSBhbnkgbG9vcHMsIGFuZCB1cGRhdGVzIHRoZSB2aXN1YWxpc2F0aW9uXHJcbiAgLCBhdFN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuYXQoMCwgdHJ1ZSlcclxuICAgIH1cclxuXHJcbiAgICAvLyBzZXQgdGhlIGludGVybmFsIGFuaW1hdGlvbiBwb2ludGVyIGF0IHRoZSBlbmQgcG9zaXRpb24sIGFmdGVyIGFsbCB0aGUgbG9vcHMsIGFuZCB1cGRhdGVzIHRoZSB2aXN1YWxpc2F0aW9uXHJcbiAgLCBhdEVuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICh0aGlzLnNpdHVhdGlvbi5sb29wcyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIC8vIElmIGluIGEgaW5maW5pdGUgbG9vcCwgd2UgZW5kIHRoZSBjdXJyZW50IGl0ZXJhdGlvblxyXG4gICAgICAgIHRoaXMuc2l0dWF0aW9uLmxvb3BzID0gdGhpcy5zaXR1YXRpb24ubG9vcCArIDFcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYodHlwZW9mIHRoaXMuc2l0dWF0aW9uLmxvb3BzID09ICdudW1iZXInKSB7XHJcbiAgICAgICAgLy8gSWYgcGVyZm9ybWluZyBhIGZpbml0ZSBudW1iZXIgb2YgbG9vcHMsIHdlIGdvIGFmdGVyIGFsbCB0aGUgbG9vcHNcclxuICAgICAgICByZXR1cm4gdGhpcy5hdCh0aGlzLnNpdHVhdGlvbi5sb29wcywgdHJ1ZSlcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBJZiBubyBsb29wcywgd2UganVzdCBnbyBhdCB0aGUgZW5kXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXQoMSwgdHJ1ZSlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHNldCB0aGUgaW50ZXJuYWwgYW5pbWF0aW9uIHBvaW50ZXIgdG8gdGhlIHNwZWNpZmllZCBwb3NpdGlvbiBhbmQgdXBkYXRlcyB0aGUgdmlzdWFsaXNhdGlvblxyXG4gICAgLy8gaWYgaXNBYnNQb3MgaXMgdHJ1ZSwgcG9zIGlzIHRyZWF0ZWQgYXMgYW4gYWJzb2x1dGUgcG9zaXRpb25cclxuICAsIGF0OiBmdW5jdGlvbihwb3MsIGlzQWJzUG9zKXtcclxuICAgICAgdmFyIGR1ckRpdlNwZCA9IHRoaXMuc2l0dWF0aW9uLmR1cmF0aW9uL3RoaXMuX3NwZWVkXHJcblxyXG4gICAgICB0aGlzLmFic1BvcyA9IHBvc1xyXG4gICAgICAvLyBJZiBwb3MgaXMgbm90IGFuIGFic29sdXRlIHBvc2l0aW9uLCB3ZSBjb252ZXJ0IGl0IGludG8gb25lXHJcbiAgICAgIGlmICghaXNBYnNQb3MpIHtcclxuICAgICAgICBpZiAodGhpcy5zaXR1YXRpb24ucmV2ZXJzZWQpIHRoaXMuYWJzUG9zID0gMSAtIHRoaXMuYWJzUG9zXHJcbiAgICAgICAgdGhpcy5hYnNQb3MgKz0gdGhpcy5zaXR1YXRpb24ubG9vcFxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnNpdHVhdGlvbi5zdGFydCA9ICtuZXcgRGF0ZSAtIHRoaXMuYWJzUG9zICogZHVyRGl2U3BkXHJcbiAgICAgIHRoaXMuc2l0dWF0aW9uLmZpbmlzaCA9IHRoaXMuc2l0dWF0aW9uLnN0YXJ0ICsgZHVyRGl2U3BkXHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5zdGVwKHRydWUpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBzZXRzIG9yIHJldHVybnMgdGhlIHNwZWVkIG9mIHRoZSBhbmltYXRpb25zXHJcbiAgICAgKiBAcGFyYW0gc3BlZWQgbnVsbCB8fCBOdW1iZXIgVGhlIG5ldyBzcGVlZCBvZiB0aGUgYW5pbWF0aW9uc1xyXG4gICAgICogQHJldHVybiBOdW1iZXIgfHwgdGhpc1xyXG4gICAgICovXHJcbiAgLCBzcGVlZDogZnVuY3Rpb24oc3BlZWQpe1xyXG4gICAgICBpZiAoc3BlZWQgPT09IDApIHJldHVybiB0aGlzLnBhdXNlKClcclxuXHJcbiAgICAgIGlmIChzcGVlZCkge1xyXG4gICAgICAgIHRoaXMuX3NwZWVkID0gc3BlZWRcclxuICAgICAgICAvLyBXZSB1c2UgYW4gYWJzb2x1dGUgcG9zaXRpb24gaGVyZSBzbyB0aGF0IHNwZWVkIGNhbiBhZmZlY3QgdGhlIGRlbGF5IGJlZm9yZSB0aGUgYW5pbWF0aW9uXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXQodGhpcy5hYnNQb3MsIHRydWUpXHJcbiAgICAgIH0gZWxzZSByZXR1cm4gdGhpcy5fc3BlZWRcclxuICAgIH1cclxuXHJcbiAgICAvLyBNYWtlIGxvb3BhYmxlXHJcbiAgLCBsb29wOiBmdW5jdGlvbih0aW1lcywgcmV2ZXJzZSkge1xyXG4gICAgICB2YXIgYyA9IHRoaXMubGFzdCgpXHJcblxyXG4gICAgICAvLyBzdG9yZSB0b3RhbCBsb29wc1xyXG4gICAgICBjLmxvb3BzID0gKHRpbWVzICE9IG51bGwpID8gdGltZXMgOiB0cnVlXHJcbiAgICAgIGMubG9vcCA9IDBcclxuXHJcbiAgICAgIGlmKHJldmVyc2UpIGMucmV2ZXJzaW5nID0gdHJ1ZVxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHBhdXNlcyB0aGUgYW5pbWF0aW9uXHJcbiAgLCBwYXVzZTogZnVuY3Rpb24oKXtcclxuICAgICAgdGhpcy5wYXVzZWQgPSB0cnVlXHJcbiAgICAgIHRoaXMuc3RvcEFuaW1GcmFtZSgpXHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHVucGF1c2UgdGhlIGFuaW1hdGlvblxyXG4gICwgcGxheTogZnVuY3Rpb24oKXtcclxuICAgICAgaWYoIXRoaXMucGF1c2VkKSByZXR1cm4gdGhpc1xyXG4gICAgICB0aGlzLnBhdXNlZCA9IGZhbHNlXHJcbiAgICAgIC8vIFdlIHVzZSBhbiBhYnNvbHV0ZSBwb3NpdGlvbiBoZXJlIHNvIHRoYXQgdGhlIGRlbGF5IGJlZm9yZSB0aGUgYW5pbWF0aW9uIGNhbiBiZSBwYXVzZWRcclxuICAgICAgcmV0dXJuIHRoaXMuYXQodGhpcy5hYnNQb3MsIHRydWUpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB0b2dnbGUgb3Igc2V0IHRoZSBkaXJlY3Rpb24gb2YgdGhlIGFuaW1hdGlvblxyXG4gICAgICogdHJ1ZSBzZXRzIGRpcmVjdGlvbiB0byBiYWNrd2FyZHMgd2hpbGUgZmFsc2Ugc2V0cyBpdCB0byBmb3J3YXJkc1xyXG4gICAgICogQHBhcmFtIHJldmVyc2VkIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRvIHJldmVyc2UgdGhlIGFuaW1hdGlvbiBvciBub3QgKGRlZmF1bHQ6IHRvZ2dsZSB0aGUgcmV2ZXJzZSBzdGF0dXMpXHJcbiAgICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICAqL1xyXG4gICwgcmV2ZXJzZTogZnVuY3Rpb24ocmV2ZXJzZWQpe1xyXG4gICAgICB2YXIgYyA9IHRoaXMubGFzdCgpXHJcblxyXG4gICAgICBpZih0eXBlb2YgcmV2ZXJzZWQgPT0gJ3VuZGVmaW5lZCcpIGMucmV2ZXJzZWQgPSAhYy5yZXZlcnNlZFxyXG4gICAgICBlbHNlIGMucmV2ZXJzZWQgPSByZXZlcnNlZFxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIGEgZmxvYXQgZnJvbSAwLTEgaW5kaWNhdGluZyB0aGUgcHJvZ3Jlc3Mgb2YgdGhlIGN1cnJlbnQgYW5pbWF0aW9uXHJcbiAgICAgKiBAcGFyYW0gZWFzZWQgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHJldHVybmVkIHBvc2l0aW9uIHNob3VsZCBiZSBlYXNlZCBvciBub3RcclxuICAgICAqIEByZXR1cm4gbnVtYmVyXHJcbiAgICAgKi9cclxuICAsIHByb2dyZXNzOiBmdW5jdGlvbihlYXNlSXQpe1xyXG4gICAgICByZXR1cm4gZWFzZUl0ID8gdGhpcy5zaXR1YXRpb24uZWFzZSh0aGlzLnBvcykgOiB0aGlzLnBvc1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogYWRkcyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCB3aGVuIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBpcyBmaW5pc2hlZFxyXG4gICAgICogQHBhcmFtIGZuIEZ1bmN0aW9uIHdoaWNoIHNob3VsZCBiZSBleGVjdXRlZCBhcyBjYWxsYmFja1xyXG4gICAgICogQHJldHVybiBudW1iZXJcclxuICAgICAqL1xyXG4gICwgYWZ0ZXI6IGZ1bmN0aW9uKGZuKXtcclxuICAgICAgdmFyIGMgPSB0aGlzLmxhc3QoKVxyXG4gICAgICAgICwgd3JhcHBlciA9IGZ1bmN0aW9uIHdyYXBwZXIoZSl7XHJcbiAgICAgICAgICAgIGlmKGUuZGV0YWlsLnNpdHVhdGlvbiA9PSBjKXtcclxuICAgICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGMpXHJcbiAgICAgICAgICAgICAgdGhpcy5vZmYoJ2ZpbmlzaGVkLmZ4Jywgd3JhcHBlcikgLy8gcHJldmVudCBtZW1vcnkgbGVha1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICB0aGlzLnRhcmdldCgpLm9uKCdmaW5pc2hlZC5meCcsIHdyYXBwZXIpXHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5fY2FsbFN0YXJ0KClcclxuICAgIH1cclxuXHJcbiAgICAvLyBhZGRzIGEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIHdoZW5ldmVyIG9uZSBhbmltYXRpb24gc3RlcCBpcyBwZXJmb3JtZWRcclxuICAsIGR1cmluZzogZnVuY3Rpb24oZm4pe1xyXG4gICAgICB2YXIgYyA9IHRoaXMubGFzdCgpXHJcbiAgICAgICAgLCB3cmFwcGVyID0gZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgIGlmKGUuZGV0YWlsLnNpdHVhdGlvbiA9PSBjKXtcclxuICAgICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGUuZGV0YWlsLnBvcywgU1ZHLm1vcnBoKGUuZGV0YWlsLnBvcyksIGUuZGV0YWlsLmVhc2VkLCBjKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAvLyBzZWUgYWJvdmVcclxuICAgICAgdGhpcy50YXJnZXQoKS5vZmYoJ2R1cmluZy5meCcsIHdyYXBwZXIpLm9uKCdkdXJpbmcuZngnLCB3cmFwcGVyKVxyXG5cclxuICAgICAgdGhpcy5hZnRlcihmdW5jdGlvbigpe1xyXG4gICAgICAgIHRoaXMub2ZmKCdkdXJpbmcuZngnLCB3cmFwcGVyKVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuX2NhbGxTdGFydCgpXHJcbiAgICB9XHJcblxyXG4gICAgLy8gY2FsbHMgYWZ0ZXIgQUxMIGFuaW1hdGlvbnMgaW4gdGhlIHF1ZXVlIGFyZSBmaW5pc2hlZFxyXG4gICwgYWZ0ZXJBbGw6IGZ1bmN0aW9uKGZuKXtcclxuICAgICAgdmFyIHdyYXBwZXIgPSBmdW5jdGlvbiB3cmFwcGVyKGUpe1xyXG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMpXHJcbiAgICAgICAgICAgIHRoaXMub2ZmKCdhbGxmaW5pc2hlZC5meCcsIHdyYXBwZXIpXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAvLyBzZWUgYWJvdmVcclxuICAgICAgdGhpcy50YXJnZXQoKS5vZmYoJ2FsbGZpbmlzaGVkLmZ4Jywgd3JhcHBlcikub24oJ2FsbGZpbmlzaGVkLmZ4Jywgd3JhcHBlcilcclxuXHJcbiAgICAgIHJldHVybiB0aGlzLl9jYWxsU3RhcnQoKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGNhbGxzIG9uIGV2ZXJ5IGFuaW1hdGlvbiBzdGVwIGZvciBhbGwgYW5pbWF0aW9uc1xyXG4gICwgZHVyaW5nQWxsOiBmdW5jdGlvbihmbil7XHJcbiAgICAgIHZhciB3cmFwcGVyID0gZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgZS5kZXRhaWwucG9zLCBTVkcubW9ycGgoZS5kZXRhaWwucG9zKSwgZS5kZXRhaWwuZWFzZWQsIGUuZGV0YWlsLnNpdHVhdGlvbilcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMudGFyZ2V0KCkub2ZmKCdkdXJpbmcuZngnLCB3cmFwcGVyKS5vbignZHVyaW5nLmZ4Jywgd3JhcHBlcilcclxuXHJcbiAgICAgIHRoaXMuYWZ0ZXJBbGwoZnVuY3Rpb24oKXtcclxuICAgICAgICB0aGlzLm9mZignZHVyaW5nLmZ4Jywgd3JhcHBlcilcclxuICAgICAgfSlcclxuXHJcbiAgICAgIHJldHVybiB0aGlzLl9jYWxsU3RhcnQoKVxyXG4gICAgfVxyXG5cclxuICAsIGxhc3Q6IGZ1bmN0aW9uKCl7XHJcbiAgICAgIHJldHVybiB0aGlzLnNpdHVhdGlvbnMubGVuZ3RoID8gdGhpcy5zaXR1YXRpb25zW3RoaXMuc2l0dWF0aW9ucy5sZW5ndGgtMV0gOiB0aGlzLnNpdHVhdGlvblxyXG4gICAgfVxyXG5cclxuICAgIC8vIGFkZHMgb25lIHByb3BlcnR5IHRvIHRoZSBhbmltYXRpb25zXHJcbiAgLCBhZGQ6IGZ1bmN0aW9uKG1ldGhvZCwgYXJncywgdHlwZSl7XHJcbiAgICAgIHRoaXMubGFzdCgpW3R5cGUgfHwgJ2FuaW1hdGlvbnMnXVttZXRob2RdID0gYXJnc1xyXG4gICAgICByZXR1cm4gdGhpcy5fY2FsbFN0YXJ0KClcclxuICAgIH1cclxuXHJcbiAgICAvKiogcGVyZm9ybSBvbmUgc3RlcCBvZiB0aGUgYW5pbWF0aW9uXHJcbiAgICAgKiAgQHBhcmFtIGlnbm9yZVRpbWUgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gaWdub3JlIHRpbWUgYW5kIHVzZSBwb3NpdGlvbiBkaXJlY3RseSBvciByZWNhbGN1bGF0ZSBwb3NpdGlvbiBiYXNlZCBvbiB0aW1lXHJcbiAgICAgKiAgQHJldHVybiB0aGlzXHJcbiAgICAgKi9cclxuICAsIHN0ZXA6IGZ1bmN0aW9uKGlnbm9yZVRpbWUpe1xyXG5cclxuICAgICAgLy8gY29udmVydCBjdXJyZW50IHRpbWUgdG8gYW4gYWJzb2x1dGUgcG9zaXRpb25cclxuICAgICAgaWYoIWlnbm9yZVRpbWUpIHRoaXMuYWJzUG9zID0gdGhpcy50aW1lVG9BYnNQb3MoK25ldyBEYXRlKVxyXG5cclxuICAgICAgLy8gVGhpcyBwYXJ0IGNvbnZlcnQgYW4gYWJzb2x1dGUgcG9zaXRpb24gdG8gYSBwb3NpdGlvblxyXG4gICAgICBpZih0aGlzLnNpdHVhdGlvbi5sb29wcyAhPT0gZmFsc2UpIHtcclxuICAgICAgICB2YXIgYWJzUG9zLCBhYnNQb3NJbnQsIGxhc3RMb29wXHJcblxyXG4gICAgICAgIC8vIElmIHRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBpcyBiZWxvdyAwLCB3ZSBqdXN0IHRyZWF0IGl0IGFzIGlmIGl0IHdhcyAwXHJcbiAgICAgICAgYWJzUG9zID0gTWF0aC5tYXgodGhpcy5hYnNQb3MsIDApXHJcbiAgICAgICAgYWJzUG9zSW50ID0gTWF0aC5mbG9vcihhYnNQb3MpXHJcblxyXG4gICAgICAgIGlmKHRoaXMuc2l0dWF0aW9uLmxvb3BzID09PSB0cnVlIHx8IGFic1Bvc0ludCA8IHRoaXMuc2l0dWF0aW9uLmxvb3BzKSB7XHJcbiAgICAgICAgICB0aGlzLnBvcyA9IGFic1BvcyAtIGFic1Bvc0ludFxyXG4gICAgICAgICAgbGFzdExvb3AgPSB0aGlzLnNpdHVhdGlvbi5sb29wXHJcbiAgICAgICAgICB0aGlzLnNpdHVhdGlvbi5sb29wID0gYWJzUG9zSW50XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuYWJzUG9zID0gdGhpcy5zaXR1YXRpb24ubG9vcHNcclxuICAgICAgICAgIHRoaXMucG9zID0gMVxyXG4gICAgICAgICAgLy8gVGhlIC0xIGhlcmUgaXMgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRvIHRvZ2dsZSByZXZlcnNlZCB3aGVuIGFsbCB0aGUgbG9vcHMgaGF2ZSBiZWVuIGNvbXBsZXRlZFxyXG4gICAgICAgICAgbGFzdExvb3AgPSB0aGlzLnNpdHVhdGlvbi5sb29wIC0gMVxyXG4gICAgICAgICAgdGhpcy5zaXR1YXRpb24ubG9vcCA9IHRoaXMuc2l0dWF0aW9uLmxvb3BzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZih0aGlzLnNpdHVhdGlvbi5yZXZlcnNpbmcpIHtcclxuICAgICAgICAgIC8vIFRvZ2dsZSByZXZlcnNlZCBpZiBhbiBvZGQgbnVtYmVyIG9mIGxvb3BzIGFzIG9jY3VyZWQgc2luY2UgdGhlIGxhc3QgY2FsbCBvZiBzdGVwXHJcbiAgICAgICAgICB0aGlzLnNpdHVhdGlvbi5yZXZlcnNlZCA9IHRoaXMuc2l0dWF0aW9uLnJldmVyc2VkICE9IEJvb2xlYW4oKHRoaXMuc2l0dWF0aW9uLmxvb3AgLSBsYXN0TG9vcCkgJSAyKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGxvb3AsIHRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBtdXN0IG5vdCBiZSBhYm92ZSAxXHJcbiAgICAgICAgdGhpcy5hYnNQb3MgPSBNYXRoLm1pbih0aGlzLmFic1BvcywgMSlcclxuICAgICAgICB0aGlzLnBvcyA9IHRoaXMuYWJzUG9zXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHdoaWxlIHRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBjYW4gYmUgYmVsb3cgMCwgdGhlIHBvc2l0aW9uIG11c3Qgbm90IGJlIGJlbG93IDBcclxuICAgICAgaWYodGhpcy5wb3MgPCAwKSB0aGlzLnBvcyA9IDBcclxuXHJcbiAgICAgIGlmKHRoaXMuc2l0dWF0aW9uLnJldmVyc2VkKSB0aGlzLnBvcyA9IDEgLSB0aGlzLnBvc1xyXG5cclxuXHJcbiAgICAgIC8vIGFwcGx5IGVhc2luZ1xyXG4gICAgICB2YXIgZWFzZWQgPSB0aGlzLnNpdHVhdGlvbi5lYXNlKHRoaXMucG9zKVxyXG5cclxuICAgICAgLy8gY2FsbCBvbmNlLWNhbGxiYWNrc1xyXG4gICAgICBmb3IodmFyIGkgaW4gdGhpcy5zaXR1YXRpb24ub25jZSl7XHJcbiAgICAgICAgaWYoaSA+IHRoaXMubGFzdFBvcyAmJiBpIDw9IGVhc2VkKXtcclxuICAgICAgICAgIHRoaXMuc2l0dWF0aW9uLm9uY2VbaV0uY2FsbCh0aGlzLnRhcmdldCgpLCB0aGlzLnBvcywgZWFzZWQpXHJcbiAgICAgICAgICBkZWxldGUgdGhpcy5zaXR1YXRpb24ub25jZVtpXVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gZmlyZSBkdXJpbmcgY2FsbGJhY2sgd2l0aCBwb3NpdGlvbiwgZWFzZWQgcG9zaXRpb24gYW5kIGN1cnJlbnQgc2l0dWF0aW9uIGFzIHBhcmFtZXRlclxyXG4gICAgICBpZih0aGlzLmFjdGl2ZSkgdGhpcy50YXJnZXQoKS5maXJlKCdkdXJpbmcnLCB7cG9zOiB0aGlzLnBvcywgZWFzZWQ6IGVhc2VkLCBmeDogdGhpcywgc2l0dWF0aW9uOiB0aGlzLnNpdHVhdGlvbn0pXHJcblxyXG4gICAgICAvLyB0aGUgdXNlciBtYXkgY2FsbCBzdG9wIG9yIGZpbmlzaCBpbiB0aGUgZHVyaW5nIGNhbGxiYWNrXHJcbiAgICAgIC8vIHNvIG1ha2Ugc3VyZSB0aGF0IHdlIHN0aWxsIGhhdmUgYSB2YWxpZCBzaXR1YXRpb25cclxuICAgICAgaWYoIXRoaXMuc2l0dWF0aW9uKXtcclxuICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBhcHBseSB0aGUgYWN0dWFsIGFuaW1hdGlvbiB0byBldmVyeSBwcm9wZXJ0eVxyXG4gICAgICB0aGlzLmVhY2hBdCgpXHJcblxyXG4gICAgICAvLyBkbyBmaW5hbCBjb2RlIHdoZW4gc2l0dWF0aW9uIGlzIGZpbmlzaGVkXHJcbiAgICAgIGlmKCh0aGlzLnBvcyA9PSAxICYmICF0aGlzLnNpdHVhdGlvbi5yZXZlcnNlZCkgfHwgKHRoaXMuc2l0dWF0aW9uLnJldmVyc2VkICYmIHRoaXMucG9zID09IDApKXtcclxuXHJcbiAgICAgICAgLy8gc3RvcCBhbmltYXRpb24gY2FsbGJhY2tcclxuICAgICAgICB0aGlzLnN0b3BBbmltRnJhbWUoKVxyXG5cclxuICAgICAgICAvLyBmaXJlIGZpbmlzaGVkIGNhbGxiYWNrIHdpdGggY3VycmVudCBzaXR1YXRpb24gYXMgcGFyYW1ldGVyXHJcbiAgICAgICAgdGhpcy50YXJnZXQoKS5maXJlKCdmaW5pc2hlZCcsIHtmeDp0aGlzLCBzaXR1YXRpb246IHRoaXMuc2l0dWF0aW9ufSlcclxuXHJcbiAgICAgICAgaWYoIXRoaXMuc2l0dWF0aW9ucy5sZW5ndGgpe1xyXG4gICAgICAgICAgdGhpcy50YXJnZXQoKS5maXJlKCdhbGxmaW5pc2hlZCcpXHJcblxyXG4gICAgICAgICAgLy8gUmVjaGVjayB0aGUgbGVuZ3RoIHNpbmNlIHRoZSB1c2VyIG1heSBjYWxsIGFuaW1hdGUgaW4gdGhlIGFmdGVyQWxsIGNhbGxiYWNrXHJcbiAgICAgICAgICBpZighdGhpcy5zaXR1YXRpb25zLmxlbmd0aCl7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0KCkub2ZmKCcuZngnKSAvLyB0aGVyZSBzaG91bGRudCBiZSBhbnkgYmluZGluZyBsZWZ0LCBidXQgdG8gbWFrZSBzdXJlLi4uXHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2VcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHN0YXJ0IG5leHQgYW5pbWF0aW9uXHJcbiAgICAgICAgaWYodGhpcy5hY3RpdmUpIHRoaXMuZGVxdWV1ZSgpXHJcbiAgICAgICAgZWxzZSB0aGlzLmNsZWFyQ3VycmVudCgpXHJcblxyXG4gICAgICB9ZWxzZSBpZighdGhpcy5wYXVzZWQgJiYgdGhpcy5hY3RpdmUpe1xyXG4gICAgICAgIC8vIHdlIGNvbnRpbnVlIGFuaW1hdGluZyB3aGVuIHdlIGFyZSBub3QgYXQgdGhlIGVuZFxyXG4gICAgICAgIHRoaXMuc3RhcnRBbmltRnJhbWUoKVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBzYXZlIGxhc3QgZWFzZWQgcG9zaXRpb24gZm9yIG9uY2UgY2FsbGJhY2sgdHJpZ2dlcmluZ1xyXG4gICAgICB0aGlzLmxhc3RQb3MgPSBlYXNlZFxyXG4gICAgICByZXR1cm4gdGhpc1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyBjYWxjdWxhdGVzIHRoZSBzdGVwIGZvciBldmVyeSBwcm9wZXJ0eSBhbmQgY2FsbHMgYmxvY2sgd2l0aCBpdFxyXG4gICwgZWFjaEF0OiBmdW5jdGlvbigpe1xyXG4gICAgICB2YXIgaSwgbGVuLCBhdCwgc2VsZiA9IHRoaXMsIHRhcmdldCA9IHRoaXMudGFyZ2V0KCksIHMgPSB0aGlzLnNpdHVhdGlvblxyXG5cclxuICAgICAgLy8gYXBwbHkgYW5pbWF0aW9ucyB3aGljaCBjYW4gYmUgY2FsbGVkIHRyb3VnaCBhIG1ldGhvZFxyXG4gICAgICBmb3IoaSBpbiBzLmFuaW1hdGlvbnMpe1xyXG5cclxuICAgICAgICBhdCA9IFtdLmNvbmNhdChzLmFuaW1hdGlvbnNbaV0pLm1hcChmdW5jdGlvbihlbCl7XHJcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIGVsICE9PSAnc3RyaW5nJyAmJiBlbC5hdCA/IGVsLmF0KHMuZWFzZShzZWxmLnBvcyksIHNlbGYucG9zKSA6IGVsXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGFyZ2V0W2ldLmFwcGx5KHRhcmdldCwgYXQpXHJcblxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBhcHBseSBhbmltYXRpb24gd2hpY2ggaGFzIHRvIGJlIGFwcGxpZWQgd2l0aCBhdHRyKClcclxuICAgICAgZm9yKGkgaW4gcy5hdHRycyl7XHJcblxyXG4gICAgICAgIGF0ID0gW2ldLmNvbmNhdChzLmF0dHJzW2ldKS5tYXAoZnVuY3Rpb24oZWwpe1xyXG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiBlbCAhPT0gJ3N0cmluZycgJiYgZWwuYXQgPyBlbC5hdChzLmVhc2Uoc2VsZi5wb3MpLCBzZWxmLnBvcykgOiBlbFxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRhcmdldC5hdHRyLmFwcGx5KHRhcmdldCwgYXQpXHJcblxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBhcHBseSBhbmltYXRpb24gd2hpY2ggaGFzIHRvIGJlIGFwcGxpZWQgd2l0aCBzdHlsZSgpXHJcbiAgICAgIGZvcihpIGluIHMuc3R5bGVzKXtcclxuXHJcbiAgICAgICAgYXQgPSBbaV0uY29uY2F0KHMuc3R5bGVzW2ldKS5tYXAoZnVuY3Rpb24oZWwpe1xyXG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiBlbCAhPT0gJ3N0cmluZycgJiYgZWwuYXQgPyBlbC5hdChzLmVhc2Uoc2VsZi5wb3MpLCBzZWxmLnBvcykgOiBlbFxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRhcmdldC5zdHlsZS5hcHBseSh0YXJnZXQsIGF0KVxyXG5cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gYW5pbWF0ZSBpbml0aWFsVHJhbnNmb3JtYXRpb24gd2hpY2ggaGFzIHRvIGJlIGNoYWluZWRcclxuICAgICAgaWYocy50cmFuc2Zvcm1zLmxlbmd0aCl7XHJcblxyXG4gICAgICAgIC8vIGdldCBpbml0aWFsIGluaXRpYWxUcmFuc2Zvcm1hdGlvblxyXG4gICAgICAgIGF0ID0gcy5pbml0aWFsVHJhbnNmb3JtYXRpb25cclxuICAgICAgICBmb3IoaSA9IDAsIGxlbiA9IHMudHJhbnNmb3Jtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XHJcblxyXG4gICAgICAgICAgLy8gZ2V0IG5leHQgdHJhbnNmb3JtYXRpb24gaW4gY2hhaW5cclxuICAgICAgICAgIHZhciBhID0gcy50cmFuc2Zvcm1zW2ldXHJcblxyXG4gICAgICAgICAgLy8gbXVsdGlwbHkgbWF0cml4IGRpcmVjdGx5XHJcbiAgICAgICAgICBpZihhIGluc3RhbmNlb2YgU1ZHLk1hdHJpeCl7XHJcblxyXG4gICAgICAgICAgICBpZihhLnJlbGF0aXZlKXtcclxuICAgICAgICAgICAgICBhdCA9IGF0Lm11bHRpcGx5KG5ldyBTVkcuTWF0cml4KCkubW9ycGgoYSkuYXQocy5lYXNlKHRoaXMucG9zKSkpXHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgIGF0ID0gYXQubW9ycGgoYSkuYXQocy5lYXNlKHRoaXMucG9zKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIHdoZW4gdHJhbnNmb3JtYXRpb24gaXMgYWJzb2x1dGUgd2UgaGF2ZSB0byByZXNldCB0aGUgbmVlZGVkIHRyYW5zZm9ybWF0aW9uIGZpcnN0XHJcbiAgICAgICAgICBpZighYS5yZWxhdGl2ZSlcclxuICAgICAgICAgICAgYS51bmRvKGF0LmV4dHJhY3QoKSlcclxuXHJcbiAgICAgICAgICAvLyBhbmQgcmVhcHBseSBpdCBhZnRlclxyXG4gICAgICAgICAgYXQgPSBhdC5tdWx0aXBseShhLmF0KHMuZWFzZSh0aGlzLnBvcykpKVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNldCBuZXcgbWF0cml4IG9uIGVsZW1lbnRcclxuICAgICAgICB0YXJnZXQubWF0cml4KGF0KVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gYWRkcyBhbiBvbmNlLWNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCBhdCBhIHNwZWNpZmljIHBvc2l0aW9uIGFuZCBuZXZlciBhZ2FpblxyXG4gICwgb25jZTogZnVuY3Rpb24ocG9zLCBmbiwgaXNFYXNlZCl7XHJcbiAgICAgIHZhciBjID0gdGhpcy5sYXN0KClcclxuICAgICAgaWYoIWlzRWFzZWQpIHBvcyA9IGMuZWFzZShwb3MpXHJcblxyXG4gICAgICBjLm9uY2VbcG9zXSA9IGZuXHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG5cclxuICAsIF9jYWxsU3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhpcy5zdGFydCgpfS5iaW5kKHRoaXMpLCAwKVxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4sIHBhcmVudDogU1ZHLkVsZW1lbnRcclxuXHJcbiAgLy8gQWRkIG1ldGhvZCB0byBwYXJlbnQgZWxlbWVudHNcclxuLCBjb25zdHJ1Y3Q6IHtcclxuICAgIC8vIEdldCBmeCBtb2R1bGUgb3IgY3JlYXRlIGEgbmV3IG9uZSwgdGhlbiBhbmltYXRlIHdpdGggZ2l2ZW4gZHVyYXRpb24gYW5kIGVhc2VcclxuICAgIGFuaW1hdGU6IGZ1bmN0aW9uKG8sIGVhc2UsIGRlbGF5KSB7XHJcbiAgICAgIHJldHVybiAodGhpcy5meCB8fCAodGhpcy5meCA9IG5ldyBTVkcuRlgodGhpcykpKS5hbmltYXRlKG8sIGVhc2UsIGRlbGF5KVxyXG4gICAgfVxyXG4gICwgZGVsYXk6IGZ1bmN0aW9uKGRlbGF5KXtcclxuICAgICAgcmV0dXJuICh0aGlzLmZ4IHx8ICh0aGlzLmZ4ID0gbmV3IFNWRy5GWCh0aGlzKSkpLmRlbGF5KGRlbGF5KVxyXG4gICAgfVxyXG4gICwgc3RvcDogZnVuY3Rpb24oanVtcFRvRW5kLCBjbGVhclF1ZXVlKSB7XHJcbiAgICAgIGlmICh0aGlzLmZ4KVxyXG4gICAgICAgIHRoaXMuZnguc3RvcChqdW1wVG9FbmQsIGNsZWFyUXVldWUpXHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG4gICwgZmluaXNoOiBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHRoaXMuZngpXHJcbiAgICAgICAgdGhpcy5meC5maW5pc2goKVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAgIC8vIFBhdXNlIGN1cnJlbnQgYW5pbWF0aW9uXHJcbiAgLCBwYXVzZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICh0aGlzLmZ4KVxyXG4gICAgICAgIHRoaXMuZngucGF1c2UoKVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAgIC8vIFBsYXkgcGF1c2VkIGN1cnJlbnQgYW5pbWF0aW9uXHJcbiAgLCBwbGF5OiBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHRoaXMuZngpXHJcbiAgICAgICAgdGhpcy5meC5wbGF5KClcclxuXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcbiAgICAvLyBTZXQvR2V0IHRoZSBzcGVlZCBvZiB0aGUgYW5pbWF0aW9uc1xyXG4gICwgc3BlZWQ6IGZ1bmN0aW9uKHNwZWVkKSB7XHJcbiAgICAgIGlmICh0aGlzLmZ4KVxyXG4gICAgICAgIGlmIChzcGVlZCA9PSBudWxsKVxyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZnguc3BlZWQoKVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgIHRoaXMuZnguc3BlZWQoc3BlZWQpXHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pXHJcblxyXG4vLyBNb3JwaE9iaiBpcyB1c2VkIHdoZW5ldmVyIG5vIG1vcnBoYWJsZSBvYmplY3QgaXMgZ2l2ZW5cclxuU1ZHLk1vcnBoT2JqID0gU1ZHLmludmVudCh7XHJcblxyXG4gIGNyZWF0ZTogZnVuY3Rpb24oZnJvbSwgdG8pe1xyXG4gICAgLy8gcHJlcGFyZSBjb2xvciBmb3IgbW9ycGhpbmdcclxuICAgIGlmKFNWRy5Db2xvci5pc0NvbG9yKHRvKSkgcmV0dXJuIG5ldyBTVkcuQ29sb3IoZnJvbSkubW9ycGgodG8pXHJcbiAgICAvLyBjaGVjayBpZiB3ZSBoYXZlIGEgbGlzdCBvZiB2YWx1ZXNcclxuICAgIGlmKFNWRy5yZWdleC5kZWxpbWl0ZXIudGVzdChmcm9tKSkge1xyXG4gICAgICAvLyBwcmVwYXJlIHBhdGggZm9yIG1vcnBoaW5nXHJcbiAgICAgIGlmKFNWRy5yZWdleC5wYXRoTGV0dGVycy50ZXN0KGZyb20pKSByZXR1cm4gbmV3IFNWRy5QYXRoQXJyYXkoZnJvbSkubW9ycGgodG8pXHJcbiAgICAgIC8vIHByZXBhcmUgdmFsdWUgbGlzdCBmb3IgbW9ycGhpbmdcclxuICAgICAgZWxzZSByZXR1cm4gbmV3IFNWRy5BcnJheShmcm9tKS5tb3JwaCh0bylcclxuICAgIH1cclxuICAgIC8vIHByZXBhcmUgbnVtYmVyIGZvciBtb3JwaGluZ1xyXG4gICAgaWYoU1ZHLnJlZ2V4Lm51bWJlckFuZFVuaXQudGVzdCh0bykpIHJldHVybiBuZXcgU1ZHLk51bWJlcihmcm9tKS5tb3JwaCh0bylcclxuXHJcbiAgICAvLyBwcmVwYXJlIGZvciBwbGFpbiBtb3JwaGluZ1xyXG4gICAgdGhpcy52YWx1ZSA9IGZyb21cclxuICAgIHRoaXMuZGVzdGluYXRpb24gPSB0b1xyXG4gIH1cclxuXHJcbiwgZXh0ZW5kOiB7XHJcbiAgICBhdDogZnVuY3Rpb24ocG9zLCByZWFsKXtcclxuICAgICAgcmV0dXJuIHJlYWwgPCAxID8gdGhpcy52YWx1ZSA6IHRoaXMuZGVzdGluYXRpb25cclxuICAgIH0sXHJcblxyXG4gICAgdmFsdWVPZjogZnVuY3Rpb24oKXtcclxuICAgICAgcmV0dXJuIHRoaXMudmFsdWVcclxuICAgIH1cclxuICB9XHJcblxyXG59KVxyXG5cclxuU1ZHLmV4dGVuZChTVkcuRlgsIHtcclxuICAvLyBBZGQgYW5pbWF0YWJsZSBhdHRyaWJ1dGVzXHJcbiAgYXR0cjogZnVuY3Rpb24oYSwgdiwgcmVsYXRpdmUpIHtcclxuICAgIC8vIGFwcGx5IGF0dHJpYnV0ZXMgaW5kaXZpZHVhbGx5XHJcbiAgICBpZiAodHlwZW9mIGEgPT0gJ29iamVjdCcpIHtcclxuICAgICAgZm9yICh2YXIga2V5IGluIGEpXHJcbiAgICAgICAgdGhpcy5hdHRyKGtleSwgYVtrZXldKVxyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuYWRkKGEsIHYsICdhdHRycycpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcbiAgLy8gQWRkIGFuaW1hdGFibGUgc3R5bGVzXHJcbiwgc3R5bGU6IGZ1bmN0aW9uKHMsIHYpIHtcclxuICAgIGlmICh0eXBlb2YgcyA9PSAnb2JqZWN0JylcclxuICAgICAgZm9yICh2YXIga2V5IGluIHMpXHJcbiAgICAgICAgdGhpcy5zdHlsZShrZXksIHNba2V5XSlcclxuXHJcbiAgICBlbHNlXHJcbiAgICAgIHRoaXMuYWRkKHMsIHYsICdzdHlsZXMnKVxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG4gIC8vIEFuaW1hdGFibGUgeC1heGlzXHJcbiwgeDogZnVuY3Rpb24oeCwgcmVsYXRpdmUpIHtcclxuICAgIGlmKHRoaXMudGFyZ2V0KCkgaW5zdGFuY2VvZiBTVkcuRyl7XHJcbiAgICAgIHRoaXMudHJhbnNmb3JtKHt4Onh9LCByZWxhdGl2ZSlcclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbnVtID0gbmV3IFNWRy5OdW1iZXIoeClcclxuICAgIG51bS5yZWxhdGl2ZSA9IHJlbGF0aXZlXHJcbiAgICByZXR1cm4gdGhpcy5hZGQoJ3gnLCBudW0pXHJcbiAgfVxyXG4gIC8vIEFuaW1hdGFibGUgeS1heGlzXHJcbiwgeTogZnVuY3Rpb24oeSwgcmVsYXRpdmUpIHtcclxuICAgIGlmKHRoaXMudGFyZ2V0KCkgaW5zdGFuY2VvZiBTVkcuRyl7XHJcbiAgICAgIHRoaXMudHJhbnNmb3JtKHt5Onl9LCByZWxhdGl2ZSlcclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbnVtID0gbmV3IFNWRy5OdW1iZXIoeSlcclxuICAgIG51bS5yZWxhdGl2ZSA9IHJlbGF0aXZlXHJcbiAgICByZXR1cm4gdGhpcy5hZGQoJ3knLCBudW0pXHJcbiAgfVxyXG4gIC8vIEFuaW1hdGFibGUgY2VudGVyIHgtYXhpc1xyXG4sIGN4OiBmdW5jdGlvbih4KSB7XHJcbiAgICByZXR1cm4gdGhpcy5hZGQoJ2N4JywgbmV3IFNWRy5OdW1iZXIoeCkpXHJcbiAgfVxyXG4gIC8vIEFuaW1hdGFibGUgY2VudGVyIHktYXhpc1xyXG4sIGN5OiBmdW5jdGlvbih5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5hZGQoJ2N5JywgbmV3IFNWRy5OdW1iZXIoeSkpXHJcbiAgfVxyXG4gIC8vIEFkZCBhbmltYXRhYmxlIG1vdmVcclxuLCBtb3ZlOiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICByZXR1cm4gdGhpcy54KHgpLnkoeSlcclxuICB9XHJcbiAgLy8gQWRkIGFuaW1hdGFibGUgY2VudGVyXHJcbiwgY2VudGVyOiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5jeCh4KS5jeSh5KVxyXG4gIH1cclxuICAvLyBBZGQgYW5pbWF0YWJsZSBzaXplXHJcbiwgc2l6ZTogZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xyXG4gICAgaWYgKHRoaXMudGFyZ2V0KCkgaW5zdGFuY2VvZiBTVkcuVGV4dCkge1xyXG4gICAgICAvLyBhbmltYXRlIGZvbnQgc2l6ZSBmb3IgVGV4dCBlbGVtZW50c1xyXG4gICAgICB0aGlzLmF0dHIoJ2ZvbnQtc2l6ZScsIHdpZHRoKVxyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIGFuaW1hdGUgYmJveCBiYXNlZCBzaXplIGZvciBhbGwgb3RoZXIgZWxlbWVudHNcclxuICAgICAgdmFyIGJveFxyXG5cclxuICAgICAgaWYoIXdpZHRoIHx8ICFoZWlnaHQpe1xyXG4gICAgICAgIGJveCA9IHRoaXMudGFyZ2V0KCkuYmJveCgpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmKCF3aWR0aCl7XHJcbiAgICAgICAgd2lkdGggPSBib3gud2lkdGggLyBib3guaGVpZ2h0ICAqIGhlaWdodFxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZighaGVpZ2h0KXtcclxuICAgICAgICBoZWlnaHQgPSBib3guaGVpZ2h0IC8gYm94LndpZHRoICAqIHdpZHRoXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuYWRkKCd3aWR0aCcgLCBuZXcgU1ZHLk51bWJlcih3aWR0aCkpXHJcbiAgICAgICAgICAuYWRkKCdoZWlnaHQnLCBuZXcgU1ZHLk51bWJlcihoZWlnaHQpKVxyXG5cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuICAvLyBBZGQgYW5pbWF0YWJsZSB3aWR0aFxyXG4sIHdpZHRoOiBmdW5jdGlvbih3aWR0aCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYWRkKCd3aWR0aCcsIG5ldyBTVkcuTnVtYmVyKHdpZHRoKSlcclxuICB9XHJcbiAgLy8gQWRkIGFuaW1hdGFibGUgaGVpZ2h0XHJcbiwgaGVpZ2h0OiBmdW5jdGlvbihoZWlnaHQpIHtcclxuICAgIHJldHVybiB0aGlzLmFkZCgnaGVpZ2h0JywgbmV3IFNWRy5OdW1iZXIoaGVpZ2h0KSlcclxuICB9XHJcbiAgLy8gQWRkIGFuaW1hdGFibGUgcGxvdFxyXG4sIHBsb3Q6IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcclxuICAgIC8vIExpbmVzIGNhbiBiZSBwbG90dGVkIHdpdGggNCBhcmd1bWVudHNcclxuICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPT0gNCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5wbG90KFthLCBiLCBjLCBkXSlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5hZGQoJ3Bsb3QnLCBuZXcgKHRoaXMudGFyZ2V0KCkubW9ycGhBcnJheSkoYSkpXHJcbiAgfVxyXG4gIC8vIEFkZCBsZWFkaW5nIG1ldGhvZFxyXG4sIGxlYWRpbmc6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdGhpcy50YXJnZXQoKS5sZWFkaW5nID9cclxuICAgICAgdGhpcy5hZGQoJ2xlYWRpbmcnLCBuZXcgU1ZHLk51bWJlcih2YWx1ZSkpIDpcclxuICAgICAgdGhpc1xyXG4gIH1cclxuICAvLyBBZGQgYW5pbWF0YWJsZSB2aWV3Ym94XHJcbiwgdmlld2JveDogZnVuY3Rpb24oeCwgeSwgd2lkdGgsIGhlaWdodCkge1xyXG4gICAgaWYgKHRoaXMudGFyZ2V0KCkgaW5zdGFuY2VvZiBTVkcuQ29udGFpbmVyKSB7XHJcbiAgICAgIHRoaXMuYWRkKCd2aWV3Ym94JywgbmV3IFNWRy5WaWV3Qm94KHgsIHksIHdpZHRoLCBoZWlnaHQpKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG4sIHVwZGF0ZTogZnVuY3Rpb24obykge1xyXG4gICAgaWYgKHRoaXMudGFyZ2V0KCkgaW5zdGFuY2VvZiBTVkcuU3RvcCkge1xyXG4gICAgICBpZiAodHlwZW9mIG8gPT0gJ251bWJlcicgfHwgbyBpbnN0YW5jZW9mIFNWRy5OdW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGUoe1xyXG4gICAgICAgICAgb2Zmc2V0OiAgYXJndW1lbnRzWzBdXHJcbiAgICAgICAgLCBjb2xvcjogICBhcmd1bWVudHNbMV1cclxuICAgICAgICAsIG9wYWNpdHk6IGFyZ3VtZW50c1syXVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvLm9wYWNpdHkgIT0gbnVsbCkgdGhpcy5hdHRyKCdzdG9wLW9wYWNpdHknLCBvLm9wYWNpdHkpXHJcbiAgICAgIGlmIChvLmNvbG9yICAgIT0gbnVsbCkgdGhpcy5hdHRyKCdzdG9wLWNvbG9yJywgby5jb2xvcilcclxuICAgICAgaWYgKG8ub2Zmc2V0ICAhPSBudWxsKSB0aGlzLmF0dHIoJ29mZnNldCcsIG8ub2Zmc2V0KVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG59KVxyXG5cblNWRy5Cb3ggPSBTVkcuaW52ZW50KHtcclxuICBjcmVhdGU6IGZ1bmN0aW9uKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIGlmICh0eXBlb2YgeCA9PSAnb2JqZWN0JyAmJiAhKHggaW5zdGFuY2VvZiBTVkcuRWxlbWVudCkpIHtcclxuICAgICAgLy8gY2hyb21lcyBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaGFzIG5vIHggYW5kIHkgcHJvcGVydHlcclxuICAgICAgcmV0dXJuIFNWRy5Cb3guY2FsbCh0aGlzLCB4LmxlZnQgIT0gbnVsbCA/IHgubGVmdCA6IHgueCAsIHgudG9wICE9IG51bGwgPyB4LnRvcCA6IHgueSwgeC53aWR0aCwgeC5oZWlnaHQpXHJcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gNCkge1xyXG4gICAgICB0aGlzLnggPSB4XHJcbiAgICAgIHRoaXMueSA9IHlcclxuICAgICAgdGhpcy53aWR0aCA9IHdpZHRoXHJcbiAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYWRkIGNlbnRlciwgcmlnaHQsIGJvdHRvbS4uLlxyXG4gICAgZnVsbEJveCh0aGlzKVxyXG4gIH1cclxuLCBleHRlbmQ6IHtcclxuICAgIC8vIE1lcmdlIHJlY3QgYm94IHdpdGggYW5vdGhlciwgcmV0dXJuIGEgbmV3IGluc3RhbmNlXHJcbiAgICBtZXJnZTogZnVuY3Rpb24oYm94KSB7XHJcbiAgICAgIHZhciBiID0gbmV3IHRoaXMuY29uc3RydWN0b3IoKVxyXG5cclxuICAgICAgLy8gbWVyZ2UgYm94ZXNcclxuICAgICAgYi54ICAgICAgPSBNYXRoLm1pbih0aGlzLngsIGJveC54KVxyXG4gICAgICBiLnkgICAgICA9IE1hdGgubWluKHRoaXMueSwgYm94LnkpXHJcbiAgICAgIGIud2lkdGggID0gTWF0aC5tYXgodGhpcy54ICsgdGhpcy53aWR0aCwgIGJveC54ICsgYm94LndpZHRoKSAgLSBiLnhcclxuICAgICAgYi5oZWlnaHQgPSBNYXRoLm1heCh0aGlzLnkgKyB0aGlzLmhlaWdodCwgYm94LnkgKyBib3guaGVpZ2h0KSAtIGIueVxyXG5cclxuICAgICAgcmV0dXJuIGZ1bGxCb3goYilcclxuICAgIH1cclxuXHJcbiAgLCB0cmFuc2Zvcm06IGZ1bmN0aW9uKG0pIHtcclxuICAgICAgdmFyIHhNaW4gPSBJbmZpbml0eSwgeE1heCA9IC1JbmZpbml0eSwgeU1pbiA9IEluZmluaXR5LCB5TWF4ID0gLUluZmluaXR5LCBwLCBiYm94XHJcblxyXG4gICAgICB2YXIgcHRzID0gW1xyXG4gICAgICAgIG5ldyBTVkcuUG9pbnQodGhpcy54LCB0aGlzLnkpLFxyXG4gICAgICAgIG5ldyBTVkcuUG9pbnQodGhpcy54MiwgdGhpcy55KSxcclxuICAgICAgICBuZXcgU1ZHLlBvaW50KHRoaXMueCwgdGhpcy55MiksXHJcbiAgICAgICAgbmV3IFNWRy5Qb2ludCh0aGlzLngyLCB0aGlzLnkyKVxyXG4gICAgICBdXHJcblxyXG4gICAgICBwdHMuZm9yRWFjaChmdW5jdGlvbihwKSB7XHJcbiAgICAgICAgcCA9IHAudHJhbnNmb3JtKG0pXHJcbiAgICAgICAgeE1pbiA9IE1hdGgubWluKHhNaW4scC54KVxyXG4gICAgICAgIHhNYXggPSBNYXRoLm1heCh4TWF4LHAueClcclxuICAgICAgICB5TWluID0gTWF0aC5taW4oeU1pbixwLnkpXHJcbiAgICAgICAgeU1heCA9IE1hdGgubWF4KHlNYXgscC55KVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgYmJveCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKClcclxuICAgICAgYmJveC54ID0geE1pblxyXG4gICAgICBiYm94LndpZHRoID0geE1heC14TWluXHJcbiAgICAgIGJib3gueSA9IHlNaW5cclxuICAgICAgYmJveC5oZWlnaHQgPSB5TWF4LXlNaW5cclxuXHJcbiAgICAgIGZ1bGxCb3goYmJveClcclxuXHJcbiAgICAgIHJldHVybiBiYm94XHJcbiAgICB9XHJcbiAgfVxyXG59KVxyXG5cclxuU1ZHLkJCb3ggPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplXHJcbiAgY3JlYXRlOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICBTVkcuQm94LmFwcGx5KHRoaXMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSlcclxuXHJcbiAgICAvLyBnZXQgdmFsdWVzIGlmIGVsZW1lbnQgaXMgZ2l2ZW5cclxuICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgU1ZHLkVsZW1lbnQpIHtcclxuICAgICAgdmFyIGJveFxyXG5cclxuICAgICAgLy8geWVzIHRoaXMgaXMgdWdseSwgYnV0IEZpcmVmb3ggY2FuIGJlIGEgcGFpbiB3aGVuIGl0IGNvbWVzIHRvIGVsZW1lbnRzIHRoYXQgYXJlIG5vdCB5ZXQgcmVuZGVyZWRcclxuICAgICAgdHJ5IHtcclxuXHJcbiAgICAgICAgaWYgKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMpe1xyXG4gICAgICAgICAgLy8gVGhpcyBpcyBJRSAtIGl0IGRvZXMgbm90IHN1cHBvcnQgY29udGFpbnMoKSBmb3IgdG9wLWxldmVsIFNWR3NcclxuICAgICAgICAgIHZhciB0b3BQYXJlbnQgPSBlbGVtZW50Lm5vZGVcclxuICAgICAgICAgIHdoaWxlICh0b3BQYXJlbnQucGFyZW50Tm9kZSl7XHJcbiAgICAgICAgICAgIHRvcFBhcmVudCA9IHRvcFBhcmVudC5wYXJlbnROb2RlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAodG9wUGFyZW50ICE9IGRvY3VtZW50KSB0aHJvdyBuZXcgRXhjZXB0aW9uKCdFbGVtZW50IG5vdCBpbiB0aGUgZG9tJylcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gdGhlIGVsZW1lbnQgaXMgTk9UIGluIHRoZSBkb20sIHRocm93IGVycm9yXHJcbiAgICAgICAgICBpZighZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKGVsZW1lbnQubm9kZSkpIHRocm93IG5ldyBFeGNlcHRpb24oJ0VsZW1lbnQgbm90IGluIHRoZSBkb20nKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZmluZCBuYXRpdmUgYmJveFxyXG4gICAgICAgIGJveCA9IGVsZW1lbnQubm9kZS5nZXRCQm94KClcclxuICAgICAgfSBjYXRjaChlKSB7XHJcbiAgICAgICAgaWYoZWxlbWVudCBpbnN0YW5jZW9mIFNWRy5TaGFwZSl7XHJcbiAgICAgICAgICB2YXIgY2xvbmUgPSBlbGVtZW50LmNsb25lKFNWRy5wYXJzZXIuZHJhdy5pbnN0YW5jZSkuc2hvdygpXHJcbiAgICAgICAgICBib3ggPSBjbG9uZS5ub2RlLmdldEJCb3goKVxyXG4gICAgICAgICAgY2xvbmUucmVtb3ZlKClcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgIGJveCA9IHtcclxuICAgICAgICAgICAgeDogICAgICBlbGVtZW50Lm5vZGUuY2xpZW50TGVmdFxyXG4gICAgICAgICAgLCB5OiAgICAgIGVsZW1lbnQubm9kZS5jbGllbnRUb3BcclxuICAgICAgICAgICwgd2lkdGg6ICBlbGVtZW50Lm5vZGUuY2xpZW50V2lkdGhcclxuICAgICAgICAgICwgaGVpZ2h0OiBlbGVtZW50Lm5vZGUuY2xpZW50SGVpZ2h0XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBTVkcuQm94LmNhbGwodGhpcywgYm94KVxyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIC8vIERlZmluZSBhbmNlc3RvclxyXG4sIGluaGVyaXQ6IFNWRy5Cb3hcclxuXHJcbiAgLy8gRGVmaW5lIFBhcmVudFxyXG4sIHBhcmVudDogU1ZHLkVsZW1lbnRcclxuXHJcbiAgLy8gQ29uc3RydWN0b3JcclxuLCBjb25zdHJ1Y3Q6IHtcclxuICAgIC8vIEdldCBib3VuZGluZyBib3hcclxuICAgIGJib3g6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gbmV3IFNWRy5CQm94KHRoaXMpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxufSlcclxuXHJcblNWRy5CQm94LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNWRy5CQm94XHJcblxyXG5cclxuU1ZHLmV4dGVuZChTVkcuRWxlbWVudCwge1xyXG4gIHRib3g6IGZ1bmN0aW9uKCl7XHJcbiAgICBjb25zb2xlLndhcm4oJ1VzZSBvZiBUQm94IGlzIGRlcHJlY2F0ZWQgYW5kIG1hcHBlZCB0byBSQm94LiBVc2UgLnJib3goKSBpbnN0ZWFkLicpXHJcbiAgICByZXR1cm4gdGhpcy5yYm94KHRoaXMuZG9jKCkpXHJcbiAgfVxyXG59KVxyXG5cclxuU1ZHLlJCb3ggPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplXHJcbiAgY3JlYXRlOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICBTVkcuQm94LmFwcGx5KHRoaXMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSlcclxuXHJcbiAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFNWRy5FbGVtZW50KSB7XHJcbiAgICAgIFNWRy5Cb3guY2FsbCh0aGlzLCBlbGVtZW50Lm5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuLCBpbmhlcml0OiBTVkcuQm94XHJcblxyXG4gIC8vIGRlZmluZSBQYXJlbnRcclxuLCBwYXJlbnQ6IFNWRy5FbGVtZW50XHJcblxyXG4sIGV4dGVuZDoge1xyXG4gICAgYWRkT2Zmc2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgLy8gb2Zmc2V0IGJ5IHdpbmRvdyBzY3JvbGwgcG9zaXRpb24sIGJlY2F1c2UgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGNoYW5nZXMgd2hlbiB3aW5kb3cgaXMgc2Nyb2xsZWRcclxuICAgICAgdGhpcy54ICs9IHdpbmRvdy5wYWdlWE9mZnNldFxyXG4gICAgICB0aGlzLnkgKz0gd2luZG93LnBhZ2VZT2Zmc2V0XHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBDb25zdHJ1Y3RvclxyXG4sIGNvbnN0cnVjdDoge1xyXG4gICAgLy8gR2V0IHJlY3QgYm94XHJcbiAgICByYm94OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICBpZiAoZWwpIHJldHVybiBuZXcgU1ZHLlJCb3godGhpcykudHJhbnNmb3JtKGVsLnNjcmVlbkNUTSgpLmludmVyc2UoKSlcclxuICAgICAgcmV0dXJuIG5ldyBTVkcuUkJveCh0aGlzKS5hZGRPZmZzZXQoKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pXHJcblxyXG5TVkcuUkJveC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTVkcuUkJveFxyXG5cblNWRy5NYXRyaXggPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplXHJcbiAgY3JlYXRlOiBmdW5jdGlvbihzb3VyY2UpIHtcclxuICAgIHZhciBpLCBiYXNlID0gYXJyYXlUb01hdHJpeChbMSwgMCwgMCwgMSwgMCwgMF0pXHJcblxyXG4gICAgLy8gZW5zdXJlIHNvdXJjZSBhcyBvYmplY3RcclxuICAgIHNvdXJjZSA9IHNvdXJjZSBpbnN0YW5jZW9mIFNWRy5FbGVtZW50ID9cclxuICAgICAgc291cmNlLm1hdHJpeGlmeSgpIDpcclxuICAgIHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnID9cclxuICAgICAgYXJyYXlUb01hdHJpeChzb3VyY2Uuc3BsaXQoU1ZHLnJlZ2V4LmRlbGltaXRlcikubWFwKHBhcnNlRmxvYXQpKSA6XHJcbiAgICBhcmd1bWVudHMubGVuZ3RoID09IDYgP1xyXG4gICAgICBhcnJheVRvTWF0cml4KFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkgOlxyXG4gICAgQXJyYXkuaXNBcnJheShzb3VyY2UpID9cclxuICAgICAgYXJyYXlUb01hdHJpeChzb3VyY2UpIDpcclxuICAgIHR5cGVvZiBzb3VyY2UgPT09ICdvYmplY3QnID9cclxuICAgICAgc291cmNlIDogYmFzZVxyXG5cclxuICAgIC8vIG1lcmdlIHNvdXJjZVxyXG4gICAgZm9yIChpID0gYWJjZGVmLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKVxyXG4gICAgICB0aGlzW2FiY2RlZltpXV0gPSBzb3VyY2VbYWJjZGVmW2ldXSAhPSBudWxsID9cclxuICAgICAgICBzb3VyY2VbYWJjZGVmW2ldXSA6IGJhc2VbYWJjZGVmW2ldXVxyXG4gIH1cclxuXHJcbiAgLy8gQWRkIG1ldGhvZHNcclxuLCBleHRlbmQ6IHtcclxuICAgIC8vIEV4dHJhY3QgaW5kaXZpZHVhbCB0cmFuc2Zvcm1hdGlvbnNcclxuICAgIGV4dHJhY3Q6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyBmaW5kIGRlbHRhIHRyYW5zZm9ybSBwb2ludHNcclxuICAgICAgdmFyIHB4ICAgID0gZGVsdGFUcmFuc2Zvcm1Qb2ludCh0aGlzLCAwLCAxKVxyXG4gICAgICAgICwgcHkgICAgPSBkZWx0YVRyYW5zZm9ybVBvaW50KHRoaXMsIDEsIDApXHJcbiAgICAgICAgLCBza2V3WCA9IDE4MCAvIE1hdGguUEkgKiBNYXRoLmF0YW4yKHB4LnksIHB4LngpIC0gOTBcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLy8gdHJhbnNsYXRpb25cclxuICAgICAgICB4OiAgICAgICAgdGhpcy5lXHJcbiAgICAgICwgeTogICAgICAgIHRoaXMuZlxyXG4gICAgICAsIHRyYW5zZm9ybWVkWDoodGhpcy5lICogTWF0aC5jb3Moc2tld1ggKiBNYXRoLlBJIC8gMTgwKSArIHRoaXMuZiAqIE1hdGguc2luKHNrZXdYICogTWF0aC5QSSAvIDE4MCkpIC8gTWF0aC5zcXJ0KHRoaXMuYSAqIHRoaXMuYSArIHRoaXMuYiAqIHRoaXMuYilcclxuICAgICAgLCB0cmFuc2Zvcm1lZFk6KHRoaXMuZiAqIE1hdGguY29zKHNrZXdYICogTWF0aC5QSSAvIDE4MCkgKyB0aGlzLmUgKiBNYXRoLnNpbigtc2tld1ggKiBNYXRoLlBJIC8gMTgwKSkgLyBNYXRoLnNxcnQodGhpcy5jICogdGhpcy5jICsgdGhpcy5kICogdGhpcy5kKVxyXG4gICAgICAgIC8vIHNrZXdcclxuICAgICAgLCBza2V3WDogICAgLXNrZXdYXHJcbiAgICAgICwgc2tld1k6ICAgIDE4MCAvIE1hdGguUEkgKiBNYXRoLmF0YW4yKHB5LnksIHB5LngpXHJcbiAgICAgICAgLy8gc2NhbGVcclxuICAgICAgLCBzY2FsZVg6ICAgTWF0aC5zcXJ0KHRoaXMuYSAqIHRoaXMuYSArIHRoaXMuYiAqIHRoaXMuYilcclxuICAgICAgLCBzY2FsZVk6ICAgTWF0aC5zcXJ0KHRoaXMuYyAqIHRoaXMuYyArIHRoaXMuZCAqIHRoaXMuZClcclxuICAgICAgICAvLyByb3RhdGlvblxyXG4gICAgICAsIHJvdGF0aW9uOiBza2V3WFxyXG4gICAgICAsIGE6IHRoaXMuYVxyXG4gICAgICAsIGI6IHRoaXMuYlxyXG4gICAgICAsIGM6IHRoaXMuY1xyXG4gICAgICAsIGQ6IHRoaXMuZFxyXG4gICAgICAsIGU6IHRoaXMuZVxyXG4gICAgICAsIGY6IHRoaXMuZlxyXG4gICAgICAsIG1hdHJpeDogbmV3IFNWRy5NYXRyaXgodGhpcylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gQ2xvbmUgbWF0cml4XHJcbiAgLCBjbG9uZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBuZXcgU1ZHLk1hdHJpeCh0aGlzKVxyXG4gICAgfVxyXG4gICAgLy8gTW9ycGggb25lIG1hdHJpeCBpbnRvIGFub3RoZXJcclxuICAsIG1vcnBoOiBmdW5jdGlvbihtYXRyaXgpIHtcclxuICAgICAgLy8gc3RvcmUgbmV3IGRlc3RpbmF0aW9uXHJcbiAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBuZXcgU1ZHLk1hdHJpeChtYXRyaXgpXHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG4gICAgLy8gR2V0IG1vcnBoZWQgbWF0cml4IGF0IGEgZ2l2ZW4gcG9zaXRpb25cclxuICAsIGF0OiBmdW5jdGlvbihwb3MpIHtcclxuICAgICAgLy8gbWFrZSBzdXJlIGEgZGVzdGluYXRpb24gaXMgZGVmaW5lZFxyXG4gICAgICBpZiAoIXRoaXMuZGVzdGluYXRpb24pIHJldHVybiB0aGlzXHJcblxyXG4gICAgICAvLyBjYWxjdWxhdGUgbW9ycGhlZCBtYXRyaXggYXQgYSBnaXZlbiBwb3NpdGlvblxyXG4gICAgICB2YXIgbWF0cml4ID0gbmV3IFNWRy5NYXRyaXgoe1xyXG4gICAgICAgIGE6IHRoaXMuYSArICh0aGlzLmRlc3RpbmF0aW9uLmEgLSB0aGlzLmEpICogcG9zXHJcbiAgICAgICwgYjogdGhpcy5iICsgKHRoaXMuZGVzdGluYXRpb24uYiAtIHRoaXMuYikgKiBwb3NcclxuICAgICAgLCBjOiB0aGlzLmMgKyAodGhpcy5kZXN0aW5hdGlvbi5jIC0gdGhpcy5jKSAqIHBvc1xyXG4gICAgICAsIGQ6IHRoaXMuZCArICh0aGlzLmRlc3RpbmF0aW9uLmQgLSB0aGlzLmQpICogcG9zXHJcbiAgICAgICwgZTogdGhpcy5lICsgKHRoaXMuZGVzdGluYXRpb24uZSAtIHRoaXMuZSkgKiBwb3NcclxuICAgICAgLCBmOiB0aGlzLmYgKyAodGhpcy5kZXN0aW5hdGlvbi5mIC0gdGhpcy5mKSAqIHBvc1xyXG4gICAgICB9KVxyXG5cclxuICAgICAgcmV0dXJuIG1hdHJpeFxyXG4gICAgfVxyXG4gICAgLy8gTXVsdGlwbGllcyBieSBnaXZlbiBtYXRyaXhcclxuICAsIG11bHRpcGx5OiBmdW5jdGlvbihtYXRyaXgpIHtcclxuICAgICAgcmV0dXJuIG5ldyBTVkcuTWF0cml4KHRoaXMubmF0aXZlKCkubXVsdGlwbHkocGFyc2VNYXRyaXgobWF0cml4KS5uYXRpdmUoKSkpXHJcbiAgICB9XHJcbiAgICAvLyBJbnZlcnNlcyBtYXRyaXhcclxuICAsIGludmVyc2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gbmV3IFNWRy5NYXRyaXgodGhpcy5uYXRpdmUoKS5pbnZlcnNlKCkpXHJcbiAgICB9XHJcbiAgICAvLyBUcmFuc2xhdGUgbWF0cml4XHJcbiAgLCB0cmFuc2xhdGU6IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgICAgcmV0dXJuIG5ldyBTVkcuTWF0cml4KHRoaXMubmF0aXZlKCkudHJhbnNsYXRlKHggfHwgMCwgeSB8fCAwKSlcclxuICAgIH1cclxuICAgIC8vIFNjYWxlIG1hdHJpeFxyXG4gICwgc2NhbGU6IGZ1bmN0aW9uKHgsIHksIGN4LCBjeSkge1xyXG4gICAgICAvLyBzdXBwb3J0IHVuaWZvcm1hbCBzY2FsZVxyXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgeSA9IHhcclxuICAgICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDMpIHtcclxuICAgICAgICBjeSA9IGN4XHJcbiAgICAgICAgY3ggPSB5XHJcbiAgICAgICAgeSA9IHhcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuYXJvdW5kKGN4LCBjeSwgbmV3IFNWRy5NYXRyaXgoeCwgMCwgMCwgeSwgMCwgMCkpXHJcbiAgICB9XHJcbiAgICAvLyBSb3RhdGUgbWF0cml4XHJcbiAgLCByb3RhdGU6IGZ1bmN0aW9uKHIsIGN4LCBjeSkge1xyXG4gICAgICAvLyBjb252ZXJ0IGRlZ3JlZXMgdG8gcmFkaWFuc1xyXG4gICAgICByID0gU1ZHLnV0aWxzLnJhZGlhbnMocilcclxuXHJcbiAgICAgIHJldHVybiB0aGlzLmFyb3VuZChjeCwgY3ksIG5ldyBTVkcuTWF0cml4KE1hdGguY29zKHIpLCBNYXRoLnNpbihyKSwgLU1hdGguc2luKHIpLCBNYXRoLmNvcyhyKSwgMCwgMCkpXHJcbiAgICB9XHJcbiAgICAvLyBGbGlwIG1hdHJpeCBvbiB4IG9yIHksIGF0IGEgZ2l2ZW4gb2Zmc2V0XHJcbiAgLCBmbGlwOiBmdW5jdGlvbihhLCBvKSB7XHJcbiAgICAgIHJldHVybiBhID09ICd4JyA/XHJcbiAgICAgICAgICB0aGlzLnNjYWxlKC0xLCAxLCBvLCAwKSA6XHJcbiAgICAgICAgYSA9PSAneScgP1xyXG4gICAgICAgICAgdGhpcy5zY2FsZSgxLCAtMSwgMCwgbykgOlxyXG4gICAgICAgICAgdGhpcy5zY2FsZSgtMSwgLTEsIGEsIG8gIT0gbnVsbCA/IG8gOiBhKVxyXG4gICAgfVxyXG4gICAgLy8gU2tld1xyXG4gICwgc2tldzogZnVuY3Rpb24oeCwgeSwgY3gsIGN5KSB7XHJcbiAgICAgIC8vIHN1cHBvcnQgdW5pZm9ybWFsIHNrZXdcclxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgIHkgPSB4XHJcbiAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAzKSB7XHJcbiAgICAgICAgY3kgPSBjeFxyXG4gICAgICAgIGN4ID0geVxyXG4gICAgICAgIHkgPSB4XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGNvbnZlcnQgZGVncmVlcyB0byByYWRpYW5zXHJcbiAgICAgIHggPSBTVkcudXRpbHMucmFkaWFucyh4KVxyXG4gICAgICB5ID0gU1ZHLnV0aWxzLnJhZGlhbnMoeSlcclxuXHJcbiAgICAgIHJldHVybiB0aGlzLmFyb3VuZChjeCwgY3ksIG5ldyBTVkcuTWF0cml4KDEsIE1hdGgudGFuKHkpLCBNYXRoLnRhbih4KSwgMSwgMCwgMCkpXHJcbiAgICB9XHJcbiAgICAvLyBTa2V3WFxyXG4gICwgc2tld1g6IGZ1bmN0aW9uKHgsIGN4LCBjeSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5za2V3KHgsIDAsIGN4LCBjeSlcclxuICAgIH1cclxuICAgIC8vIFNrZXdZXHJcbiAgLCBza2V3WTogZnVuY3Rpb24oeSwgY3gsIGN5KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnNrZXcoMCwgeSwgY3gsIGN5KVxyXG4gICAgfVxyXG4gICAgLy8gVHJhbnNmb3JtIGFyb3VuZCBhIGNlbnRlciBwb2ludFxyXG4gICwgYXJvdW5kOiBmdW5jdGlvbihjeCwgY3ksIG1hdHJpeCkge1xyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgIC5tdWx0aXBseShuZXcgU1ZHLk1hdHJpeCgxLCAwLCAwLCAxLCBjeCB8fCAwLCBjeSB8fCAwKSlcclxuICAgICAgICAubXVsdGlwbHkobWF0cml4KVxyXG4gICAgICAgIC5tdWx0aXBseShuZXcgU1ZHLk1hdHJpeCgxLCAwLCAwLCAxLCAtY3ggfHwgMCwgLWN5IHx8IDApKVxyXG4gICAgfVxyXG4gICAgLy8gQ29udmVydCB0byBuYXRpdmUgU1ZHTWF0cml4XHJcbiAgLCBuYXRpdmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyBjcmVhdGUgbmV3IG1hdHJpeFxyXG4gICAgICB2YXIgbWF0cml4ID0gU1ZHLnBhcnNlci5uYXRpdmUuY3JlYXRlU1ZHTWF0cml4KClcclxuXHJcbiAgICAgIC8vIHVwZGF0ZSB3aXRoIGN1cnJlbnQgdmFsdWVzXHJcbiAgICAgIGZvciAodmFyIGkgPSBhYmNkZWYubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXHJcbiAgICAgICAgbWF0cml4W2FiY2RlZltpXV0gPSB0aGlzW2FiY2RlZltpXV1cclxuXHJcbiAgICAgIHJldHVybiBtYXRyaXhcclxuICAgIH1cclxuICAgIC8vIENvbnZlcnQgbWF0cml4IHRvIHN0cmluZ1xyXG4gICwgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyBDb25zdHJ1Y3QgdGhlIG1hdHJpeCBkaXJlY3RseSwgYXZvaWQgdmFsdWVzIHRoYXQgYXJlIHRvbyBzbWFsbFxyXG4gICAgICByZXR1cm4gJ21hdHJpeCgnICsgZmxvYXQzMlN0cmluZyh0aGlzLmEpICsgJywnICsgZmxvYXQzMlN0cmluZyh0aGlzLmIpXHJcbiAgICAgICAgKyAnLCcgKyBmbG9hdDMyU3RyaW5nKHRoaXMuYykgKyAnLCcgKyBmbG9hdDMyU3RyaW5nKHRoaXMuZClcclxuICAgICAgICArICcsJyArIGZsb2F0MzJTdHJpbmcodGhpcy5lKSArICcsJyArIGZsb2F0MzJTdHJpbmcodGhpcy5mKVxyXG4gICAgICAgICsgJyknXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBEZWZpbmUgcGFyZW50XHJcbiwgcGFyZW50OiBTVkcuRWxlbWVudFxyXG5cclxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxyXG4sIGNvbnN0cnVjdDoge1xyXG4gICAgLy8gR2V0IGN1cnJlbnQgbWF0cml4XHJcbiAgICBjdG06IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gbmV3IFNWRy5NYXRyaXgodGhpcy5ub2RlLmdldENUTSgpKVxyXG4gICAgfSxcclxuICAgIC8vIEdldCBjdXJyZW50IHNjcmVlbiBtYXRyaXhcclxuICAgIHNjcmVlbkNUTTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIC8qIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEzNDQ1MzdcclxuICAgICAgICAgVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSBGRiBkb2VzIG5vdCByZXR1cm4gdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxyXG4gICAgICAgICBmb3IgdGhlIGlubmVyIGNvb3JkaW5hdGUgc3lzdGVtIHdoZW4gZ2V0U2NyZWVuQ1RNKCkgaXMgY2FsbGVkIG9uIG5lc3RlZCBzdmdzLlxyXG4gICAgICAgICBIb3dldmVyIGFsbCBvdGhlciBCcm93c2VycyBkbyB0aGF0ICovXHJcbiAgICAgIGlmKHRoaXMgaW5zdGFuY2VvZiBTVkcuTmVzdGVkKSB7XHJcbiAgICAgICAgdmFyIHJlY3QgPSB0aGlzLnJlY3QoMSwxKVxyXG4gICAgICAgIHZhciBtID0gcmVjdC5ub2RlLmdldFNjcmVlbkNUTSgpXHJcbiAgICAgICAgcmVjdC5yZW1vdmUoKVxyXG4gICAgICAgIHJldHVybiBuZXcgU1ZHLk1hdHJpeChtKVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBuZXcgU1ZHLk1hdHJpeCh0aGlzLm5vZGUuZ2V0U2NyZWVuQ1RNKCkpXHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn0pXHJcblxuU1ZHLlBvaW50ID0gU1ZHLmludmVudCh7XHJcbiAgLy8gSW5pdGlhbGl6ZVxyXG4gIGNyZWF0ZTogZnVuY3Rpb24oeCx5KSB7XHJcbiAgICB2YXIgaSwgc291cmNlLCBiYXNlID0ge3g6MCwgeTowfVxyXG5cclxuICAgIC8vIGVuc3VyZSBzb3VyY2UgYXMgb2JqZWN0XHJcbiAgICBzb3VyY2UgPSBBcnJheS5pc0FycmF5KHgpID9cclxuICAgICAge3g6eFswXSwgeTp4WzFdfSA6XHJcbiAgICB0eXBlb2YgeCA9PT0gJ29iamVjdCcgP1xyXG4gICAgICB7eDp4LngsIHk6eC55fSA6XHJcbiAgICB4ICE9IG51bGwgP1xyXG4gICAgICB7eDp4LCB5Oih5ICE9IG51bGwgPyB5IDogeCl9IDogYmFzZSAvLyBJZiB5IGhhcyBubyB2YWx1ZSwgdGhlbiB4IGlzIHVzZWQgaGFzIGl0cyB2YWx1ZVxyXG5cclxuICAgIC8vIG1lcmdlIHNvdXJjZVxyXG4gICAgdGhpcy54ID0gc291cmNlLnhcclxuICAgIHRoaXMueSA9IHNvdXJjZS55XHJcbiAgfVxyXG5cclxuICAvLyBBZGQgbWV0aG9kc1xyXG4sIGV4dGVuZDoge1xyXG4gICAgLy8gQ2xvbmUgcG9pbnRcclxuICAgIGNsb25lOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIG5ldyBTVkcuUG9pbnQodGhpcylcclxuICAgIH1cclxuICAgIC8vIE1vcnBoIG9uZSBwb2ludCBpbnRvIGFub3RoZXJcclxuICAsIG1vcnBoOiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICAgIC8vIHN0b3JlIG5ldyBkZXN0aW5hdGlvblxyXG4gICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbmV3IFNWRy5Qb2ludCh4LCB5KVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAgIC8vIEdldCBtb3JwaGVkIHBvaW50IGF0IGEgZ2l2ZW4gcG9zaXRpb25cclxuICAsIGF0OiBmdW5jdGlvbihwb3MpIHtcclxuICAgICAgLy8gbWFrZSBzdXJlIGEgZGVzdGluYXRpb24gaXMgZGVmaW5lZFxyXG4gICAgICBpZiAoIXRoaXMuZGVzdGluYXRpb24pIHJldHVybiB0aGlzXHJcblxyXG4gICAgICAvLyBjYWxjdWxhdGUgbW9ycGhlZCBtYXRyaXggYXQgYSBnaXZlbiBwb3NpdGlvblxyXG4gICAgICB2YXIgcG9pbnQgPSBuZXcgU1ZHLlBvaW50KHtcclxuICAgICAgICB4OiB0aGlzLnggKyAodGhpcy5kZXN0aW5hdGlvbi54IC0gdGhpcy54KSAqIHBvc1xyXG4gICAgICAsIHk6IHRoaXMueSArICh0aGlzLmRlc3RpbmF0aW9uLnkgLSB0aGlzLnkpICogcG9zXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICByZXR1cm4gcG9pbnRcclxuICAgIH1cclxuICAgIC8vIENvbnZlcnQgdG8gbmF0aXZlIFNWR1BvaW50XHJcbiAgLCBuYXRpdmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyBjcmVhdGUgbmV3IHBvaW50XHJcbiAgICAgIHZhciBwb2ludCA9IFNWRy5wYXJzZXIubmF0aXZlLmNyZWF0ZVNWR1BvaW50KClcclxuXHJcbiAgICAgIC8vIHVwZGF0ZSB3aXRoIGN1cnJlbnQgdmFsdWVzXHJcbiAgICAgIHBvaW50LnggPSB0aGlzLnhcclxuICAgICAgcG9pbnQueSA9IHRoaXMueVxyXG5cclxuICAgICAgcmV0dXJuIHBvaW50XHJcbiAgICB9XHJcbiAgICAvLyB0cmFuc2Zvcm0gcG9pbnQgd2l0aCBtYXRyaXhcclxuICAsIHRyYW5zZm9ybTogZnVuY3Rpb24obWF0cml4KSB7XHJcbiAgICAgIHJldHVybiBuZXcgU1ZHLlBvaW50KHRoaXMubmF0aXZlKCkubWF0cml4VHJhbnNmb3JtKG1hdHJpeC5uYXRpdmUoKSkpXHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn0pXHJcblxyXG5TVkcuZXh0ZW5kKFNWRy5FbGVtZW50LCB7XHJcblxyXG4gIC8vIEdldCBwb2ludFxyXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICByZXR1cm4gbmV3IFNWRy5Qb2ludCh4LHkpLnRyYW5zZm9ybSh0aGlzLnNjcmVlbkNUTSgpLmludmVyc2UoKSk7XHJcbiAgfVxyXG5cclxufSlcclxuXG5TVkcuZXh0ZW5kKFNWRy5FbGVtZW50LCB7XHJcbiAgLy8gU2V0IHN2ZyBlbGVtZW50IGF0dHJpYnV0ZVxyXG4gIGF0dHI6IGZ1bmN0aW9uKGEsIHYsIG4pIHtcclxuICAgIC8vIGFjdCBhcyBmdWxsIGdldHRlclxyXG4gICAgaWYgKGEgPT0gbnVsbCkge1xyXG4gICAgICAvLyBnZXQgYW4gb2JqZWN0IG9mIGF0dHJpYnV0ZXNcclxuICAgICAgYSA9IHt9XHJcbiAgICAgIHYgPSB0aGlzLm5vZGUuYXR0cmlidXRlc1xyXG4gICAgICBmb3IgKG4gPSB2Lmxlbmd0aCAtIDE7IG4gPj0gMDsgbi0tKVxyXG4gICAgICAgIGFbdltuXS5ub2RlTmFtZV0gPSBTVkcucmVnZXguaXNOdW1iZXIudGVzdCh2W25dLm5vZGVWYWx1ZSkgPyBwYXJzZUZsb2F0KHZbbl0ubm9kZVZhbHVlKSA6IHZbbl0ubm9kZVZhbHVlXHJcblxyXG4gICAgICByZXR1cm4gYVxyXG5cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGEgPT0gJ29iamVjdCcpIHtcclxuICAgICAgLy8gYXBwbHkgZXZlcnkgYXR0cmlidXRlIGluZGl2aWR1YWxseSBpZiBhbiBvYmplY3QgaXMgcGFzc2VkXHJcbiAgICAgIGZvciAodiBpbiBhKSB0aGlzLmF0dHIodiwgYVt2XSlcclxuXHJcbiAgICB9IGVsc2UgaWYgKHYgPT09IG51bGwpIHtcclxuICAgICAgICAvLyByZW1vdmUgdmFsdWVcclxuICAgICAgICB0aGlzLm5vZGUucmVtb3ZlQXR0cmlidXRlKGEpXHJcblxyXG4gICAgfSBlbHNlIGlmICh2ID09IG51bGwpIHtcclxuICAgICAgLy8gYWN0IGFzIGEgZ2V0dGVyIGlmIHRoZSBmaXJzdCBhbmQgb25seSBhcmd1bWVudCBpcyBub3QgYW4gb2JqZWN0XHJcbiAgICAgIHYgPSB0aGlzLm5vZGUuZ2V0QXR0cmlidXRlKGEpXHJcbiAgICAgIHJldHVybiB2ID09IG51bGwgP1xyXG4gICAgICAgIFNWRy5kZWZhdWx0cy5hdHRyc1thXSA6XHJcbiAgICAgIFNWRy5yZWdleC5pc051bWJlci50ZXN0KHYpID9cclxuICAgICAgICBwYXJzZUZsb2F0KHYpIDogdlxyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIEJVRyBGSVg6IHNvbWUgYnJvd3NlcnMgd2lsbCByZW5kZXIgYSBzdHJva2UgaWYgYSBjb2xvciBpcyBnaXZlbiBldmVuIHRob3VnaCBzdHJva2Ugd2lkdGggaXMgMFxyXG4gICAgICBpZiAoYSA9PSAnc3Ryb2tlLXdpZHRoJylcclxuICAgICAgICB0aGlzLmF0dHIoJ3N0cm9rZScsIHBhcnNlRmxvYXQodikgPiAwID8gdGhpcy5fc3Ryb2tlIDogbnVsbClcclxuICAgICAgZWxzZSBpZiAoYSA9PSAnc3Ryb2tlJylcclxuICAgICAgICB0aGlzLl9zdHJva2UgPSB2XHJcblxyXG4gICAgICAvLyBjb252ZXJ0IGltYWdlIGZpbGwgYW5kIHN0cm9rZSB0byBwYXR0ZXJuc1xyXG4gICAgICBpZiAoYSA9PSAnZmlsbCcgfHwgYSA9PSAnc3Ryb2tlJykge1xyXG4gICAgICAgIGlmIChTVkcucmVnZXguaXNJbWFnZS50ZXN0KHYpKVxyXG4gICAgICAgICAgdiA9IHRoaXMuZG9jKCkuZGVmcygpLmltYWdlKHYsIDAsIDApXHJcblxyXG4gICAgICAgIGlmICh2IGluc3RhbmNlb2YgU1ZHLkltYWdlKVxyXG4gICAgICAgICAgdiA9IHRoaXMuZG9jKCkuZGVmcygpLnBhdHRlcm4oMCwgMCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkKHYpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBlbnN1cmUgY29ycmVjdCBudW1lcmljIHZhbHVlcyAoYWxzbyBhY2NlcHRzIE5hTiBhbmQgSW5maW5pdHkpXHJcbiAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgdiA9IG5ldyBTVkcuTnVtYmVyKHYpXHJcblxyXG4gICAgICAvLyBlbnN1cmUgZnVsbCBoZXggY29sb3JcclxuICAgICAgZWxzZSBpZiAoU1ZHLkNvbG9yLmlzQ29sb3IodikpXHJcbiAgICAgICAgdiA9IG5ldyBTVkcuQ29sb3IodilcclxuXHJcbiAgICAgIC8vIHBhcnNlIGFycmF5IHZhbHVlc1xyXG4gICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHYpKVxyXG4gICAgICAgIHYgPSBuZXcgU1ZHLkFycmF5KHYpXHJcblxyXG4gICAgICAvLyBpZiB0aGUgcGFzc2VkIGF0dHJpYnV0ZSBpcyBsZWFkaW5nLi4uXHJcbiAgICAgIGlmIChhID09ICdsZWFkaW5nJykge1xyXG4gICAgICAgIC8vIC4uLiBjYWxsIHRoZSBsZWFkaW5nIG1ldGhvZCBpbnN0ZWFkXHJcbiAgICAgICAgaWYgKHRoaXMubGVhZGluZylcclxuICAgICAgICAgIHRoaXMubGVhZGluZyh2KVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIHNldCBnaXZlbiBhdHRyaWJ1dGUgb24gbm9kZVxyXG4gICAgICAgIHR5cGVvZiBuID09PSAnc3RyaW5nJyA/XHJcbiAgICAgICAgICB0aGlzLm5vZGUuc2V0QXR0cmlidXRlTlMobiwgYSwgdi50b1N0cmluZygpKSA6XHJcbiAgICAgICAgICB0aGlzLm5vZGUuc2V0QXR0cmlidXRlKGEsIHYudG9TdHJpbmcoKSlcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gcmVidWlsZCBpZiByZXF1aXJlZFxyXG4gICAgICBpZiAodGhpcy5yZWJ1aWxkICYmIChhID09ICdmb250LXNpemUnIHx8IGEgPT0gJ3gnKSlcclxuICAgICAgICB0aGlzLnJlYnVpbGQoYSwgdilcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxufSlcblNWRy5leHRlbmQoU1ZHLkVsZW1lbnQsIHtcclxuICAvLyBBZGQgdHJhbnNmb3JtYXRpb25zXHJcbiAgdHJhbnNmb3JtOiBmdW5jdGlvbihvLCByZWxhdGl2ZSkge1xyXG4gICAgLy8gZ2V0IHRhcmdldCBpbiBjYXNlIG9mIHRoZSBmeCBtb2R1bGUsIG90aGVyd2lzZSByZWZlcmVuY2UgdGhpc1xyXG4gICAgdmFyIHRhcmdldCA9IHRoaXNcclxuICAgICAgLCBtYXRyaXgsIGJib3hcclxuXHJcbiAgICAvLyBhY3QgYXMgYSBnZXR0ZXJcclxuICAgIGlmICh0eXBlb2YgbyAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgLy8gZ2V0IGN1cnJlbnQgbWF0cml4XHJcbiAgICAgIG1hdHJpeCA9IG5ldyBTVkcuTWF0cml4KHRhcmdldCkuZXh0cmFjdCgpXHJcblxyXG4gICAgICByZXR1cm4gdHlwZW9mIG8gPT09ICdzdHJpbmcnID8gbWF0cml4W29dIDogbWF0cml4XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZ2V0IGN1cnJlbnQgbWF0cml4XHJcbiAgICBtYXRyaXggPSBuZXcgU1ZHLk1hdHJpeCh0YXJnZXQpXHJcblxyXG4gICAgLy8gZW5zdXJlIHJlbGF0aXZlIGZsYWdcclxuICAgIHJlbGF0aXZlID0gISFyZWxhdGl2ZSB8fCAhIW8ucmVsYXRpdmVcclxuXHJcbiAgICAvLyBhY3Qgb24gbWF0cml4XHJcbiAgICBpZiAoby5hICE9IG51bGwpIHtcclxuICAgICAgbWF0cml4ID0gcmVsYXRpdmUgP1xyXG4gICAgICAgIC8vIHJlbGF0aXZlXHJcbiAgICAgICAgbWF0cml4Lm11bHRpcGx5KG5ldyBTVkcuTWF0cml4KG8pKSA6XHJcbiAgICAgICAgLy8gYWJzb2x1dGVcclxuICAgICAgICBuZXcgU1ZHLk1hdHJpeChvKVxyXG5cclxuICAgIC8vIGFjdCBvbiByb3RhdGlvblxyXG4gICAgfSBlbHNlIGlmIChvLnJvdGF0aW9uICE9IG51bGwpIHtcclxuICAgICAgLy8gZW5zdXJlIGNlbnRyZSBwb2ludFxyXG4gICAgICBlbnN1cmVDZW50cmUobywgdGFyZ2V0KVxyXG5cclxuICAgICAgLy8gYXBwbHkgdHJhbnNmb3JtYXRpb25cclxuICAgICAgbWF0cml4ID0gcmVsYXRpdmUgP1xyXG4gICAgICAgIC8vIHJlbGF0aXZlXHJcbiAgICAgICAgbWF0cml4LnJvdGF0ZShvLnJvdGF0aW9uLCBvLmN4LCBvLmN5KSA6XHJcbiAgICAgICAgLy8gYWJzb2x1dGVcclxuICAgICAgICBtYXRyaXgucm90YXRlKG8ucm90YXRpb24gLSBtYXRyaXguZXh0cmFjdCgpLnJvdGF0aW9uLCBvLmN4LCBvLmN5KVxyXG5cclxuICAgIC8vIGFjdCBvbiBzY2FsZVxyXG4gICAgfSBlbHNlIGlmIChvLnNjYWxlICE9IG51bGwgfHwgby5zY2FsZVggIT0gbnVsbCB8fCBvLnNjYWxlWSAhPSBudWxsKSB7XHJcbiAgICAgIC8vIGVuc3VyZSBjZW50cmUgcG9pbnRcclxuICAgICAgZW5zdXJlQ2VudHJlKG8sIHRhcmdldClcclxuXHJcbiAgICAgIC8vIGVuc3VyZSBzY2FsZSB2YWx1ZXMgb24gYm90aCBheGVzXHJcbiAgICAgIG8uc2NhbGVYID0gby5zY2FsZSAhPSBudWxsID8gby5zY2FsZSA6IG8uc2NhbGVYICE9IG51bGwgPyBvLnNjYWxlWCA6IDFcclxuICAgICAgby5zY2FsZVkgPSBvLnNjYWxlICE9IG51bGwgPyBvLnNjYWxlIDogby5zY2FsZVkgIT0gbnVsbCA/IG8uc2NhbGVZIDogMVxyXG5cclxuICAgICAgaWYgKCFyZWxhdGl2ZSkge1xyXG4gICAgICAgIC8vIGFic29sdXRlOyBtdWx0aXBseSBpbnZlcnNlZCB2YWx1ZXNcclxuICAgICAgICB2YXIgZSA9IG1hdHJpeC5leHRyYWN0KClcclxuICAgICAgICBvLnNjYWxlWCA9IG8uc2NhbGVYICogMSAvIGUuc2NhbGVYXHJcbiAgICAgICAgby5zY2FsZVkgPSBvLnNjYWxlWSAqIDEgLyBlLnNjYWxlWVxyXG4gICAgICB9XHJcblxyXG4gICAgICBtYXRyaXggPSBtYXRyaXguc2NhbGUoby5zY2FsZVgsIG8uc2NhbGVZLCBvLmN4LCBvLmN5KVxyXG5cclxuICAgIC8vIGFjdCBvbiBza2V3XHJcbiAgICB9IGVsc2UgaWYgKG8uc2tldyAhPSBudWxsIHx8IG8uc2tld1ggIT0gbnVsbCB8fCBvLnNrZXdZICE9IG51bGwpIHtcclxuICAgICAgLy8gZW5zdXJlIGNlbnRyZSBwb2ludFxyXG4gICAgICBlbnN1cmVDZW50cmUobywgdGFyZ2V0KVxyXG5cclxuICAgICAgLy8gZW5zdXJlIHNrZXcgdmFsdWVzIG9uIGJvdGggYXhlc1xyXG4gICAgICBvLnNrZXdYID0gby5za2V3ICE9IG51bGwgPyBvLnNrZXcgOiBvLnNrZXdYICE9IG51bGwgPyBvLnNrZXdYIDogMFxyXG4gICAgICBvLnNrZXdZID0gby5za2V3ICE9IG51bGwgPyBvLnNrZXcgOiBvLnNrZXdZICE9IG51bGwgPyBvLnNrZXdZIDogMFxyXG5cclxuICAgICAgaWYgKCFyZWxhdGl2ZSkge1xyXG4gICAgICAgIC8vIGFic29sdXRlOyByZXNldCBza2V3IHZhbHVlc1xyXG4gICAgICAgIHZhciBlID0gbWF0cml4LmV4dHJhY3QoKVxyXG4gICAgICAgIG1hdHJpeCA9IG1hdHJpeC5tdWx0aXBseShuZXcgU1ZHLk1hdHJpeCgpLnNrZXcoZS5za2V3WCwgZS5za2V3WSwgby5jeCwgby5jeSkuaW52ZXJzZSgpKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBtYXRyaXggPSBtYXRyaXguc2tldyhvLnNrZXdYLCBvLnNrZXdZLCBvLmN4LCBvLmN5KVxyXG5cclxuICAgIC8vIGFjdCBvbiBmbGlwXHJcbiAgICB9IGVsc2UgaWYgKG8uZmxpcCkge1xyXG4gICAgICBpZihvLmZsaXAgPT0gJ3gnIHx8IG8uZmxpcCA9PSAneScpIHtcclxuICAgICAgICBvLm9mZnNldCA9IG8ub2Zmc2V0ID09IG51bGwgPyB0YXJnZXQuYmJveCgpWydjJyArIG8uZmxpcF0gOiBvLm9mZnNldFxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmKG8ub2Zmc2V0ID09IG51bGwpIHtcclxuICAgICAgICAgIGJib3ggPSB0YXJnZXQuYmJveCgpXHJcbiAgICAgICAgICBvLmZsaXAgPSBiYm94LmN4XHJcbiAgICAgICAgICBvLm9mZnNldCA9IGJib3guY3lcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgby5mbGlwID0gby5vZmZzZXRcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1hdHJpeCA9IG5ldyBTVkcuTWF0cml4KCkuZmxpcChvLmZsaXAsIG8ub2Zmc2V0KVxyXG5cclxuICAgIC8vIGFjdCBvbiB0cmFuc2xhdGVcclxuICAgIH0gZWxzZSBpZiAoby54ICE9IG51bGwgfHwgby55ICE9IG51bGwpIHtcclxuICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgLy8gcmVsYXRpdmVcclxuICAgICAgICBtYXRyaXggPSBtYXRyaXgudHJhbnNsYXRlKG8ueCwgby55KVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIGFic29sdXRlXHJcbiAgICAgICAgaWYgKG8ueCAhPSBudWxsKSBtYXRyaXguZSA9IG8ueFxyXG4gICAgICAgIGlmIChvLnkgIT0gbnVsbCkgbWF0cml4LmYgPSBvLnlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmF0dHIoJ3RyYW5zZm9ybScsIG1hdHJpeClcclxuICB9XHJcbn0pXHJcblxyXG5TVkcuZXh0ZW5kKFNWRy5GWCwge1xyXG4gIHRyYW5zZm9ybTogZnVuY3Rpb24obywgcmVsYXRpdmUpIHtcclxuICAgIC8vIGdldCB0YXJnZXQgaW4gY2FzZSBvZiB0aGUgZnggbW9kdWxlLCBvdGhlcndpc2UgcmVmZXJlbmNlIHRoaXNcclxuICAgIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldCgpXHJcbiAgICAgICwgbWF0cml4LCBiYm94XHJcblxyXG4gICAgLy8gYWN0IGFzIGEgZ2V0dGVyXHJcbiAgICBpZiAodHlwZW9mIG8gIT09ICdvYmplY3QnKSB7XHJcbiAgICAgIC8vIGdldCBjdXJyZW50IG1hdHJpeFxyXG4gICAgICBtYXRyaXggPSBuZXcgU1ZHLk1hdHJpeCh0YXJnZXQpLmV4dHJhY3QoKVxyXG5cclxuICAgICAgcmV0dXJuIHR5cGVvZiBvID09PSAnc3RyaW5nJyA/IG1hdHJpeFtvXSA6IG1hdHJpeFxyXG4gICAgfVxyXG5cclxuICAgIC8vIGVuc3VyZSByZWxhdGl2ZSBmbGFnXHJcbiAgICByZWxhdGl2ZSA9ICEhcmVsYXRpdmUgfHwgISFvLnJlbGF0aXZlXHJcblxyXG4gICAgLy8gYWN0IG9uIG1hdHJpeFxyXG4gICAgaWYgKG8uYSAhPSBudWxsKSB7XHJcbiAgICAgIG1hdHJpeCA9IG5ldyBTVkcuTWF0cml4KG8pXHJcblxyXG4gICAgLy8gYWN0IG9uIHJvdGF0aW9uXHJcbiAgICB9IGVsc2UgaWYgKG8ucm90YXRpb24gIT0gbnVsbCkge1xyXG4gICAgICAvLyBlbnN1cmUgY2VudHJlIHBvaW50XHJcbiAgICAgIGVuc3VyZUNlbnRyZShvLCB0YXJnZXQpXHJcblxyXG4gICAgICAvLyBhcHBseSB0cmFuc2Zvcm1hdGlvblxyXG4gICAgICBtYXRyaXggPSBuZXcgU1ZHLlJvdGF0ZShvLnJvdGF0aW9uLCBvLmN4LCBvLmN5KVxyXG5cclxuICAgIC8vIGFjdCBvbiBzY2FsZVxyXG4gICAgfSBlbHNlIGlmIChvLnNjYWxlICE9IG51bGwgfHwgby5zY2FsZVggIT0gbnVsbCB8fCBvLnNjYWxlWSAhPSBudWxsKSB7XHJcbiAgICAgIC8vIGVuc3VyZSBjZW50cmUgcG9pbnRcclxuICAgICAgZW5zdXJlQ2VudHJlKG8sIHRhcmdldClcclxuXHJcbiAgICAgIC8vIGVuc3VyZSBzY2FsZSB2YWx1ZXMgb24gYm90aCBheGVzXHJcbiAgICAgIG8uc2NhbGVYID0gby5zY2FsZSAhPSBudWxsID8gby5zY2FsZSA6IG8uc2NhbGVYICE9IG51bGwgPyBvLnNjYWxlWCA6IDFcclxuICAgICAgby5zY2FsZVkgPSBvLnNjYWxlICE9IG51bGwgPyBvLnNjYWxlIDogby5zY2FsZVkgIT0gbnVsbCA/IG8uc2NhbGVZIDogMVxyXG5cclxuICAgICAgbWF0cml4ID0gbmV3IFNWRy5TY2FsZShvLnNjYWxlWCwgby5zY2FsZVksIG8uY3gsIG8uY3kpXHJcblxyXG4gICAgLy8gYWN0IG9uIHNrZXdcclxuICAgIH0gZWxzZSBpZiAoby5za2V3WCAhPSBudWxsIHx8IG8uc2tld1kgIT0gbnVsbCkge1xyXG4gICAgICAvLyBlbnN1cmUgY2VudHJlIHBvaW50XHJcbiAgICAgIGVuc3VyZUNlbnRyZShvLCB0YXJnZXQpXHJcblxyXG4gICAgICAvLyBlbnN1cmUgc2tldyB2YWx1ZXMgb24gYm90aCBheGVzXHJcbiAgICAgIG8uc2tld1ggPSBvLnNrZXdYICE9IG51bGwgPyBvLnNrZXdYIDogMFxyXG4gICAgICBvLnNrZXdZID0gby5za2V3WSAhPSBudWxsID8gby5za2V3WSA6IDBcclxuXHJcbiAgICAgIG1hdHJpeCA9IG5ldyBTVkcuU2tldyhvLnNrZXdYLCBvLnNrZXdZLCBvLmN4LCBvLmN5KVxyXG5cclxuICAgIC8vIGFjdCBvbiBmbGlwXHJcbiAgICB9IGVsc2UgaWYgKG8uZmxpcCkge1xyXG4gICAgICBpZihvLmZsaXAgPT0gJ3gnIHx8IG8uZmxpcCA9PSAneScpIHtcclxuICAgICAgICBvLm9mZnNldCA9IG8ub2Zmc2V0ID09IG51bGwgPyB0YXJnZXQuYmJveCgpWydjJyArIG8uZmxpcF0gOiBvLm9mZnNldFxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmKG8ub2Zmc2V0ID09IG51bGwpIHtcclxuICAgICAgICAgIGJib3ggPSB0YXJnZXQuYmJveCgpXHJcbiAgICAgICAgICBvLmZsaXAgPSBiYm94LmN4XHJcbiAgICAgICAgICBvLm9mZnNldCA9IGJib3guY3lcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgby5mbGlwID0gby5vZmZzZXRcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1hdHJpeCA9IG5ldyBTVkcuTWF0cml4KCkuZmxpcChvLmZsaXAsIG8ub2Zmc2V0KVxyXG5cclxuICAgIC8vIGFjdCBvbiB0cmFuc2xhdGVcclxuICAgIH0gZWxzZSBpZiAoby54ICE9IG51bGwgfHwgby55ICE9IG51bGwpIHtcclxuICAgICAgbWF0cml4ID0gbmV3IFNWRy5UcmFuc2xhdGUoby54LCBvLnkpXHJcbiAgICB9XHJcblxyXG4gICAgaWYoIW1hdHJpeCkgcmV0dXJuIHRoaXNcclxuXHJcbiAgICBtYXRyaXgucmVsYXRpdmUgPSByZWxhdGl2ZVxyXG5cclxuICAgIHRoaXMubGFzdCgpLnRyYW5zZm9ybXMucHVzaChtYXRyaXgpXHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2NhbGxTdGFydCgpXHJcbiAgfVxyXG59KVxyXG5cclxuU1ZHLmV4dGVuZChTVkcuRWxlbWVudCwge1xyXG4gIC8vIFJlc2V0IGFsbCB0cmFuc2Zvcm1hdGlvbnNcclxuICB1bnRyYW5zZm9ybTogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5hdHRyKCd0cmFuc2Zvcm0nLCBudWxsKVxyXG4gIH0sXHJcbiAgLy8gbWVyZ2UgdGhlIHdob2xlIHRyYW5zZm9ybWF0aW9uIGNoYWluIGludG8gb25lIG1hdHJpeCBhbmQgcmV0dXJucyBpdFxyXG4gIG1hdHJpeGlmeTogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgdmFyIG1hdHJpeCA9ICh0aGlzLmF0dHIoJ3RyYW5zZm9ybScpIHx8ICcnKVxyXG4gICAgICAvLyBzcGxpdCB0cmFuc2Zvcm1hdGlvbnNcclxuICAgICAgLnNwbGl0KFNWRy5yZWdleC50cmFuc2Zvcm1zKS5zbGljZSgwLC0xKS5tYXAoZnVuY3Rpb24oc3RyKXtcclxuICAgICAgICAvLyBnZW5lcmF0ZSBrZXkgPT4gdmFsdWUgcGFpcnNcclxuICAgICAgICB2YXIga3YgPSBzdHIudHJpbSgpLnNwbGl0KCcoJylcclxuICAgICAgICByZXR1cm4gW2t2WzBdLCBrdlsxXS5zcGxpdChTVkcucmVnZXguZGVsaW1pdGVyKS5tYXAoZnVuY3Rpb24oc3RyKXsgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKSB9KV1cclxuICAgICAgfSlcclxuICAgICAgLy8gbWVyZ2UgZXZlcnkgdHJhbnNmb3JtYXRpb24gaW50byBvbmUgbWF0cml4XHJcbiAgICAgIC5yZWR1Y2UoZnVuY3Rpb24obWF0cml4LCB0cmFuc2Zvcm0pe1xyXG5cclxuICAgICAgICBpZih0cmFuc2Zvcm1bMF0gPT0gJ21hdHJpeCcpIHJldHVybiBtYXRyaXgubXVsdGlwbHkoYXJyYXlUb01hdHJpeCh0cmFuc2Zvcm1bMV0pKVxyXG4gICAgICAgIHJldHVybiBtYXRyaXhbdHJhbnNmb3JtWzBdXS5hcHBseShtYXRyaXgsIHRyYW5zZm9ybVsxXSlcclxuXHJcbiAgICAgIH0sIG5ldyBTVkcuTWF0cml4KCkpXHJcblxyXG4gICAgcmV0dXJuIG1hdHJpeFxyXG4gIH0sXHJcbiAgLy8gYWRkIGFuIGVsZW1lbnQgdG8gYW5vdGhlciBwYXJlbnQgd2l0aG91dCBjaGFuZ2luZyB0aGUgdmlzdWFsIHJlcHJlc2VudGF0aW9uIG9uIHRoZSBzY3JlZW5cclxuICB0b1BhcmVudDogZnVuY3Rpb24ocGFyZW50KSB7XHJcbiAgICBpZih0aGlzID09IHBhcmVudCkgcmV0dXJuIHRoaXNcclxuICAgIHZhciBjdG0gPSB0aGlzLnNjcmVlbkNUTSgpXHJcbiAgICB2YXIgcEN0bSA9IHBhcmVudC5zY3JlZW5DVE0oKS5pbnZlcnNlKClcclxuXHJcbiAgICB0aGlzLmFkZFRvKHBhcmVudCkudW50cmFuc2Zvcm0oKS50cmFuc2Zvcm0ocEN0bS5tdWx0aXBseShjdG0pKVxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfSxcclxuICAvLyBzYW1lIGFzIGFib3ZlIHdpdGggcGFyZW50IGVxdWFscyByb290LXN2Z1xyXG4gIHRvRG9jOiBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLnRvUGFyZW50KHRoaXMuZG9jKCkpXHJcbiAgfVxyXG5cclxufSlcclxuXHJcblNWRy5UcmFuc2Zvcm1hdGlvbiA9IFNWRy5pbnZlbnQoe1xyXG5cclxuICBjcmVhdGU6IGZ1bmN0aW9uKHNvdXJjZSwgaW52ZXJzZWQpe1xyXG5cclxuICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBpbnZlcnNlZCAhPSAnYm9vbGVhbicpe1xyXG4gICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSlcclxuICAgIH1cclxuXHJcbiAgICBpZihBcnJheS5pc0FycmF5KHNvdXJjZSkpe1xyXG4gICAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW47ICsraSl7XHJcbiAgICAgICAgdGhpc1t0aGlzLmFyZ3VtZW50c1tpXV0gPSBzb3VyY2VbaV1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmKHR5cGVvZiBzb3VyY2UgPT0gJ29iamVjdCcpe1xyXG4gICAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW47ICsraSl7XHJcbiAgICAgICAgdGhpc1t0aGlzLmFyZ3VtZW50c1tpXV0gPSBzb3VyY2VbdGhpcy5hcmd1bWVudHNbaV1dXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmludmVyc2VkID0gZmFsc2VcclxuXHJcbiAgICBpZihpbnZlcnNlZCA9PT0gdHJ1ZSl7XHJcbiAgICAgIHRoaXMuaW52ZXJzZWQgPSB0cnVlXHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiwgZXh0ZW5kOiB7XHJcblxyXG4gICAgYXJndW1lbnRzOiBbXVxyXG4gICwgbWV0aG9kOiAnJ1xyXG5cclxuICAsIGF0OiBmdW5jdGlvbihwb3Mpe1xyXG5cclxuICAgICAgdmFyIHBhcmFtcyA9IFtdXHJcblxyXG4gICAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW47ICsraSl7XHJcbiAgICAgICAgcGFyYW1zLnB1c2godGhpc1t0aGlzLmFyZ3VtZW50c1tpXV0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBtID0gdGhpcy5fdW5kbyB8fCBuZXcgU1ZHLk1hdHJpeCgpXHJcblxyXG4gICAgICBtID0gbmV3IFNWRy5NYXRyaXgoKS5tb3JwaChTVkcuTWF0cml4LnByb3RvdHlwZVt0aGlzLm1ldGhvZF0uYXBwbHkobSwgcGFyYW1zKSkuYXQocG9zKVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuaW52ZXJzZWQgPyBtLmludmVyc2UoKSA6IG1cclxuXHJcbiAgICB9XHJcblxyXG4gICwgdW5kbzogZnVuY3Rpb24obyl7XHJcbiAgICAgIGZvcih2YXIgaSA9IDAsIGxlbiA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKXtcclxuICAgICAgICBvW3RoaXMuYXJndW1lbnRzW2ldXSA9IHR5cGVvZiB0aGlzW3RoaXMuYXJndW1lbnRzW2ldXSA9PSAndW5kZWZpbmVkJyA/IDAgOiBvW3RoaXMuYXJndW1lbnRzW2ldXVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBUaGUgbWV0aG9kIFNWRy5NYXRyaXguZXh0cmFjdCB3aGljaCB3YXMgdXNlZCBiZWZvcmUgY2FsbGluZyB0aGlzXHJcbiAgICAgIC8vIG1ldGhvZCB0byBvYnRhaW4gYSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBvIGRvZXNuJ3QgcmV0dXJuIGEgY3ggYW5kXHJcbiAgICAgIC8vIGEgY3kgc28gd2UgdXNlIHRoZSBvbmVzIHRoYXQgd2VyZSBwcm92aWRlZCB0byB0aGlzIG9iamVjdCBhdCBpdHMgY3JlYXRpb25cclxuICAgICAgby5jeCA9IHRoaXMuY3hcclxuICAgICAgby5jeSA9IHRoaXMuY3lcclxuXHJcbiAgICAgIHRoaXMuX3VuZG8gPSBuZXcgU1ZHW2NhcGl0YWxpemUodGhpcy5tZXRob2QpXShvLCB0cnVlKS5hdCgxKVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxufSlcclxuXHJcblNWRy5UcmFuc2xhdGUgPSBTVkcuaW52ZW50KHtcclxuXHJcbiAgcGFyZW50OiBTVkcuTWF0cml4XHJcbiwgaW5oZXJpdDogU1ZHLlRyYW5zZm9ybWF0aW9uXHJcblxyXG4sIGNyZWF0ZTogZnVuY3Rpb24oc291cmNlLCBpbnZlcnNlZCl7XHJcbiAgICB0aGlzLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSlcclxuICB9XHJcblxyXG4sIGV4dGVuZDoge1xyXG4gICAgYXJndW1lbnRzOiBbJ3RyYW5zZm9ybWVkWCcsICd0cmFuc2Zvcm1lZFknXVxyXG4gICwgbWV0aG9kOiAndHJhbnNsYXRlJ1xyXG4gIH1cclxuXHJcbn0pXHJcblxyXG5TVkcuUm90YXRlID0gU1ZHLmludmVudCh7XHJcblxyXG4gIHBhcmVudDogU1ZHLk1hdHJpeFxyXG4sIGluaGVyaXQ6IFNWRy5UcmFuc2Zvcm1hdGlvblxyXG5cclxuLCBjcmVhdGU6IGZ1bmN0aW9uKHNvdXJjZSwgaW52ZXJzZWQpe1xyXG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpXHJcbiAgfVxyXG5cclxuLCBleHRlbmQ6IHtcclxuICAgIGFyZ3VtZW50czogWydyb3RhdGlvbicsICdjeCcsICdjeSddXHJcbiAgLCBtZXRob2Q6ICdyb3RhdGUnXHJcbiAgLCBhdDogZnVuY3Rpb24ocG9zKXtcclxuICAgICAgdmFyIG0gPSBuZXcgU1ZHLk1hdHJpeCgpLnJvdGF0ZShuZXcgU1ZHLk51bWJlcigpLm1vcnBoKHRoaXMucm90YXRpb24gLSAodGhpcy5fdW5kbyA/IHRoaXMuX3VuZG8ucm90YXRpb24gOiAwKSkuYXQocG9zKSwgdGhpcy5jeCwgdGhpcy5jeSlcclxuICAgICAgcmV0dXJuIHRoaXMuaW52ZXJzZWQgPyBtLmludmVyc2UoKSA6IG1cclxuICAgIH1cclxuICAsIHVuZG86IGZ1bmN0aW9uKG8pe1xyXG4gICAgICB0aGlzLl91bmRvID0gb1xyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pXHJcblxyXG5TVkcuU2NhbGUgPSBTVkcuaW52ZW50KHtcclxuXHJcbiAgcGFyZW50OiBTVkcuTWF0cml4XHJcbiwgaW5oZXJpdDogU1ZHLlRyYW5zZm9ybWF0aW9uXHJcblxyXG4sIGNyZWF0ZTogZnVuY3Rpb24oc291cmNlLCBpbnZlcnNlZCl7XHJcbiAgICB0aGlzLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSlcclxuICB9XHJcblxyXG4sIGV4dGVuZDoge1xyXG4gICAgYXJndW1lbnRzOiBbJ3NjYWxlWCcsICdzY2FsZVknLCAnY3gnLCAnY3knXVxyXG4gICwgbWV0aG9kOiAnc2NhbGUnXHJcbiAgfVxyXG5cclxufSlcclxuXHJcblNWRy5Ta2V3ID0gU1ZHLmludmVudCh7XHJcblxyXG4gIHBhcmVudDogU1ZHLk1hdHJpeFxyXG4sIGluaGVyaXQ6IFNWRy5UcmFuc2Zvcm1hdGlvblxyXG5cclxuLCBjcmVhdGU6IGZ1bmN0aW9uKHNvdXJjZSwgaW52ZXJzZWQpe1xyXG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpXHJcbiAgfVxyXG5cclxuLCBleHRlbmQ6IHtcclxuICAgIGFyZ3VtZW50czogWydza2V3WCcsICdza2V3WScsICdjeCcsICdjeSddXHJcbiAgLCBtZXRob2Q6ICdza2V3J1xyXG4gIH1cclxuXHJcbn0pXHJcblxuU1ZHLmV4dGVuZChTVkcuRWxlbWVudCwge1xyXG4gIC8vIER5bmFtaWMgc3R5bGUgZ2VuZXJhdG9yXHJcbiAgc3R5bGU6IGZ1bmN0aW9uKHMsIHYpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDApIHtcclxuICAgICAgLy8gZ2V0IGZ1bGwgc3R5bGVcclxuICAgICAgcmV0dXJuIHRoaXMubm9kZS5zdHlsZS5jc3NUZXh0IHx8ICcnXHJcblxyXG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xyXG4gICAgICAvLyBhcHBseSBldmVyeSBzdHlsZSBpbmRpdmlkdWFsbHkgaWYgYW4gb2JqZWN0IGlzIHBhc3NlZFxyXG4gICAgICBpZiAodHlwZW9mIHMgPT0gJ29iamVjdCcpIHtcclxuICAgICAgICBmb3IgKHYgaW4gcykgdGhpcy5zdHlsZSh2LCBzW3ZdKVxyXG5cclxuICAgICAgfSBlbHNlIGlmIChTVkcucmVnZXguaXNDc3MudGVzdChzKSkge1xyXG4gICAgICAgIC8vIHBhcnNlIGNzcyBzdHJpbmdcclxuICAgICAgICBzID0gcy5zcGxpdCgvXFxzKjtcXHMqLylcclxuICAgICAgICAgIC8vIGZpbHRlciBvdXQgc3VmZml4IDsgYW5kIHN0dWZmIGxpa2UgOztcclxuICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oZSkgeyByZXR1cm4gISFlIH0pXHJcbiAgICAgICAgICAubWFwKGZ1bmN0aW9uKGUpeyByZXR1cm4gZS5zcGxpdCgvXFxzKjpcXHMqLykgfSlcclxuXHJcbiAgICAgICAgLy8gYXBwbHkgZXZlcnkgZGVmaW5pdGlvbiBpbmRpdmlkdWFsbHlcclxuICAgICAgICB3aGlsZSAodiA9IHMucG9wKCkpIHtcclxuICAgICAgICAgIHRoaXMuc3R5bGUodlswXSwgdlsxXSlcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gYWN0IGFzIGEgZ2V0dGVyIGlmIHRoZSBmaXJzdCBhbmQgb25seSBhcmd1bWVudCBpcyBub3QgYW4gb2JqZWN0XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5zdHlsZVtjYW1lbENhc2UocyldXHJcbiAgICAgIH1cclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm5vZGUuc3R5bGVbY2FtZWxDYXNlKHMpXSA9IHYgPT09IG51bGwgfHwgU1ZHLnJlZ2V4LmlzQmxhbmsudGVzdCh2KSA/ICcnIDogdlxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG59KVxuU1ZHLlBhcmVudCA9IFNWRy5pbnZlbnQoe1xyXG4gIC8vIEluaXRpYWxpemUgbm9kZVxyXG4gIGNyZWF0ZTogZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIGVsZW1lbnQpXHJcbiAgfVxyXG5cclxuICAvLyBJbmhlcml0IGZyb21cclxuLCBpbmhlcml0OiBTVkcuRWxlbWVudFxyXG5cclxuICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xyXG4sIGV4dGVuZDoge1xyXG4gICAgLy8gUmV0dXJucyBhbGwgY2hpbGQgZWxlbWVudHNcclxuICAgIGNoaWxkcmVuOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIFNWRy51dGlscy5tYXAoU1ZHLnV0aWxzLmZpbHRlclNWR0VsZW1lbnRzKHRoaXMubm9kZS5jaGlsZE5vZGVzKSwgZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgIHJldHVybiBTVkcuYWRvcHQobm9kZSlcclxuICAgICAgfSlcclxuICAgIH1cclxuICAgIC8vIEFkZCBnaXZlbiBlbGVtZW50IGF0IGEgcG9zaXRpb25cclxuICAsIGFkZDogZnVuY3Rpb24oZWxlbWVudCwgaSkge1xyXG4gICAgICBpZiAoaSA9PSBudWxsKVxyXG4gICAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZChlbGVtZW50Lm5vZGUpXHJcbiAgICAgIGVsc2UgaWYgKGVsZW1lbnQubm9kZSAhPSB0aGlzLm5vZGUuY2hpbGROb2Rlc1tpXSlcclxuICAgICAgICB0aGlzLm5vZGUuaW5zZXJ0QmVmb3JlKGVsZW1lbnQubm9kZSwgdGhpcy5ub2RlLmNoaWxkTm9kZXNbaV0pXHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG4gICAgLy8gQmFzaWNhbGx5IGRvZXMgdGhlIHNhbWUgYXMgYGFkZCgpYCBidXQgcmV0dXJucyB0aGUgYWRkZWQgZWxlbWVudCBpbnN0ZWFkXHJcbiAgLCBwdXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGkpIHtcclxuICAgICAgdGhpcy5hZGQoZWxlbWVudCwgaSlcclxuICAgICAgcmV0dXJuIGVsZW1lbnRcclxuICAgIH1cclxuICAgIC8vIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBhIGNoaWxkXHJcbiAgLCBoYXM6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuaW5kZXgoZWxlbWVudCkgPj0gMFxyXG4gICAgfVxyXG4gICAgLy8gR2V0cyBpbmRleCBvZiBnaXZlbiBlbGVtZW50XHJcbiAgLCBpbmRleDogZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgICByZXR1cm4gW10uc2xpY2UuY2FsbCh0aGlzLm5vZGUuY2hpbGROb2RlcykuaW5kZXhPZihlbGVtZW50Lm5vZGUpXHJcbiAgICB9XHJcbiAgICAvLyBHZXQgYSBlbGVtZW50IGF0IHRoZSBnaXZlbiBpbmRleFxyXG4gICwgZ2V0OiBmdW5jdGlvbihpKSB7XHJcbiAgICAgIHJldHVybiBTVkcuYWRvcHQodGhpcy5ub2RlLmNoaWxkTm9kZXNbaV0pXHJcbiAgICB9XHJcbiAgICAvLyBHZXQgZmlyc3QgY2hpbGRcclxuICAsIGZpcnN0OiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZ2V0KDApXHJcbiAgICB9XHJcbiAgICAvLyBHZXQgdGhlIGxhc3QgY2hpbGRcclxuICAsIGxhc3Q6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5nZXQodGhpcy5ub2RlLmNoaWxkTm9kZXMubGVuZ3RoIC0gMSlcclxuICAgIH1cclxuICAgIC8vIEl0ZXJhdGVzIG92ZXIgYWxsIGNoaWxkcmVuIGFuZCBpbnZva2VzIGEgZ2l2ZW4gYmxvY2tcclxuICAsIGVhY2g6IGZ1bmN0aW9uKGJsb2NrLCBkZWVwKSB7XHJcbiAgICAgIHZhciBpLCBpbFxyXG4gICAgICAgICwgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuKClcclxuXHJcbiAgICAgIGZvciAoaSA9IDAsIGlsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG4gICAgICAgIGlmIChjaGlsZHJlbltpXSBpbnN0YW5jZW9mIFNWRy5FbGVtZW50KVxyXG4gICAgICAgICAgYmxvY2suYXBwbHkoY2hpbGRyZW5baV0sIFtpLCBjaGlsZHJlbl0pXHJcblxyXG4gICAgICAgIGlmIChkZWVwICYmIChjaGlsZHJlbltpXSBpbnN0YW5jZW9mIFNWRy5Db250YWluZXIpKVxyXG4gICAgICAgICAgY2hpbGRyZW5baV0uZWFjaChibG9jaywgZGVlcClcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAgIC8vIFJlbW92ZSBhIGdpdmVuIGNoaWxkXHJcbiAgLCByZW1vdmVFbGVtZW50OiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgIHRoaXMubm9kZS5yZW1vdmVDaGlsZChlbGVtZW50Lm5vZGUpXHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG4gICAgLy8gUmVtb3ZlIGFsbCBlbGVtZW50cyBpbiB0aGlzIGNvbnRhaW5lclxyXG4gICwgY2xlYXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyByZW1vdmUgY2hpbGRyZW5cclxuICAgICAgd2hpbGUodGhpcy5ub2RlLmhhc0NoaWxkTm9kZXMoKSlcclxuICAgICAgICB0aGlzLm5vZGUucmVtb3ZlQ2hpbGQodGhpcy5ub2RlLmxhc3RDaGlsZClcclxuXHJcbiAgICAgIC8vIHJlbW92ZSBkZWZzIHJlZmVyZW5jZVxyXG4gICAgICBkZWxldGUgdGhpcy5fZGVmc1xyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAsIC8vIEdldCBkZWZzXHJcbiAgICBkZWZzOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZG9jKCkuZGVmcygpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxufSlcclxuXG5TVkcuZXh0ZW5kKFNWRy5QYXJlbnQsIHtcclxuXHJcbiAgdW5ncm91cDogZnVuY3Rpb24ocGFyZW50LCBkZXB0aCkge1xyXG4gICAgaWYoZGVwdGggPT09IDAgfHwgdGhpcyBpbnN0YW5jZW9mIFNWRy5EZWZzIHx8IHRoaXMubm9kZSA9PSBTVkcucGFyc2VyLmRyYXcpIHJldHVybiB0aGlzXHJcblxyXG4gICAgcGFyZW50ID0gcGFyZW50IHx8ICh0aGlzIGluc3RhbmNlb2YgU1ZHLkRvYyA/IHRoaXMgOiB0aGlzLnBhcmVudChTVkcuUGFyZW50KSlcclxuICAgIGRlcHRoID0gZGVwdGggfHwgSW5maW5pdHlcclxuXHJcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgaWYodGhpcyBpbnN0YW5jZW9mIFNWRy5EZWZzKSByZXR1cm4gdGhpc1xyXG4gICAgICBpZih0aGlzIGluc3RhbmNlb2YgU1ZHLlBhcmVudCkgcmV0dXJuIHRoaXMudW5ncm91cChwYXJlbnQsIGRlcHRoLTEpXHJcbiAgICAgIHJldHVybiB0aGlzLnRvUGFyZW50KHBhcmVudClcclxuICAgIH0pXHJcblxyXG4gICAgdGhpcy5ub2RlLmZpcnN0Q2hpbGQgfHwgdGhpcy5yZW1vdmUoKVxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfSxcclxuXHJcbiAgZmxhdHRlbjogZnVuY3Rpb24ocGFyZW50LCBkZXB0aCkge1xyXG4gICAgcmV0dXJuIHRoaXMudW5ncm91cChwYXJlbnQsIGRlcHRoKVxyXG4gIH1cclxuXHJcbn0pXG5TVkcuQ29udGFpbmVyID0gU1ZHLmludmVudCh7XHJcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXHJcbiAgY3JlYXRlOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICB0aGlzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgZWxlbWVudClcclxuICB9XHJcblxyXG4gIC8vIEluaGVyaXQgZnJvbVxyXG4sIGluaGVyaXQ6IFNWRy5QYXJlbnRcclxuXHJcbn0pXG5cclxuU1ZHLlZpZXdCb3ggPSBTVkcuaW52ZW50KHtcclxuXHJcbiAgY3JlYXRlOiBmdW5jdGlvbihzb3VyY2UpIHtcclxuICAgIHZhciBpLCBiYXNlID0gWzAsIDAsIDAsIDBdXHJcblxyXG4gICAgdmFyIHgsIHksIHdpZHRoLCBoZWlnaHQsIGJveCwgdmlldywgd2UsIGhlXHJcbiAgICAgICwgd20gICA9IDEgLy8gd2lkdGggbXVsdGlwbGllclxyXG4gICAgICAsIGhtICAgPSAxIC8vIGhlaWdodCBtdWx0aXBsaWVyXHJcbiAgICAgICwgcmVnICA9IC9bKy1dPyg/OlxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykoPzplWystXT9cXGQrKT8vZ2lcclxuXHJcbiAgICBpZihzb3VyY2UgaW5zdGFuY2VvZiBTVkcuRWxlbWVudCl7XHJcblxyXG4gICAgICB3ZSA9IHNvdXJjZVxyXG4gICAgICBoZSA9IHNvdXJjZVxyXG4gICAgICB2aWV3ID0gKHNvdXJjZS5hdHRyKCd2aWV3Qm94JykgfHwgJycpLm1hdGNoKHJlZylcclxuICAgICAgYm94ID0gc291cmNlLmJib3hcclxuXHJcbiAgICAgIC8vIGdldCBkaW1lbnNpb25zIG9mIGN1cnJlbnQgbm9kZVxyXG4gICAgICB3aWR0aCAgPSBuZXcgU1ZHLk51bWJlcihzb3VyY2Uud2lkdGgoKSlcclxuICAgICAgaGVpZ2h0ID0gbmV3IFNWRy5OdW1iZXIoc291cmNlLmhlaWdodCgpKVxyXG5cclxuICAgICAgLy8gZmluZCBuZWFyZXN0IG5vbi1wZXJjZW50dWFsIGRpbWVuc2lvbnNcclxuICAgICAgd2hpbGUgKHdpZHRoLnVuaXQgPT0gJyUnKSB7XHJcbiAgICAgICAgd20gKj0gd2lkdGgudmFsdWVcclxuICAgICAgICB3aWR0aCA9IG5ldyBTVkcuTnVtYmVyKHdlIGluc3RhbmNlb2YgU1ZHLkRvYyA/IHdlLnBhcmVudCgpLm9mZnNldFdpZHRoIDogd2UucGFyZW50KCkud2lkdGgoKSlcclxuICAgICAgICB3ZSA9IHdlLnBhcmVudCgpXHJcbiAgICAgIH1cclxuICAgICAgd2hpbGUgKGhlaWdodC51bml0ID09ICclJykge1xyXG4gICAgICAgIGhtICo9IGhlaWdodC52YWx1ZVxyXG4gICAgICAgIGhlaWdodCA9IG5ldyBTVkcuTnVtYmVyKGhlIGluc3RhbmNlb2YgU1ZHLkRvYyA/IGhlLnBhcmVudCgpLm9mZnNldEhlaWdodCA6IGhlLnBhcmVudCgpLmhlaWdodCgpKVxyXG4gICAgICAgIGhlID0gaGUucGFyZW50KClcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gZW5zdXJlIGRlZmF1bHRzXHJcbiAgICAgIHRoaXMueCAgICAgID0gMFxyXG4gICAgICB0aGlzLnkgICAgICA9IDBcclxuICAgICAgdGhpcy53aWR0aCAgPSB3aWR0aCAgKiB3bVxyXG4gICAgICB0aGlzLmhlaWdodCA9IGhlaWdodCAqIGhtXHJcbiAgICAgIHRoaXMuem9vbSAgID0gMVxyXG5cclxuICAgICAgaWYgKHZpZXcpIHtcclxuICAgICAgICAvLyBnZXQgd2lkdGggYW5kIGhlaWdodCBmcm9tIHZpZXdib3hcclxuICAgICAgICB4ICAgICAgPSBwYXJzZUZsb2F0KHZpZXdbMF0pXHJcbiAgICAgICAgeSAgICAgID0gcGFyc2VGbG9hdCh2aWV3WzFdKVxyXG4gICAgICAgIHdpZHRoICA9IHBhcnNlRmxvYXQodmlld1syXSlcclxuICAgICAgICBoZWlnaHQgPSBwYXJzZUZsb2F0KHZpZXdbM10pXHJcblxyXG4gICAgICAgIC8vIGNhbGN1bGF0ZSB6b29tIGFjY29yaW5nIHRvIHZpZXdib3hcclxuICAgICAgICB0aGlzLnpvb20gPSAoKHRoaXMud2lkdGggLyB0aGlzLmhlaWdodCkgPiAod2lkdGggLyBoZWlnaHQpKSA/XHJcbiAgICAgICAgICB0aGlzLmhlaWdodCAvIGhlaWdodCA6XHJcbiAgICAgICAgICB0aGlzLndpZHRoICAvIHdpZHRoXHJcblxyXG4gICAgICAgIC8vIGNhbGN1bGF0ZSByZWFsIHBpeGVsIGRpbWVuc2lvbnMgb24gcGFyZW50IFNWRy5Eb2MgZWxlbWVudFxyXG4gICAgICAgIHRoaXMueCAgICAgID0geFxyXG4gICAgICAgIHRoaXMueSAgICAgID0geVxyXG4gICAgICAgIHRoaXMud2lkdGggID0gd2lkdGhcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodFxyXG5cclxuICAgICAgfVxyXG5cclxuICAgIH1lbHNle1xyXG5cclxuICAgICAgLy8gZW5zdXJlIHNvdXJjZSBhcyBvYmplY3RcclxuICAgICAgc291cmNlID0gdHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycgP1xyXG4gICAgICAgIHNvdXJjZS5tYXRjaChyZWcpLm1hcChmdW5jdGlvbihlbCl7IHJldHVybiBwYXJzZUZsb2F0KGVsKSB9KSA6XHJcbiAgICAgIEFycmF5LmlzQXJyYXkoc291cmNlKSA/XHJcbiAgICAgICAgc291cmNlIDpcclxuICAgICAgdHlwZW9mIHNvdXJjZSA9PSAnb2JqZWN0JyA/XHJcbiAgICAgICAgW3NvdXJjZS54LCBzb3VyY2UueSwgc291cmNlLndpZHRoLCBzb3VyY2UuaGVpZ2h0XSA6XHJcbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPT0gNCA/XHJcbiAgICAgICAgW10uc2xpY2UuY2FsbChhcmd1bWVudHMpIDpcclxuICAgICAgICBiYXNlXHJcblxyXG4gICAgICB0aGlzLnggPSBzb3VyY2VbMF1cclxuICAgICAgdGhpcy55ID0gc291cmNlWzFdXHJcbiAgICAgIHRoaXMud2lkdGggPSBzb3VyY2VbMl1cclxuICAgICAgdGhpcy5oZWlnaHQgPSBzb3VyY2VbM11cclxuICAgIH1cclxuXHJcblxyXG4gIH1cclxuXHJcbiwgZXh0ZW5kOiB7XHJcblxyXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy54ICsgJyAnICsgdGhpcy55ICsgJyAnICsgdGhpcy53aWR0aCArICcgJyArIHRoaXMuaGVpZ2h0XHJcbiAgICB9XHJcbiAgLCBtb3JwaDogZnVuY3Rpb24oeCwgeSwgd2lkdGgsIGhlaWdodCl7XHJcbiAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBuZXcgU1ZHLlZpZXdCb3goeCwgeSwgd2lkdGgsIGhlaWdodClcclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuXHJcbiAgLCBhdDogZnVuY3Rpb24ocG9zKSB7XHJcblxyXG4gICAgICBpZighdGhpcy5kZXN0aW5hdGlvbikgcmV0dXJuIHRoaXNcclxuXHJcbiAgICAgIHJldHVybiBuZXcgU1ZHLlZpZXdCb3goW1xyXG4gICAgICAgICAgdGhpcy54ICsgKHRoaXMuZGVzdGluYXRpb24ueCAtIHRoaXMueCkgKiBwb3NcclxuICAgICAgICAsIHRoaXMueSArICh0aGlzLmRlc3RpbmF0aW9uLnkgLSB0aGlzLnkpICogcG9zXHJcbiAgICAgICAgLCB0aGlzLndpZHRoICsgKHRoaXMuZGVzdGluYXRpb24ud2lkdGggLSB0aGlzLndpZHRoKSAqIHBvc1xyXG4gICAgICAgICwgdGhpcy5oZWlnaHQgKyAodGhpcy5kZXN0aW5hdGlvbi5oZWlnaHQgLSB0aGlzLmhlaWdodCkgKiBwb3NcclxuICAgICAgXSlcclxuXHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgLy8gRGVmaW5lIHBhcmVudFxyXG4sIHBhcmVudDogU1ZHLkNvbnRhaW5lclxyXG5cclxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxyXG4sIGNvbnN0cnVjdDoge1xyXG5cclxuICAgIC8vIGdldC9zZXQgdmlld2JveFxyXG4gICAgdmlld2JveDogZnVuY3Rpb24oeCwgeSwgd2lkdGgsIGhlaWdodCkge1xyXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAwKVxyXG4gICAgICAgIC8vIGFjdCBhcyBhIGdldHRlciBpZiB0aGVyZSBhcmUgbm8gYXJndW1lbnRzXHJcbiAgICAgICAgcmV0dXJuIG5ldyBTVkcuVmlld0JveCh0aGlzKVxyXG5cclxuICAgICAgLy8gb3RoZXJ3aXNlIGFjdCBhcyBhIHNldHRlclxyXG4gICAgICByZXR1cm4gdGhpcy5hdHRyKCd2aWV3Qm94JywgbmV3IFNWRy5WaWV3Qm94KHgsIHksIHdpZHRoLCBoZWlnaHQpKVxyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59KVxuLy8gQWRkIGV2ZW50cyB0byBlbGVtZW50c1xyXG5cclxuO1sgJ2NsaWNrJyxcclxuICAnZGJsY2xpY2snLFxyXG4gICdtb3VzZWRvd24nLFxyXG4gICdtb3VzZXVwJyxcclxuICAnbW91c2VvdmVyJyxcclxuICAnbW91c2VvdXQnLFxyXG4gICdtb3VzZW1vdmUnLFxyXG4gICdtb3VzZWVudGVyJyxcclxuICAnbW91c2VsZWF2ZScsXHJcbiAgJ3RvdWNoc3RhcnQnLFxyXG4gICd0b3VjaG1vdmUnLFxyXG4gICd0b3VjaGxlYXZlJyxcclxuICAndG91Y2hlbmQnLFxyXG4gICd0b3VjaGNhbmNlbCcgXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgLy8gYWRkIGV2ZW50IHRvIFNWRy5FbGVtZW50XHJcbiAgICBTVkcuRWxlbWVudC5wcm90b3R5cGVbZXZlbnRdID0gZnVuY3Rpb24gKGYpIHtcclxuICAgICAgLy8gYmluZCBldmVudCB0byBlbGVtZW50IHJhdGhlciB0aGFuIGVsZW1lbnQgbm9kZVxyXG4gICAgICBpZiAoZiA9PSBudWxsKSB7XHJcbiAgICAgICAgU1ZHLm9mZih0aGlzLCBldmVudClcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBTVkcub24odGhpcywgZXZlbnQsIGYpXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICB9KVxyXG5cclxuU1ZHLmxpc3RlbmVySWQgPSAwXHJcblxyXG4vLyBBZGQgZXZlbnQgYmluZGVyIGluIHRoZSBTVkcgbmFtZXNwYWNlXHJcblNWRy5vbiA9IGZ1bmN0aW9uIChub2RlLCBldmVudHMsIGxpc3RlbmVyLCBiaW5kaW5nLCBvcHRpb25zKSB7XHJcbiAgdmFyIGwgPSBsaXN0ZW5lci5iaW5kKGJpbmRpbmcgfHwgbm9kZSlcclxuICB2YXIgbiA9IG5vZGUgaW5zdGFuY2VvZiBTVkcuRWxlbWVudCA/IG5vZGUubm9kZSA6IG5vZGVcclxuXHJcbiAgLy8gZW5zdXJlIGluc3RhbmNlIG9iamVjdCBmb3Igbm9kZXMgd2hpY2ggYXJlIG5vdCBhZG9wdGVkXHJcbiAgbi5pbnN0YW5jZSA9IG4uaW5zdGFuY2UgfHwge19ldmVudHM6IHt9fVxyXG5cclxuICB2YXIgYmFnID0gbi5pbnN0YW5jZS5fZXZlbnRzXHJcblxyXG4gIC8vIGFkZCBpZCB0byBsaXN0ZW5lclxyXG4gIGlmICghbGlzdGVuZXIuX3N2Z2pzTGlzdGVuZXJJZCkgeyBsaXN0ZW5lci5fc3ZnanNMaXN0ZW5lcklkID0gKytTVkcubGlzdGVuZXJJZCB9XHJcblxyXG4gIGV2ZW50cy5zcGxpdChTVkcucmVnZXguZGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgdmFyIGV2ID0gZXZlbnQuc3BsaXQoJy4nKVswXVxyXG4gICAgdmFyIG5zID0gZXZlbnQuc3BsaXQoJy4nKVsxXSB8fCAnKidcclxuXHJcbiAgICAvLyBlbnN1cmUgdmFsaWQgb2JqZWN0XHJcbiAgICBiYWdbZXZdID0gYmFnW2V2XSB8fCB7fVxyXG4gICAgYmFnW2V2XVtuc10gPSBiYWdbZXZdW25zXSB8fCB7fVxyXG5cclxuICAgIC8vIHJlZmVyZW5jZSBsaXN0ZW5lclxyXG4gICAgYmFnW2V2XVtuc11bbGlzdGVuZXIuX3N2Z2pzTGlzdGVuZXJJZF0gPSBsXHJcblxyXG4gICAgLy8gYWRkIGxpc3RlbmVyXHJcbiAgICBuLmFkZEV2ZW50TGlzdGVuZXIoZXYsIGwsIG9wdGlvbnMgfHwgZmFsc2UpXHJcbiAgfSlcclxufVxyXG5cclxuLy8gQWRkIGV2ZW50IHVuYmluZGVyIGluIHRoZSBTVkcgbmFtZXNwYWNlXHJcblNWRy5vZmYgPSBmdW5jdGlvbiAobm9kZSwgZXZlbnRzLCBsaXN0ZW5lciwgb3B0aW9ucykge1xyXG4gIHZhciBuID0gbm9kZSBpbnN0YW5jZW9mIFNWRy5FbGVtZW50ID8gbm9kZS5ub2RlIDogbm9kZVxyXG4gIGlmICghbi5pbnN0YW5jZSkgcmV0dXJuXHJcblxyXG4gIC8vIGxpc3RlbmVyIGNhbiBiZSBhIGZ1bmN0aW9uIG9yIGEgbnVtYmVyXHJcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5fc3ZnanNMaXN0ZW5lcklkXHJcbiAgICBpZiAoIWxpc3RlbmVyKSByZXR1cm5cclxuICB9XHJcblxyXG4gIHZhciBiYWcgPSBuLmluc3RhbmNlLl9ldmVudHNcclxuXHJcbiAgOyhldmVudHMgfHwgJycpLnNwbGl0KFNWRy5yZWdleC5kZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICB2YXIgZXYgPSBldmVudCAmJiBldmVudC5zcGxpdCgnLicpWzBdXHJcbiAgICB2YXIgbnMgPSBldmVudCAmJiBldmVudC5zcGxpdCgnLicpWzFdXHJcbiAgICB2YXIgbmFtZXNwYWNlLCBsXHJcblxyXG4gICAgaWYgKGxpc3RlbmVyKSB7XHJcbiAgICAgIC8vIHJlbW92ZSBsaXN0ZW5lciByZWZlcmVuY2VcclxuICAgICAgaWYgKGJhZ1tldl0gJiYgYmFnW2V2XVtucyB8fCAnKiddKSB7XHJcbiAgICAgICAgLy8gcmVtb3ZlTGlzdGVuZXJcclxuICAgICAgICBuLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXYsIGJhZ1tldl1bbnMgfHwgJyonXVtsaXN0ZW5lcl0sIG9wdGlvbnMgfHwgZmFsc2UpXHJcblxyXG4gICAgICAgIGRlbGV0ZSBiYWdbZXZdW25zIHx8ICcqJ11bbGlzdGVuZXJdXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoZXYgJiYgbnMpIHtcclxuICAgICAgLy8gcmVtb3ZlIGFsbCBsaXN0ZW5lcnMgZm9yIGEgbmFtZXNwYWNlZCBldmVudFxyXG4gICAgICBpZiAoYmFnW2V2XSAmJiBiYWdbZXZdW25zXSkge1xyXG4gICAgICAgIGZvciAobCBpbiBiYWdbZXZdW25zXSkgeyBTVkcub2ZmKG4sIFtldiwgbnNdLmpvaW4oJy4nKSwgbCkgfVxyXG5cclxuICAgICAgICBkZWxldGUgYmFnW2V2XVtuc11cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChucykge1xyXG4gICAgICAvLyByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IgYSBzcGVjaWZpYyBuYW1lc3BhY2VcclxuICAgICAgZm9yIChldmVudCBpbiBiYWcpIHtcclxuICAgICAgICBmb3IgKG5hbWVzcGFjZSBpbiBiYWdbZXZlbnRdKSB7XHJcbiAgICAgICAgICBpZiAobnMgPT09IG5hbWVzcGFjZSkgeyBTVkcub2ZmKG4sIFtldmVudCwgbnNdLmpvaW4oJy4nKSkgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChldikge1xyXG4gICAgICAvLyByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IgdGhlIGV2ZW50XHJcbiAgICAgIGlmIChiYWdbZXZdKSB7XHJcbiAgICAgICAgZm9yIChuYW1lc3BhY2UgaW4gYmFnW2V2XSkgeyBTVkcub2ZmKG4sIFtldiwgbmFtZXNwYWNlXS5qb2luKCcuJykpIH1cclxuXHJcbiAgICAgICAgZGVsZXRlIGJhZ1tldl1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gcmVtb3ZlIGFsbCBsaXN0ZW5lcnMgb24gYSBnaXZlbiBub2RlXHJcbiAgICAgIGZvciAoZXZlbnQgaW4gYmFnKSB7IFNWRy5vZmYobiwgZXZlbnQpIH1cclxuXHJcbiAgICAgIG4uaW5zdGFuY2UuX2V2ZW50cyA9IHt9XHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5cclxuU1ZHLmV4dGVuZChTVkcuRWxlbWVudCwge1xyXG4gIC8vIEJpbmQgZ2l2ZW4gZXZlbnQgdG8gbGlzdGVuZXJcclxuICBvbjogZnVuY3Rpb24gKGV2ZW50LCBsaXN0ZW5lciwgYmluZGluZywgb3B0aW9ucykge1xyXG4gICAgU1ZHLm9uKHRoaXMsIGV2ZW50LCBsaXN0ZW5lciwgYmluZGluZywgb3B0aW9ucylcclxuICAgIHJldHVybiB0aGlzXHJcbiAgfSxcclxuICAvLyBVbmJpbmQgZXZlbnQgZnJvbSBsaXN0ZW5lclxyXG4gIG9mZjogZnVuY3Rpb24gKGV2ZW50LCBsaXN0ZW5lcikge1xyXG4gICAgU1ZHLm9mZih0aGlzLm5vZGUsIGV2ZW50LCBsaXN0ZW5lcilcclxuICAgIHJldHVybiB0aGlzXHJcbiAgfSxcclxuICBmaXJlOiBmdW5jdGlvbiAoZXZlbnQsIGRhdGEpIHtcclxuICAgIC8vIERpc3BhdGNoIGV2ZW50XHJcbiAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiB3aW5kb3cuRXZlbnQpIHtcclxuICAgICAgdGhpcy5ub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm5vZGUuZGlzcGF0Y2hFdmVudChldmVudCA9IG5ldyBTVkcuQ3VzdG9tRXZlbnQoZXZlbnQsIHtkZXRhaWw6IGRhdGEsIGNhbmNlbGFibGU6IHRydWV9KSlcclxuICAgIH1cclxuICAgIHRoaXMuX2V2ZW50ID0gZXZlbnRcclxuICAgIHJldHVybiB0aGlzXHJcbiAgfSxcclxuICBldmVudDogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZXZlbnRcclxuICB9XHJcbn0pXHJcblxuXHJcblNWRy5EZWZzID0gU1ZHLmludmVudCh7XHJcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXHJcbiAgY3JlYXRlOiAnZGVmcydcclxuXHJcbiAgLy8gSW5oZXJpdCBmcm9tXHJcbiwgaW5oZXJpdDogU1ZHLkNvbnRhaW5lclxyXG5cclxufSlcblNWRy5HID0gU1ZHLmludmVudCh7XHJcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXHJcbiAgY3JlYXRlOiAnZydcclxuXHJcbiAgLy8gSW5oZXJpdCBmcm9tXHJcbiwgaW5oZXJpdDogU1ZHLkNvbnRhaW5lclxyXG5cclxuICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xyXG4sIGV4dGVuZDoge1xyXG4gICAgLy8gTW92ZSBvdmVyIHgtYXhpc1xyXG4gICAgeDogZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4geCA9PSBudWxsID8gdGhpcy50cmFuc2Zvcm0oJ3gnKSA6IHRoaXMudHJhbnNmb3JtKHsgeDogeCAtIHRoaXMueCgpIH0sIHRydWUpXHJcbiAgICB9XHJcbiAgICAvLyBNb3ZlIG92ZXIgeS1heGlzXHJcbiAgLCB5OiBmdW5jdGlvbih5KSB7XHJcbiAgICAgIHJldHVybiB5ID09IG51bGwgPyB0aGlzLnRyYW5zZm9ybSgneScpIDogdGhpcy50cmFuc2Zvcm0oeyB5OiB5IC0gdGhpcy55KCkgfSwgdHJ1ZSlcclxuICAgIH1cclxuICAgIC8vIE1vdmUgYnkgY2VudGVyIG92ZXIgeC1heGlzXHJcbiAgLCBjeDogZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4geCA9PSBudWxsID8gdGhpcy5nYm94KCkuY3ggOiB0aGlzLngoeCAtIHRoaXMuZ2JveCgpLndpZHRoIC8gMilcclxuICAgIH1cclxuICAgIC8vIE1vdmUgYnkgY2VudGVyIG92ZXIgeS1heGlzXHJcbiAgLCBjeTogZnVuY3Rpb24oeSkge1xyXG4gICAgICByZXR1cm4geSA9PSBudWxsID8gdGhpcy5nYm94KCkuY3kgOiB0aGlzLnkoeSAtIHRoaXMuZ2JveCgpLmhlaWdodCAvIDIpXHJcbiAgICB9XHJcbiAgLCBnYm94OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgIHZhciBiYm94ICA9IHRoaXMuYmJveCgpXHJcbiAgICAgICAgLCB0cmFucyA9IHRoaXMudHJhbnNmb3JtKClcclxuXHJcbiAgICAgIGJib3gueCAgKz0gdHJhbnMueFxyXG4gICAgICBiYm94LngyICs9IHRyYW5zLnhcclxuICAgICAgYmJveC5jeCArPSB0cmFucy54XHJcblxyXG4gICAgICBiYm94LnkgICs9IHRyYW5zLnlcclxuICAgICAgYmJveC55MiArPSB0cmFucy55XHJcbiAgICAgIGJib3guY3kgKz0gdHJhbnMueVxyXG5cclxuICAgICAgcmV0dXJuIGJib3hcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEFkZCBwYXJlbnQgbWV0aG9kXHJcbiwgY29uc3RydWN0OiB7XHJcbiAgICAvLyBDcmVhdGUgYSBncm91cCBlbGVtZW50XHJcbiAgICBncm91cDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLkcpXHJcbiAgICB9XHJcbiAgfVxyXG59KVxyXG5cblNWRy5Eb2MgPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplIG5vZGVcclxuICBjcmVhdGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgIC8vIGVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYSBkb20gZWxlbWVudFxyXG4gICAgICBlbGVtZW50ID0gdHlwZW9mIGVsZW1lbnQgPT0gJ3N0cmluZycgP1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnQpIDpcclxuICAgICAgICBlbGVtZW50XHJcblxyXG4gICAgICAvLyBJZiB0aGUgdGFyZ2V0IGlzIGFuIHN2ZyBlbGVtZW50LCB1c2UgdGhhdCBlbGVtZW50IGFzIHRoZSBtYWluIHdyYXBwZXIuXHJcbiAgICAgIC8vIFRoaXMgYWxsb3dzIHN2Zy5qcyB0byB3b3JrIHdpdGggc3ZnIGRvY3VtZW50cyBhcyB3ZWxsLlxyXG4gICAgICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PSAnc3ZnJykge1xyXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBlbGVtZW50KVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBTVkcuY3JlYXRlKCdzdmcnKSlcclxuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKHRoaXMubm9kZSlcclxuICAgICAgICB0aGlzLnNpemUoJzEwMCUnLCAnMTAwJScpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHNldCBzdmcgZWxlbWVudCBhdHRyaWJ1dGVzIGFuZCBlbnN1cmUgZGVmcyBub2RlXHJcbiAgICAgIHRoaXMubmFtZXNwYWNlKCkuZGVmcygpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBJbmhlcml0IGZyb21cclxuLCBpbmhlcml0OiBTVkcuQ29udGFpbmVyXHJcblxyXG4gIC8vIEFkZCBjbGFzcyBtZXRob2RzXHJcbiwgZXh0ZW5kOiB7XHJcbiAgICAvLyBBZGQgbmFtZXNwYWNlc1xyXG4gICAgbmFtZXNwYWNlOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICAuYXR0cih7IHhtbG5zOiBTVkcubnMsIHZlcnNpb246ICcxLjEnIH0pXHJcbiAgICAgICAgLmF0dHIoJ3htbG5zOnhsaW5rJywgU1ZHLnhsaW5rLCBTVkcueG1sbnMpXHJcbiAgICAgICAgLmF0dHIoJ3htbG5zOnN2Z2pzJywgU1ZHLnN2Z2pzLCBTVkcueG1sbnMpXHJcbiAgICB9XHJcbiAgICAvLyBDcmVhdGVzIGFuZCByZXR1cm5zIGRlZnMgZWxlbWVudFxyXG4gICwgZGVmczogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICghdGhpcy5fZGVmcykge1xyXG4gICAgICAgIHZhciBkZWZzXHJcblxyXG4gICAgICAgIC8vIEZpbmQgb3IgY3JlYXRlIGEgZGVmcyBlbGVtZW50IGluIHRoaXMgaW5zdGFuY2VcclxuICAgICAgICBpZiAoZGVmcyA9IHRoaXMubm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGVmcycpWzBdKVxyXG4gICAgICAgICAgdGhpcy5fZGVmcyA9IFNWRy5hZG9wdChkZWZzKVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgIHRoaXMuX2RlZnMgPSBuZXcgU1ZHLkRlZnNcclxuXHJcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBkZWZzIG5vZGUgaXMgYXQgdGhlIGVuZCBvZiB0aGUgc3RhY2tcclxuICAgICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQodGhpcy5fZGVmcy5ub2RlKVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5fZGVmc1xyXG4gICAgfVxyXG4gICAgLy8gY3VzdG9tIHBhcmVudCBtZXRob2RcclxuICAsIHBhcmVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmKCF0aGlzLm5vZGUucGFyZW50Tm9kZSB8fCB0aGlzLm5vZGUucGFyZW50Tm9kZS5ub2RlTmFtZSA9PSAnI2RvY3VtZW50JyB8fCB0aGlzLm5vZGUucGFyZW50Tm9kZS5ub2RlTmFtZSA9PSAnI2RvY3VtZW50LWZyYWdtZW50JykgcmV0dXJuIG51bGxcclxuICAgICAgcmV0dXJuIHRoaXMubm9kZS5wYXJlbnROb2RlXHJcbiAgICB9XHJcbiAgICAvLyBGaXggZm9yIHBvc3NpYmxlIHN1Yi1waXhlbCBvZmZzZXQuIFNlZTpcclxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYwODgxMlxyXG4gICwgc3BvZjogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBwb3MgPSB0aGlzLm5vZGUuZ2V0U2NyZWVuQ1RNKClcclxuXHJcbiAgICAgIGlmIChwb3MpXHJcbiAgICAgICAgdGhpc1xyXG4gICAgICAgICAgLnN0eWxlKCdsZWZ0JywgKC1wb3MuZSAlIDEpICsgJ3B4JylcclxuICAgICAgICAgIC5zdHlsZSgndG9wJywgICgtcG9zLmYgJSAxKSArICdweCcpXHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG5cclxuICAgICAgLy8gUmVtb3ZlcyB0aGUgZG9jIGZyb20gdGhlIERPTVxyXG4gICwgcmVtb3ZlOiBmdW5jdGlvbigpIHtcclxuICAgICAgaWYodGhpcy5wYXJlbnQoKSkge1xyXG4gICAgICAgIHRoaXMucGFyZW50KCkucmVtb3ZlQ2hpbGQodGhpcy5ub2RlKVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG4gICwgY2xlYXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyByZW1vdmUgY2hpbGRyZW5cclxuICAgICAgd2hpbGUodGhpcy5ub2RlLmhhc0NoaWxkTm9kZXMoKSlcclxuICAgICAgICB0aGlzLm5vZGUucmVtb3ZlQ2hpbGQodGhpcy5ub2RlLmxhc3RDaGlsZClcclxuXHJcbiAgICAgIC8vIHJlbW92ZSBkZWZzIHJlZmVyZW5jZVxyXG4gICAgICBkZWxldGUgdGhpcy5fZGVmc1xyXG5cclxuICAgICAgLy8gYWRkIGJhY2sgcGFyc2VyXHJcbiAgICAgIGlmKCFTVkcucGFyc2VyLmRyYXcucGFyZW50Tm9kZSlcclxuICAgICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQoU1ZHLnBhcnNlci5kcmF3KVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAsIGNsb25lOiBmdW5jdGlvbiAocGFyZW50KSB7XHJcbiAgICAgIC8vIHdyaXRlIGRvbSBkYXRhIHRvIHRoZSBkb20gc28gdGhlIGNsb25lIGNhbiBwaWNrdXAgdGhlIGRhdGFcclxuICAgICAgdGhpcy53cml0ZURhdGFUb0RvbSgpXHJcblxyXG4gICAgICAvLyBnZXQgcmVmZXJlbmNlIHRvIG5vZGVcclxuICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGVcclxuXHJcbiAgICAgIC8vIGNsb25lIGVsZW1lbnQgYW5kIGFzc2lnbiBuZXcgaWRcclxuICAgICAgdmFyIGNsb25lID0gYXNzaWduTmV3SWQobm9kZS5jbG9uZU5vZGUodHJ1ZSkpXHJcblxyXG4gICAgICAvLyBpbnNlcnQgdGhlIGNsb25lIGluIHRoZSBnaXZlbiBwYXJlbnQgb3IgYWZ0ZXIgbXlzZWxmXHJcbiAgICAgIGlmKHBhcmVudCkge1xyXG4gICAgICAgIChwYXJlbnQubm9kZSB8fCBwYXJlbnQpLmFwcGVuZENoaWxkKGNsb25lLm5vZGUpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjbG9uZS5ub2RlLCBub2RlLm5leHRTaWJsaW5nKVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gY2xvbmVcclxuICAgIH1cclxuICB9XHJcblxyXG59KVxyXG5cbi8vICMjIyBUaGlzIG1vZHVsZSBhZGRzIGJhY2t3YXJkIC8gZm9yd2FyZCBmdW5jdGlvbmFsaXR5IHRvIGVsZW1lbnRzLlxyXG5cclxuLy9cclxuU1ZHLmV4dGVuZChTVkcuRWxlbWVudCwge1xyXG4gIC8vIEdldCBhbGwgc2libGluZ3MsIGluY2x1ZGluZyBteXNlbGZcclxuICBzaWJsaW5nczogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQoKS5jaGlsZHJlbigpXHJcbiAgfVxyXG4gIC8vIEdldCB0aGUgY3VyZW50IHBvc2l0aW9uIHNpYmxpbmdzXHJcbiwgcG9zaXRpb246IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucGFyZW50KCkuaW5kZXgodGhpcylcclxuICB9XHJcbiAgLy8gR2V0IHRoZSBuZXh0IGVsZW1lbnQgKHdpbGwgcmV0dXJuIG51bGwgaWYgdGhlcmUgaXMgbm9uZSlcclxuLCBuZXh0OiBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLnNpYmxpbmdzKClbdGhpcy5wb3NpdGlvbigpICsgMV1cclxuICB9XHJcbiAgLy8gR2V0IHRoZSBuZXh0IGVsZW1lbnQgKHdpbGwgcmV0dXJuIG51bGwgaWYgdGhlcmUgaXMgbm9uZSlcclxuLCBwcmV2aW91czogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaWJsaW5ncygpW3RoaXMucG9zaXRpb24oKSAtIDFdXHJcbiAgfVxyXG4gIC8vIFNlbmQgZ2l2ZW4gZWxlbWVudCBvbmUgc3RlcCBmb3J3YXJkXHJcbiwgZm9yd2FyZDogZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgaSA9IHRoaXMucG9zaXRpb24oKSArIDFcclxuICAgICAgLCBwID0gdGhpcy5wYXJlbnQoKVxyXG5cclxuICAgIC8vIG1vdmUgbm9kZSBvbmUgc3RlcCBmb3J3YXJkXHJcbiAgICBwLnJlbW92ZUVsZW1lbnQodGhpcykuYWRkKHRoaXMsIGkpXHJcblxyXG4gICAgLy8gbWFrZSBzdXJlIGRlZnMgbm9kZSBpcyBhbHdheXMgYXQgdGhlIHRvcFxyXG4gICAgaWYgKHAgaW5zdGFuY2VvZiBTVkcuRG9jKVxyXG4gICAgICBwLm5vZGUuYXBwZW5kQ2hpbGQocC5kZWZzKCkubm9kZSlcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuICAvLyBTZW5kIGdpdmVuIGVsZW1lbnQgb25lIHN0ZXAgYmFja3dhcmRcclxuLCBiYWNrd2FyZDogZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgaSA9IHRoaXMucG9zaXRpb24oKVxyXG5cclxuICAgIGlmIChpID4gMClcclxuICAgICAgdGhpcy5wYXJlbnQoKS5yZW1vdmVFbGVtZW50KHRoaXMpLmFkZCh0aGlzLCBpIC0gMSlcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuICAvLyBTZW5kIGdpdmVuIGVsZW1lbnQgYWxsIHRoZSB3YXkgdG8gdGhlIGZyb250XHJcbiwgZnJvbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHAgPSB0aGlzLnBhcmVudCgpXHJcblxyXG4gICAgLy8gTW92ZSBub2RlIGZvcndhcmRcclxuICAgIHAubm9kZS5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpXHJcblxyXG4gICAgLy8gTWFrZSBzdXJlIGRlZnMgbm9kZSBpcyBhbHdheXMgYXQgdGhlIHRvcFxyXG4gICAgaWYgKHAgaW5zdGFuY2VvZiBTVkcuRG9jKVxyXG4gICAgICBwLm5vZGUuYXBwZW5kQ2hpbGQocC5kZWZzKCkubm9kZSlcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuICAvLyBTZW5kIGdpdmVuIGVsZW1lbnQgYWxsIHRoZSB3YXkgdG8gdGhlIGJhY2tcclxuLCBiYWNrOiBmdW5jdGlvbigpIHtcclxuICAgIGlmICh0aGlzLnBvc2l0aW9uKCkgPiAwKVxyXG4gICAgICB0aGlzLnBhcmVudCgpLnJlbW92ZUVsZW1lbnQodGhpcykuYWRkKHRoaXMsIDApXHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcbiAgLy8gSW5zZXJ0cyBhIGdpdmVuIGVsZW1lbnQgYmVmb3JlIHRoZSB0YXJnZXRlZCBlbGVtZW50XHJcbiwgYmVmb3JlOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICBlbGVtZW50LnJlbW92ZSgpXHJcblxyXG4gICAgdmFyIGkgPSB0aGlzLnBvc2l0aW9uKClcclxuXHJcbiAgICB0aGlzLnBhcmVudCgpLmFkZChlbGVtZW50LCBpKVxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG4gIC8vIEluc3RlcnMgYSBnaXZlbiBlbGVtZW50IGFmdGVyIHRoZSB0YXJnZXRlZCBlbGVtZW50XHJcbiwgYWZ0ZXI6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgIGVsZW1lbnQucmVtb3ZlKClcclxuXHJcbiAgICB2YXIgaSA9IHRoaXMucG9zaXRpb24oKVxyXG5cclxuICAgIHRoaXMucGFyZW50KCkuYWRkKGVsZW1lbnQsIGkgKyAxKVxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxufSlcblNWRy5NYXNrID0gU1ZHLmludmVudCh7XHJcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXHJcbiAgY3JlYXRlOiBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBTVkcuY3JlYXRlKCdtYXNrJykpXHJcblxyXG4gICAgLy8ga2VlcCByZWZlcmVuY2VzIHRvIG1hc2tlZCBlbGVtZW50c1xyXG4gICAgdGhpcy50YXJnZXRzID0gW11cclxuICB9XHJcblxyXG4gIC8vIEluaGVyaXQgZnJvbVxyXG4sIGluaGVyaXQ6IFNWRy5Db250YWluZXJcclxuXHJcbiAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcclxuLCBleHRlbmQ6IHtcclxuICAgIC8vIFVubWFzayBhbGwgbWFza2VkIGVsZW1lbnRzIGFuZCByZW1vdmUgaXRzZWxmXHJcbiAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyB1bm1hc2sgYWxsIHRhcmdldHNcclxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudGFyZ2V0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcclxuICAgICAgICBpZiAodGhpcy50YXJnZXRzW2ldKVxyXG4gICAgICAgICAgdGhpcy50YXJnZXRzW2ldLnVubWFzaygpXHJcbiAgICAgIHRoaXMudGFyZ2V0cyA9IFtdXHJcblxyXG4gICAgICAvLyByZW1vdmUgbWFzayBmcm9tIHBhcmVudFxyXG4gICAgICBTVkcuRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlLmNhbGwodGhpcylcclxuXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxyXG4sIGNvbnN0cnVjdDoge1xyXG4gICAgLy8gQ3JlYXRlIG1hc2tpbmcgZWxlbWVudFxyXG4gICAgbWFzazogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmRlZnMoKS5wdXQobmV3IFNWRy5NYXNrKVxyXG4gICAgfVxyXG4gIH1cclxufSlcclxuXHJcblxyXG5TVkcuZXh0ZW5kKFNWRy5FbGVtZW50LCB7XHJcbiAgLy8gRGlzdHJpYnV0ZSBtYXNrIHRvIHN2ZyBlbGVtZW50XHJcbiAgbWFza1dpdGg6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgIC8vIHVzZSBnaXZlbiBtYXNrIG9yIGNyZWF0ZSBhIG5ldyBvbmVcclxuICAgIHRoaXMubWFza2VyID0gZWxlbWVudCBpbnN0YW5jZW9mIFNWRy5NYXNrID8gZWxlbWVudCA6IHRoaXMucGFyZW50KCkubWFzaygpLmFkZChlbGVtZW50KVxyXG5cclxuICAgIC8vIHN0b3JlIHJldmVyZW5jZSBvbiBzZWxmIGluIG1hc2tcclxuICAgIHRoaXMubWFza2VyLnRhcmdldHMucHVzaCh0aGlzKVxyXG5cclxuICAgIC8vIGFwcGx5IG1hc2tcclxuICAgIHJldHVybiB0aGlzLmF0dHIoJ21hc2snLCAndXJsKFwiIycgKyB0aGlzLm1hc2tlci5hdHRyKCdpZCcpICsgJ1wiKScpXHJcbiAgfVxyXG4gIC8vIFVubWFzayBlbGVtZW50XHJcbiwgdW5tYXNrOiBmdW5jdGlvbigpIHtcclxuICAgIGRlbGV0ZSB0aGlzLm1hc2tlclxyXG4gICAgcmV0dXJuIHRoaXMuYXR0cignbWFzaycsIG51bGwpXHJcbiAgfVxyXG5cclxufSlcclxuXG5TVkcuQ2xpcFBhdGggPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplIG5vZGVcclxuICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIFNWRy5jcmVhdGUoJ2NsaXBQYXRoJykpXHJcblxyXG4gICAgLy8ga2VlcCByZWZlcmVuY2VzIHRvIGNsaXBwZWQgZWxlbWVudHNcclxuICAgIHRoaXMudGFyZ2V0cyA9IFtdXHJcbiAgfVxyXG5cclxuICAvLyBJbmhlcml0IGZyb21cclxuLCBpbmhlcml0OiBTVkcuQ29udGFpbmVyXHJcblxyXG4gIC8vIEFkZCBjbGFzcyBtZXRob2RzXHJcbiwgZXh0ZW5kOiB7XHJcbiAgICAvLyBVbmNsaXAgYWxsIGNsaXBwZWQgZWxlbWVudHMgYW5kIHJlbW92ZSBpdHNlbGZcclxuICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIC8vIHVuY2xpcCBhbGwgdGFyZ2V0c1xyXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50YXJnZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxyXG4gICAgICAgIGlmICh0aGlzLnRhcmdldHNbaV0pXHJcbiAgICAgICAgICB0aGlzLnRhcmdldHNbaV0udW5jbGlwKClcclxuICAgICAgdGhpcy50YXJnZXRzID0gW11cclxuXHJcbiAgICAgIC8vIHJlbW92ZSBjbGlwUGF0aCBmcm9tIHBhcmVudFxyXG4gICAgICB0aGlzLnBhcmVudCgpLnJlbW92ZUVsZW1lbnQodGhpcylcclxuXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxyXG4sIGNvbnN0cnVjdDoge1xyXG4gICAgLy8gQ3JlYXRlIGNsaXBwaW5nIGVsZW1lbnRcclxuICAgIGNsaXA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5kZWZzKCkucHV0KG5ldyBTVkcuQ2xpcFBhdGgpXHJcbiAgICB9XHJcbiAgfVxyXG59KVxyXG5cclxuLy9cclxuU1ZHLmV4dGVuZChTVkcuRWxlbWVudCwge1xyXG4gIC8vIERpc3RyaWJ1dGUgY2xpcFBhdGggdG8gc3ZnIGVsZW1lbnRcclxuICBjbGlwV2l0aDogZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgLy8gdXNlIGdpdmVuIGNsaXAgb3IgY3JlYXRlIGEgbmV3IG9uZVxyXG4gICAgdGhpcy5jbGlwcGVyID0gZWxlbWVudCBpbnN0YW5jZW9mIFNWRy5DbGlwUGF0aCA/IGVsZW1lbnQgOiB0aGlzLnBhcmVudCgpLmNsaXAoKS5hZGQoZWxlbWVudClcclxuXHJcbiAgICAvLyBzdG9yZSByZXZlcmVuY2Ugb24gc2VsZiBpbiBtYXNrXHJcbiAgICB0aGlzLmNsaXBwZXIudGFyZ2V0cy5wdXNoKHRoaXMpXHJcblxyXG4gICAgLy8gYXBwbHkgbWFza1xyXG4gICAgcmV0dXJuIHRoaXMuYXR0cignY2xpcC1wYXRoJywgJ3VybChcIiMnICsgdGhpcy5jbGlwcGVyLmF0dHIoJ2lkJykgKyAnXCIpJylcclxuICB9XHJcbiAgLy8gVW5jbGlwIGVsZW1lbnRcclxuLCB1bmNsaXA6IGZ1bmN0aW9uKCkge1xyXG4gICAgZGVsZXRlIHRoaXMuY2xpcHBlclxyXG4gICAgcmV0dXJuIHRoaXMuYXR0cignY2xpcC1wYXRoJywgbnVsbClcclxuICB9XHJcblxyXG59KVxuU1ZHLkdyYWRpZW50ID0gU1ZHLmludmVudCh7XHJcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXHJcbiAgY3JlYXRlOiBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICB0aGlzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgU1ZHLmNyZWF0ZSh0eXBlICsgJ0dyYWRpZW50JykpXHJcblxyXG4gICAgLy8gc3RvcmUgdHlwZVxyXG4gICAgdGhpcy50eXBlID0gdHlwZVxyXG4gIH1cclxuXHJcbiAgLy8gSW5oZXJpdCBmcm9tXHJcbiwgaW5oZXJpdDogU1ZHLkNvbnRhaW5lclxyXG5cclxuICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xyXG4sIGV4dGVuZDoge1xyXG4gICAgLy8gQWRkIGEgY29sb3Igc3RvcFxyXG4gICAgYXQ6IGZ1bmN0aW9uKG9mZnNldCwgY29sb3IsIG9wYWNpdHkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuU3RvcCkudXBkYXRlKG9mZnNldCwgY29sb3IsIG9wYWNpdHkpXHJcbiAgICB9XHJcbiAgICAvLyBVcGRhdGUgZ3JhZGllbnRcclxuICAsIHVwZGF0ZTogZnVuY3Rpb24oYmxvY2spIHtcclxuICAgICAgLy8gcmVtb3ZlIGFsbCBzdG9wc1xyXG4gICAgICB0aGlzLmNsZWFyKClcclxuXHJcbiAgICAgIC8vIGludm9rZSBwYXNzZWQgYmxvY2tcclxuICAgICAgaWYgKHR5cGVvZiBibG9jayA9PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgIGJsb2NrLmNhbGwodGhpcywgdGhpcylcclxuXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcbiAgICAvLyBSZXR1cm4gdGhlIGZpbGwgaWRcclxuICAsIGZpbGw6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gJ3VybCgjJyArIHRoaXMuaWQoKSArICcpJ1xyXG4gICAgfVxyXG4gICAgLy8gQWxpYXMgc3RyaW5nIGNvbnZlcnRpb24gdG8gZmlsbFxyXG4gICwgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5maWxsKClcclxuICAgIH1cclxuICAgIC8vIGN1c3RvbSBhdHRyIHRvIGhhbmRsZSB0cmFuc2Zvcm1cclxuICAsIGF0dHI6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcclxuICAgICAgaWYoYSA9PSAndHJhbnNmb3JtJykgYSA9ICdncmFkaWVudFRyYW5zZm9ybSdcclxuICAgICAgcmV0dXJuIFNWRy5Db250YWluZXIucHJvdG90eXBlLmF0dHIuY2FsbCh0aGlzLCBhLCBiLCBjKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcclxuLCBjb25zdHJ1Y3Q6IHtcclxuICAgIC8vIENyZWF0ZSBncmFkaWVudCBlbGVtZW50IGluIGRlZnNcclxuICAgIGdyYWRpZW50OiBmdW5jdGlvbih0eXBlLCBibG9jaykge1xyXG4gICAgICByZXR1cm4gdGhpcy5kZWZzKCkuZ3JhZGllbnQodHlwZSwgYmxvY2spXHJcbiAgICB9XHJcbiAgfVxyXG59KVxyXG5cclxuLy8gQWRkIGFuaW1hdGFibGUgbWV0aG9kcyB0byBib3RoIGdyYWRpZW50IGFuZCBmeCBtb2R1bGVcclxuU1ZHLmV4dGVuZChTVkcuR3JhZGllbnQsIFNWRy5GWCwge1xyXG4gIC8vIEZyb20gcG9zaXRpb25cclxuICBmcm9tOiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICByZXR1cm4gKHRoaXMuX3RhcmdldCB8fCB0aGlzKS50eXBlID09ICdyYWRpYWwnID9cclxuICAgICAgdGhpcy5hdHRyKHsgZng6IG5ldyBTVkcuTnVtYmVyKHgpLCBmeTogbmV3IFNWRy5OdW1iZXIoeSkgfSkgOlxyXG4gICAgICB0aGlzLmF0dHIoeyB4MTogbmV3IFNWRy5OdW1iZXIoeCksIHkxOiBuZXcgU1ZHLk51bWJlcih5KSB9KVxyXG4gIH1cclxuICAvLyBUbyBwb3NpdGlvblxyXG4sIHRvOiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICByZXR1cm4gKHRoaXMuX3RhcmdldCB8fCB0aGlzKS50eXBlID09ICdyYWRpYWwnID9cclxuICAgICAgdGhpcy5hdHRyKHsgY3g6IG5ldyBTVkcuTnVtYmVyKHgpLCBjeTogbmV3IFNWRy5OdW1iZXIoeSkgfSkgOlxyXG4gICAgICB0aGlzLmF0dHIoeyB4MjogbmV3IFNWRy5OdW1iZXIoeCksIHkyOiBuZXcgU1ZHLk51bWJlcih5KSB9KVxyXG4gIH1cclxufSlcclxuXHJcbi8vIEJhc2UgZ3JhZGllbnQgZ2VuZXJhdGlvblxyXG5TVkcuZXh0ZW5kKFNWRy5EZWZzLCB7XHJcbiAgLy8gZGVmaW5lIGdyYWRpZW50XHJcbiAgZ3JhZGllbnQ6IGZ1bmN0aW9uKHR5cGUsIGJsb2NrKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5HcmFkaWVudCh0eXBlKSkudXBkYXRlKGJsb2NrKVxyXG4gIH1cclxuXHJcbn0pXHJcblxyXG5TVkcuU3RvcCA9IFNWRy5pbnZlbnQoe1xyXG4gIC8vIEluaXRpYWxpemUgbm9kZVxyXG4gIGNyZWF0ZTogJ3N0b3AnXHJcblxyXG4gIC8vIEluaGVyaXQgZnJvbVxyXG4sIGluaGVyaXQ6IFNWRy5FbGVtZW50XHJcblxyXG4gIC8vIEFkZCBjbGFzcyBtZXRob2RzXHJcbiwgZXh0ZW5kOiB7XHJcbiAgICAvLyBhZGQgY29sb3Igc3RvcHNcclxuICAgIHVwZGF0ZTogZnVuY3Rpb24obykge1xyXG4gICAgICBpZiAodHlwZW9mIG8gPT0gJ251bWJlcicgfHwgbyBpbnN0YW5jZW9mIFNWRy5OdW1iZXIpIHtcclxuICAgICAgICBvID0ge1xyXG4gICAgICAgICAgb2Zmc2V0OiAgYXJndW1lbnRzWzBdXHJcbiAgICAgICAgLCBjb2xvcjogICBhcmd1bWVudHNbMV1cclxuICAgICAgICAsIG9wYWNpdHk6IGFyZ3VtZW50c1syXVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gc2V0IGF0dHJpYnV0ZXNcclxuICAgICAgaWYgKG8ub3BhY2l0eSAhPSBudWxsKSB0aGlzLmF0dHIoJ3N0b3Atb3BhY2l0eScsIG8ub3BhY2l0eSlcclxuICAgICAgaWYgKG8uY29sb3IgICAhPSBudWxsKSB0aGlzLmF0dHIoJ3N0b3AtY29sb3InLCBvLmNvbG9yKVxyXG4gICAgICBpZiAoby5vZmZzZXQgICE9IG51bGwpIHRoaXMuYXR0cignb2Zmc2V0JywgbmV3IFNWRy5OdW1iZXIoby5vZmZzZXQpKVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICB9XHJcblxyXG59KVxyXG5cblNWRy5QYXR0ZXJuID0gU1ZHLmludmVudCh7XHJcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXHJcbiAgY3JlYXRlOiAncGF0dGVybidcclxuXHJcbiAgLy8gSW5oZXJpdCBmcm9tXHJcbiwgaW5oZXJpdDogU1ZHLkNvbnRhaW5lclxyXG5cclxuICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xyXG4sIGV4dGVuZDoge1xyXG4gICAgLy8gUmV0dXJuIHRoZSBmaWxsIGlkXHJcbiAgICBmaWxsOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuICd1cmwoIycgKyB0aGlzLmlkKCkgKyAnKSdcclxuICAgIH1cclxuICAgIC8vIFVwZGF0ZSBwYXR0ZXJuIGJ5IHJlYnVpbGRpbmdcclxuICAsIHVwZGF0ZTogZnVuY3Rpb24oYmxvY2spIHtcclxuICAgICAgLy8gcmVtb3ZlIGNvbnRlbnRcclxuICAgICAgdGhpcy5jbGVhcigpXHJcblxyXG4gICAgICAvLyBpbnZva2UgcGFzc2VkIGJsb2NrXHJcbiAgICAgIGlmICh0eXBlb2YgYmxvY2sgPT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICBibG9jay5jYWxsKHRoaXMsIHRoaXMpXHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG4gICAgLy8gQWxpYXMgc3RyaW5nIGNvbnZlcnRpb24gdG8gZmlsbFxyXG4gICwgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5maWxsKClcclxuICAgIH1cclxuICAgIC8vIGN1c3RvbSBhdHRyIHRvIGhhbmRsZSB0cmFuc2Zvcm1cclxuICAsIGF0dHI6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcclxuICAgICAgaWYoYSA9PSAndHJhbnNmb3JtJykgYSA9ICdwYXR0ZXJuVHJhbnNmb3JtJ1xyXG4gICAgICByZXR1cm4gU1ZHLkNvbnRhaW5lci5wcm90b3R5cGUuYXR0ci5jYWxsKHRoaXMsIGEsIGIsIGMpXHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcclxuLCBjb25zdHJ1Y3Q6IHtcclxuICAgIC8vIENyZWF0ZSBwYXR0ZXJuIGVsZW1lbnQgaW4gZGVmc1xyXG4gICAgcGF0dGVybjogZnVuY3Rpb24od2lkdGgsIGhlaWdodCwgYmxvY2spIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZGVmcygpLnBhdHRlcm4od2lkdGgsIGhlaWdodCwgYmxvY2spXHJcbiAgICB9XHJcbiAgfVxyXG59KVxyXG5cclxuU1ZHLmV4dGVuZChTVkcuRGVmcywge1xyXG4gIC8vIERlZmluZSBncmFkaWVudFxyXG4gIHBhdHRlcm46IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQsIGJsb2NrKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5QYXR0ZXJuKS51cGRhdGUoYmxvY2spLmF0dHIoe1xyXG4gICAgICB4OiAgICAgICAgICAgIDBcclxuICAgICwgeTogICAgICAgICAgICAwXHJcbiAgICAsIHdpZHRoOiAgICAgICAgd2lkdGhcclxuICAgICwgaGVpZ2h0OiAgICAgICBoZWlnaHRcclxuICAgICwgcGF0dGVyblVuaXRzOiAndXNlclNwYWNlT25Vc2UnXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbn0pXG5TVkcuU2hhcGUgPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplIG5vZGVcclxuICBjcmVhdGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBlbGVtZW50KVxyXG4gIH1cclxuXHJcbiAgLy8gSW5oZXJpdCBmcm9tXHJcbiwgaW5oZXJpdDogU1ZHLkVsZW1lbnRcclxuXHJcbn0pXG5cclxuU1ZHLkJhcmUgPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplXHJcbiAgY3JlYXRlOiBmdW5jdGlvbihlbGVtZW50LCBpbmhlcml0KSB7XHJcbiAgICAvLyBjb25zdHJ1Y3QgZWxlbWVudFxyXG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIFNWRy5jcmVhdGUoZWxlbWVudCkpXHJcblxyXG4gICAgLy8gaW5oZXJpdCBjdXN0b20gbWV0aG9kc1xyXG4gICAgaWYgKGluaGVyaXQpXHJcbiAgICAgIGZvciAodmFyIG1ldGhvZCBpbiBpbmhlcml0LnByb3RvdHlwZSlcclxuICAgICAgICBpZiAodHlwZW9mIGluaGVyaXQucHJvdG90eXBlW21ldGhvZF0gPT09ICdmdW5jdGlvbicpXHJcbiAgICAgICAgICB0aGlzW21ldGhvZF0gPSBpbmhlcml0LnByb3RvdHlwZVttZXRob2RdXHJcbiAgfVxyXG5cclxuICAvLyBJbmhlcml0IGZyb21cclxuLCBpbmhlcml0OiBTVkcuRWxlbWVudFxyXG5cclxuICAvLyBBZGQgbWV0aG9kc1xyXG4sIGV4dGVuZDoge1xyXG4gICAgLy8gSW5zZXJ0IHNvbWUgcGxhaW4gdGV4dFxyXG4gICAgd29yZHM6IGZ1bmN0aW9uKHRleHQpIHtcclxuICAgICAgLy8gcmVtb3ZlIGNvbnRlbnRzXHJcbiAgICAgIHdoaWxlICh0aGlzLm5vZGUuaGFzQ2hpbGROb2RlcygpKVxyXG4gICAgICAgIHRoaXMubm9kZS5yZW1vdmVDaGlsZCh0aGlzLm5vZGUubGFzdENoaWxkKVxyXG5cclxuICAgICAgLy8gY3JlYXRlIHRleHQgbm9kZVxyXG4gICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCkpXHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG4gIH1cclxufSlcclxuXHJcblxyXG5TVkcuZXh0ZW5kKFNWRy5QYXJlbnQsIHtcclxuICAvLyBDcmVhdGUgYW4gZWxlbWVudCB0aGF0IGlzIG5vdCBkZXNjcmliZWQgYnkgU1ZHLmpzXHJcbiAgZWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCwgaW5oZXJpdCkge1xyXG4gICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuQmFyZShlbGVtZW50LCBpbmhlcml0KSlcclxuICB9XHJcbn0pXHJcblxuU1ZHLlN5bWJvbCA9IFNWRy5pbnZlbnQoe1xyXG4gIC8vIEluaXRpYWxpemUgbm9kZVxyXG4gIGNyZWF0ZTogJ3N5bWJvbCdcclxuXHJcbiAgLy8gSW5oZXJpdCBmcm9tXHJcbiwgaW5oZXJpdDogU1ZHLkNvbnRhaW5lclxyXG5cclxuLCBjb25zdHJ1Y3Q6IHtcclxuICAgIC8vIGNyZWF0ZSBzeW1ib2xcclxuICAgIHN5bWJvbDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLlN5bWJvbClcclxuICAgIH1cclxuICB9XHJcbn0pXHJcblxuU1ZHLlVzZSA9IFNWRy5pbnZlbnQoe1xyXG4gIC8vIEluaXRpYWxpemUgbm9kZVxyXG4gIGNyZWF0ZTogJ3VzZSdcclxuXHJcbiAgLy8gSW5oZXJpdCBmcm9tXHJcbiwgaW5oZXJpdDogU1ZHLlNoYXBlXHJcblxyXG4gIC8vIEFkZCBjbGFzcyBtZXRob2RzXHJcbiwgZXh0ZW5kOiB7XHJcbiAgICAvLyBVc2UgZWxlbWVudCBhcyBhIHJlZmVyZW5jZVxyXG4gICAgZWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCwgZmlsZSkge1xyXG4gICAgICAvLyBTZXQgbGluZWQgZWxlbWVudFxyXG4gICAgICByZXR1cm4gdGhpcy5hdHRyKCdocmVmJywgKGZpbGUgfHwgJycpICsgJyMnICsgZWxlbWVudCwgU1ZHLnhsaW5rKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcclxuLCBjb25zdHJ1Y3Q6IHtcclxuICAgIC8vIENyZWF0ZSBhIHVzZSBlbGVtZW50XHJcbiAgICB1c2U6IGZ1bmN0aW9uKGVsZW1lbnQsIGZpbGUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuVXNlKS5lbGVtZW50KGVsZW1lbnQsIGZpbGUpXHJcbiAgICB9XHJcbiAgfVxyXG59KVxuU1ZHLlJlY3QgPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplIG5vZGVcclxuICBjcmVhdGU6ICdyZWN0J1xyXG5cclxuICAvLyBJbmhlcml0IGZyb21cclxuLCBpbmhlcml0OiBTVkcuU2hhcGVcclxuXHJcbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcclxuLCBjb25zdHJ1Y3Q6IHtcclxuICAgIC8vIENyZWF0ZSBhIHJlY3QgZWxlbWVudFxyXG4gICAgcmVjdDogZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5SZWN0KCkpLnNpemUod2lkdGgsIGhlaWdodClcclxuICAgIH1cclxuICB9XHJcbn0pXG5TVkcuQ2lyY2xlID0gU1ZHLmludmVudCh7XHJcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXHJcbiAgY3JlYXRlOiAnY2lyY2xlJ1xyXG5cclxuICAvLyBJbmhlcml0IGZyb21cclxuLCBpbmhlcml0OiBTVkcuU2hhcGVcclxuXHJcbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcclxuLCBjb25zdHJ1Y3Q6IHtcclxuICAgIC8vIENyZWF0ZSBjaXJjbGUgZWxlbWVudCwgYmFzZWQgb24gZWxsaXBzZVxyXG4gICAgY2lyY2xlOiBmdW5jdGlvbihzaXplKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLkNpcmNsZSkucngobmV3IFNWRy5OdW1iZXIoc2l6ZSkuZGl2aWRlKDIpKS5tb3ZlKDAsIDApXHJcbiAgICB9XHJcbiAgfVxyXG59KVxyXG5cclxuU1ZHLmV4dGVuZChTVkcuQ2lyY2xlLCBTVkcuRlgsIHtcclxuICAvLyBSYWRpdXMgeCB2YWx1ZVxyXG4gIHJ4OiBmdW5jdGlvbihyeCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYXR0cigncicsIHJ4KVxyXG4gIH1cclxuICAvLyBBbGlhcyByYWRpdXMgeCB2YWx1ZVxyXG4sIHJ5OiBmdW5jdGlvbihyeSkge1xyXG4gICAgcmV0dXJuIHRoaXMucngocnkpXHJcbiAgfVxyXG59KVxyXG5cclxuU1ZHLkVsbGlwc2UgPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplIG5vZGVcclxuICBjcmVhdGU6ICdlbGxpcHNlJ1xyXG5cclxuICAvLyBJbmhlcml0IGZyb21cclxuLCBpbmhlcml0OiBTVkcuU2hhcGVcclxuXHJcbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcclxuLCBjb25zdHJ1Y3Q6IHtcclxuICAgIC8vIENyZWF0ZSBhbiBlbGxpcHNlXHJcbiAgICBlbGxpcHNlOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLkVsbGlwc2UpLnNpemUod2lkdGgsIGhlaWdodCkubW92ZSgwLCAwKVxyXG4gICAgfVxyXG4gIH1cclxufSlcclxuXHJcblNWRy5leHRlbmQoU1ZHLkVsbGlwc2UsIFNWRy5SZWN0LCBTVkcuRlgsIHtcclxuICAvLyBSYWRpdXMgeCB2YWx1ZVxyXG4gIHJ4OiBmdW5jdGlvbihyeCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYXR0cigncngnLCByeClcclxuICB9XHJcbiAgLy8gUmFkaXVzIHkgdmFsdWVcclxuLCByeTogZnVuY3Rpb24ocnkpIHtcclxuICAgIHJldHVybiB0aGlzLmF0dHIoJ3J5JywgcnkpXHJcbiAgfVxyXG59KVxyXG5cclxuLy8gQWRkIGNvbW1vbiBtZXRob2RcclxuU1ZHLmV4dGVuZChTVkcuQ2lyY2xlLCBTVkcuRWxsaXBzZSwge1xyXG4gICAgLy8gTW92ZSBvdmVyIHgtYXhpc1xyXG4gICAgeDogZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4geCA9PSBudWxsID8gdGhpcy5jeCgpIC0gdGhpcy5yeCgpIDogdGhpcy5jeCh4ICsgdGhpcy5yeCgpKVxyXG4gICAgfVxyXG4gICAgLy8gTW92ZSBvdmVyIHktYXhpc1xyXG4gICwgeTogZnVuY3Rpb24oeSkge1xyXG4gICAgICByZXR1cm4geSA9PSBudWxsID8gdGhpcy5jeSgpIC0gdGhpcy5yeSgpIDogdGhpcy5jeSh5ICsgdGhpcy5yeSgpKVxyXG4gICAgfVxyXG4gICAgLy8gTW92ZSBieSBjZW50ZXIgb3ZlciB4LWF4aXNcclxuICAsIGN4OiBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiB4ID09IG51bGwgPyB0aGlzLmF0dHIoJ2N4JykgOiB0aGlzLmF0dHIoJ2N4JywgeClcclxuICAgIH1cclxuICAgIC8vIE1vdmUgYnkgY2VudGVyIG92ZXIgeS1heGlzXHJcbiAgLCBjeTogZnVuY3Rpb24oeSkge1xyXG4gICAgICByZXR1cm4geSA9PSBudWxsID8gdGhpcy5hdHRyKCdjeScpIDogdGhpcy5hdHRyKCdjeScsIHkpXHJcbiAgICB9XHJcbiAgICAvLyBTZXQgd2lkdGggb2YgZWxlbWVudFxyXG4gICwgd2lkdGg6IGZ1bmN0aW9uKHdpZHRoKSB7XHJcbiAgICAgIHJldHVybiB3aWR0aCA9PSBudWxsID8gdGhpcy5yeCgpICogMiA6IHRoaXMucngobmV3IFNWRy5OdW1iZXIod2lkdGgpLmRpdmlkZSgyKSlcclxuICAgIH1cclxuICAgIC8vIFNldCBoZWlnaHQgb2YgZWxlbWVudFxyXG4gICwgaGVpZ2h0OiBmdW5jdGlvbihoZWlnaHQpIHtcclxuICAgICAgcmV0dXJuIGhlaWdodCA9PSBudWxsID8gdGhpcy5yeSgpICogMiA6IHRoaXMucnkobmV3IFNWRy5OdW1iZXIoaGVpZ2h0KS5kaXZpZGUoMikpXHJcbiAgICB9XHJcbiAgICAvLyBDdXN0b20gc2l6ZSBmdW5jdGlvblxyXG4gICwgc2l6ZTogZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xyXG4gICAgICB2YXIgcCA9IHByb3BvcnRpb25hbFNpemUodGhpcywgd2lkdGgsIGhlaWdodClcclxuXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgLnJ4KG5ldyBTVkcuTnVtYmVyKHAud2lkdGgpLmRpdmlkZSgyKSlcclxuICAgICAgICAucnkobmV3IFNWRy5OdW1iZXIocC5oZWlnaHQpLmRpdmlkZSgyKSlcclxuICAgIH1cclxufSlcblNWRy5MaW5lID0gU1ZHLmludmVudCh7XHJcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXHJcbiAgY3JlYXRlOiAnbGluZSdcclxuXHJcbiAgLy8gSW5oZXJpdCBmcm9tXHJcbiwgaW5oZXJpdDogU1ZHLlNoYXBlXHJcblxyXG4gIC8vIEFkZCBjbGFzcyBtZXRob2RzXHJcbiwgZXh0ZW5kOiB7XHJcbiAgICAvLyBHZXQgYXJyYXlcclxuICAgIGFycmF5OiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIG5ldyBTVkcuUG9pbnRBcnJheShbXHJcbiAgICAgICAgWyB0aGlzLmF0dHIoJ3gxJyksIHRoaXMuYXR0cigneTEnKSBdXHJcbiAgICAgICwgWyB0aGlzLmF0dHIoJ3gyJyksIHRoaXMuYXR0cigneTInKSBdXHJcbiAgICAgIF0pXHJcbiAgICB9XHJcbiAgICAvLyBPdmVyd3JpdGUgbmF0aXZlIHBsb3QoKSBtZXRob2RcclxuICAsIHBsb3Q6IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyKSB7XHJcbiAgICAgIGlmICh4MSA9PSBudWxsKVxyXG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5KClcclxuICAgICAgZWxzZSBpZiAodHlwZW9mIHkxICE9PSAndW5kZWZpbmVkJylcclxuICAgICAgICB4MSA9IHsgeDE6IHgxLCB5MTogeTEsIHgyOiB4MiwgeTI6IHkyIH1cclxuICAgICAgZWxzZVxyXG4gICAgICAgIHgxID0gbmV3IFNWRy5Qb2ludEFycmF5KHgxKS50b0xpbmUoKVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuYXR0cih4MSlcclxuICAgIH1cclxuICAgIC8vIE1vdmUgYnkgbGVmdCB0b3AgY29ybmVyXHJcbiAgLCBtb3ZlOiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmF0dHIodGhpcy5hcnJheSgpLm1vdmUoeCwgeSkudG9MaW5lKCkpXHJcbiAgICB9XHJcbiAgICAvLyBTZXQgZWxlbWVudCBzaXplIHRvIGdpdmVuIHdpZHRoIGFuZCBoZWlnaHRcclxuICAsIHNpemU6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgdmFyIHAgPSBwcm9wb3J0aW9uYWxTaXplKHRoaXMsIHdpZHRoLCBoZWlnaHQpXHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5hdHRyKHRoaXMuYXJyYXkoKS5zaXplKHAud2lkdGgsIHAuaGVpZ2h0KS50b0xpbmUoKSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEFkZCBwYXJlbnQgbWV0aG9kXHJcbiwgY29uc3RydWN0OiB7XHJcbiAgICAvLyBDcmVhdGUgYSBsaW5lIGVsZW1lbnRcclxuICAgIGxpbmU6IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyKSB7XHJcbiAgICAgIC8vIG1ha2Ugc3VyZSBwbG90IGlzIGNhbGxlZCBhcyBhIHNldHRlclxyXG4gICAgICAvLyB4MSBpcyBub3QgbmVjZXNzYXJpbHkgYSBudW1iZXIsIGl0IGNhbiBhbHNvIGJlIGFuIGFycmF5LCBhIHN0cmluZyBhbmQgYSBTVkcuUG9pbnRBcnJheVxyXG4gICAgICByZXR1cm4gU1ZHLkxpbmUucHJvdG90eXBlLnBsb3QuYXBwbHkoXHJcbiAgICAgICAgdGhpcy5wdXQobmV3IFNWRy5MaW5lKVxyXG4gICAgICAsIHgxICE9IG51bGwgPyBbeDEsIHkxLCB4MiwgeTJdIDogWzAsIDAsIDAsIDBdXHJcbiAgICAgIClcclxuICAgIH1cclxuICB9XHJcbn0pXHJcblxuU1ZHLlBvbHlsaW5lID0gU1ZHLmludmVudCh7XHJcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXHJcbiAgY3JlYXRlOiAncG9seWxpbmUnXHJcblxyXG4gIC8vIEluaGVyaXQgZnJvbVxyXG4sIGluaGVyaXQ6IFNWRy5TaGFwZVxyXG5cclxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxyXG4sIGNvbnN0cnVjdDoge1xyXG4gICAgLy8gQ3JlYXRlIGEgd3JhcHBlZCBwb2x5bGluZSBlbGVtZW50XHJcbiAgICBwb2x5bGluZTogZnVuY3Rpb24ocCkge1xyXG4gICAgICAvLyBtYWtlIHN1cmUgcGxvdCBpcyBjYWxsZWQgYXMgYSBzZXR0ZXJcclxuICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuUG9seWxpbmUpLnBsb3QocCB8fCBuZXcgU1ZHLlBvaW50QXJyYXkpXHJcbiAgICB9XHJcbiAgfVxyXG59KVxyXG5cclxuU1ZHLlBvbHlnb24gPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplIG5vZGVcclxuICBjcmVhdGU6ICdwb2x5Z29uJ1xyXG5cclxuICAvLyBJbmhlcml0IGZyb21cclxuLCBpbmhlcml0OiBTVkcuU2hhcGVcclxuXHJcbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcclxuLCBjb25zdHJ1Y3Q6IHtcclxuICAgIC8vIENyZWF0ZSBhIHdyYXBwZWQgcG9seWdvbiBlbGVtZW50XHJcbiAgICBwb2x5Z29uOiBmdW5jdGlvbihwKSB7XHJcbiAgICAgIC8vIG1ha2Ugc3VyZSBwbG90IGlzIGNhbGxlZCBhcyBhIHNldHRlclxyXG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5Qb2x5Z29uKS5wbG90KHAgfHwgbmV3IFNWRy5Qb2ludEFycmF5KVxyXG4gICAgfVxyXG4gIH1cclxufSlcclxuXHJcbi8vIEFkZCBwb2x5Z29uLXNwZWNpZmljIGZ1bmN0aW9uc1xyXG5TVkcuZXh0ZW5kKFNWRy5Qb2x5bGluZSwgU1ZHLlBvbHlnb24sIHtcclxuICAvLyBHZXQgYXJyYXlcclxuICBhcnJheTogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fYXJyYXkgfHwgKHRoaXMuX2FycmF5ID0gbmV3IFNWRy5Qb2ludEFycmF5KHRoaXMuYXR0cigncG9pbnRzJykpKVxyXG4gIH1cclxuICAvLyBQbG90IG5ldyBwYXRoXHJcbiwgcGxvdDogZnVuY3Rpb24ocCkge1xyXG4gICAgcmV0dXJuIChwID09IG51bGwpID9cclxuICAgICAgdGhpcy5hcnJheSgpIDpcclxuICAgICAgdGhpcy5jbGVhcigpLmF0dHIoJ3BvaW50cycsIHR5cGVvZiBwID09ICdzdHJpbmcnID8gcCA6ICh0aGlzLl9hcnJheSA9IG5ldyBTVkcuUG9pbnRBcnJheShwKSkpXHJcbiAgfVxyXG4gIC8vIENsZWFyIGFycmF5IGNhY2hlXHJcbiwgY2xlYXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2FycmF5XHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuICAvLyBNb3ZlIGJ5IGxlZnQgdG9wIGNvcm5lclxyXG4sIG1vdmU6IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgIHJldHVybiB0aGlzLmF0dHIoJ3BvaW50cycsIHRoaXMuYXJyYXkoKS5tb3ZlKHgsIHkpKVxyXG4gIH1cclxuICAvLyBTZXQgZWxlbWVudCBzaXplIHRvIGdpdmVuIHdpZHRoIGFuZCBoZWlnaHRcclxuLCBzaXplOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICB2YXIgcCA9IHByb3BvcnRpb25hbFNpemUodGhpcywgd2lkdGgsIGhlaWdodClcclxuXHJcbiAgICByZXR1cm4gdGhpcy5hdHRyKCdwb2ludHMnLCB0aGlzLmFycmF5KCkuc2l6ZShwLndpZHRoLCBwLmhlaWdodCkpXHJcbiAgfVxyXG5cclxufSlcclxuXG4vLyB1bmlmeSBhbGwgcG9pbnQgdG8gcG9pbnQgZWxlbWVudHNcclxuU1ZHLmV4dGVuZChTVkcuTGluZSwgU1ZHLlBvbHlsaW5lLCBTVkcuUG9seWdvbiwge1xyXG4gIC8vIERlZmluZSBtb3JwaGFibGUgYXJyYXlcclxuICBtb3JwaEFycmF5OiAgU1ZHLlBvaW50QXJyYXlcclxuICAvLyBNb3ZlIGJ5IGxlZnQgdG9wIGNvcm5lciBvdmVyIHgtYXhpc1xyXG4sIHg6IGZ1bmN0aW9uKHgpIHtcclxuICAgIHJldHVybiB4ID09IG51bGwgPyB0aGlzLmJib3goKS54IDogdGhpcy5tb3ZlKHgsIHRoaXMuYmJveCgpLnkpXHJcbiAgfVxyXG4gIC8vIE1vdmUgYnkgbGVmdCB0b3AgY29ybmVyIG92ZXIgeS1heGlzXHJcbiwgeTogZnVuY3Rpb24oeSkge1xyXG4gICAgcmV0dXJuIHkgPT0gbnVsbCA/IHRoaXMuYmJveCgpLnkgOiB0aGlzLm1vdmUodGhpcy5iYm94KCkueCwgeSlcclxuICB9XHJcbiAgLy8gU2V0IHdpZHRoIG9mIGVsZW1lbnRcclxuLCB3aWR0aDogZnVuY3Rpb24od2lkdGgpIHtcclxuICAgIHZhciBiID0gdGhpcy5iYm94KClcclxuXHJcbiAgICByZXR1cm4gd2lkdGggPT0gbnVsbCA/IGIud2lkdGggOiB0aGlzLnNpemUod2lkdGgsIGIuaGVpZ2h0KVxyXG4gIH1cclxuICAvLyBTZXQgaGVpZ2h0IG9mIGVsZW1lbnRcclxuLCBoZWlnaHQ6IGZ1bmN0aW9uKGhlaWdodCkge1xyXG4gICAgdmFyIGIgPSB0aGlzLmJib3goKVxyXG5cclxuICAgIHJldHVybiBoZWlnaHQgPT0gbnVsbCA/IGIuaGVpZ2h0IDogdGhpcy5zaXplKGIud2lkdGgsIGhlaWdodClcclxuICB9XHJcbn0pXG5TVkcuUGF0aCA9IFNWRy5pbnZlbnQoe1xyXG4gIC8vIEluaXRpYWxpemUgbm9kZVxyXG4gIGNyZWF0ZTogJ3BhdGgnXHJcblxyXG4gIC8vIEluaGVyaXQgZnJvbVxyXG4sIGluaGVyaXQ6IFNWRy5TaGFwZVxyXG5cclxuICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xyXG4sIGV4dGVuZDoge1xyXG4gICAgLy8gRGVmaW5lIG1vcnBoYWJsZSBhcnJheVxyXG4gICAgbW9ycGhBcnJheTogIFNWRy5QYXRoQXJyYXlcclxuICAgIC8vIEdldCBhcnJheVxyXG4gICwgYXJyYXk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fYXJyYXkgfHwgKHRoaXMuX2FycmF5ID0gbmV3IFNWRy5QYXRoQXJyYXkodGhpcy5hdHRyKCdkJykpKVxyXG4gICAgfVxyXG4gICAgLy8gUGxvdCBuZXcgcGF0aFxyXG4gICwgcGxvdDogZnVuY3Rpb24oZCkge1xyXG4gICAgICByZXR1cm4gKGQgPT0gbnVsbCkgP1xyXG4gICAgICAgIHRoaXMuYXJyYXkoKSA6XHJcbiAgICAgICAgdGhpcy5jbGVhcigpLmF0dHIoJ2QnLCB0eXBlb2YgZCA9PSAnc3RyaW5nJyA/IGQgOiAodGhpcy5fYXJyYXkgPSBuZXcgU1ZHLlBhdGhBcnJheShkKSkpXHJcbiAgICB9XHJcbiAgICAvLyBDbGVhciBhcnJheSBjYWNoZVxyXG4gICwgY2xlYXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBkZWxldGUgdGhpcy5fYXJyYXlcclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAgIC8vIE1vdmUgYnkgbGVmdCB0b3AgY29ybmVyXHJcbiAgLCBtb3ZlOiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2QnLCB0aGlzLmFycmF5KCkubW92ZSh4LCB5KSlcclxuICAgIH1cclxuICAgIC8vIE1vdmUgYnkgbGVmdCB0b3AgY29ybmVyIG92ZXIgeC1heGlzXHJcbiAgLCB4OiBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiB4ID09IG51bGwgPyB0aGlzLmJib3goKS54IDogdGhpcy5tb3ZlKHgsIHRoaXMuYmJveCgpLnkpXHJcbiAgICB9XHJcbiAgICAvLyBNb3ZlIGJ5IGxlZnQgdG9wIGNvcm5lciBvdmVyIHktYXhpc1xyXG4gICwgeTogZnVuY3Rpb24oeSkge1xyXG4gICAgICByZXR1cm4geSA9PSBudWxsID8gdGhpcy5iYm94KCkueSA6IHRoaXMubW92ZSh0aGlzLmJib3goKS54LCB5KVxyXG4gICAgfVxyXG4gICAgLy8gU2V0IGVsZW1lbnQgc2l6ZSB0byBnaXZlbiB3aWR0aCBhbmQgaGVpZ2h0XHJcbiAgLCBzaXplOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgIHZhciBwID0gcHJvcG9ydGlvbmFsU2l6ZSh0aGlzLCB3aWR0aCwgaGVpZ2h0KVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuYXR0cignZCcsIHRoaXMuYXJyYXkoKS5zaXplKHAud2lkdGgsIHAuaGVpZ2h0KSlcclxuICAgIH1cclxuICAgIC8vIFNldCB3aWR0aCBvZiBlbGVtZW50XHJcbiAgLCB3aWR0aDogZnVuY3Rpb24od2lkdGgpIHtcclxuICAgICAgcmV0dXJuIHdpZHRoID09IG51bGwgPyB0aGlzLmJib3goKS53aWR0aCA6IHRoaXMuc2l6ZSh3aWR0aCwgdGhpcy5iYm94KCkuaGVpZ2h0KVxyXG4gICAgfVxyXG4gICAgLy8gU2V0IGhlaWdodCBvZiBlbGVtZW50XHJcbiAgLCBoZWlnaHQ6IGZ1bmN0aW9uKGhlaWdodCkge1xyXG4gICAgICByZXR1cm4gaGVpZ2h0ID09IG51bGwgPyB0aGlzLmJib3goKS5oZWlnaHQgOiB0aGlzLnNpemUodGhpcy5iYm94KCkud2lkdGgsIGhlaWdodClcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxyXG4sIGNvbnN0cnVjdDoge1xyXG4gICAgLy8gQ3JlYXRlIGEgd3JhcHBlZCBwYXRoIGVsZW1lbnRcclxuICAgIHBhdGg6IGZ1bmN0aW9uKGQpIHtcclxuICAgICAgLy8gbWFrZSBzdXJlIHBsb3QgaXMgY2FsbGVkIGFzIGEgc2V0dGVyXHJcbiAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLlBhdGgpLnBsb3QoZCB8fCBuZXcgU1ZHLlBhdGhBcnJheSlcclxuICAgIH1cclxuICB9XHJcbn0pXHJcblxuU1ZHLkltYWdlID0gU1ZHLmludmVudCh7XHJcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXHJcbiAgY3JlYXRlOiAnaW1hZ2UnXHJcblxyXG4gIC8vIEluaGVyaXQgZnJvbVxyXG4sIGluaGVyaXQ6IFNWRy5TaGFwZVxyXG5cclxuICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xyXG4sIGV4dGVuZDoge1xyXG4gICAgLy8gKHJlKWxvYWQgaW1hZ2VcclxuICAgIGxvYWQ6IGZ1bmN0aW9uKHVybCkge1xyXG4gICAgICBpZiAoIXVybCkgcmV0dXJuIHRoaXNcclxuXHJcbiAgICAgIHZhciBzZWxmID0gdGhpc1xyXG4gICAgICAgICwgaW1nICA9IG5ldyB3aW5kb3cuSW1hZ2UoKVxyXG5cclxuICAgICAgLy8gcHJlbG9hZCBpbWFnZVxyXG4gICAgICBTVkcub24oaW1nLCAnbG9hZCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIFNWRy5vZmYoaW1nKVxyXG5cclxuICAgICAgICB2YXIgcCA9IHNlbGYucGFyZW50KFNWRy5QYXR0ZXJuKVxyXG5cclxuICAgICAgICBpZihwID09PSBudWxsKSByZXR1cm5cclxuXHJcbiAgICAgICAgLy8gZW5zdXJlIGltYWdlIHNpemVcclxuICAgICAgICBpZiAoc2VsZi53aWR0aCgpID09IDAgJiYgc2VsZi5oZWlnaHQoKSA9PSAwKVxyXG4gICAgICAgICAgc2VsZi5zaXplKGltZy53aWR0aCwgaW1nLmhlaWdodClcclxuXHJcbiAgICAgICAgLy8gZW5zdXJlIHBhdHRlcm4gc2l6ZSBpZiBub3Qgc2V0XHJcbiAgICAgICAgaWYgKHAgJiYgcC53aWR0aCgpID09IDAgJiYgcC5oZWlnaHQoKSA9PSAwKVxyXG4gICAgICAgICAgcC5zaXplKHNlbGYud2lkdGgoKSwgc2VsZi5oZWlnaHQoKSlcclxuXHJcbiAgICAgICAgLy8gY2FsbGJhY2tcclxuICAgICAgICBpZiAodHlwZW9mIHNlbGYuX2xvYWRlZCA9PT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICAgIHNlbGYuX2xvYWRlZC5jYWxsKHNlbGYsIHtcclxuICAgICAgICAgICAgd2lkdGg6ICBpbWcud2lkdGhcclxuICAgICAgICAgICwgaGVpZ2h0OiBpbWcuaGVpZ2h0XHJcbiAgICAgICAgICAsIHJhdGlvOiAgaW1nLndpZHRoIC8gaW1nLmhlaWdodFxyXG4gICAgICAgICAgLCB1cmw6ICAgIHVybFxyXG4gICAgICAgICAgfSlcclxuICAgICAgfSlcclxuXHJcbiAgICAgIFNWRy5vbihpbWcsICdlcnJvcicsIGZ1bmN0aW9uKGUpe1xyXG4gICAgICAgIFNWRy5vZmYoaW1nKVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHNlbGYuX2Vycm9yID09PSAnZnVuY3Rpb24nKXtcclxuICAgICAgICAgICAgc2VsZi5fZXJyb3IuY2FsbChzZWxmLCBlKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuXHJcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2hyZWYnLCAoaW1nLnNyYyA9IHRoaXMuc3JjID0gdXJsKSwgU1ZHLnhsaW5rKVxyXG4gICAgfVxyXG4gICAgLy8gQWRkIGxvYWRlZCBjYWxsYmFja1xyXG4gICwgbG9hZGVkOiBmdW5jdGlvbihsb2FkZWQpIHtcclxuICAgICAgdGhpcy5fbG9hZGVkID0gbG9hZGVkXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcblxyXG4gICwgZXJyb3I6IGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgIHRoaXMuX2Vycm9yID0gZXJyb3JcclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEFkZCBwYXJlbnQgbWV0aG9kXHJcbiwgY29uc3RydWN0OiB7XHJcbiAgICAvLyBjcmVhdGUgaW1hZ2UgZWxlbWVudCwgbG9hZCBpbWFnZSBhbmQgc2V0IGl0cyBzaXplXHJcbiAgICBpbWFnZTogZnVuY3Rpb24oc291cmNlLCB3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLkltYWdlKS5sb2FkKHNvdXJjZSkuc2l6ZSh3aWR0aCB8fCAwLCBoZWlnaHQgfHwgd2lkdGggfHwgMClcclxuICAgIH1cclxuICB9XHJcblxyXG59KVxuU1ZHLlRleHQgPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplIG5vZGVcclxuICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIFNWRy5jcmVhdGUoJ3RleHQnKSlcclxuXHJcbiAgICB0aGlzLmRvbS5sZWFkaW5nID0gbmV3IFNWRy5OdW1iZXIoMS4zKSAgICAvLyBzdG9yZSBsZWFkaW5nIHZhbHVlIGZvciByZWJ1aWxkaW5nXHJcbiAgICB0aGlzLl9yZWJ1aWxkID0gdHJ1ZSAgICAgICAgICAgICAgICAgICAgICAvLyBlbmFibGUgYXV0b21hdGljIHVwZGF0aW5nIG9mIGR5IHZhbHVlc1xyXG4gICAgdGhpcy5fYnVpbGQgICA9IGZhbHNlICAgICAgICAgICAgICAgICAgICAgLy8gZGlzYWJsZSBidWlsZCBtb2RlIGZvciBhZGRpbmcgbXVsdGlwbGUgbGluZXNcclxuXHJcbiAgICAvLyBzZXQgZGVmYXVsdCBmb250XHJcbiAgICB0aGlzLmF0dHIoJ2ZvbnQtZmFtaWx5JywgU1ZHLmRlZmF1bHRzLmF0dHJzWydmb250LWZhbWlseSddKVxyXG4gIH1cclxuXHJcbiAgLy8gSW5oZXJpdCBmcm9tXHJcbiwgaW5oZXJpdDogU1ZHLlNoYXBlXHJcblxyXG4gIC8vIEFkZCBjbGFzcyBtZXRob2RzXHJcbiwgZXh0ZW5kOiB7XHJcbiAgICAvLyBNb3ZlIG92ZXIgeC1heGlzXHJcbiAgICB4OiBmdW5jdGlvbih4KSB7XHJcbiAgICAgIC8vIGFjdCBhcyBnZXR0ZXJcclxuICAgICAgaWYgKHggPT0gbnVsbClcclxuICAgICAgICByZXR1cm4gdGhpcy5hdHRyKCd4JylcclxuXHJcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ3gnLCB4KVxyXG4gICAgfVxyXG4gICAgLy8gTW92ZSBvdmVyIHktYXhpc1xyXG4gICwgeTogZnVuY3Rpb24oeSkge1xyXG4gICAgICB2YXIgb3kgPSB0aGlzLmF0dHIoJ3knKVxyXG4gICAgICAgICwgbyAgPSB0eXBlb2Ygb3kgPT09ICdudW1iZXInID8gb3kgLSB0aGlzLmJib3goKS55IDogMFxyXG5cclxuICAgICAgLy8gYWN0IGFzIGdldHRlclxyXG4gICAgICBpZiAoeSA9PSBudWxsKVxyXG4gICAgICAgIHJldHVybiB0eXBlb2Ygb3kgPT09ICdudW1iZXInID8gb3kgLSBvIDogb3lcclxuXHJcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ3knLCB0eXBlb2YgeS52YWx1ZU9mKCkgPT09ICdudW1iZXInID8geSArIG8gOiB5KVxyXG4gICAgfVxyXG4gICAgLy8gTW92ZSBjZW50ZXIgb3ZlciB4LWF4aXNcclxuICAsIGN4OiBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiB4ID09IG51bGwgPyB0aGlzLmJib3goKS5jeCA6IHRoaXMueCh4IC0gdGhpcy5iYm94KCkud2lkdGggLyAyKVxyXG4gICAgfVxyXG4gICAgLy8gTW92ZSBjZW50ZXIgb3ZlciB5LWF4aXNcclxuICAsIGN5OiBmdW5jdGlvbih5KSB7XHJcbiAgICAgIHJldHVybiB5ID09IG51bGwgPyB0aGlzLmJib3goKS5jeSA6IHRoaXMueSh5IC0gdGhpcy5iYm94KCkuaGVpZ2h0IC8gMilcclxuICAgIH1cclxuICAgIC8vIFNldCB0aGUgdGV4dCBjb250ZW50XHJcbiAgLCB0ZXh0OiBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgIC8vIGFjdCBhcyBnZXR0ZXJcclxuICAgICAgaWYgKHR5cGVvZiB0ZXh0ID09PSAndW5kZWZpbmVkJyl7XHJcbiAgICAgICAgdmFyIHRleHQgPSAnJ1xyXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMubm9kZS5jaGlsZE5vZGVzXHJcbiAgICAgICAgZm9yKHZhciBpID0gMCwgbGVuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyArK2kpe1xyXG5cclxuICAgICAgICAgIC8vIGFkZCBuZXdsaW5lIGlmIGl0cyBub3QgdGhlIGZpcnN0IGNoaWxkIGFuZCBuZXdMaW5lZCBpcyBzZXQgdG8gdHJ1ZVxyXG4gICAgICAgICAgaWYoaSAhPSAwICYmIGNoaWxkcmVuW2ldLm5vZGVUeXBlICE9IDMgJiYgU1ZHLmFkb3B0KGNoaWxkcmVuW2ldKS5kb20ubmV3TGluZWQgPT0gdHJ1ZSl7XHJcbiAgICAgICAgICAgIHRleHQgKz0gJ1xcbidcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBhZGQgY29udGVudCBvZiB0aGlzIG5vZGVcclxuICAgICAgICAgIHRleHQgKz0gY2hpbGRyZW5baV0udGV4dENvbnRlbnRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0ZXh0XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHJlbW92ZSBleGlzdGluZyBjb250ZW50XHJcbiAgICAgIHRoaXMuY2xlYXIoKS5idWlsZCh0cnVlKVxyXG5cclxuICAgICAgaWYgKHR5cGVvZiB0ZXh0ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgLy8gY2FsbCBibG9ja1xyXG4gICAgICAgIHRleHQuY2FsbCh0aGlzLCB0aGlzKVxyXG5cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBzdG9yZSB0ZXh0IGFuZCBtYWtlIHN1cmUgdGV4dCBpcyBub3QgYmxhbmtcclxuICAgICAgICB0ZXh0ID0gdGV4dC5zcGxpdCgnXFxuJylcclxuXHJcbiAgICAgICAgLy8gYnVpbGQgbmV3IGxpbmVzXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gdGV4dC5sZW5ndGg7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgICAgdGhpcy50c3Bhbih0ZXh0W2ldKS5uZXdMaW5lKClcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gZGlzYWJsZSBidWlsZCBtb2RlIGFuZCByZWJ1aWxkIGxpbmVzXHJcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkKGZhbHNlKS5yZWJ1aWxkKClcclxuICAgIH1cclxuICAgIC8vIFNldCBmb250IHNpemVcclxuICAsIHNpemU6IGZ1bmN0aW9uKHNpemUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuYXR0cignZm9udC1zaXplJywgc2l6ZSkucmVidWlsZCgpXHJcbiAgICB9XHJcbiAgICAvLyBTZXQgLyBnZXQgbGVhZGluZ1xyXG4gICwgbGVhZGluZzogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgLy8gYWN0IGFzIGdldHRlclxyXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbClcclxuICAgICAgICByZXR1cm4gdGhpcy5kb20ubGVhZGluZ1xyXG5cclxuICAgICAgLy8gYWN0IGFzIHNldHRlclxyXG4gICAgICB0aGlzLmRvbS5sZWFkaW5nID0gbmV3IFNWRy5OdW1iZXIodmFsdWUpXHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5yZWJ1aWxkKClcclxuICAgIH1cclxuICAgIC8vIEdldCBhbGwgdGhlIGZpcnN0IGxldmVsIGxpbmVzXHJcbiAgLCBsaW5lczogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBub2RlID0gKHRoaXMudGV4dFBhdGggJiYgdGhpcy50ZXh0UGF0aCgpIHx8IHRoaXMpLm5vZGVcclxuXHJcbiAgICAgIC8vIGZpbHRlciB0c3BhbnMgYW5kIG1hcCB0aGVtIHRvIFNWRy5qcyBpbnN0YW5jZXNcclxuICAgICAgdmFyIGxpbmVzID0gU1ZHLnV0aWxzLm1hcChTVkcudXRpbHMuZmlsdGVyU1ZHRWxlbWVudHMobm9kZS5jaGlsZE5vZGVzKSwgZnVuY3Rpb24oZWwpe1xyXG4gICAgICAgIHJldHVybiBTVkcuYWRvcHQoZWwpXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICAvLyByZXR1cm4gYW4gaW5zdGFuY2Ugb2YgU1ZHLnNldFxyXG4gICAgICByZXR1cm4gbmV3IFNWRy5TZXQobGluZXMpXHJcbiAgICB9XHJcbiAgICAvLyBSZWJ1aWxkIGFwcGVhcmFuY2UgdHlwZVxyXG4gICwgcmVidWlsZDogZnVuY3Rpb24ocmVidWlsZCkge1xyXG4gICAgICAvLyBzdG9yZSBuZXcgcmVidWlsZCBmbGFnIGlmIGdpdmVuXHJcbiAgICAgIGlmICh0eXBlb2YgcmVidWlsZCA9PSAnYm9vbGVhbicpXHJcbiAgICAgICAgdGhpcy5fcmVidWlsZCA9IHJlYnVpbGRcclxuXHJcbiAgICAgIC8vIGRlZmluZSBwb3NpdGlvbiBvZiBhbGwgbGluZXNcclxuICAgICAgaWYgKHRoaXMuX3JlYnVpbGQpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXNcclxuICAgICAgICAgICwgYmxhbmtMaW5lT2Zmc2V0ID0gMFxyXG4gICAgICAgICAgLCBkeSA9IHRoaXMuZG9tLmxlYWRpbmcgKiBuZXcgU1ZHLk51bWJlcih0aGlzLmF0dHIoJ2ZvbnQtc2l6ZScpKVxyXG5cclxuICAgICAgICB0aGlzLmxpbmVzKCkuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmICh0aGlzLmRvbS5uZXdMaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAoIXNlbGYudGV4dFBhdGgoKSlcclxuICAgICAgICAgICAgICB0aGlzLmF0dHIoJ3gnLCBzZWxmLmF0dHIoJ3gnKSlcclxuICAgICAgICAgICAgaWYodGhpcy50ZXh0KCkgPT0gJ1xcbicpIHtcclxuICAgICAgICAgICAgICBibGFua0xpbmVPZmZzZXQgKz0gZHlcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgdGhpcy5hdHRyKCdkeScsIGR5ICsgYmxhbmtMaW5lT2Zmc2V0KVxyXG4gICAgICAgICAgICAgIGJsYW5rTGluZU9mZnNldCA9IDBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMuZmlyZSgncmVidWlsZCcpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcbiAgICAvLyBFbmFibGUgLyBkaXNhYmxlIGJ1aWxkIG1vZGVcclxuICAsIGJ1aWxkOiBmdW5jdGlvbihidWlsZCkge1xyXG4gICAgICB0aGlzLl9idWlsZCA9ICEhYnVpbGRcclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAgIC8vIG92ZXJ3cml0ZSBtZXRob2QgZnJvbSBwYXJlbnQgdG8gc2V0IGRhdGEgcHJvcGVybHlcclxuICAsIHNldERhdGE6IGZ1bmN0aW9uKG8pe1xyXG4gICAgICB0aGlzLmRvbSA9IG9cclxuICAgICAgdGhpcy5kb20ubGVhZGluZyA9IG5ldyBTVkcuTnVtYmVyKG8ubGVhZGluZyB8fCAxLjMpXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxyXG4sIGNvbnN0cnVjdDoge1xyXG4gICAgLy8gQ3JlYXRlIHRleHQgZWxlbWVudFxyXG4gICAgdGV4dDogZnVuY3Rpb24odGV4dCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5UZXh0KS50ZXh0KHRleHQpXHJcbiAgICB9XHJcbiAgICAvLyBDcmVhdGUgcGxhaW4gdGV4dCBlbGVtZW50XHJcbiAgLCBwbGFpbjogZnVuY3Rpb24odGV4dCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5UZXh0KS5wbGFpbih0ZXh0KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pXHJcblxyXG5TVkcuVHNwYW4gPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplIG5vZGVcclxuICBjcmVhdGU6ICd0c3BhbidcclxuXHJcbiAgLy8gSW5oZXJpdCBmcm9tXHJcbiwgaW5oZXJpdDogU1ZHLlNoYXBlXHJcblxyXG4gIC8vIEFkZCBjbGFzcyBtZXRob2RzXHJcbiwgZXh0ZW5kOiB7XHJcbiAgICAvLyBTZXQgdGV4dCBjb250ZW50XHJcbiAgICB0ZXh0OiBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgIGlmKHRleHQgPT0gbnVsbCkgcmV0dXJuIHRoaXMubm9kZS50ZXh0Q29udGVudCArICh0aGlzLmRvbS5uZXdMaW5lZCA/ICdcXG4nIDogJycpXHJcblxyXG4gICAgICB0eXBlb2YgdGV4dCA9PT0gJ2Z1bmN0aW9uJyA/IHRleHQuY2FsbCh0aGlzLCB0aGlzKSA6IHRoaXMucGxhaW4odGV4dClcclxuXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcbiAgICAvLyBTaG9ydGN1dCBkeFxyXG4gICwgZHg6IGZ1bmN0aW9uKGR4KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2R4JywgZHgpXHJcbiAgICB9XHJcbiAgICAvLyBTaG9ydGN1dCBkeVxyXG4gICwgZHk6IGZ1bmN0aW9uKGR5KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2R5JywgZHkpXHJcbiAgICB9XHJcbiAgICAvLyBDcmVhdGUgbmV3IGxpbmVcclxuICAsIG5ld0xpbmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyBmZXRjaCB0ZXh0IHBhcmVudFxyXG4gICAgICB2YXIgdCA9IHRoaXMucGFyZW50KFNWRy5UZXh0KVxyXG5cclxuICAgICAgLy8gbWFyayBuZXcgbGluZVxyXG4gICAgICB0aGlzLmRvbS5uZXdMaW5lZCA9IHRydWVcclxuXHJcbiAgICAgIC8vIGFwcGx5IG5ldyBoecKhblxyXG4gICAgICByZXR1cm4gdGhpcy5keSh0LmRvbS5sZWFkaW5nICogdC5hdHRyKCdmb250LXNpemUnKSkuYXR0cigneCcsIHQueCgpKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pXHJcblxyXG5TVkcuZXh0ZW5kKFNWRy5UZXh0LCBTVkcuVHNwYW4sIHtcclxuICAvLyBDcmVhdGUgcGxhaW4gdGV4dCBub2RlXHJcbiAgcGxhaW46IGZ1bmN0aW9uKHRleHQpIHtcclxuICAgIC8vIGNsZWFyIGlmIGJ1aWxkIG1vZGUgaXMgZGlzYWJsZWRcclxuICAgIGlmICh0aGlzLl9idWlsZCA9PT0gZmFsc2UpXHJcbiAgICAgIHRoaXMuY2xlYXIoKVxyXG5cclxuICAgIC8vIGNyZWF0ZSB0ZXh0IG5vZGVcclxuICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KSlcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuICAvLyBDcmVhdGUgYSB0c3BhblxyXG4sIHRzcGFuOiBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICB2YXIgbm9kZSAgPSAodGhpcy50ZXh0UGF0aCAmJiB0aGlzLnRleHRQYXRoKCkgfHwgdGhpcykubm9kZVxyXG4gICAgICAsIHRzcGFuID0gbmV3IFNWRy5Uc3BhblxyXG5cclxuICAgIC8vIGNsZWFyIGlmIGJ1aWxkIG1vZGUgaXMgZGlzYWJsZWRcclxuICAgIGlmICh0aGlzLl9idWlsZCA9PT0gZmFsc2UpXHJcbiAgICAgIHRoaXMuY2xlYXIoKVxyXG5cclxuICAgIC8vIGFkZCBuZXcgdHNwYW5cclxuICAgIG5vZGUuYXBwZW5kQ2hpbGQodHNwYW4ubm9kZSlcclxuXHJcbiAgICByZXR1cm4gdHNwYW4udGV4dCh0ZXh0KVxyXG4gIH1cclxuICAvLyBDbGVhciBhbGwgbGluZXNcclxuLCBjbGVhcjogZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbm9kZSA9ICh0aGlzLnRleHRQYXRoICYmIHRoaXMudGV4dFBhdGgoKSB8fCB0aGlzKS5ub2RlXHJcblxyXG4gICAgLy8gcmVtb3ZlIGV4aXN0aW5nIGNoaWxkIG5vZGVzXHJcbiAgICB3aGlsZSAobm9kZS5oYXNDaGlsZE5vZGVzKCkpXHJcbiAgICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5sYXN0Q2hpbGQpXHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcbiAgLy8gR2V0IGxlbmd0aCBvZiB0ZXh0IGVsZW1lbnRcclxuLCBsZW5ndGg6IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubm9kZS5nZXRDb21wdXRlZFRleHRMZW5ndGgoKVxyXG4gIH1cclxufSlcclxuXG5TVkcuVGV4dFBhdGggPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplIG5vZGVcclxuICBjcmVhdGU6ICd0ZXh0UGF0aCdcclxuXHJcbiAgLy8gSW5oZXJpdCBmcm9tXHJcbiwgaW5oZXJpdDogU1ZHLlBhcmVudFxyXG5cclxuICAvLyBEZWZpbmUgcGFyZW50IGNsYXNzXHJcbiwgcGFyZW50OiBTVkcuVGV4dFxyXG5cclxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxyXG4sIGNvbnN0cnVjdDoge1xyXG4gICAgbW9ycGhBcnJheTogU1ZHLlBhdGhBcnJheVxyXG4gICAgLy8gQ3JlYXRlIHBhdGggZm9yIHRleHQgdG8gcnVuIG9uXHJcbiAgLCBwYXRoOiBmdW5jdGlvbihkKSB7XHJcbiAgICAgIC8vIGNyZWF0ZSB0ZXh0UGF0aCBlbGVtZW50XHJcbiAgICAgIHZhciBwYXRoICA9IG5ldyBTVkcuVGV4dFBhdGhcclxuICAgICAgICAsIHRyYWNrID0gdGhpcy5kb2MoKS5kZWZzKCkucGF0aChkKVxyXG5cclxuICAgICAgLy8gbW92ZSBsaW5lcyB0byB0ZXh0cGF0aFxyXG4gICAgICB3aGlsZSAodGhpcy5ub2RlLmhhc0NoaWxkTm9kZXMoKSlcclxuICAgICAgICBwYXRoLm5vZGUuYXBwZW5kQ2hpbGQodGhpcy5ub2RlLmZpcnN0Q2hpbGQpXHJcblxyXG4gICAgICAvLyBhZGQgdGV4dFBhdGggZWxlbWVudCBhcyBjaGlsZCBub2RlXHJcbiAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZChwYXRoLm5vZGUpXHJcblxyXG4gICAgICAvLyBsaW5rIHRleHRQYXRoIHRvIHBhdGggYW5kIGFkZCBjb250ZW50XHJcbiAgICAgIHBhdGguYXR0cignaHJlZicsICcjJyArIHRyYWNrLCBTVkcueGxpbmspXHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG4gICAgLy8gcmV0dXJuIHRoZSBhcnJheSBvZiB0aGUgcGF0aCB0cmFjayBlbGVtZW50XHJcbiAgLCBhcnJheTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciB0cmFjayA9IHRoaXMudHJhY2soKVxyXG5cclxuICAgICAgcmV0dXJuIHRyYWNrID8gdHJhY2suYXJyYXkoKSA6IG51bGxcclxuICAgIH1cclxuICAgIC8vIFBsb3QgcGF0aCBpZiBhbnlcclxuICAsIHBsb3Q6IGZ1bmN0aW9uKGQpIHtcclxuICAgICAgdmFyIHRyYWNrID0gdGhpcy50cmFjaygpXHJcbiAgICAgICAgLCBwYXRoQXJyYXkgPSBudWxsXHJcblxyXG4gICAgICBpZiAodHJhY2spIHtcclxuICAgICAgICBwYXRoQXJyYXkgPSB0cmFjay5wbG90KGQpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiAoZCA9PSBudWxsKSA/IHBhdGhBcnJheSA6IHRoaXNcclxuICAgIH1cclxuICAgIC8vIEdldCB0aGUgcGF0aCB0cmFjayBlbGVtZW50XHJcbiAgLCB0cmFjazogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBwYXRoID0gdGhpcy50ZXh0UGF0aCgpXHJcblxyXG4gICAgICBpZiAocGF0aClcclxuICAgICAgICByZXR1cm4gcGF0aC5yZWZlcmVuY2UoJ2hyZWYnKVxyXG4gICAgfVxyXG4gICAgLy8gR2V0IHRoZSB0ZXh0UGF0aCBjaGlsZFxyXG4gICwgdGV4dFBhdGg6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAodGhpcy5ub2RlLmZpcnN0Q2hpbGQgJiYgdGhpcy5ub2RlLmZpcnN0Q2hpbGQubm9kZU5hbWUgPT0gJ3RleHRQYXRoJylcclxuICAgICAgICByZXR1cm4gU1ZHLmFkb3B0KHRoaXMubm9kZS5maXJzdENoaWxkKVxyXG4gICAgfVxyXG4gIH1cclxufSlcclxuXG5TVkcuTmVzdGVkID0gU1ZHLmludmVudCh7XHJcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXHJcbiAgY3JlYXRlOiBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBTVkcuY3JlYXRlKCdzdmcnKSlcclxuXHJcbiAgICB0aGlzLnN0eWxlKCdvdmVyZmxvdycsICd2aXNpYmxlJylcclxuICB9XHJcblxyXG4gIC8vIEluaGVyaXQgZnJvbVxyXG4sIGluaGVyaXQ6IFNWRy5Db250YWluZXJcclxuXHJcbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcclxuLCBjb25zdHJ1Y3Q6IHtcclxuICAgIC8vIENyZWF0ZSBuZXN0ZWQgc3ZnIGRvY3VtZW50XHJcbiAgICBuZXN0ZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5OZXN0ZWQpXHJcbiAgICB9XHJcbiAgfVxyXG59KVxuU1ZHLkEgPSBTVkcuaW52ZW50KHtcclxuICAvLyBJbml0aWFsaXplIG5vZGVcclxuICBjcmVhdGU6ICdhJ1xyXG5cclxuICAvLyBJbmhlcml0IGZyb21cclxuLCBpbmhlcml0OiBTVkcuQ29udGFpbmVyXHJcblxyXG4gIC8vIEFkZCBjbGFzcyBtZXRob2RzXHJcbiwgZXh0ZW5kOiB7XHJcbiAgICAvLyBMaW5rIHVybFxyXG4gICAgdG86IGZ1bmN0aW9uKHVybCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5hdHRyKCdocmVmJywgdXJsLCBTVkcueGxpbmspXHJcbiAgICB9XHJcbiAgICAvLyBMaW5rIHNob3cgYXR0cmlidXRlXHJcbiAgLCBzaG93OiBmdW5jdGlvbih0YXJnZXQpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuYXR0cignc2hvdycsIHRhcmdldCwgU1ZHLnhsaW5rKVxyXG4gICAgfVxyXG4gICAgLy8gTGluayB0YXJnZXQgYXR0cmlidXRlXHJcbiAgLCB0YXJnZXQ6IGZ1bmN0aW9uKHRhcmdldCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5hdHRyKCd0YXJnZXQnLCB0YXJnZXQpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxyXG4sIGNvbnN0cnVjdDoge1xyXG4gICAgLy8gQ3JlYXRlIGEgaHlwZXJsaW5rIGVsZW1lbnRcclxuICAgIGxpbms6IGZ1bmN0aW9uKHVybCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5BKS50byh1cmwpXHJcbiAgICB9XHJcbiAgfVxyXG59KVxyXG5cclxuU1ZHLmV4dGVuZChTVkcuRWxlbWVudCwge1xyXG4gIC8vIENyZWF0ZSBhIGh5cGVybGluayBlbGVtZW50XHJcbiAgbGlua1RvOiBmdW5jdGlvbih1cmwpIHtcclxuICAgIHZhciBsaW5rID0gbmV3IFNWRy5BXHJcblxyXG4gICAgaWYgKHR5cGVvZiB1cmwgPT0gJ2Z1bmN0aW9uJylcclxuICAgICAgdXJsLmNhbGwobGluaywgbGluaylcclxuICAgIGVsc2VcclxuICAgICAgbGluay50byh1cmwpXHJcblxyXG4gICAgcmV0dXJuIHRoaXMucGFyZW50KCkucHV0KGxpbmspLnB1dCh0aGlzKVxyXG4gIH1cclxuXHJcbn0pXG5TVkcuTWFya2VyID0gU1ZHLmludmVudCh7XHJcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXHJcbiAgY3JlYXRlOiAnbWFya2VyJ1xyXG5cclxuICAvLyBJbmhlcml0IGZyb21cclxuLCBpbmhlcml0OiBTVkcuQ29udGFpbmVyXHJcblxyXG4gIC8vIEFkZCBjbGFzcyBtZXRob2RzXHJcbiwgZXh0ZW5kOiB7XHJcbiAgICAvLyBTZXQgd2lkdGggb2YgZWxlbWVudFxyXG4gICAgd2lkdGg6IGZ1bmN0aW9uKHdpZHRoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ21hcmtlcldpZHRoJywgd2lkdGgpXHJcbiAgICB9XHJcbiAgICAvLyBTZXQgaGVpZ2h0IG9mIGVsZW1lbnRcclxuICAsIGhlaWdodDogZnVuY3Rpb24oaGVpZ2h0KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ21hcmtlckhlaWdodCcsIGhlaWdodClcclxuICAgIH1cclxuICAgIC8vIFNldCBtYXJrZXIgcmVmWCBhbmQgcmVmWVxyXG4gICwgcmVmOiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ3JlZlgnLCB4KS5hdHRyKCdyZWZZJywgeSlcclxuICAgIH1cclxuICAgIC8vIFVwZGF0ZSBtYXJrZXJcclxuICAsIHVwZGF0ZTogZnVuY3Rpb24oYmxvY2spIHtcclxuICAgICAgLy8gcmVtb3ZlIGFsbCBjb250ZW50XHJcbiAgICAgIHRoaXMuY2xlYXIoKVxyXG5cclxuICAgICAgLy8gaW52b2tlIHBhc3NlZCBibG9ja1xyXG4gICAgICBpZiAodHlwZW9mIGJsb2NrID09ICdmdW5jdGlvbicpXHJcbiAgICAgICAgYmxvY2suY2FsbCh0aGlzLCB0aGlzKVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAgIC8vIFJldHVybiB0aGUgZmlsbCBpZFxyXG4gICwgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gJ3VybCgjJyArIHRoaXMuaWQoKSArICcpJ1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcclxuLCBjb25zdHJ1Y3Q6IHtcclxuICAgIG1hcmtlcjogZnVuY3Rpb24od2lkdGgsIGhlaWdodCwgYmxvY2spIHtcclxuICAgICAgLy8gQ3JlYXRlIG1hcmtlciBlbGVtZW50IGluIGRlZnNcclxuICAgICAgcmV0dXJuIHRoaXMuZGVmcygpLm1hcmtlcih3aWR0aCwgaGVpZ2h0LCBibG9jaylcclxuICAgIH1cclxuICB9XHJcblxyXG59KVxyXG5cclxuU1ZHLmV4dGVuZChTVkcuRGVmcywge1xyXG4gIC8vIENyZWF0ZSBtYXJrZXJcclxuICBtYXJrZXI6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQsIGJsb2NrKSB7XHJcbiAgICAvLyBTZXQgZGVmYXVsdCB2aWV3Ym94IHRvIG1hdGNoIHRoZSB3aWR0aCBhbmQgaGVpZ2h0LCBzZXQgcmVmIHRvIGN4IGFuZCBjeSBhbmQgc2V0IG9yaWVudCB0byBhdXRvXHJcbiAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5NYXJrZXIpXHJcbiAgICAgIC5zaXplKHdpZHRoLCBoZWlnaHQpXHJcbiAgICAgIC5yZWYod2lkdGggLyAyLCBoZWlnaHQgLyAyKVxyXG4gICAgICAudmlld2JveCgwLCAwLCB3aWR0aCwgaGVpZ2h0KVxyXG4gICAgICAuYXR0cignb3JpZW50JywgJ2F1dG8nKVxyXG4gICAgICAudXBkYXRlKGJsb2NrKVxyXG4gIH1cclxuXHJcbn0pXHJcblxyXG5TVkcuZXh0ZW5kKFNWRy5MaW5lLCBTVkcuUG9seWxpbmUsIFNWRy5Qb2x5Z29uLCBTVkcuUGF0aCwge1xyXG4gIC8vIENyZWF0ZSBhbmQgYXR0YWNoIG1hcmtlcnNcclxuICBtYXJrZXI6IGZ1bmN0aW9uKG1hcmtlciwgd2lkdGgsIGhlaWdodCwgYmxvY2spIHtcclxuICAgIHZhciBhdHRyID0gWydtYXJrZXInXVxyXG5cclxuICAgIC8vIEJ1aWxkIGF0dHJpYnV0ZSBuYW1lXHJcbiAgICBpZiAobWFya2VyICE9ICdhbGwnKSBhdHRyLnB1c2gobWFya2VyKVxyXG4gICAgYXR0ciA9IGF0dHIuam9pbignLScpXHJcblxyXG4gICAgLy8gU2V0IG1hcmtlciBhdHRyaWJ1dGVcclxuICAgIG1hcmtlciA9IGFyZ3VtZW50c1sxXSBpbnN0YW5jZW9mIFNWRy5NYXJrZXIgP1xyXG4gICAgICBhcmd1bWVudHNbMV0gOlxyXG4gICAgICB0aGlzLmRvYygpLm1hcmtlcih3aWR0aCwgaGVpZ2h0LCBibG9jaylcclxuXHJcbiAgICByZXR1cm4gdGhpcy5hdHRyKGF0dHIsIG1hcmtlcilcclxuICB9XHJcblxyXG59KVxuLy8gRGVmaW5lIGxpc3Qgb2YgYXZhaWxhYmxlIGF0dHJpYnV0ZXMgZm9yIHN0cm9rZSBhbmQgZmlsbFxyXG52YXIgc3VnYXIgPSB7XHJcbiAgc3Ryb2tlOiBbJ2NvbG9yJywgJ3dpZHRoJywgJ29wYWNpdHknLCAnbGluZWNhcCcsICdsaW5lam9pbicsICdtaXRlcmxpbWl0JywgJ2Rhc2hhcnJheScsICdkYXNob2Zmc2V0J11cclxuLCBmaWxsOiAgIFsnY29sb3InLCAnb3BhY2l0eScsICdydWxlJ11cclxuLCBwcmVmaXg6IGZ1bmN0aW9uKHQsIGEpIHtcclxuICAgIHJldHVybiBhID09ICdjb2xvcicgPyB0IDogdCArICctJyArIGFcclxuICB9XHJcbn1cclxuXHJcbi8vIEFkZCBzdWdhciBmb3IgZmlsbCBhbmQgc3Ryb2tlXHJcbjtbJ2ZpbGwnLCAnc3Ryb2tlJ10uZm9yRWFjaChmdW5jdGlvbihtKSB7XHJcbiAgdmFyIGksIGV4dGVuc2lvbiA9IHt9XHJcblxyXG4gIGV4dGVuc2lvblttXSA9IGZ1bmN0aW9uKG8pIHtcclxuICAgIGlmICh0eXBlb2YgbyA9PSAndW5kZWZpbmVkJylcclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIGlmICh0eXBlb2YgbyA9PSAnc3RyaW5nJyB8fCBTVkcuQ29sb3IuaXNSZ2IobykgfHwgKG8gJiYgdHlwZW9mIG8uZmlsbCA9PT0gJ2Z1bmN0aW9uJykpXHJcbiAgICAgIHRoaXMuYXR0cihtLCBvKVxyXG5cclxuICAgIGVsc2VcclxuICAgICAgLy8gc2V0IGFsbCBhdHRyaWJ1dGVzIGZyb20gc3VnYXIuZmlsbCBhbmQgc3VnYXIuc3Ryb2tlIGxpc3RcclxuICAgICAgZm9yIChpID0gc3VnYXJbbV0ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXHJcbiAgICAgICAgaWYgKG9bc3VnYXJbbV1baV1dICE9IG51bGwpXHJcbiAgICAgICAgICB0aGlzLmF0dHIoc3VnYXIucHJlZml4KG0sIHN1Z2FyW21dW2ldKSwgb1tzdWdhclttXVtpXV0pXHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG4gIFNWRy5leHRlbmQoU1ZHLkVsZW1lbnQsIFNWRy5GWCwgZXh0ZW5zaW9uKVxyXG5cclxufSlcclxuXHJcblNWRy5leHRlbmQoU1ZHLkVsZW1lbnQsIFNWRy5GWCwge1xyXG4gIC8vIE1hcCByb3RhdGlvbiB0byB0cmFuc2Zvcm1cclxuICByb3RhdGU6IGZ1bmN0aW9uKGQsIGN4LCBjeSkge1xyXG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtKHsgcm90YXRpb246IGQsIGN4OiBjeCwgY3k6IGN5IH0pXHJcbiAgfVxyXG4gIC8vIE1hcCBza2V3IHRvIHRyYW5zZm9ybVxyXG4sIHNrZXc6IGZ1bmN0aW9uKHgsIHksIGN4LCBjeSkge1xyXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT0gMSAgfHwgYXJndW1lbnRzLmxlbmd0aCA9PSAzID9cclxuICAgICAgdGhpcy50cmFuc2Zvcm0oeyBza2V3OiB4LCBjeDogeSwgY3k6IGN4IH0pIDpcclxuICAgICAgdGhpcy50cmFuc2Zvcm0oeyBza2V3WDogeCwgc2tld1k6IHksIGN4OiBjeCwgY3k6IGN5IH0pXHJcbiAgfVxyXG4gIC8vIE1hcCBzY2FsZSB0byB0cmFuc2Zvcm1cclxuLCBzY2FsZTogZnVuY3Rpb24oeCwgeSwgY3gsIGN5KSB7XHJcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PSAxICB8fCBhcmd1bWVudHMubGVuZ3RoID09IDMgP1xyXG4gICAgICB0aGlzLnRyYW5zZm9ybSh7IHNjYWxlOiB4LCBjeDogeSwgY3k6IGN4IH0pIDpcclxuICAgICAgdGhpcy50cmFuc2Zvcm0oeyBzY2FsZVg6IHgsIHNjYWxlWTogeSwgY3g6IGN4LCBjeTogY3kgfSlcclxuICB9XHJcbiAgLy8gTWFwIHRyYW5zbGF0ZSB0byB0cmFuc2Zvcm1cclxuLCB0cmFuc2xhdGU6IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybSh7IHg6IHgsIHk6IHkgfSlcclxuICB9XHJcbiAgLy8gTWFwIGZsaXAgdG8gdHJhbnNmb3JtXHJcbiwgZmxpcDogZnVuY3Rpb24oYSwgbykge1xyXG4gICAgbyA9IHR5cGVvZiBhID09ICdudW1iZXInID8gYSA6IG9cclxuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybSh7IGZsaXA6IGEgfHwgJ2JvdGgnLCBvZmZzZXQ6IG8gfSlcclxuICB9XHJcbiAgLy8gTWFwIG1hdHJpeCB0byB0cmFuc2Zvcm1cclxuLCBtYXRyaXg6IGZ1bmN0aW9uKG0pIHtcclxuICAgIHJldHVybiB0aGlzLmF0dHIoJ3RyYW5zZm9ybScsIG5ldyBTVkcuTWF0cml4KGFyZ3VtZW50cy5sZW5ndGggPT0gNiA/IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSA6IG0pKVxyXG4gIH1cclxuICAvLyBPcGFjaXR5XHJcbiwgb3BhY2l0eTogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgIHJldHVybiB0aGlzLmF0dHIoJ29wYWNpdHknLCB2YWx1ZSlcclxuICB9XHJcbiAgLy8gUmVsYXRpdmUgbW92ZSBvdmVyIHggYXhpc1xyXG4sIGR4OiBmdW5jdGlvbih4KSB7XHJcbiAgICByZXR1cm4gdGhpcy54KG5ldyBTVkcuTnVtYmVyKHgpLnBsdXModGhpcyBpbnN0YW5jZW9mIFNWRy5GWCA/IDAgOiB0aGlzLngoKSksIHRydWUpXHJcbiAgfVxyXG4gIC8vIFJlbGF0aXZlIG1vdmUgb3ZlciB5IGF4aXNcclxuLCBkeTogZnVuY3Rpb24oeSkge1xyXG4gICAgcmV0dXJuIHRoaXMueShuZXcgU1ZHLk51bWJlcih5KS5wbHVzKHRoaXMgaW5zdGFuY2VvZiBTVkcuRlggPyAwIDogdGhpcy55KCkpLCB0cnVlKVxyXG4gIH1cclxuICAvLyBSZWxhdGl2ZSBtb3ZlIG92ZXIgeCBhbmQgeSBheGVzXHJcbiwgZG1vdmU6IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgIHJldHVybiB0aGlzLmR4KHgpLmR5KHkpXHJcbiAgfVxyXG59KVxyXG5cclxuU1ZHLmV4dGVuZChTVkcuUmVjdCwgU1ZHLkVsbGlwc2UsIFNWRy5DaXJjbGUsIFNWRy5HcmFkaWVudCwgU1ZHLkZYLCB7XHJcbiAgLy8gQWRkIHggYW5kIHkgcmFkaXVzXHJcbiAgcmFkaXVzOiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICB2YXIgdHlwZSA9ICh0aGlzLl90YXJnZXQgfHwgdGhpcykudHlwZTtcclxuICAgIHJldHVybiB0eXBlID09ICdyYWRpYWwnIHx8IHR5cGUgPT0gJ2NpcmNsZScgP1xyXG4gICAgICB0aGlzLmF0dHIoJ3InLCBuZXcgU1ZHLk51bWJlcih4KSkgOlxyXG4gICAgICB0aGlzLnJ4KHgpLnJ5KHkgPT0gbnVsbCA/IHggOiB5KVxyXG4gIH1cclxufSlcclxuXHJcblNWRy5leHRlbmQoU1ZHLlBhdGgsIHtcclxuICAvLyBHZXQgcGF0aCBsZW5ndGhcclxuICBsZW5ndGg6IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubm9kZS5nZXRUb3RhbExlbmd0aCgpXHJcbiAgfVxyXG4gIC8vIEdldCBwb2ludCBhdCBsZW5ndGhcclxuLCBwb2ludEF0OiBmdW5jdGlvbihsZW5ndGgpIHtcclxuICAgIHJldHVybiB0aGlzLm5vZGUuZ2V0UG9pbnRBdExlbmd0aChsZW5ndGgpXHJcbiAgfVxyXG59KVxyXG5cclxuU1ZHLmV4dGVuZChTVkcuUGFyZW50LCBTVkcuVGV4dCwgU1ZHLlRzcGFuLCBTVkcuRlgsIHtcclxuICAvLyBTZXQgZm9udFxyXG4gIGZvbnQ6IGZ1bmN0aW9uKGEsIHYpIHtcclxuICAgIGlmICh0eXBlb2YgYSA9PSAnb2JqZWN0Jykge1xyXG4gICAgICBmb3IgKHYgaW4gYSkgdGhpcy5mb250KHYsIGFbdl0pXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGEgPT0gJ2xlYWRpbmcnID9cclxuICAgICAgICB0aGlzLmxlYWRpbmcodikgOlxyXG4gICAgICBhID09ICdhbmNob3InID9cclxuICAgICAgICB0aGlzLmF0dHIoJ3RleHQtYW5jaG9yJywgdikgOlxyXG4gICAgICBhID09ICdzaXplJyB8fCBhID09ICdmYW1pbHknIHx8IGEgPT0gJ3dlaWdodCcgfHwgYSA9PSAnc3RyZXRjaCcgfHwgYSA9PSAndmFyaWFudCcgfHwgYSA9PSAnc3R5bGUnID9cclxuICAgICAgICB0aGlzLmF0dHIoJ2ZvbnQtJysgYSwgdikgOlxyXG4gICAgICAgIHRoaXMuYXR0cihhLCB2KVxyXG4gIH1cclxufSlcclxuXG5TVkcuU2V0ID0gU1ZHLmludmVudCh7XHJcbiAgLy8gSW5pdGlhbGl6ZVxyXG4gIGNyZWF0ZTogZnVuY3Rpb24obWVtYmVycykge1xyXG4gICAgaWYgKG1lbWJlcnMgaW5zdGFuY2VvZiBTVkcuU2V0KSB7XHJcbiAgICAgIHRoaXMubWVtYmVycyA9IG1lbWJlcnMubWVtYmVycy5zbGljZSgpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBBcnJheS5pc0FycmF5KG1lbWJlcnMpID8gdGhpcy5tZW1iZXJzID0gbWVtYmVycyA6IHRoaXMuY2xlYXIoKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcclxuLCBleHRlbmQ6IHtcclxuICAgIC8vIEFkZCBlbGVtZW50IHRvIHNldFxyXG4gICAgYWRkOiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGksIGlsLCBlbGVtZW50cyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxyXG5cclxuICAgICAgZm9yIChpID0gMCwgaWwgPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIHRoaXMubWVtYmVycy5wdXNoKGVsZW1lbnRzW2ldKVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAgIC8vIFJlbW92ZSBlbGVtZW50IGZyb20gc2V0XHJcbiAgLCByZW1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgdmFyIGkgPSB0aGlzLmluZGV4KGVsZW1lbnQpXHJcblxyXG4gICAgICAvLyByZW1vdmUgZ2l2ZW4gY2hpbGRcclxuICAgICAgaWYgKGkgPiAtMSlcclxuICAgICAgICB0aGlzLm1lbWJlcnMuc3BsaWNlKGksIDEpXHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFsbCBtZW1iZXJzXHJcbiAgLCBlYWNoOiBmdW5jdGlvbihibG9jaykge1xyXG4gICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSB0aGlzLm1lbWJlcnMubGVuZ3RoOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBibG9jay5hcHBseSh0aGlzLm1lbWJlcnNbaV0sIFtpLCB0aGlzLm1lbWJlcnNdKVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAgIC8vIFJlc3RvcmUgdG8gZGVmYXVsdHNcclxuICAsIGNsZWFyOiBmdW5jdGlvbigpIHtcclxuICAgICAgLy8gaW5pdGlhbGl6ZSBzdG9yZVxyXG4gICAgICB0aGlzLm1lbWJlcnMgPSBbXVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICAgIC8vIEdldCB0aGUgbGVuZ3RoIG9mIGEgc2V0XHJcbiAgLCBsZW5ndGg6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5tZW1iZXJzLmxlbmd0aFxyXG4gICAgfVxyXG4gICAgLy8gQ2hlY2tzIGlmIGEgZ2l2ZW4gZWxlbWVudCBpcyBwcmVzZW50IGluIHNldFxyXG4gICwgaGFzOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmluZGV4KGVsZW1lbnQpID49IDBcclxuICAgIH1cclxuICAgIC8vIHJldHVucyBpbmRleCBvZiBnaXZlbiBlbGVtZW50IGluIHNldFxyXG4gICwgaW5kZXg6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgcmV0dXJuIHRoaXMubWVtYmVycy5pbmRleE9mKGVsZW1lbnQpXHJcbiAgICB9XHJcbiAgICAvLyBHZXQgbWVtYmVyIGF0IGdpdmVuIGluZGV4XHJcbiAgLCBnZXQ6IGZ1bmN0aW9uKGkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMubWVtYmVyc1tpXVxyXG4gICAgfVxyXG4gICAgLy8gR2V0IGZpcnN0IG1lbWJlclxyXG4gICwgZmlyc3Q6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5nZXQoMClcclxuICAgIH1cclxuICAgIC8vIEdldCBsYXN0IG1lbWJlclxyXG4gICwgbGFzdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmdldCh0aGlzLm1lbWJlcnMubGVuZ3RoIC0gMSlcclxuICAgIH1cclxuICAgIC8vIERlZmF1bHQgdmFsdWVcclxuICAsIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5tZW1iZXJzXHJcbiAgICB9XHJcbiAgICAvLyBHZXQgdGhlIGJvdW5kaW5nIGJveCBvZiBhbGwgbWVtYmVycyBpbmNsdWRlZCBvciBlbXB0eSBib3ggaWYgc2V0IGhhcyBubyBpdGVtc1xyXG4gICwgYmJveDogZnVuY3Rpb24oKXtcclxuICAgICAgLy8gcmV0dXJuIGFuIGVtcHR5IGJveCBvZiB0aGVyZSBhcmUgbm8gbWVtYmVyc1xyXG4gICAgICBpZiAodGhpcy5tZW1iZXJzLmxlbmd0aCA9PSAwKVxyXG4gICAgICAgIHJldHVybiBuZXcgU1ZHLlJCb3goKVxyXG5cclxuICAgICAgLy8gZ2V0IHRoZSBmaXJzdCByYm94IGFuZCB1cGRhdGUgdGhlIHRhcmdldCBiYm94XHJcbiAgICAgIHZhciByYm94ID0gdGhpcy5tZW1iZXJzWzBdLnJib3godGhpcy5tZW1iZXJzWzBdLmRvYygpKVxyXG5cclxuICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIHVzZXIgcmJveCBmb3IgY29ycmVjdCBwb3NpdGlvbiBhbmQgdmlzdWFsIHJlcHJlc2VudGF0aW9uXHJcbiAgICAgICAgcmJveCA9IHJib3gubWVyZ2UodGhpcy5yYm94KHRoaXMuZG9jKCkpKVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgcmV0dXJuIHJib3hcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEFkZCBwYXJlbnQgbWV0aG9kXHJcbiwgY29uc3RydWN0OiB7XHJcbiAgICAvLyBDcmVhdGUgYSBuZXcgc2V0XHJcbiAgICBzZXQ6IGZ1bmN0aW9uKG1lbWJlcnMpIHtcclxuICAgICAgcmV0dXJuIG5ldyBTVkcuU2V0KG1lbWJlcnMpXHJcbiAgICB9XHJcbiAgfVxyXG59KVxyXG5cclxuU1ZHLkZYLlNldCA9IFNWRy5pbnZlbnQoe1xyXG4gIC8vIEluaXRpYWxpemUgbm9kZVxyXG4gIGNyZWF0ZTogZnVuY3Rpb24oc2V0KSB7XHJcbiAgICAvLyBzdG9yZSByZWZlcmVuY2UgdG8gc2V0XHJcbiAgICB0aGlzLnNldCA9IHNldFxyXG4gIH1cclxuXHJcbn0pXHJcblxyXG4vLyBBbGlhcyBtZXRob2RzXHJcblNWRy5TZXQuaW5oZXJpdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBtXHJcbiAgICAsIG1ldGhvZHMgPSBbXVxyXG5cclxuICAvLyBnYXRoZXIgc2hhcGUgbWV0aG9kc1xyXG4gIGZvcih2YXIgbSBpbiBTVkcuU2hhcGUucHJvdG90eXBlKVxyXG4gICAgaWYgKHR5cGVvZiBTVkcuU2hhcGUucHJvdG90eXBlW21dID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFNWRy5TZXQucHJvdG90eXBlW21dICE9ICdmdW5jdGlvbicpXHJcbiAgICAgIG1ldGhvZHMucHVzaChtKVxyXG5cclxuICAvLyBhcHBseSBzaGFwZSBhbGlhc3Nlc1xyXG4gIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcclxuICAgIFNWRy5TZXQucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gdGhpcy5tZW1iZXJzLmxlbmd0aDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgaWYgKHRoaXMubWVtYmVyc1tpXSAmJiB0eXBlb2YgdGhpcy5tZW1iZXJzW2ldW21ldGhvZF0gPT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICAgIHRoaXMubWVtYmVyc1tpXVttZXRob2RdLmFwcGx5KHRoaXMubWVtYmVyc1tpXSwgYXJndW1lbnRzKVxyXG5cclxuICAgICAgcmV0dXJuIG1ldGhvZCA9PSAnYW5pbWF0ZScgPyAodGhpcy5meCB8fCAodGhpcy5meCA9IG5ldyBTVkcuRlguU2V0KHRoaXMpKSkgOiB0aGlzXHJcbiAgICB9XHJcbiAgfSlcclxuXHJcbiAgLy8gY2xlYXIgbWV0aG9kcyBmb3IgdGhlIG5leHQgcm91bmRcclxuICBtZXRob2RzID0gW11cclxuXHJcbiAgLy8gZ2F0aGVyIGZ4IG1ldGhvZHNcclxuICBmb3IodmFyIG0gaW4gU1ZHLkZYLnByb3RvdHlwZSlcclxuICAgIGlmICh0eXBlb2YgU1ZHLkZYLnByb3RvdHlwZVttXSA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTVkcuRlguU2V0LnByb3RvdHlwZVttXSAhPSAnZnVuY3Rpb24nKVxyXG4gICAgICBtZXRob2RzLnB1c2gobSlcclxuXHJcbiAgLy8gYXBwbHkgZnggYWxpYXNzZXNcclxuICBtZXRob2RzLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XHJcbiAgICBTVkcuRlguU2V0LnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHRoaXMuc2V0Lm1lbWJlcnMubGVuZ3RoOyBpIDwgaWw7IGkrKylcclxuICAgICAgICB0aGlzLnNldC5tZW1iZXJzW2ldLmZ4W21ldGhvZF0uYXBwbHkodGhpcy5zZXQubWVtYmVyc1tpXS5meCwgYXJndW1lbnRzKVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICB9KVxyXG59XHJcblxuXHJcblNWRy5leHRlbmQoU1ZHLkVsZW1lbnQsIHtcclxuICAvLyBTdG9yZSBkYXRhIHZhbHVlcyBvbiBzdmcgbm9kZXNcclxuICBkYXRhOiBmdW5jdGlvbihhLCB2LCByKSB7XHJcbiAgICBpZiAodHlwZW9mIGEgPT0gJ29iamVjdCcpIHtcclxuICAgICAgZm9yICh2IGluIGEpXHJcbiAgICAgICAgdGhpcy5kYXRhKHYsIGFbdl0pXHJcblxyXG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuYXR0cignZGF0YS0nICsgYSkpXHJcbiAgICAgIH0gY2F0Y2goZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2RhdGEtJyArIGEpXHJcbiAgICAgIH1cclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmF0dHIoXHJcbiAgICAgICAgJ2RhdGEtJyArIGFcclxuICAgICAgLCB2ID09PSBudWxsID9cclxuICAgICAgICAgIG51bGwgOlxyXG4gICAgICAgIHIgPT09IHRydWUgfHwgdHlwZW9mIHYgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2ID09PSAnbnVtYmVyJyA/XHJcbiAgICAgICAgICB2IDpcclxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHYpXHJcbiAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxufSlcblNWRy5leHRlbmQoU1ZHLkVsZW1lbnQsIHtcclxuICAvLyBSZW1lbWJlciBhcmJpdHJhcnkgZGF0YVxyXG4gIHJlbWVtYmVyOiBmdW5jdGlvbihrLCB2KSB7XHJcbiAgICAvLyByZW1lbWJlciBldmVyeSBpdGVtIGluIGFuIG9iamVjdCBpbmRpdmlkdWFsbHlcclxuICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09ICdvYmplY3QnKVxyXG4gICAgICBmb3IgKHZhciB2IGluIGspXHJcbiAgICAgICAgdGhpcy5yZW1lbWJlcih2LCBrW3ZdKVxyXG5cclxuICAgIC8vIHJldHJpZXZlIG1lbW9yeVxyXG4gICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKVxyXG4gICAgICByZXR1cm4gdGhpcy5tZW1vcnkoKVtrXVxyXG5cclxuICAgIC8vIHN0b3JlIG1lbW9yeVxyXG4gICAgZWxzZVxyXG4gICAgICB0aGlzLm1lbW9yeSgpW2tdID0gdlxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuICAvLyBFcmFzZSBhIGdpdmVuIG1lbW9yeVxyXG4sIGZvcmdldDogZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAwKVxyXG4gICAgICB0aGlzLl9tZW1vcnkgPSB7fVxyXG4gICAgZWxzZVxyXG4gICAgICBmb3IgKHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLm1lbW9yeSgpW2FyZ3VtZW50c1tpXV1cclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuXHJcbiAgLy8gSW5pdGlhbGl6ZSBvciByZXR1cm4gbG9jYWwgbWVtb3J5IG9iamVjdFxyXG4sIG1lbW9yeTogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fbWVtb3J5IHx8ICh0aGlzLl9tZW1vcnkgPSB7fSlcclxuICB9XHJcblxyXG59KVxuLy8gTWV0aG9kIGZvciBnZXR0aW5nIGFuIGVsZW1lbnQgYnkgaWRcclxuU1ZHLmdldCA9IGZ1bmN0aW9uKGlkKSB7XHJcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZEZyb21SZWZlcmVuY2UoaWQpIHx8IGlkKVxyXG4gIHJldHVybiBTVkcuYWRvcHQobm9kZSlcclxufVxyXG5cclxuLy8gU2VsZWN0IGVsZW1lbnRzIGJ5IHF1ZXJ5IHN0cmluZ1xyXG5TVkcuc2VsZWN0ID0gZnVuY3Rpb24ocXVlcnksIHBhcmVudCkge1xyXG4gIHJldHVybiBuZXcgU1ZHLlNldChcclxuICAgIFNWRy51dGlscy5tYXAoKHBhcmVudCB8fCBkb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChxdWVyeSksIGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgcmV0dXJuIFNWRy5hZG9wdChub2RlKVxyXG4gICAgfSlcclxuICApXHJcbn1cclxuXHJcblNWRy5leHRlbmQoU1ZHLlBhcmVudCwge1xyXG4gIC8vIFNjb3BlZCBzZWxlY3QgbWV0aG9kXHJcbiAgc2VsZWN0OiBmdW5jdGlvbihxdWVyeSkge1xyXG4gICAgcmV0dXJuIFNWRy5zZWxlY3QocXVlcnksIHRoaXMubm9kZSlcclxuICB9XHJcblxyXG59KVxuZnVuY3Rpb24gcGF0aFJlZ1JlcGxhY2UoYSwgYiwgYywgZCkge1xyXG4gIHJldHVybiBjICsgZC5yZXBsYWNlKFNWRy5yZWdleC5kb3RzLCAnIC4nKVxyXG59XHJcblxyXG4vLyBjcmVhdGVzIGRlZXAgY2xvbmUgb2YgYXJyYXlcclxuZnVuY3Rpb24gYXJyYXlfY2xvbmUoYXJyKXtcclxuICB2YXIgY2xvbmUgPSBhcnIuc2xpY2UoMClcclxuICBmb3IodmFyIGkgPSBjbG9uZS5sZW5ndGg7IGktLTspe1xyXG4gICAgaWYoQXJyYXkuaXNBcnJheShjbG9uZVtpXSkpe1xyXG4gICAgICBjbG9uZVtpXSA9IGFycmF5X2Nsb25lKGNsb25lW2ldKVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gY2xvbmVcclxufVxyXG5cclxuLy8gdGVzdHMgaWYgYSBnaXZlbiBlbGVtZW50IGlzIGluc3RhbmNlIG9mIGFuIG9iamVjdFxyXG5mdW5jdGlvbiBpcyhlbCwgb2JqKXtcclxuICByZXR1cm4gZWwgaW5zdGFuY2VvZiBvYmpcclxufVxyXG5cclxuLy8gdGVzdHMgaWYgYSBnaXZlbiBzZWxlY3RvciBtYXRjaGVzIGFuIGVsZW1lbnRcclxuZnVuY3Rpb24gbWF0Y2hlcyhlbCwgc2VsZWN0b3IpIHtcclxuICByZXR1cm4gKGVsLm1hdGNoZXMgfHwgZWwubWF0Y2hlc1NlbGVjdG9yIHx8IGVsLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IGVsLm1vek1hdGNoZXNTZWxlY3RvciB8fCBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZWwub01hdGNoZXNTZWxlY3RvcikuY2FsbChlbCwgc2VsZWN0b3IpO1xyXG59XHJcblxyXG4vLyBDb252ZXJ0IGRhc2gtc2VwYXJhdGVkLXN0cmluZyB0byBjYW1lbENhc2VcclxuZnVuY3Rpb24gY2FtZWxDYXNlKHMpIHtcclxuICByZXR1cm4gcy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0oLikvZywgZnVuY3Rpb24obSwgZykge1xyXG4gICAgcmV0dXJuIGcudG9VcHBlckNhc2UoKVxyXG4gIH0pXHJcbn1cclxuXHJcbi8vIENhcGl0YWxpemUgZmlyc3QgbGV0dGVyIG9mIGEgc3RyaW5nXHJcbmZ1bmN0aW9uIGNhcGl0YWxpemUocykge1xyXG4gIHJldHVybiBzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKVxyXG59XHJcblxyXG4vLyBFbnN1cmUgdG8gc2l4LWJhc2VkIGhleFxyXG5mdW5jdGlvbiBmdWxsSGV4KGhleCkge1xyXG4gIHJldHVybiBoZXgubGVuZ3RoID09IDQgP1xyXG4gICAgWyAnIycsXHJcbiAgICAgIGhleC5zdWJzdHJpbmcoMSwgMiksIGhleC5zdWJzdHJpbmcoMSwgMilcclxuICAgICwgaGV4LnN1YnN0cmluZygyLCAzKSwgaGV4LnN1YnN0cmluZygyLCAzKVxyXG4gICAgLCBoZXguc3Vic3RyaW5nKDMsIDQpLCBoZXguc3Vic3RyaW5nKDMsIDQpXHJcbiAgICBdLmpvaW4oJycpIDogaGV4XHJcbn1cclxuXHJcbi8vIENvbXBvbmVudCB0byBoZXggdmFsdWVcclxuZnVuY3Rpb24gY29tcFRvSGV4KGNvbXApIHtcclxuICB2YXIgaGV4ID0gY29tcC50b1N0cmluZygxNilcclxuICByZXR1cm4gaGV4Lmxlbmd0aCA9PSAxID8gJzAnICsgaGV4IDogaGV4XHJcbn1cclxuXHJcbi8vIENhbGN1bGF0ZSBwcm9wb3J0aW9uYWwgd2lkdGggYW5kIGhlaWdodCB2YWx1ZXMgd2hlbiBuZWNlc3NhcnlcclxuZnVuY3Rpb24gcHJvcG9ydGlvbmFsU2l6ZShlbGVtZW50LCB3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgaWYgKHdpZHRoID09IG51bGwgfHwgaGVpZ2h0ID09IG51bGwpIHtcclxuICAgIHZhciBib3ggPSBlbGVtZW50LmJib3goKVxyXG5cclxuICAgIGlmICh3aWR0aCA9PSBudWxsKVxyXG4gICAgICB3aWR0aCA9IGJveC53aWR0aCAvIGJveC5oZWlnaHQgKiBoZWlnaHRcclxuICAgIGVsc2UgaWYgKGhlaWdodCA9PSBudWxsKVxyXG4gICAgICBoZWlnaHQgPSBib3guaGVpZ2h0IC8gYm94LndpZHRoICogd2lkdGhcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB3aWR0aDogIHdpZHRoXHJcbiAgLCBoZWlnaHQ6IGhlaWdodFxyXG4gIH1cclxufVxyXG5cclxuLy8gRGVsdGEgdHJhbnNmb3JtIHBvaW50XHJcbmZ1bmN0aW9uIGRlbHRhVHJhbnNmb3JtUG9pbnQobWF0cml4LCB4LCB5KSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHg6IHggKiBtYXRyaXguYSArIHkgKiBtYXRyaXguYyArIDBcclxuICAsIHk6IHggKiBtYXRyaXguYiArIHkgKiBtYXRyaXguZCArIDBcclxuICB9XHJcbn1cclxuXHJcbi8vIE1hcCBtYXRyaXggYXJyYXkgdG8gb2JqZWN0XHJcbmZ1bmN0aW9uIGFycmF5VG9NYXRyaXgoYSkge1xyXG4gIHJldHVybiB7IGE6IGFbMF0sIGI6IGFbMV0sIGM6IGFbMl0sIGQ6IGFbM10sIGU6IGFbNF0sIGY6IGFbNV0gfVxyXG59XHJcblxyXG4vLyBQYXJzZSBtYXRyaXggaWYgcmVxdWlyZWRcclxuZnVuY3Rpb24gcGFyc2VNYXRyaXgobWF0cml4KSB7XHJcbiAgaWYgKCEobWF0cml4IGluc3RhbmNlb2YgU1ZHLk1hdHJpeCkpXHJcbiAgICBtYXRyaXggPSBuZXcgU1ZHLk1hdHJpeChtYXRyaXgpXHJcblxyXG4gIHJldHVybiBtYXRyaXhcclxufVxyXG5cclxuLy8gQWRkIGNlbnRyZSBwb2ludCB0byB0cmFuc2Zvcm0gb2JqZWN0XHJcbmZ1bmN0aW9uIGVuc3VyZUNlbnRyZShvLCB0YXJnZXQpIHtcclxuICBvLmN4ID0gby5jeCA9PSBudWxsID8gdGFyZ2V0LmJib3goKS5jeCA6IG8uY3hcclxuICBvLmN5ID0gby5jeSA9PSBudWxsID8gdGFyZ2V0LmJib3goKS5jeSA6IG8uY3lcclxufVxyXG5cclxuLy8gUGF0aEFycmF5IEhlbHBlcnNcclxuZnVuY3Rpb24gYXJyYXlUb1N0cmluZyhhKSB7XHJcbiAgZm9yICh2YXIgaSA9IDAsIGlsID0gYS5sZW5ndGgsIHMgPSAnJzsgaSA8IGlsOyBpKyspIHtcclxuICAgIHMgKz0gYVtpXVswXVxyXG5cclxuICAgIGlmIChhW2ldWzFdICE9IG51bGwpIHtcclxuICAgICAgcyArPSBhW2ldWzFdXHJcblxyXG4gICAgICBpZiAoYVtpXVsyXSAhPSBudWxsKSB7XHJcbiAgICAgICAgcyArPSAnICdcclxuICAgICAgICBzICs9IGFbaV1bMl1cclxuXHJcbiAgICAgICAgaWYgKGFbaV1bM10gIT0gbnVsbCkge1xyXG4gICAgICAgICAgcyArPSAnICdcclxuICAgICAgICAgIHMgKz0gYVtpXVszXVxyXG4gICAgICAgICAgcyArPSAnICdcclxuICAgICAgICAgIHMgKz0gYVtpXVs0XVxyXG5cclxuICAgICAgICAgIGlmIChhW2ldWzVdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcyArPSAnICdcclxuICAgICAgICAgICAgcyArPSBhW2ldWzVdXHJcbiAgICAgICAgICAgIHMgKz0gJyAnXHJcbiAgICAgICAgICAgIHMgKz0gYVtpXVs2XVxyXG5cclxuICAgICAgICAgICAgaWYgKGFbaV1bN10gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgIHMgKz0gJyAnXHJcbiAgICAgICAgICAgICAgcyArPSBhW2ldWzddXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBzICsgJyAnXHJcbn1cclxuXHJcbi8vIERlZXAgbmV3IGlkIGFzc2lnbm1lbnRcclxuZnVuY3Rpb24gYXNzaWduTmV3SWQobm9kZSkge1xyXG4gIC8vIGRvIHRoZSBzYW1lIGZvciBTVkcgY2hpbGQgbm9kZXMgYXMgd2VsbFxyXG4gIGZvciAodmFyIGkgPSBub2RlLmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXHJcbiAgICBpZiAobm9kZS5jaGlsZE5vZGVzW2ldIGluc3RhbmNlb2Ygd2luZG93LlNWR0VsZW1lbnQpXHJcbiAgICAgIGFzc2lnbk5ld0lkKG5vZGUuY2hpbGROb2Rlc1tpXSlcclxuXHJcbiAgcmV0dXJuIFNWRy5hZG9wdChub2RlKS5pZChTVkcuZWlkKG5vZGUubm9kZU5hbWUpKVxyXG59XHJcblxyXG4vLyBBZGQgbW9yZSBib3VuZGluZyBib3ggcHJvcGVydGllc1xyXG5mdW5jdGlvbiBmdWxsQm94KGIpIHtcclxuICBpZiAoYi54ID09IG51bGwpIHtcclxuICAgIGIueCAgICAgID0gMFxyXG4gICAgYi55ICAgICAgPSAwXHJcbiAgICBiLndpZHRoICA9IDBcclxuICAgIGIuaGVpZ2h0ID0gMFxyXG4gIH1cclxuXHJcbiAgYi53ICA9IGIud2lkdGhcclxuICBiLmggID0gYi5oZWlnaHRcclxuICBiLngyID0gYi54ICsgYi53aWR0aFxyXG4gIGIueTIgPSBiLnkgKyBiLmhlaWdodFxyXG4gIGIuY3ggPSBiLnggKyBiLndpZHRoIC8gMlxyXG4gIGIuY3kgPSBiLnkgKyBiLmhlaWdodCAvIDJcclxuXHJcbiAgcmV0dXJuIGJcclxufVxyXG5cclxuLy8gR2V0IGlkIGZyb20gcmVmZXJlbmNlIHN0cmluZ1xyXG5mdW5jdGlvbiBpZEZyb21SZWZlcmVuY2UodXJsKSB7XHJcbiAgdmFyIG0gPSAodXJsIHx8ICcnKS50b1N0cmluZygpLm1hdGNoKFNWRy5yZWdleC5yZWZlcmVuY2UpXHJcblxyXG4gIGlmIChtKSByZXR1cm4gbVsxXVxyXG59XHJcblxyXG4vLyBJZiB2YWx1ZXMgbGlrZSAxZS04OCBhcmUgcGFzc2VkLCB0aGlzIGlzIG5vdCBhIHZhbGlkIDMyIGJpdCBmbG9hdCxcclxuLy8gYnV0IGluIHRob3NlIGNhc2VzLCB3ZSBhcmUgc28gY2xvc2UgdG8gMCB0aGF0IDAgd29ya3Mgd2VsbCFcclxuZnVuY3Rpb24gZmxvYXQzMlN0cmluZyh2KSB7XHJcbiAgcmV0dXJuIE1hdGguYWJzKHYpID4gMWUtMzcgPyB2IDogMFxyXG59XHJcblxyXG4vLyBDcmVhdGUgbWF0cml4IGFycmF5IGZvciBsb29waW5nXHJcbnZhciBhYmNkZWYgPSAnYWJjZGVmJy5zcGxpdCgnJylcclxuXG4vLyBBZGQgQ3VzdG9tRXZlbnQgdG8gSUU5IGFuZCBJRTEwXHJcbmlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgLy8gQ29kZSBmcm9tOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3VzdG9tRXZlbnRcclxuICB2YXIgQ3VzdG9tRXZlbnRQb2x5ID0gZnVuY3Rpb24oZXZlbnQsIG9wdGlvbnMpIHtcclxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHsgYnViYmxlczogZmFsc2UsIGNhbmNlbGFibGU6IGZhbHNlLCBkZXRhaWw6IHVuZGVmaW5lZCB9XHJcbiAgICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpXHJcbiAgICBlLmluaXRDdXN0b21FdmVudChldmVudCwgb3B0aW9ucy5idWJibGVzLCBvcHRpb25zLmNhbmNlbGFibGUsIG9wdGlvbnMuZGV0YWlsKVxyXG4gICAgcmV0dXJuIGVcclxuICB9XHJcblxyXG4gIEN1c3RvbUV2ZW50UG9seS5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlXHJcblxyXG4gIFNWRy5DdXN0b21FdmVudCA9IEN1c3RvbUV2ZW50UG9seVxyXG59IGVsc2Uge1xyXG4gIFNWRy5DdXN0b21FdmVudCA9IHdpbmRvdy5DdXN0b21FdmVudFxyXG59XHJcblxyXG4vLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgLyBjYW5jZWxBbmltYXRpb25GcmFtZSBQb2x5ZmlsbCB3aXRoIGZhbGxiYWNrIGJhc2VkIG9uIFBhdWwgSXJpc2hcclxuKGZ1bmN0aW9uKHcpIHtcclxuICB2YXIgbGFzdFRpbWUgPSAwXHJcbiAgdmFyIHZlbmRvcnMgPSBbJ21veicsICd3ZWJraXQnXVxyXG5cclxuICBmb3IodmFyIHggPSAwOyB4IDwgdmVuZG9ycy5sZW5ndGggJiYgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ICsreCkge1xyXG4gICAgdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3W3ZlbmRvcnNbeF0gKyAnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ11cclxuICAgIHcuY2FuY2VsQW5pbWF0aW9uRnJhbWUgID0gd1t2ZW5kb3JzW3hdICsgJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ10gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd1t2ZW5kb3JzW3hdICsgJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddXHJcbiAgfVxyXG5cclxuICB3LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHcucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gICAgICB2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG4gICAgICB2YXIgdGltZVRvQ2FsbCA9IE1hdGgubWF4KDAsIDE2IC0gKGN1cnJUaW1lIC0gbGFzdFRpbWUpKVxyXG5cclxuICAgICAgdmFyIGlkID0gdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNhbGxiYWNrKGN1cnJUaW1lICsgdGltZVRvQ2FsbClcclxuICAgICAgfSwgdGltZVRvQ2FsbClcclxuXHJcbiAgICAgIGxhc3RUaW1lID0gY3VyclRpbWUgKyB0aW1lVG9DYWxsXHJcbiAgICAgIHJldHVybiBpZFxyXG4gICAgfVxyXG5cclxuICB3LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3LmNsZWFyVGltZW91dDtcclxuXHJcbn0od2luZG93KSlcclxuXHJcbnJldHVybiBTVkdcclxuXHJcbn0pKTtcciJdLCJzb3VyY2VSb290IjoiIn0=